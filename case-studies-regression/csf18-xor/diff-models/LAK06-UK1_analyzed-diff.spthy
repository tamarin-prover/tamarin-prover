theory LAK06_UK1 begin

// Function signature and definition of the equational theory E

builtins: multiset, xor
functions: fst/1, h/1, pair/2, snd/1
equations: fst(<x.1, x.2>) = x.1, snd(<x.1, x.2>) = x.2



rule (modulo E) setup:
   [ Fr( ~k1 ), Fr( ~k2 ) ]
  --[ OnlyOnce( 'setup' ), Create( ~k1 ), Create( ~k2 ) ]->
   [
   TagRun( ~k1, 'learning' ), TagRun( ~k2, 'learning' ),
   TagRun( diff(~k1, ~k2), 'guessing' )
   ]

rule (modulo E) initiatereader:
   [ ReaderRun( ~k, phase ), Fr( ~r0 ) ]
  --[ Phase( phase ) ]->
   [ ReaderState1( ~k, ~r0, phase ), Out( ~r0 ) ]

rule (modulo E) tag1:
   [ TagRun( ~k, phase ), Fr( ~r1 ), In( r0 ) ]
  --[ Running( <'R', 'T', ~k, r0, ~r1> ), Phase( phase ) ]->
   [ TagState1( ~k, ~r1, r0, phase ), Out( <~r1, h((~k⊕~r1⊕r0))> ) ]

rule (modulo E) acceptreader:
   [ ReaderState1( ~k, ~r0, phase ), In( <r1, h((~k⊕~r0⊕r1))> ) ]
  --[
  Commit( <'R', 'T', ~k, ~r0, r1> ), Running( <'T', 'R', ~k, ~r0, r1> ),
  Phase( phase )
  ]->
   [ Out( h((~k⊕~r0⊕h((~k⊕~r0⊕r1)))) ) ]

rule (modulo E) accepttag:
   [ TagState1( ~k, ~r1, r0, phase ), In( h((~k⊕r0⊕h((~k⊕~r1⊕r0)))) ) ]
  --[ Commit( <'T', 'R', ~k, r0, ~r1> ), FinTag( ), Phase( phase ) ]->
   [ ]

restriction onylOnce [right]:
  "∀ x #i1 #i2.
    ((OnlyOnce( x ) @ #i1) ∧ (OnlyOnce( x ) @ #i2)) ⇒ (#i1 = #i2)"
  // safety formula

restriction onylOnce [left]:
  "∀ x #i1 #i2.
    ((OnlyOnce( x ) @ #i1) ∧ (OnlyOnce( x ) @ #i2)) ⇒ (#i1 = #i2)"
  // safety formula

lemma executable [right]:
  exists-trace
  "(∃ #i. FinTag( ) @ #i) ∧
   (∀ x #i1 #i2.
     ((OnlyOnce( x ) @ #i1) ∧ (OnlyOnce( x ) @ #i2)) ⇒ (#i1 = #i2))"
/*
guarded formula characterizing all satisfying traces:
"(∃ #i. (FinTag( ) @ #i)) ∧
 (∀ x #i1 #i2. (OnlyOnce( x ) @ #i1) ∧ (OnlyOnce( x ) @ #i2) ⇒ #i1 = #i2)"
*/
simplify
solve( TagState1( ~k, ~r1, r0, phase ) ▶₀ #i )
  case tag1_case_1
  solve( splitEqs(0) )
    case split_case_1
    by solve( !KU( ~k ) @ #vk.1 )
  next
    case split_case_2
    by contradiction /* cyclic */
  next
    case split_case_3
    solve( !KU( h((~k⊕h((~k⊕~r1)))) ) @ #vk )
      case c_h
      solve( !KU( (~k⊕h((~k⊕~r1))) ) @ #vk.2 )
        case c_xor
        by solve( !KU( ~k ) @ #vk.4 )
      next
        case coerce
        solve( !KD( (~k⊕h((~k⊕~r1))) ) ▶₀ #vk.1 )
          case acceptreader
          by solve( (#vl, 0) ~~> (#vk.1, 0) )
        next
          case initiatereader
          by contradiction /* impossible chain */
        next
          case tag1
          solve( (#vl, 0) ~~> (#vk.1, 0) )
            case d_0_fst
            by contradiction /* impossible chain */
          next
            case d_0_snd
            by solve( (#vr.3, 0) ~~> (#vk.1, 0) )
          qed
        qed
      qed
    next
      case tag1_case_1
      solve( !KU( (x⊕~x.1) ) @ #vk.2 )
        case c_xor
        solve( !KU( ~x ) @ #vk.3 )
          case fresh
          by solve( splitEqs(3) )
        next
          case tag1_case_1
          by solve( splitEqs(3) )
        next
          case tag1_case_2
          by solve( splitEqs(3) )
        qed
      next
        case coerce
        solve( !KD( (x⊕~x.1) ) ▶₀ #vk.1 )
          case acceptreader
          by solve( (#vl.1, 0) ~~> (#vk.1, 0) )
        next
          case initiatereader
          by contradiction /* impossible chain */
        next
          case tag1
          solve( (#vl.1, 0) ~~> (#vk.1, 0) )
            case d_0_fst
            by contradiction /* impossible chain */
          next
            case d_0_snd
            by solve( (#vr.5, 0) ~~> (#vk.1, 0) )
          qed
        qed
      qed
    next
      case tag1_case_2
      solve( !KU( (x⊕~x.1) ) @ #vk.2 )
        case c_xor
        solve( !KU( ~x ) @ #vk.3 )
          case fresh
          by solve( splitEqs(3) )
        next
          case tag1_case_1
          by solve( splitEqs(3) )
        next
          case tag1_case_2
          by solve( splitEqs(3) )
        qed
      next
        case coerce
        solve( !KD( (x⊕~x.1) ) ▶₀ #vk.1 )
          case acceptreader
          by solve( (#vl.1, 0) ~~> (#vk.1, 0) )
        next
          case initiatereader
          by contradiction /* impossible chain */
        next
          case tag1
          solve( (#vl.1, 0) ~~> (#vk.1, 0) )
            case d_0_fst
            by contradiction /* impossible chain */
          next
            case d_0_snd
            by solve( (#vr.5, 0) ~~> (#vk.1, 0) )
          qed
        qed
      qed
    qed
  next
    case split_case_4
    solve( !KU( h((~r1⊕h(zero))) ) @ #vk )
      case c_h
      solve( !KU( (~k⊕~r1) ) @ #vk.1 )
        case c_xor
        by contradiction /* cyclic */
      next
        case coerce
        solve( !KD( (~k⊕~r1) ) ▶₀ #vk.1 )
          case acceptreader
          by solve( (#vl, 0) ~~> (#vk.1, 0) )
        next
          case initiatereader
          by contradiction /* impossible chain */
        next
          case tag1
          solve( (#vl, 0) ~~> (#vk.1, 0) )
            case d_0_fst
            by contradiction /* impossible chain */
          next
            case d_0_snd
            by solve( (#vr.3, 0) ~~> (#vk.1, 0) )
          qed
        qed
      qed
    next
      case tag1_case_1
      solve( !KU( (~k⊕~r1) ) @ #vk.1 )
        case c_xor
        by contradiction /* cyclic */
      next
        case coerce
        solve( !KD( (~k⊕~r1) ) ▶₀ #vk.1 )
          case acceptreader
          by solve( (#vl.1, 0) ~~> (#vk.1, 0) )
        next
          case initiatereader
          by contradiction /* impossible chain */
        next
          case tag1
          solve( (#vl.1, 0) ~~> (#vk.1, 0) )
            case d_0_fst
            by contradiction /* impossible chain */
          next
            case d_0_snd
            by solve( (#vr.5, 0) ~~> (#vk.1, 0) )
          qed
        qed
      qed
    next
      case tag1_case_2
      solve( !KU( (~k⊕~r1) ) @ #vk.1 )
        case c_xor
        by contradiction /* cyclic */
      next
        case coerce
        solve( !KD( (~k⊕~r1) ) ▶₀ #vk.1 )
          case acceptreader
          by solve( (#vl.1, 0) ~~> (#vk.1, 0) )
        next
          case initiatereader
          by contradiction /* impossible chain */
        next
          case tag1
          solve( (#vl.1, 0) ~~> (#vk.1, 0) )
            case d_0_fst
            by contradiction /* impossible chain */
          next
            case d_0_snd
            by solve( (#vr.5, 0) ~~> (#vk.1, 0) )
          qed
        qed
      qed
    qed
  next
    case split_case_5
    solve( !KU( h((~k⊕r0⊕h((~k⊕~r1⊕r0)))) ) @ #vk )
      case c_h
      solve( !KU( (~k⊕r0⊕h((~k⊕~r1⊕r0))) ) @ #vk.2 )
        case c_xor_case_1
        solve( !KU( (~k⊕h((~k⊕~r1⊕r0))) ) @ #vk.3 )
          case c_xor
          by solve( !KU( ~k ) @ #vk.5 )
        next
          case coerce
          solve( !KD( (~k⊕h((~k⊕~r1⊕r0))) ) ▶₀ #vk.2 )
            case acceptreader
            by solve( (#vl, 0) ~~> (#vk.2, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl, 0) ~~> (#vk.2, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.3, 0) ~~> (#vk.2, 0) )
            qed
          qed
        qed
      next
        case c_xor_case_2
        by solve( !KU( ~k ) @ #vk.4 )
      next
        case c_xor_case_3
        solve( !KU( (~k⊕r0) ) @ #vk.4 )
          case c_xor
          by solve( !KU( ~k ) @ #vk.5 )
        next
          case coerce
          solve( !KD( (~k⊕r0) ) ▶₀ #vk.2 )
            case acceptreader
            by solve( (#vl, 0) ~~> (#vk.2, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl, 0) ~~> (#vk.2, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.3, 0) ~~> (#vk.2, 0) )
            qed
          qed
        qed
      next
        case coerce
        solve( !KD( (~k⊕r0⊕h((~k⊕~r1⊕r0))) ) ▶₀ #vk.1 )
          case acceptreader
          by solve( (#vl, 0) ~~> (#vk.1, 0) )
        next
          case initiatereader
          by contradiction /* impossible chain */
        next
          case tag1
          solve( (#vl, 0) ~~> (#vk.1, 0) )
            case d_0_fst
            by contradiction /* impossible chain */
          next
            case d_0_snd
            by solve( (#vr.3, 0) ~~> (#vk.1, 0) )
          qed
        qed
      qed
    next
      case tag1_case_1
      solve( splitEqs(3) )
        case split_case_1
        by solve( !KU( ~k2 ) @ #vk.1 )
      next
        case split_case_2
        solve( !KU( (~k⊕~k2⊕r0⊕~r1.1⊕h((~k⊕~r1⊕r0))) ) @ #vk.2 )
          case c_xor_case_01
          by contradiction /* cyclic */
        next
          case c_xor_case_02
          solve( !KU( (~k⊕~k2⊕~r1.1⊕h((~k⊕~r1⊕r0))) ) @ #vk.3 )
            case c_xor_case_1
            by contradiction /* cyclic */
          next
            case c_xor_case_2
            by solve( !KU( ~k2 ) @ #vk.5 )
          next
            case c_xor_case_3
            solve( !KU( (~k⊕h((~k⊕~r1⊕r0))) ) @ #vk.4 )
              case c_xor
              by solve( !KU( ~k ) @ #vk.7 )
            next
              case coerce
              solve( !KD( (~k⊕h((~k⊕~r1⊕r0))) ) ▶₀ #vk.3 )
                case acceptreader
                by solve( (#vl.1, 0) ~~> (#vk.3, 0) )
              next
                case initiatereader
                by contradiction /* impossible chain */
              next
                case tag1
                solve( (#vl.1, 0) ~~> (#vk.3, 0) )
                  case d_0_fst
                  by contradiction /* impossible chain */
                next
                  case d_0_snd
                  by solve( (#vr.5, 0) ~~> (#vk.3, 0) )
                qed
              qed
            qed
          next
            case c_xor_case_4
            by solve( !KU( ~k ) @ #vk.5 )
          next
            case c_xor_case_5
            solve( !KU( (~k2⊕h((~k⊕~r1⊕r0))) ) @ #vk.4 )
              case c_xor
              by solve( !KU( ~k2 ) @ #vk.7 )
            next
              case coerce
              solve( !KD( (~k2⊕h((~k⊕~r1⊕r0))) ) ▶₀ #vk.3 )
                case acceptreader
                by solve( (#vl.1, 0) ~~> (#vk.3, 0) )
              next
                case initiatereader
                by contradiction /* impossible chain */
              next
                case tag1
                solve( (#vl.1, 0) ~~> (#vk.3, 0) )
                  case d_0_fst
                  by contradiction /* impossible chain */
                next
                  case d_0_snd
                  by solve( (#vr.5, 0) ~~> (#vk.3, 0) )
                qed
              qed
            qed
          next
            case c_xor_case_6
            solve( !KU( (~r1.1⊕h((~k⊕~r1⊕r0))) ) @ #vk.4 )
              case c_xor
              by contradiction /* cyclic */
            next
              case coerce
              solve( !KD( (~r1.1⊕h((~k⊕~r1⊕r0))) ) ▶₀ #vk.3 )
                case acceptreader
                by solve( (#vl.1, 0) ~~> (#vk.3, 0) )
              next
                case initiatereader
                by contradiction /* impossible chain */
              next
                case tag1
                solve( (#vl.1, 0) ~~> (#vk.3, 0) )
                  case d_0_fst
                  by contradiction /* impossible chain */
                next
                  case d_0_snd
                  by solve( (#vr.5, 0) ~~> (#vk.3, 0) )
                qed
              qed
            qed
          next
            case c_xor_case_7
            solve( !KU( (~k⊕~k2⊕~r1.1) ) @ #vk.5 )
              case c_xor_case_1
              by solve( !KU( ~k2 ) @ #vk.7 )
            next
              case c_xor_case_2
              by solve( !KU( ~k ) @ #vk.7 )
            next
              case c_xor_case_3
              by contradiction /* cyclic */
            next
              case coerce
              solve( !KD( (~k⊕~k2⊕~r1.1) ) ▶₀ #vk.3 )
                case acceptreader
                by solve( (#vl.1, 0) ~~> (#vk.3, 0) )
              next
                case initiatereader
                by contradiction /* impossible chain */
              next
                case tag1
                solve( (#vl.1, 0) ~~> (#vk.3, 0) )
                  case d_0_fst
                  by contradiction /* impossible chain */
                next
                  case d_0_snd
                  by solve( (#vr.5, 0) ~~> (#vk.3, 0) )
                qed
              qed
            qed
          next
            case coerce
            solve( !KD( (~k⊕~k2⊕~r1.1⊕h((~k⊕~r1⊕r0))) ) ▶₀ #vk.2 )
              case acceptreader
              by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
            next
              case initiatereader
              by contradiction /* impossible chain */
            next
              case tag1
              solve( (#vl.1, 0) ~~> (#vk.2, 0) )
                case d_0_fst
                by contradiction /* impossible chain */
              next
                case d_0_snd
                by solve( (#vr.5, 0) ~~> (#vk.2, 0) )
              qed
            qed
          qed
        next
          case c_xor_case_03
          solve( !KU( (~k⊕~k2⊕h((~k⊕~r1⊕r0))) ) @ #vk.3 )
            case c_xor_case_1
            by solve( !KU( ~k2 ) @ #vk.6 )
          next
            case c_xor_case_2
            by solve( !KU( ~k ) @ #vk.6 )
          next
            case c_xor_case_3
            solve( !KU( (r0⊕~r1.1) ) @ #vk.4 )
              case c_xor
              by contradiction /* cyclic */
            next
              case coerce
              solve( !KD( (r0⊕~r1.1) ) ▶₀ #vk.3 )
                case acceptreader
                by solve( (#vl.1, 0) ~~> (#vk.3, 0) )
              next
                case initiatereader
                by contradiction /* impossible chain */
              next
                case tag1
                solve( (#vl.1, 0) ~~> (#vk.3, 0) )
                  case d_0_fst
                  by contradiction /* impossible chain */
                next
                  case d_0_snd
                  by solve( (#vr.5, 0) ~~> (#vk.3, 0) )
                qed
              qed
            qed
          next
            case coerce
            solve( !KD( (~k⊕~k2⊕h((~k⊕~r1⊕r0))) ) ▶₀ #vk.2 )
              case acceptreader
              by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
            next
              case initiatereader
              by contradiction /* impossible chain */
            next
              case tag1
              solve( (#vl.1, 0) ~~> (#vk.2, 0) )
                case d_0_fst
                by contradiction /* impossible chain */
              next
                case d_0_snd
                by solve( (#vr.5, 0) ~~> (#vk.2, 0) )
              qed
            qed
          qed
        next
          case c_xor_case_04
          by solve( !KU( ~k2 ) @ #vk.4 )
        next
          case c_xor_case_05
          solve( !KU( (~k⊕r0⊕h((~k⊕~r1⊕r0))) ) @ #vk.3 )
            case c_xor_case_1
            solve( !KU( (~k2⊕~r1.1) ) @ #vk.4 )
              case c_xor
              by contradiction /* cyclic */
            next
              case coerce
              solve( !KD( (~k2⊕~r1.1) ) ▶₀ #vk.3 )
                case acceptreader
                by solve( (#vl.1, 0) ~~> (#vk.3, 0) )
              next
                case initiatereader
                by contradiction /* impossible chain */
              next
                case tag1
                solve( (#vl.1, 0) ~~> (#vk.3, 0) )
                  case d_0_fst
                  by contradiction /* impossible chain */
                next
                  case d_0_snd
                  by solve( (#vr.5, 0) ~~> (#vk.3, 0) )
                qed
              qed
            qed
          next
            case c_xor_case_2
            by solve( !KU( ~k ) @ #vk.6 )
          next
            case c_xor_case_3
            solve( !KU( (~k2⊕~r1.1) ) @ #vk.4 )
              case c_xor
              by contradiction /* cyclic */
            next
              case coerce
              solve( !KD( (~k2⊕~r1.1) ) ▶₀ #vk.3 )
                case acceptreader
                by solve( (#vl.1, 0) ~~> (#vk.3, 0) )
              next
                case initiatereader
                by contradiction /* impossible chain */
              next
                case tag1
                solve( (#vl.1, 0) ~~> (#vk.3, 0) )
                  case d_0_fst
                  by contradiction /* impossible chain */
                next
                  case d_0_snd
                  by solve( (#vr.5, 0) ~~> (#vk.3, 0) )
                qed
              qed
            qed
          next
            case coerce
            solve( !KD( (~k⊕r0⊕h((~k⊕~r1⊕r0))) ) ▶₀ #vk.2 )
              case acceptreader
              by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
            next
              case initiatereader
              by contradiction /* impossible chain */
            next
              case tag1
              solve( (#vl.1, 0) ~~> (#vk.2, 0) )
                case d_0_fst
                by contradiction /* impossible chain */
              next
                case d_0_snd
                by solve( (#vr.5, 0) ~~> (#vk.2, 0) )
              qed
            qed
          qed
        next
          case c_xor_case_06
          solve( !KU( (~k⊕~r1.1⊕h((~k⊕~r1⊕r0))) ) @ #vk.3 )
            case c_xor_case_1
            by contradiction /* cyclic */
          next
            case c_xor_case_2
            by solve( !KU( ~k ) @ #vk.6 )
          next
            case c_xor_case_3
            solve( !KU( (~k2⊕r0) ) @ #vk.4 )
              case c_xor
              by solve( !KU( ~k2 ) @ #vk.7 )
            next
              case coerce
              solve( !KD( (~k2⊕r0) ) ▶₀ #vk.3 )
                case acceptreader
                by solve( (#vl.1, 0) ~~> (#vk.3, 0) )
              next
                case initiatereader
                by contradiction /* impossible chain */
              next
                case tag1
                solve( (#vl.1, 0) ~~> (#vk.3, 0) )
                  case d_0_fst
                  by contradiction /* impossible chain */
                next
                  case d_0_snd
                  by solve( (#vr.5, 0) ~~> (#vk.3, 0) )
                qed
              qed
            qed
          next
            case coerce
            solve( !KD( (~k⊕~r1.1⊕h((~k⊕~r1⊕r0))) ) ▶₀ #vk.2 )
              case acceptreader
              by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
            next
              case initiatereader
              by contradiction /* impossible chain */
            next
              case tag1
              solve( (#vl.1, 0) ~~> (#vk.2, 0) )
                case d_0_fst
                by contradiction /* impossible chain */
              next
                case d_0_snd
                by solve( (#vr.5, 0) ~~> (#vk.2, 0) )
              qed
            qed
          qed
        next
          case c_xor_case_07
          solve( !KU( (~k⊕h((~k⊕~r1⊕r0))) ) @ #vk.3 )
            case c_xor
            by solve( !KU( ~k ) @ #vk.6 )
          next
            case coerce
            solve( !KD( (~k⊕h((~k⊕~r1⊕r0))) ) ▶₀ #vk.2 )
              case acceptreader
              by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
            next
              case initiatereader
              by contradiction /* impossible chain */
            next
              case tag1
              solve( (#vl.1, 0) ~~> (#vk.2, 0) )
                case d_0_fst
                by contradiction /* impossible chain */
              next
                case d_0_snd
                by solve( (#vr.5, 0) ~~> (#vk.2, 0) )
              qed
            qed
          qed
        next
          case c_xor_case_08
          by solve( !KU( ~k ) @ #vk.4 )
        next
          case c_xor_case_09
          solve( !KU( (~k2⊕r0⊕h((~k⊕~r1⊕r0))) ) @ #vk.3 )
            case c_xor_case_1
            solve( !KU( (~k⊕~r1.1) ) @ #vk.4 )
              case c_xor
              by contradiction /* cyclic */
            next
              case coerce
              solve( !KD( (~k⊕~r1.1) ) ▶₀ #vk.3 )
                case acceptreader
                by solve( (#vl.1, 0) ~~> (#vk.3, 0) )
              next
                case initiatereader
                by contradiction /* impossible chain */
              next
                case tag1
                solve( (#vl.1, 0) ~~> (#vk.3, 0) )
                  case d_0_fst
                  by contradiction /* impossible chain */
                next
                  case d_0_snd
                  by solve( (#vr.5, 0) ~~> (#vk.3, 0) )
                qed
              qed
            qed
          next
            case c_xor_case_2
            by solve( !KU( ~k2 ) @ #vk.6 )
          next
            case c_xor_case_3
            solve( !KU( (~k⊕~r1.1) ) @ #vk.4 )
              case c_xor
              by contradiction /* cyclic */
            next
              case coerce
              solve( !KD( (~k⊕~r1.1) ) ▶₀ #vk.3 )
                case acceptreader
                by solve( (#vl.1, 0) ~~> (#vk.3, 0) )
              next
                case initiatereader
                by contradiction /* impossible chain */
              next
                case tag1
                solve( (#vl.1, 0) ~~> (#vk.3, 0) )
                  case d_0_fst
                  by contradiction /* impossible chain */
                next
                  case d_0_snd
                  by solve( (#vr.5, 0) ~~> (#vk.3, 0) )
                qed
              qed
            qed
          next
            case coerce
            solve( !KD( (~k2⊕r0⊕h((~k⊕~r1⊕r0))) ) ▶₀ #vk.2 )
              case acceptreader
              by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
            next
              case initiatereader
              by contradiction /* impossible chain */
            next
              case tag1
              solve( (#vl.1, 0) ~~> (#vk.2, 0) )
                case d_0_fst
                by contradiction /* impossible chain */
              next
                case d_0_snd
                by solve( (#vr.5, 0) ~~> (#vk.2, 0) )
              qed
            qed
          qed
        next
          case c_xor_case_10
          solve( !KU( (~k2⊕~r1.1⊕h((~k⊕~r1⊕r0))) ) @ #vk.3 )
            case c_xor_case_1
            by contradiction /* cyclic */
          next
            case c_xor_case_2
            by solve( !KU( ~k2 ) @ #vk.6 )
          next
            case c_xor_case_3
            solve( !KU( (~k⊕r0) ) @ #vk.4 )
              case c_xor
              by solve( !KU( ~k ) @ #vk.7 )
            next
              case coerce
              solve( !KD( (~k⊕r0) ) ▶₀ #vk.3 )
                case acceptreader
                by solve( (#vl.1, 0) ~~> (#vk.3, 0) )
              next
                case initiatereader
                by contradiction /* impossible chain */
              next
                case tag1
                solve( (#vl.1, 0) ~~> (#vk.3, 0) )
                  case d_0_fst
                  by contradiction /* impossible chain */
                next
                  case d_0_snd
                  by solve( (#vr.5, 0) ~~> (#vk.3, 0) )
                qed
              qed
            qed
          next
            case coerce
            solve( !KD( (~k2⊕~r1.1⊕h((~k⊕~r1⊕r0))) ) ▶₀ #vk.2 )
              case acceptreader
              by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
            next
              case initiatereader
              by contradiction /* impossible chain */
            next
              case tag1
              solve( (#vl.1, 0) ~~> (#vk.2, 0) )
                case d_0_fst
                by contradiction /* impossible chain */
              next
                case d_0_snd
                by solve( (#vr.5, 0) ~~> (#vk.2, 0) )
              qed
            qed
          qed
        next
          case c_xor_case_11
          solve( !KU( (~k2⊕h((~k⊕~r1⊕r0))) ) @ #vk.3 )
            case c_xor
            by solve( !KU( ~k2 ) @ #vk.6 )
          next
            case coerce
            solve( !KD( (~k2⊕h((~k⊕~r1⊕r0))) ) ▶₀ #vk.2 )
              case acceptreader
              by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
            next
              case initiatereader
              by contradiction /* impossible chain */
            next
              case tag1
              solve( (#vl.1, 0) ~~> (#vk.2, 0) )
                case d_0_fst
                by contradiction /* impossible chain */
              next
                case d_0_snd
                by solve( (#vr.5, 0) ~~> (#vk.2, 0) )
              qed
            qed
          qed
        next
          case c_xor_case_12
          solve( !KU( (r0⊕~r1.1⊕h((~k⊕~r1⊕r0))) ) @ #vk.3 )
            case c_xor_case_1
            by contradiction /* cyclic */
          next
            case c_xor_case_2
            solve( !KU( (~k⊕~k2) ) @ #vk.4 )
              case c_xor
              by solve( !KU( ~k2 ) @ #vk.6 )
            next
              case coerce
              solve( !KD( (~k⊕~k2) ) ▶₀ #vk.3 )
                case acceptreader
                by solve( (#vl.1, 0) ~~> (#vk.3, 0) )
              next
                case initiatereader
                by contradiction /* impossible chain */
              next
                case tag1
                solve( (#vl.1, 0) ~~> (#vk.3, 0) )
                  case d_0_fst
                  by contradiction /* impossible chain */
                next
                  case d_0_snd
                  by solve( (#vr.5, 0) ~~> (#vk.3, 0) )
                qed
              qed
            qed
          next
            case c_xor_case_3
            solve( !KU( (~k⊕~k2) ) @ #vk.4 )
              case c_xor
              by solve( !KU( ~k2 ) @ #vk.7 )
            next
              case coerce
              solve( !KD( (~k⊕~k2) ) ▶₀ #vk.3 )
                case acceptreader
                by solve( (#vl.1, 0) ~~> (#vk.3, 0) )
              next
                case initiatereader
                by contradiction /* impossible chain */
              next
                case tag1
                solve( (#vl.1, 0) ~~> (#vk.3, 0) )
                  case d_0_fst
                  by contradiction /* impossible chain */
                next
                  case d_0_snd
                  by solve( (#vr.5, 0) ~~> (#vk.3, 0) )
                qed
              qed
            qed
          next
            case coerce
            solve( !KD( (r0⊕~r1.1⊕h((~k⊕~r1⊕r0))) ) ▶₀ #vk.2 )
              case acceptreader
              by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
            next
              case initiatereader
              by contradiction /* impossible chain */
            next
              case tag1
              solve( (#vl.1, 0) ~~> (#vk.2, 0) )
                case d_0_fst
                by contradiction /* impossible chain */
              next
                case d_0_snd
                by solve( (#vr.5, 0) ~~> (#vk.2, 0) )
              qed
            qed
          qed
        next
          case c_xor_case_13
          solve( !KU( (r0⊕h((~k⊕~r1⊕r0))) ) @ #vk.3 )
            case c_xor
            solve( !KU( (~k⊕~k2⊕~r1.1) ) @ #vk.4 )
              case c_xor_case_1
              by solve( !KU( ~k2 ) @ #vk.7 )
            next
              case c_xor_case_2
              by solve( !KU( ~k ) @ #vk.7 )
            next
              case c_xor_case_3
              by contradiction /* cyclic */
            next
              case coerce
              solve( !KD( (~k⊕~k2⊕~r1.1) ) ▶₀ #vk.3 )
                case acceptreader
                by solve( (#vl.1, 0) ~~> (#vk.3, 0) )
              next
                case initiatereader
                by contradiction /* impossible chain */
              next
                case tag1
                solve( (#vl.1, 0) ~~> (#vk.3, 0) )
                  case d_0_fst
                  by contradiction /* impossible chain */
                next
                  case d_0_snd
                  by solve( (#vr.5, 0) ~~> (#vk.3, 0) )
                qed
              qed
            qed
          next
            case coerce
            solve( !KD( (r0⊕h((~k⊕~r1⊕r0))) ) ▶₀ #vk.2 )
              case acceptreader
              by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
            next
              case initiatereader
              by contradiction /* impossible chain */
            next
              case tag1
              solve( (#vl.1, 0) ~~> (#vk.2, 0) )
                case d_0_fst
                by contradiction /* impossible chain */
              next
                case d_0_snd
                by solve( (#vr.5, 0) ~~> (#vk.2, 0) )
              qed
            qed
          qed
        next
          case c_xor_case_14
          solve( !KU( (~r1.1⊕h((~k⊕~r1⊕r0))) ) @ #vk.3 )
            case c_xor
            by contradiction /* cyclic */
          next
            case coerce
            solve( !KD( (~r1.1⊕h((~k⊕~r1⊕r0))) ) ▶₀ #vk.2 )
              case acceptreader
              by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
            next
              case initiatereader
              by contradiction /* impossible chain */
            next
              case tag1
              solve( (#vl.1, 0) ~~> (#vk.2, 0) )
                case d_0_fst
                by contradiction /* impossible chain */
              next
                case d_0_snd
                by solve( (#vr.5, 0) ~~> (#vk.2, 0) )
              qed
            qed
          qed
        next
          case c_xor_case_15
          solve( !KU( (~k⊕~k2⊕r0⊕~r1.1) ) @ #vk.4 )
            case c_xor_case_1
            solve( !KU( (~k⊕~k2⊕~r1.1) ) @ #vk.5 )
              case c_xor_case_1
              by solve( !KU( ~k2 ) @ #vk.7 )
            next
              case c_xor_case_2
              by solve( !KU( ~k ) @ #vk.7 )
            next
              case c_xor_case_3
              by contradiction /* cyclic */
            next
              case coerce
              solve( !KD( (~k⊕~k2⊕~r1.1) ) ▶₀ #vk.3 )
                case acceptreader
                by solve( (#vl.1, 0) ~~> (#vk.3, 0) )
              next
                case initiatereader
                by contradiction /* impossible chain */
              next
                case tag1
                solve( (#vl.1, 0) ~~> (#vk.3, 0) )
                  case d_0_fst
                  by contradiction /* impossible chain */
                next
                  case d_0_snd
                  by solve( (#vr.5, 0) ~~> (#vk.3, 0) )
                qed
              qed
            qed
          next
            case c_xor_case_2
            by solve( !KU( ~k2 ) @ #vk.6 )
          next
            case c_xor_case_3
            solve( !KU( (~k⊕~r1.1) ) @ #vk.5 )
              case c_xor
              by contradiction /* cyclic */
            next
              case coerce
              solve( !KD( (~k⊕~r1.1) ) ▶₀ #vk.3 )
                case acceptreader
                by solve( (#vl.1, 0) ~~> (#vk.3, 0) )
              next
                case initiatereader
                by contradiction /* impossible chain */
              next
                case tag1
                solve( (#vl.1, 0) ~~> (#vk.3, 0) )
                  case d_0_fst
                  by contradiction /* impossible chain */
                next
                  case d_0_snd
                  by solve( (#vr.5, 0) ~~> (#vk.3, 0) )
                qed
              qed
            qed
          next
            case c_xor_case_4
            by solve( !KU( ~k ) @ #vk.6 )
          next
            case c_xor_case_5
            solve( !KU( (~k2⊕~r1.1) ) @ #vk.5 )
              case c_xor
              by contradiction /* cyclic */
            next
              case coerce
              solve( !KD( (~k2⊕~r1.1) ) ▶₀ #vk.3 )
                case acceptreader
                by solve( (#vl.1, 0) ~~> (#vk.3, 0) )
              next
                case initiatereader
                by contradiction /* impossible chain */
              next
                case tag1
                solve( (#vl.1, 0) ~~> (#vk.3, 0) )
                  case d_0_fst
                  by contradiction /* impossible chain */
                next
                  case d_0_snd
                  by solve( (#vr.5, 0) ~~> (#vk.3, 0) )
                qed
              qed
            qed
          next
            case c_xor_case_6
            solve( !KU( (r0⊕~r1.1) ) @ #vk.5 )
              case c_xor
              by contradiction /* cyclic */
            next
              case coerce
              solve( !KD( (r0⊕~r1.1) ) ▶₀ #vk.3 )
                case acceptreader
                by solve( (#vl.1, 0) ~~> (#vk.3, 0) )
              next
                case initiatereader
                by contradiction /* impossible chain */
              next
                case tag1
                solve( (#vl.1, 0) ~~> (#vk.3, 0) )
                  case d_0_fst
                  by contradiction /* impossible chain */
                next
                  case d_0_snd
                  by solve( (#vr.5, 0) ~~> (#vk.3, 0) )
                qed
              qed
            qed
          next
            case c_xor_case_7
            by contradiction /* cyclic */
          next
            case coerce
            solve( !KD( (~k⊕~k2⊕r0⊕~r1.1) ) ▶₀ #vk.2 )
              case acceptreader
              by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
            next
              case initiatereader
              by contradiction /* impossible chain */
            next
              case tag1
              solve( (#vl.1, 0) ~~> (#vk.2, 0) )
                case d_0_fst
                by contradiction /* impossible chain */
              next
                case d_0_snd
                by solve( (#vr.5, 0) ~~> (#vk.2, 0) )
              qed
            qed
          qed
        next
          case coerce
          solve( !KD( (~k⊕~k2⊕r0⊕~r1.1⊕h((~k⊕~r1⊕r0))) ) ▶₀ #vk.1 )
            case acceptreader
            by solve( (#vl.1, 0) ~~> (#vk.1, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.1, 0) ~~> (#vk.1, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.5, 0) ~~> (#vk.1, 0) )
            qed
          qed
        qed
      next
        case split_case_3
        solve( !KU( (~k⊕~k2⊕h((~k⊕~r0⊕~r1))) ) @ #vk.2 )
          case c_xor_case_1
          by solve( !KU( ~k2 ) @ #vk.4 )
        next
          case c_xor_case_2
          by solve( !KU( ~k ) @ #vk.4 )
        next
          case c_xor_case_3
          solve( !KU( h((~k⊕~r0⊕~r1)) ) @ #vk.3 )
            case c_h
            solve( !KU( (~k⊕~k2) ) @ #vk.4 )
              case c_xor
              by solve( !KU( ~k2 ) @ #vk.6 )
            next
              case coerce
              solve( !KD( (~k⊕~k2) ) ▶₀ #vk.3 )
                case acceptreader
                by solve( (#vl.1, 0) ~~> (#vk.3, 0) )
              next
                case initiatereader
                by contradiction /* impossible chain */
              next
                case tag1
                solve( (#vl.1, 0) ~~> (#vk.3, 0) )
                  case d_0_fst
                  by contradiction /* impossible chain */
                next
                  case d_0_snd
                  by solve( (#vr.5, 0) ~~> (#vk.3, 0) )
                qed
              qed
            qed
          next
            case tag1_case_1
            by contradiction /* cyclic */
          next
            case tag1_case_2
            solve( !KU( (~k⊕~k2) ) @ #vk.4 )
              case c_xor
              by solve( !KU( ~k2 ) @ #vk.6 )
            next
              case coerce
              solve( !KD( (~k⊕~k2) ) ▶₀ #vk.3 )
                case acceptreader
                by solve( (#vl.2, 0) ~~> (#vk.3, 0) )
              next
                case initiatereader
                by contradiction /* impossible chain */
              next
                case tag1
                solve( (#vl.2, 0) ~~> (#vk.3, 0) )
                  case d_0_fst
                  by contradiction /* impossible chain */
                next
                  case d_0_snd
                  by solve( (#vr.7, 0) ~~> (#vk.3, 0) )
                qed
              qed
            qed
          qed
        next
          case coerce
          solve( !KD( (~k⊕~k2⊕h((~k⊕~r0⊕~r1))) ) ▶₀ #vk.1 )
            case acceptreader
            by solve( (#vl.1, 0) ~~> (#vk.1, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.1, 0) ~~> (#vk.1, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.5, 0) ~~> (#vk.1, 0) )
            qed
          qed
        qed
      next
        case split_case_4
        solve( !KU( (~k2⊕~r1.1) ) @ #vk.1 )
          case c_xor
          by solve( !KU( ~k2 ) @ #vk.4 )
        next
          case coerce
          solve( !KD( (~k2⊕~r1.1) ) ▶₀ #vk.1 )
            case acceptreader
            by solve( (#vl.1, 0) ~~> (#vk.1, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.1, 0) ~~> (#vk.1, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.5, 0) ~~> (#vk.1, 0) )
            qed
          qed
        qed
      next
        case split_case_5
        solve( !KU( (~k2⊕x⊕~r1.1) ) @ #vk.1 )
          case c_xor_case_1
          solve( !KU( (~k⊕x⊕h((~k⊕~k2⊕~r1⊕x⊕~r1.1))) ) @ #vk.2 )
            case c_xor_case_1
            solve( !KU( (~k2⊕~r1.1) ) @ #vk.3 )
              case c_xor
              by solve( !KU( ~k2 ) @ #vk.7 )
            next
              case coerce
              solve( !KD( (~k2⊕~r1.1) ) ▶₀ #vk.3 )
                case acceptreader
                by solve( (#vl.1, 0) ~~> (#vk.3, 0) )
              next
                case initiatereader
                by contradiction /* impossible chain */
              next
                case tag1
                solve( (#vl.1, 0) ~~> (#vk.3, 0) )
                  case d_0_fst
                  by contradiction /* impossible chain */
                next
                  case d_0_snd
                  by solve( (#vr.5, 0) ~~> (#vk.3, 0) )
                qed
              qed
            qed
          next
            case c_xor_case_2
            by solve( !KU( ~k ) @ #vk.6 )
          next
            case c_xor_case_3
            solve( !KU( (~k2⊕~r1.1) ) @ #vk.3 )
              case c_xor
              by solve( !KU( ~k2 ) @ #vk.8 )
            next
              case coerce
              solve( !KD( (~k2⊕~r1.1) ) ▶₀ #vk.3 )
                case acceptreader
                by solve( (#vl.1, 0) ~~> (#vk.3, 0) )
              next
                case initiatereader
                by contradiction /* impossible chain */
              next
                case tag1
                solve( (#vl.1, 0) ~~> (#vk.3, 0) )
                  case d_0_fst
                  by contradiction /* impossible chain */
                next
                  case d_0_snd
                  by solve( (#vr.5, 0) ~~> (#vk.3, 0) )
                qed
              qed
            qed
          next
            case coerce
            solve( !KD( (~k⊕x⊕h((~k⊕~k2⊕~r1⊕x⊕~r1.1))) ) ▶₀ #vk.2 )
              case acceptreader
              by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
            next
              case initiatereader
              by contradiction /* impossible chain */
            next
              case tag1
              solve( (#vl.1, 0) ~~> (#vk.2, 0) )
                case d_0_fst
                by contradiction /* impossible chain */
              next
                case d_0_snd
                by solve( (#vr.5, 0) ~~> (#vk.2, 0) )
              qed
            qed
          qed
        next
          case c_xor_case_2
          by solve( !KU( ~k2 ) @ #vk.4 )
        next
          case c_xor_case_3
          solve( !KU( (~k⊕x⊕h((~k⊕~k2⊕~r1⊕x⊕~r1.1))) ) @ #vk.2 )
            case c_xor_case_1
            solve( !KU( (~k2⊕x) ) @ #vk.4 )
              case c_xor
              by solve( !KU( ~k2 ) @ #vk.7 )
            next
              case coerce
              solve( !KD( (~k2⊕x) ) ▶₀ #vk.3 )
                case acceptreader
                by solve( (#vl.1, 0) ~~> (#vk.3, 0) )
              next
                case initiatereader
                by contradiction /* impossible chain */
              next
                case tag1
                solve( (#vl.1, 0) ~~> (#vk.3, 0) )
                  case d_0_fst
                  by contradiction /* impossible chain */
                next
                  case d_0_snd
                  by solve( (#vr.5, 0) ~~> (#vk.3, 0) )
                qed
              qed
            qed
          next
            case c_xor_case_2
            by solve( !KU( ~k ) @ #vk.6 )
          next
            case c_xor_case_3
            solve( !KU( (~k2⊕x) ) @ #vk.4 )
              case c_xor
              by solve( !KU( ~k2 ) @ #vk.8 )
            next
              case coerce
              solve( !KD( (~k2⊕x) ) ▶₀ #vk.3 )
                case acceptreader
                by solve( (#vl.1, 0) ~~> (#vk.3, 0) )
              next
                case initiatereader
                by contradiction /* impossible chain */
              next
                case tag1
                solve( (#vl.1, 0) ~~> (#vk.3, 0) )
                  case d_0_fst
                  by contradiction /* impossible chain */
                next
                  case d_0_snd
                  by solve( (#vr.5, 0) ~~> (#vk.3, 0) )
                qed
              qed
            qed
          next
            case coerce
            solve( !KD( (~k⊕x⊕h((~k⊕~k2⊕~r1⊕x⊕~r1.1))) ) ▶₀ #vk.2 )
              case acceptreader
              by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
            next
              case initiatereader
              by contradiction /* impossible chain */
            next
              case tag1
              solve( (#vl.1, 0) ~~> (#vk.2, 0) )
                case d_0_fst
                by contradiction /* impossible chain */
              next
                case d_0_snd
                by solve( (#vr.5, 0) ~~> (#vk.2, 0) )
              qed
            qed
          qed
        next
          case coerce
          solve( !KD( (~k2⊕x⊕~r1.1) ) ▶₀ #vk.1 )
            case acceptreader
            by solve( (#vl.1, 0) ~~> (#vk.1, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.1, 0) ~~> (#vk.1, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.5, 0) ~~> (#vk.1, 0) )
            qed
          qed
        qed
      next
        case split_case_6
        solve( !KU( (~k2⊕x) ) @ #vk.1 )
          case c_xor
          by solve( !KU( ~k2 ) @ #vk.4 )
        next
          case coerce
          solve( !KD( (~k2⊕x) ) ▶₀ #vk.1 )
            case acceptreader
            by solve( (#vl.1, 0) ~~> (#vk.1, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.1, 0) ~~> (#vk.1, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.5, 0) ~~> (#vk.1, 0) )
            qed
          qed
        qed
      next
        case split_case_7
        solve( !KU( (x⊕~r1.1) ) @ #vk.1 )
          case c_xor
          solve( !KU( (~k⊕~k2⊕x⊕h((~k⊕~r1⊕x⊕~r1.1))) ) @ #vk.2 )
            case c_xor_case_1
            solve( !KU( (~k⊕~k2⊕h((~k⊕~r1⊕x⊕~r1.1))) ) @ #vk.5 )
              case c_xor_case_1
              by solve( !KU( ~k2 ) @ #vk.7 )
            next
              case c_xor_case_2
              by solve( !KU( ~k ) @ #vk.7 )
            next
              case c_xor_case_3
              solve( !KU( h((~k⊕~r1⊕x⊕~r1.1)) ) @ #vk.6 )
                case c_h
                solve( !KU( (~k⊕~k2) ) @ #vk.7 )
                  case c_xor
                  by solve( !KU( ~k2 ) @ #vk.9 )
                next
                  case coerce
                  solve( !KD( (~k⊕~k2) ) ▶₀ #vk.5 )
                    case acceptreader
                    by solve( (#vl.1, 0) ~~> (#vk.5, 0) )
                  next
                    case initiatereader
                    by contradiction /* impossible chain */
                  next
                    case tag1
                    solve( (#vl.1, 0) ~~> (#vk.5, 0) )
                      case d_0_fst
                      by contradiction /* impossible chain */
                    next
                      case d_0_snd
                      by solve( (#vr.5, 0) ~~> (#vk.5, 0) )
                    qed
                  qed
                qed
              next
                case tag1_case_1
                by contradiction /* cyclic */
              next
                case tag1_case_2
                solve( !KU( (~k⊕~k2) ) @ #vk.7 )
                  case c_xor
                  by solve( !KU( ~k2 ) @ #vk.9 )
                next
                  case coerce
                  solve( !KD( (~k⊕~k2) ) ▶₀ #vk.5 )
                    case acceptreader
                    by solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                  next
                    case initiatereader
                    by contradiction /* impossible chain */
                  next
                    case tag1
                    solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                      case d_0_fst
                      by contradiction /* impossible chain */
                    next
                      case d_0_snd
                      by solve( (#vr.7, 0) ~~> (#vk.5, 0) )
                    qed
                  qed
                qed
              qed
            next
              case coerce
              solve( !KD( (~k⊕~k2⊕h((~k⊕~r1⊕x⊕~r1.1))) ) ▶₀ #vk.3 )
                case acceptreader
                by solve( (#vl.1, 0) ~~> (#vk.3, 0) )
              next
                case initiatereader
                by contradiction /* impossible chain */
              next
                case tag1
                solve( (#vl.1, 0) ~~> (#vk.3, 0) )
                  case d_0_fst
                  by contradiction /* impossible chain */
                next
                  case d_0_snd
                  by solve( (#vr.5, 0) ~~> (#vk.3, 0) )
                qed
              qed
            qed
          next
            case c_xor_case_2
            by solve( !KU( ~k2 ) @ #vk.6 )
          next
            case c_xor_case_3
            solve( !KU( (~k⊕h((~k⊕~r1⊕x⊕~r1.1))) ) @ #vk.5 )
              case c_xor
              by solve( !KU( ~k ) @ #vk.8 )
            next
              case coerce
              solve( !KD( (~k⊕h((~k⊕~r1⊕x⊕~r1.1))) ) ▶₀ #vk.3 )
                case acceptreader
                by solve( (#vl.1, 0) ~~> (#vk.3, 0) )
              next
                case initiatereader
                by contradiction /* impossible chain */
              next
                case tag1
                solve( (#vl.1, 0) ~~> (#vk.3, 0) )
                  case d_0_fst
                  by contradiction /* impossible chain */
                next
                  case d_0_snd
                  by solve( (#vr.5, 0) ~~> (#vk.3, 0) )
                qed
              qed
            qed
          next
            case c_xor_case_4
            by solve( !KU( ~k ) @ #vk.6 )
          next
            case c_xor_case_5
            solve( !KU( (~k2⊕h((~k⊕~r1⊕x⊕~r1.1))) ) @ #vk.5 )
              case c_xor
              by solve( !KU( ~k2 ) @ #vk.8 )
            next
              case coerce
              solve( !KD( (~k2⊕h((~k⊕~r1⊕x⊕~r1.1))) ) ▶₀ #vk.3 )
                case acceptreader
                by solve( (#vl.1, 0) ~~> (#vk.3, 0) )
              next
                case initiatereader
                by contradiction /* impossible chain */
              next
                case tag1
                solve( (#vl.1, 0) ~~> (#vk.3, 0) )
                  case d_0_fst
                  by contradiction /* impossible chain */
                next
                  case d_0_snd
                  by solve( (#vr.5, 0) ~~> (#vk.3, 0) )
                qed
              qed
            qed
          next
            case c_xor_case_6
            solve( !KU( (x⊕h((~k⊕~r1⊕x⊕~r1.1))) ) @ #vk.5 )
              case c_xor
              solve( !KU( (~k⊕~k2) ) @ #vk.6 )
                case c_xor
                by solve( !KU( ~k2 ) @ #vk.8 )
              next
                case coerce
                solve( !KD( (~k⊕~k2) ) ▶₀ #vk.4 )
                  case acceptreader
                  by solve( (#vl.1, 0) ~~> (#vk.4, 0) )
                next
                  case initiatereader
                  by contradiction /* impossible chain */
                next
                  case tag1
                  solve( (#vl.1, 0) ~~> (#vk.4, 0) )
                    case d_0_fst
                    by contradiction /* impossible chain */
                  next
                    case d_0_snd
                    by solve( (#vr.5, 0) ~~> (#vk.4, 0) )
                  qed
                qed
              qed
            next
              case coerce
              solve( !KD( (x⊕h((~k⊕~r1⊕x⊕~r1.1))) ) ▶₀ #vk.3 )
                case acceptreader
                by solve( (#vl.1, 0) ~~> (#vk.3, 0) )
              next
                case initiatereader
                by contradiction /* impossible chain */
              next
                case tag1
                solve( (#vl.1, 0) ~~> (#vk.3, 0) )
                  case d_0_fst
                  by contradiction /* impossible chain */
                next
                  case d_0_snd
                  by solve( (#vr.5, 0) ~~> (#vk.3, 0) )
                qed
              qed
            qed
          next
            case c_xor_case_7
            solve( !KU( h((~k⊕~r1⊕x⊕~r1.1)) ) @ #vk.5 )
              case c_h
              solve( !KU( (~k⊕~k2⊕x) ) @ #vk.6 )
                case c_xor_case_1
                by solve( !KU( ~k2 ) @ #vk.9 )
              next
                case c_xor_case_2
                by solve( !KU( ~k ) @ #vk.9 )
              next
                case c_xor_case_3
                solve( !KU( (~k⊕~r1⊕x⊕~r1.1) ) @ #vk.7 )
                  case c_xor_case_1
                  solve( !KU( (~k⊕~k2) ) @ #vk.8 )
                    case c_xor
                    by solve( !KU( ~k2 ) @ #vk.10 )
                  next
                    case coerce
                    solve( !KD( (~k⊕~k2) ) ▶₀ #vk.6 )
                      case acceptreader
                      by solve( (#vl.1, 0) ~~> (#vk.6, 0) )
                    next
                      case initiatereader
                      by contradiction /* impossible chain */
                    next
                      case tag1
                      solve( (#vl.1, 0) ~~> (#vk.6, 0) )
                        case d_0_fst
                        by contradiction /* impossible chain */
                      next
                        case d_0_snd
                        by solve( (#vr.5, 0) ~~> (#vk.6, 0) )
                      qed
                    qed
                  qed
                next
                  case c_xor_case_2
                  by contradiction /* cyclic */
                next
                  case c_xor_case_3
                  solve( !KU( (~k⊕~k2) ) @ #vk.8 )
                    case c_xor
                    by solve( !KU( ~k2 ) @ #vk.11 )
                  next
                    case coerce
                    solve( !KD( (~k⊕~k2) ) ▶₀ #vk.6 )
                      case acceptreader
                      by solve( (#vl.1, 0) ~~> (#vk.6, 0) )
                    next
                      case initiatereader
                      by contradiction /* impossible chain */
                    next
                      case tag1
                      solve( (#vl.1, 0) ~~> (#vk.6, 0) )
                        case d_0_fst
                        by contradiction /* impossible chain */
                      next
                        case d_0_snd
                        by solve( (#vr.5, 0) ~~> (#vk.6, 0) )
                      qed
                    qed
                  qed
                next
                  case c_xor_case_4
                  by solve( !KU( ~k ) @ #vk.10 )
                next
                  case c_xor_case_5
                  solve( !KU( (~k⊕~k2) ) @ #vk.8 )
                    case c_xor
                    by solve( !KU( ~k2 ) @ #vk.11 )
                  next
                    case coerce
                    solve( !KD( (~k⊕~k2) ) ▶₀ #vk.6 )
                      case acceptreader
                      by solve( (#vl.1, 0) ~~> (#vk.6, 0) )
                    next
                      case initiatereader
                      by contradiction /* impossible chain */
                    next
                      case tag1
                      solve( (#vl.1, 0) ~~> (#vk.6, 0) )
                        case d_0_fst
                        by contradiction /* impossible chain */
                      next
                        case d_0_snd
                        by solve( (#vr.5, 0) ~~> (#vk.6, 0) )
                      qed
                    qed
                  qed
                next
                  case c_xor_case_6
                  by contradiction /* cyclic */
                next
                  case c_xor_case_7
                  by contradiction /* cyclic */
                next
                  case coerce
                  solve( !KD( (~k⊕~r1⊕x⊕~r1.1) ) ▶₀ #vk.5 )
                    case acceptreader
                    by solve( (#vl.1, 0) ~~> (#vk.5, 0) )
                  next
                    case initiatereader
                    by contradiction /* impossible chain */
                  next
                    case tag1
                    solve( (#vl.1, 0) ~~> (#vk.5, 0) )
                      case d_0_fst
                      by contradiction /* impossible chain */
                    next
                      case d_0_snd
                      by solve( (#vr.5, 0) ~~> (#vk.5, 0) )
                    qed
                  qed
                qed
              next
                case coerce
                solve( !KD( (~k⊕~k2⊕x) ) ▶₀ #vk.4 )
                  case acceptreader
                  by solve( (#vl.1, 0) ~~> (#vk.4, 0) )
                next
                  case initiatereader
                  by contradiction /* impossible chain */
                next
                  case tag1
                  solve( (#vl.1, 0) ~~> (#vk.4, 0) )
                    case d_0_fst
                    by contradiction /* impossible chain */
                  next
                    case d_0_snd
                    by solve( (#vr.5, 0) ~~> (#vk.4, 0) )
                  qed
                qed
              qed
            next
              case tag1_case_1
              by contradiction /* cyclic */
            next
              case tag1_case_2
              solve( !KU( (~k⊕~k2⊕x) ) @ #vk.6 )
                case c_xor_case_1
                by solve( !KU( ~k2 ) @ #vk.9 )
              next
                case c_xor_case_2
                by solve( !KU( ~k ) @ #vk.9 )
              next
                case c_xor_case_3
                solve( !KU( (~k⊕~k2) ) @ #vk.8 )
                  case c_xor
                  by solve( !KU( ~k2 ) @ #vk.9 )
                next
                  case coerce
                  solve( !KD( (~k⊕~k2) ) ▶₀ #vk.5 )
                    case acceptreader
                    by solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                  next
                    case initiatereader
                    by contradiction /* impossible chain */
                  next
                    case tag1
                    solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                      case d_0_fst
                      by contradiction /* impossible chain */
                    next
                      case d_0_snd
                      by solve( (#vr.7, 0) ~~> (#vk.5, 0) )
                    qed
                  qed
                qed
              next
                case coerce
                solve( !KD( (~k⊕~k2⊕x) ) ▶₀ #vk.4 )
                  case acceptreader
                  by solve( (#vl.2, 0) ~~> (#vk.4, 0) )
                next
                  case initiatereader
                  by contradiction /* impossible chain */
                next
                  case tag1
                  solve( (#vl.2, 0) ~~> (#vk.4, 0) )
                    case d_0_fst
                    by contradiction /* impossible chain */
                  next
                    case d_0_snd
                    by solve( (#vr.7, 0) ~~> (#vk.4, 0) )
                  qed
                qed
              qed
            qed
          next
            case coerce
            solve( !KD( (~k⊕~k2⊕x⊕h((~k⊕~r1⊕x⊕~r1.1))) ) ▶₀ #vk.2 )
              case acceptreader
              by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
            next
              case initiatereader
              by contradiction /* impossible chain */
            next
              case tag1
              solve( (#vl.1, 0) ~~> (#vk.2, 0) )
                case d_0_fst
                by contradiction /* impossible chain */
              next
                case d_0_snd
                by solve( (#vr.5, 0) ~~> (#vk.2, 0) )
              qed
            qed
          qed
        next
          case coerce
          solve( !KD( (x⊕~r1.1) ) ▶₀ #vk.1 )
            case acceptreader
            by solve( (#vl.1, 0) ~~> (#vk.1, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.1, 0) ~~> (#vk.1, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.5, 0) ~~> (#vk.1, 0) )
            qed
          qed
        qed
      qed
    next
      case tag1_case_2
      solve( splitEqs(3) )
        case split_case_1
        by solve( !KU( ~k2 ) @ #vk.1 )
      next
        case split_case_2
        solve( !KU( (~k⊕~k2⊕r0⊕~r1.1⊕h((~k⊕~r1⊕r0))) ) @ #vk.2 )
          case c_xor_case_01
          by contradiction /* cyclic */
        next
          case c_xor_case_02
          solve( !KU( (~k⊕~k2⊕~r1.1⊕h((~k⊕~r1⊕r0))) ) @ #vk.3 )
            case c_xor_case_1
            by contradiction /* cyclic */
          next
            case c_xor_case_2
            by solve( !KU( ~k2 ) @ #vk.5 )
          next
            case c_xor_case_3
            solve( !KU( (~k⊕h((~k⊕~r1⊕r0))) ) @ #vk.4 )
              case c_xor
              by solve( !KU( ~k ) @ #vk.7 )
            next
              case coerce
              solve( !KD( (~k⊕h((~k⊕~r1⊕r0))) ) ▶₀ #vk.3 )
                case acceptreader
                by solve( (#vl.1, 0) ~~> (#vk.3, 0) )
              next
                case initiatereader
                by contradiction /* impossible chain */
              next
                case tag1
                solve( (#vl.1, 0) ~~> (#vk.3, 0) )
                  case d_0_fst
                  by contradiction /* impossible chain */
                next
                  case d_0_snd
                  by solve( (#vr.5, 0) ~~> (#vk.3, 0) )
                qed
              qed
            qed
          next
            case c_xor_case_4
            by solve( !KU( ~k ) @ #vk.5 )
          next
            case c_xor_case_5
            solve( !KU( (~k2⊕h((~k⊕~r1⊕r0))) ) @ #vk.4 )
              case c_xor
              by solve( !KU( ~k2 ) @ #vk.7 )
            next
              case coerce
              solve( !KD( (~k2⊕h((~k⊕~r1⊕r0))) ) ▶₀ #vk.3 )
                case acceptreader
                by solve( (#vl.1, 0) ~~> (#vk.3, 0) )
              next
                case initiatereader
                by contradiction /* impossible chain */
              next
                case tag1
                solve( (#vl.1, 0) ~~> (#vk.3, 0) )
                  case d_0_fst
                  by contradiction /* impossible chain */
                next
                  case d_0_snd
                  by solve( (#vr.5, 0) ~~> (#vk.3, 0) )
                qed
              qed
            qed
          next
            case c_xor_case_6
            solve( !KU( (~r1.1⊕h((~k⊕~r1⊕r0))) ) @ #vk.4 )
              case c_xor
              by contradiction /* cyclic */
            next
              case coerce
              solve( !KD( (~r1.1⊕h((~k⊕~r1⊕r0))) ) ▶₀ #vk.3 )
                case acceptreader
                by solve( (#vl.1, 0) ~~> (#vk.3, 0) )
              next
                case initiatereader
                by contradiction /* impossible chain */
              next
                case tag1
                solve( (#vl.1, 0) ~~> (#vk.3, 0) )
                  case d_0_fst
                  by contradiction /* impossible chain */
                next
                  case d_0_snd
                  by solve( (#vr.5, 0) ~~> (#vk.3, 0) )
                qed
              qed
            qed
          next
            case c_xor_case_7
            solve( !KU( (~k⊕~k2⊕~r1.1) ) @ #vk.5 )
              case c_xor_case_1
              by solve( !KU( ~k2 ) @ #vk.7 )
            next
              case c_xor_case_2
              by solve( !KU( ~k ) @ #vk.7 )
            next
              case c_xor_case_3
              by contradiction /* cyclic */
            next
              case coerce
              solve( !KD( (~k⊕~k2⊕~r1.1) ) ▶₀ #vk.3 )
                case acceptreader
                by solve( (#vl.1, 0) ~~> (#vk.3, 0) )
              next
                case initiatereader
                by contradiction /* impossible chain */
              next
                case tag1
                solve( (#vl.1, 0) ~~> (#vk.3, 0) )
                  case d_0_fst
                  by contradiction /* impossible chain */
                next
                  case d_0_snd
                  by solve( (#vr.5, 0) ~~> (#vk.3, 0) )
                qed
              qed
            qed
          next
            case coerce
            solve( !KD( (~k⊕~k2⊕~r1.1⊕h((~k⊕~r1⊕r0))) ) ▶₀ #vk.2 )
              case acceptreader
              by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
            next
              case initiatereader
              by contradiction /* impossible chain */
            next
              case tag1
              solve( (#vl.1, 0) ~~> (#vk.2, 0) )
                case d_0_fst
                by contradiction /* impossible chain */
              next
                case d_0_snd
                by solve( (#vr.5, 0) ~~> (#vk.2, 0) )
              qed
            qed
          qed
        next
          case c_xor_case_03
          solve( !KU( (~k⊕~k2⊕h((~k⊕~r1⊕r0))) ) @ #vk.3 )
            case c_xor_case_1
            by solve( !KU( ~k2 ) @ #vk.6 )
          next
            case c_xor_case_2
            by solve( !KU( ~k ) @ #vk.6 )
          next
            case c_xor_case_3
            solve( !KU( (r0⊕~r1.1) ) @ #vk.4 )
              case c_xor
              by contradiction /* cyclic */
            next
              case coerce
              solve( !KD( (r0⊕~r1.1) ) ▶₀ #vk.3 )
                case acceptreader
                by solve( (#vl.1, 0) ~~> (#vk.3, 0) )
              next
                case initiatereader
                by contradiction /* impossible chain */
              next
                case tag1
                solve( (#vl.1, 0) ~~> (#vk.3, 0) )
                  case d_0_fst
                  by contradiction /* impossible chain */
                next
                  case d_0_snd
                  by solve( (#vr.5, 0) ~~> (#vk.3, 0) )
                qed
              qed
            qed
          next
            case coerce
            solve( !KD( (~k⊕~k2⊕h((~k⊕~r1⊕r0))) ) ▶₀ #vk.2 )
              case acceptreader
              by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
            next
              case initiatereader
              by contradiction /* impossible chain */
            next
              case tag1
              solve( (#vl.1, 0) ~~> (#vk.2, 0) )
                case d_0_fst
                by contradiction /* impossible chain */
              next
                case d_0_snd
                by solve( (#vr.5, 0) ~~> (#vk.2, 0) )
              qed
            qed
          qed
        next
          case c_xor_case_04
          by solve( !KU( ~k2 ) @ #vk.4 )
        next
          case c_xor_case_05
          solve( !KU( (~k⊕r0⊕h((~k⊕~r1⊕r0))) ) @ #vk.3 )
            case c_xor_case_1
            solve( !KU( (~k2⊕~r1.1) ) @ #vk.4 )
              case c_xor
              by contradiction /* cyclic */
            next
              case coerce
              solve( !KD( (~k2⊕~r1.1) ) ▶₀ #vk.3 )
                case acceptreader
                by solve( (#vl.1, 0) ~~> (#vk.3, 0) )
              next
                case initiatereader
                by contradiction /* impossible chain */
              next
                case tag1
                solve( (#vl.1, 0) ~~> (#vk.3, 0) )
                  case d_0_fst
                  by contradiction /* impossible chain */
                next
                  case d_0_snd
                  by solve( (#vr.5, 0) ~~> (#vk.3, 0) )
                qed
              qed
            qed
          next
            case c_xor_case_2
            by solve( !KU( ~k ) @ #vk.6 )
          next
            case c_xor_case_3
            solve( !KU( (~k2⊕~r1.1) ) @ #vk.4 )
              case c_xor
              by contradiction /* cyclic */
            next
              case coerce
              solve( !KD( (~k2⊕~r1.1) ) ▶₀ #vk.3 )
                case acceptreader
                by solve( (#vl.1, 0) ~~> (#vk.3, 0) )
              next
                case initiatereader
                by contradiction /* impossible chain */
              next
                case tag1
                solve( (#vl.1, 0) ~~> (#vk.3, 0) )
                  case d_0_fst
                  by contradiction /* impossible chain */
                next
                  case d_0_snd
                  by solve( (#vr.5, 0) ~~> (#vk.3, 0) )
                qed
              qed
            qed
          next
            case coerce
            solve( !KD( (~k⊕r0⊕h((~k⊕~r1⊕r0))) ) ▶₀ #vk.2 )
              case acceptreader
              by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
            next
              case initiatereader
              by contradiction /* impossible chain */
            next
              case tag1
              solve( (#vl.1, 0) ~~> (#vk.2, 0) )
                case d_0_fst
                by contradiction /* impossible chain */
              next
                case d_0_snd
                by solve( (#vr.5, 0) ~~> (#vk.2, 0) )
              qed
            qed
          qed
        next
          case c_xor_case_06
          solve( !KU( (~k⊕~r1.1⊕h((~k⊕~r1⊕r0))) ) @ #vk.3 )
            case c_xor_case_1
            by contradiction /* cyclic */
          next
            case c_xor_case_2
            by solve( !KU( ~k ) @ #vk.6 )
          next
            case c_xor_case_3
            solve( !KU( (~k2⊕r0) ) @ #vk.4 )
              case c_xor
              by solve( !KU( ~k2 ) @ #vk.7 )
            next
              case coerce
              solve( !KD( (~k2⊕r0) ) ▶₀ #vk.3 )
                case acceptreader
                by solve( (#vl.1, 0) ~~> (#vk.3, 0) )
              next
                case initiatereader
                by contradiction /* impossible chain */
              next
                case tag1
                solve( (#vl.1, 0) ~~> (#vk.3, 0) )
                  case d_0_fst
                  by contradiction /* impossible chain */
                next
                  case d_0_snd
                  by solve( (#vr.5, 0) ~~> (#vk.3, 0) )
                qed
              qed
            qed
          next
            case coerce
            solve( !KD( (~k⊕~r1.1⊕h((~k⊕~r1⊕r0))) ) ▶₀ #vk.2 )
              case acceptreader
              by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
            next
              case initiatereader
              by contradiction /* impossible chain */
            next
              case tag1
              solve( (#vl.1, 0) ~~> (#vk.2, 0) )
                case d_0_fst
                by contradiction /* impossible chain */
              next
                case d_0_snd
                by solve( (#vr.5, 0) ~~> (#vk.2, 0) )
              qed
            qed
          qed
        next
          case c_xor_case_07
          solve( !KU( (~k⊕h((~k⊕~r1⊕r0))) ) @ #vk.3 )
            case c_xor
            by solve( !KU( ~k ) @ #vk.6 )
          next
            case coerce
            solve( !KD( (~k⊕h((~k⊕~r1⊕r0))) ) ▶₀ #vk.2 )
              case acceptreader
              by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
            next
              case initiatereader
              by contradiction /* impossible chain */
            next
              case tag1
              solve( (#vl.1, 0) ~~> (#vk.2, 0) )
                case d_0_fst
                by contradiction /* impossible chain */
              next
                case d_0_snd
                by solve( (#vr.5, 0) ~~> (#vk.2, 0) )
              qed
            qed
          qed
        next
          case c_xor_case_08
          by solve( !KU( ~k ) @ #vk.4 )
        next
          case c_xor_case_09
          solve( !KU( (~k2⊕r0⊕h((~k⊕~r1⊕r0))) ) @ #vk.3 )
            case c_xor_case_1
            solve( !KU( (~k⊕~r1.1) ) @ #vk.4 )
              case c_xor
              by contradiction /* cyclic */
            next
              case coerce
              solve( !KD( (~k⊕~r1.1) ) ▶₀ #vk.3 )
                case acceptreader
                by solve( (#vl.1, 0) ~~> (#vk.3, 0) )
              next
                case initiatereader
                by contradiction /* impossible chain */
              next
                case tag1
                solve( (#vl.1, 0) ~~> (#vk.3, 0) )
                  case d_0_fst
                  by contradiction /* impossible chain */
                next
                  case d_0_snd
                  by solve( (#vr.5, 0) ~~> (#vk.3, 0) )
                qed
              qed
            qed
          next
            case c_xor_case_2
            by solve( !KU( ~k2 ) @ #vk.6 )
          next
            case c_xor_case_3
            solve( !KU( (~k⊕~r1.1) ) @ #vk.4 )
              case c_xor
              by contradiction /* cyclic */
            next
              case coerce
              solve( !KD( (~k⊕~r1.1) ) ▶₀ #vk.3 )
                case acceptreader
                by solve( (#vl.1, 0) ~~> (#vk.3, 0) )
              next
                case initiatereader
                by contradiction /* impossible chain */
              next
                case tag1
                solve( (#vl.1, 0) ~~> (#vk.3, 0) )
                  case d_0_fst
                  by contradiction /* impossible chain */
                next
                  case d_0_snd
                  by solve( (#vr.5, 0) ~~> (#vk.3, 0) )
                qed
              qed
            qed
          next
            case coerce
            solve( !KD( (~k2⊕r0⊕h((~k⊕~r1⊕r0))) ) ▶₀ #vk.2 )
              case acceptreader
              by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
            next
              case initiatereader
              by contradiction /* impossible chain */
            next
              case tag1
              solve( (#vl.1, 0) ~~> (#vk.2, 0) )
                case d_0_fst
                by contradiction /* impossible chain */
              next
                case d_0_snd
                by solve( (#vr.5, 0) ~~> (#vk.2, 0) )
              qed
            qed
          qed
        next
          case c_xor_case_10
          solve( !KU( (~k2⊕~r1.1⊕h((~k⊕~r1⊕r0))) ) @ #vk.3 )
            case c_xor_case_1
            by contradiction /* cyclic */
          next
            case c_xor_case_2
            by solve( !KU( ~k2 ) @ #vk.6 )
          next
            case c_xor_case_3
            solve( !KU( (~k⊕r0) ) @ #vk.4 )
              case c_xor
              by solve( !KU( ~k ) @ #vk.7 )
            next
              case coerce
              solve( !KD( (~k⊕r0) ) ▶₀ #vk.3 )
                case acceptreader
                by solve( (#vl.1, 0) ~~> (#vk.3, 0) )
              next
                case initiatereader
                by contradiction /* impossible chain */
              next
                case tag1
                solve( (#vl.1, 0) ~~> (#vk.3, 0) )
                  case d_0_fst
                  by contradiction /* impossible chain */
                next
                  case d_0_snd
                  by solve( (#vr.5, 0) ~~> (#vk.3, 0) )
                qed
              qed
            qed
          next
            case coerce
            solve( !KD( (~k2⊕~r1.1⊕h((~k⊕~r1⊕r0))) ) ▶₀ #vk.2 )
              case acceptreader
              by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
            next
              case initiatereader
              by contradiction /* impossible chain */
            next
              case tag1
              solve( (#vl.1, 0) ~~> (#vk.2, 0) )
                case d_0_fst
                by contradiction /* impossible chain */
              next
                case d_0_snd
                by solve( (#vr.5, 0) ~~> (#vk.2, 0) )
              qed
            qed
          qed
        next
          case c_xor_case_11
          solve( !KU( (~k2⊕h((~k⊕~r1⊕r0))) ) @ #vk.3 )
            case c_xor
            by solve( !KU( ~k2 ) @ #vk.6 )
          next
            case coerce
            solve( !KD( (~k2⊕h((~k⊕~r1⊕r0))) ) ▶₀ #vk.2 )
              case acceptreader
              by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
            next
              case initiatereader
              by contradiction /* impossible chain */
            next
              case tag1
              solve( (#vl.1, 0) ~~> (#vk.2, 0) )
                case d_0_fst
                by contradiction /* impossible chain */
              next
                case d_0_snd
                by solve( (#vr.5, 0) ~~> (#vk.2, 0) )
              qed
            qed
          qed
        next
          case c_xor_case_12
          solve( !KU( (r0⊕~r1.1⊕h((~k⊕~r1⊕r0))) ) @ #vk.3 )
            case c_xor_case_1
            by contradiction /* cyclic */
          next
            case c_xor_case_2
            solve( !KU( (~k⊕~k2) ) @ #vk.4 )
              case c_xor
              by solve( !KU( ~k2 ) @ #vk.6 )
            next
              case coerce
              solve( !KD( (~k⊕~k2) ) ▶₀ #vk.3 )
                case acceptreader
                by solve( (#vl.1, 0) ~~> (#vk.3, 0) )
              next
                case initiatereader
                by contradiction /* impossible chain */
              next
                case tag1
                solve( (#vl.1, 0) ~~> (#vk.3, 0) )
                  case d_0_fst
                  by contradiction /* impossible chain */
                next
                  case d_0_snd
                  by solve( (#vr.5, 0) ~~> (#vk.3, 0) )
                qed
              qed
            qed
          next
            case c_xor_case_3
            solve( !KU( (~k⊕~k2) ) @ #vk.4 )
              case c_xor
              by solve( !KU( ~k2 ) @ #vk.7 )
            next
              case coerce
              solve( !KD( (~k⊕~k2) ) ▶₀ #vk.3 )
                case acceptreader
                by solve( (#vl.1, 0) ~~> (#vk.3, 0) )
              next
                case initiatereader
                by contradiction /* impossible chain */
              next
                case tag1
                solve( (#vl.1, 0) ~~> (#vk.3, 0) )
                  case d_0_fst
                  by contradiction /* impossible chain */
                next
                  case d_0_snd
                  by solve( (#vr.5, 0) ~~> (#vk.3, 0) )
                qed
              qed
            qed
          next
            case coerce
            solve( !KD( (r0⊕~r1.1⊕h((~k⊕~r1⊕r0))) ) ▶₀ #vk.2 )
              case acceptreader
              by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
            next
              case initiatereader
              by contradiction /* impossible chain */
            next
              case tag1
              solve( (#vl.1, 0) ~~> (#vk.2, 0) )
                case d_0_fst
                by contradiction /* impossible chain */
              next
                case d_0_snd
                by solve( (#vr.5, 0) ~~> (#vk.2, 0) )
              qed
            qed
          qed
        next
          case c_xor_case_13
          solve( !KU( (r0⊕h((~k⊕~r1⊕r0))) ) @ #vk.3 )
            case c_xor
            solve( !KU( (~k⊕~k2⊕~r1.1) ) @ #vk.4 )
              case c_xor_case_1
              by solve( !KU( ~k2 ) @ #vk.7 )
            next
              case c_xor_case_2
              by solve( !KU( ~k ) @ #vk.7 )
            next
              case c_xor_case_3
              by contradiction /* cyclic */
            next
              case coerce
              solve( !KD( (~k⊕~k2⊕~r1.1) ) ▶₀ #vk.3 )
                case acceptreader
                by solve( (#vl.1, 0) ~~> (#vk.3, 0) )
              next
                case initiatereader
                by contradiction /* impossible chain */
              next
                case tag1
                solve( (#vl.1, 0) ~~> (#vk.3, 0) )
                  case d_0_fst
                  by contradiction /* impossible chain */
                next
                  case d_0_snd
                  by solve( (#vr.5, 0) ~~> (#vk.3, 0) )
                qed
              qed
            qed
          next
            case coerce
            solve( !KD( (r0⊕h((~k⊕~r1⊕r0))) ) ▶₀ #vk.2 )
              case acceptreader
              by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
            next
              case initiatereader
              by contradiction /* impossible chain */
            next
              case tag1
              solve( (#vl.1, 0) ~~> (#vk.2, 0) )
                case d_0_fst
                by contradiction /* impossible chain */
              next
                case d_0_snd
                by solve( (#vr.5, 0) ~~> (#vk.2, 0) )
              qed
            qed
          qed
        next
          case c_xor_case_14
          solve( !KU( (~r1.1⊕h((~k⊕~r1⊕r0))) ) @ #vk.3 )
            case c_xor
            by contradiction /* cyclic */
          next
            case coerce
            solve( !KD( (~r1.1⊕h((~k⊕~r1⊕r0))) ) ▶₀ #vk.2 )
              case acceptreader
              by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
            next
              case initiatereader
              by contradiction /* impossible chain */
            next
              case tag1
              solve( (#vl.1, 0) ~~> (#vk.2, 0) )
                case d_0_fst
                by contradiction /* impossible chain */
              next
                case d_0_snd
                by solve( (#vr.5, 0) ~~> (#vk.2, 0) )
              qed
            qed
          qed
        next
          case c_xor_case_15
          solve( !KU( (~k⊕~k2⊕r0⊕~r1.1) ) @ #vk.4 )
            case c_xor_case_1
            solve( !KU( (~k⊕~k2⊕~r1.1) ) @ #vk.5 )
              case c_xor_case_1
              by solve( !KU( ~k2 ) @ #vk.7 )
            next
              case c_xor_case_2
              by solve( !KU( ~k ) @ #vk.7 )
            next
              case c_xor_case_3
              by contradiction /* cyclic */
            next
              case coerce
              solve( !KD( (~k⊕~k2⊕~r1.1) ) ▶₀ #vk.3 )
                case acceptreader
                by solve( (#vl.1, 0) ~~> (#vk.3, 0) )
              next
                case initiatereader
                by contradiction /* impossible chain */
              next
                case tag1
                solve( (#vl.1, 0) ~~> (#vk.3, 0) )
                  case d_0_fst
                  by contradiction /* impossible chain */
                next
                  case d_0_snd
                  by solve( (#vr.5, 0) ~~> (#vk.3, 0) )
                qed
              qed
            qed
          next
            case c_xor_case_2
            by solve( !KU( ~k2 ) @ #vk.6 )
          next
            case c_xor_case_3
            solve( !KU( (~k⊕~r1.1) ) @ #vk.5 )
              case c_xor
              by contradiction /* cyclic */
            next
              case coerce
              solve( !KD( (~k⊕~r1.1) ) ▶₀ #vk.3 )
                case acceptreader
                by solve( (#vl.1, 0) ~~> (#vk.3, 0) )
              next
                case initiatereader
                by contradiction /* impossible chain */
              next
                case tag1
                solve( (#vl.1, 0) ~~> (#vk.3, 0) )
                  case d_0_fst
                  by contradiction /* impossible chain */
                next
                  case d_0_snd
                  by solve( (#vr.5, 0) ~~> (#vk.3, 0) )
                qed
              qed
            qed
          next
            case c_xor_case_4
            by solve( !KU( ~k ) @ #vk.6 )
          next
            case c_xor_case_5
            solve( !KU( (~k2⊕~r1.1) ) @ #vk.5 )
              case c_xor
              by contradiction /* cyclic */
            next
              case coerce
              solve( !KD( (~k2⊕~r1.1) ) ▶₀ #vk.3 )
                case acceptreader
                by solve( (#vl.1, 0) ~~> (#vk.3, 0) )
              next
                case initiatereader
                by contradiction /* impossible chain */
              next
                case tag1
                solve( (#vl.1, 0) ~~> (#vk.3, 0) )
                  case d_0_fst
                  by contradiction /* impossible chain */
                next
                  case d_0_snd
                  by solve( (#vr.5, 0) ~~> (#vk.3, 0) )
                qed
              qed
            qed
          next
            case c_xor_case_6
            solve( !KU( (r0⊕~r1.1) ) @ #vk.5 )
              case c_xor
              by contradiction /* cyclic */
            next
              case coerce
              solve( !KD( (r0⊕~r1.1) ) ▶₀ #vk.3 )
                case acceptreader
                by solve( (#vl.1, 0) ~~> (#vk.3, 0) )
              next
                case initiatereader
                by contradiction /* impossible chain */
              next
                case tag1
                solve( (#vl.1, 0) ~~> (#vk.3, 0) )
                  case d_0_fst
                  by contradiction /* impossible chain */
                next
                  case d_0_snd
                  by solve( (#vr.5, 0) ~~> (#vk.3, 0) )
                qed
              qed
            qed
          next
            case c_xor_case_7
            by contradiction /* cyclic */
          next
            case coerce
            solve( !KD( (~k⊕~k2⊕r0⊕~r1.1) ) ▶₀ #vk.2 )
              case acceptreader
              by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
            next
              case initiatereader
              by contradiction /* impossible chain */
            next
              case tag1
              solve( (#vl.1, 0) ~~> (#vk.2, 0) )
                case d_0_fst
                by contradiction /* impossible chain */
              next
                case d_0_snd
                by solve( (#vr.5, 0) ~~> (#vk.2, 0) )
              qed
            qed
          qed
        next
          case coerce
          solve( !KD( (~k⊕~k2⊕r0⊕~r1.1⊕h((~k⊕~r1⊕r0))) ) ▶₀ #vk.1 )
            case acceptreader
            by solve( (#vl.1, 0) ~~> (#vk.1, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.1, 0) ~~> (#vk.1, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.5, 0) ~~> (#vk.1, 0) )
            qed
          qed
        qed
      next
        case split_case_3
        solve( !KU( (~k⊕~k2⊕h((~k⊕~r0⊕~r1))) ) @ #vk.2 )
          case c_xor_case_1
          by solve( !KU( ~k2 ) @ #vk.4 )
        next
          case c_xor_case_2
          by solve( !KU( ~k ) @ #vk.4 )
        next
          case c_xor_case_3
          solve( !KU( h((~k⊕~r0⊕~r1)) ) @ #vk.3 )
            case c_h
            solve( !KU( (~k⊕~k2) ) @ #vk.4 )
              case c_xor
              by solve( !KU( ~k2 ) @ #vk.6 )
            next
              case coerce
              solve( !KD( (~k⊕~k2) ) ▶₀ #vk.3 )
                case acceptreader
                by solve( (#vl.1, 0) ~~> (#vk.3, 0) )
              next
                case initiatereader
                by contradiction /* impossible chain */
              next
                case tag1
                solve( (#vl.1, 0) ~~> (#vk.3, 0) )
                  case d_0_fst
                  by contradiction /* impossible chain */
                next
                  case d_0_snd
                  by solve( (#vr.5, 0) ~~> (#vk.3, 0) )
                qed
              qed
            qed
          next
            case tag1_case_1
            by contradiction /* cyclic */
          next
            case tag1_case_2
            solve( !KU( (~k⊕~k2) ) @ #vk.4 )
              case c_xor
              by solve( !KU( ~k2 ) @ #vk.6 )
            next
              case coerce
              solve( !KD( (~k⊕~k2) ) ▶₀ #vk.3 )
                case acceptreader
                by solve( (#vl.2, 0) ~~> (#vk.3, 0) )
              next
                case initiatereader
                by contradiction /* impossible chain */
              next
                case tag1
                solve( (#vl.2, 0) ~~> (#vk.3, 0) )
                  case d_0_fst
                  by contradiction /* impossible chain */
                next
                  case d_0_snd
                  by solve( (#vr.7, 0) ~~> (#vk.3, 0) )
                qed
              qed
            qed
          qed
        next
          case coerce
          solve( !KD( (~k⊕~k2⊕h((~k⊕~r0⊕~r1))) ) ▶₀ #vk.1 )
            case acceptreader
            by solve( (#vl.1, 0) ~~> (#vk.1, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.1, 0) ~~> (#vk.1, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.5, 0) ~~> (#vk.1, 0) )
            qed
          qed
        qed
      next
        case split_case_4
        solve( !KU( (~k2⊕~r1.1) ) @ #vk.1 )
          case c_xor
          by solve( !KU( ~k2 ) @ #vk.4 )
        next
          case coerce
          solve( !KD( (~k2⊕~r1.1) ) ▶₀ #vk.1 )
            case acceptreader
            by solve( (#vl.1, 0) ~~> (#vk.1, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.1, 0) ~~> (#vk.1, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.5, 0) ~~> (#vk.1, 0) )
            qed
          qed
        qed
      next
        case split_case_5
        solve( !KU( (~k2⊕x⊕~r1.1) ) @ #vk.1 )
          case c_xor_case_1
          solve( !KU( (~k⊕x⊕h((~k⊕~k2⊕~r1⊕x⊕~r1.1))) ) @ #vk.2 )
            case c_xor_case_1
            solve( !KU( (~k2⊕~r1.1) ) @ #vk.3 )
              case c_xor
              by solve( !KU( ~k2 ) @ #vk.7 )
            next
              case coerce
              solve( !KD( (~k2⊕~r1.1) ) ▶₀ #vk.3 )
                case acceptreader
                by solve( (#vl.1, 0) ~~> (#vk.3, 0) )
              next
                case initiatereader
                by contradiction /* impossible chain */
              next
                case tag1
                solve( (#vl.1, 0) ~~> (#vk.3, 0) )
                  case d_0_fst
                  by contradiction /* impossible chain */
                next
                  case d_0_snd
                  by solve( (#vr.5, 0) ~~> (#vk.3, 0) )
                qed
              qed
            qed
          next
            case c_xor_case_2
            by solve( !KU( ~k ) @ #vk.6 )
          next
            case c_xor_case_3
            solve( !KU( (~k2⊕~r1.1) ) @ #vk.3 )
              case c_xor
              by solve( !KU( ~k2 ) @ #vk.8 )
            next
              case coerce
              solve( !KD( (~k2⊕~r1.1) ) ▶₀ #vk.3 )
                case acceptreader
                by solve( (#vl.1, 0) ~~> (#vk.3, 0) )
              next
                case initiatereader
                by contradiction /* impossible chain */
              next
                case tag1
                solve( (#vl.1, 0) ~~> (#vk.3, 0) )
                  case d_0_fst
                  by contradiction /* impossible chain */
                next
                  case d_0_snd
                  by solve( (#vr.5, 0) ~~> (#vk.3, 0) )
                qed
              qed
            qed
          next
            case coerce
            solve( !KD( (~k⊕x⊕h((~k⊕~k2⊕~r1⊕x⊕~r1.1))) ) ▶₀ #vk.2 )
              case acceptreader
              by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
            next
              case initiatereader
              by contradiction /* impossible chain */
            next
              case tag1
              solve( (#vl.1, 0) ~~> (#vk.2, 0) )
                case d_0_fst
                by contradiction /* impossible chain */
              next
                case d_0_snd
                by solve( (#vr.5, 0) ~~> (#vk.2, 0) )
              qed
            qed
          qed
        next
          case c_xor_case_2
          by solve( !KU( ~k2 ) @ #vk.4 )
        next
          case c_xor_case_3
          solve( !KU( (~k⊕x⊕h((~k⊕~k2⊕~r1⊕x⊕~r1.1))) ) @ #vk.2 )
            case c_xor_case_1
            solve( !KU( (~k2⊕x) ) @ #vk.4 )
              case c_xor
              by solve( !KU( ~k2 ) @ #vk.7 )
            next
              case coerce
              solve( !KD( (~k2⊕x) ) ▶₀ #vk.3 )
                case acceptreader
                by solve( (#vl.1, 0) ~~> (#vk.3, 0) )
              next
                case initiatereader
                by contradiction /* impossible chain */
              next
                case tag1
                solve( (#vl.1, 0) ~~> (#vk.3, 0) )
                  case d_0_fst
                  by contradiction /* impossible chain */
                next
                  case d_0_snd
                  by solve( (#vr.5, 0) ~~> (#vk.3, 0) )
                qed
              qed
            qed
          next
            case c_xor_case_2
            by solve( !KU( ~k ) @ #vk.6 )
          next
            case c_xor_case_3
            solve( !KU( (~k2⊕x) ) @ #vk.4 )
              case c_xor
              by solve( !KU( ~k2 ) @ #vk.8 )
            next
              case coerce
              solve( !KD( (~k2⊕x) ) ▶₀ #vk.3 )
                case acceptreader
                by solve( (#vl.1, 0) ~~> (#vk.3, 0) )
              next
                case initiatereader
                by contradiction /* impossible chain */
              next
                case tag1
                solve( (#vl.1, 0) ~~> (#vk.3, 0) )
                  case d_0_fst
                  by contradiction /* impossible chain */
                next
                  case d_0_snd
                  by solve( (#vr.5, 0) ~~> (#vk.3, 0) )
                qed
              qed
            qed
          next
            case coerce
            solve( !KD( (~k⊕x⊕h((~k⊕~k2⊕~r1⊕x⊕~r1.1))) ) ▶₀ #vk.2 )
              case acceptreader
              by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
            next
              case initiatereader
              by contradiction /* impossible chain */
            next
              case tag1
              solve( (#vl.1, 0) ~~> (#vk.2, 0) )
                case d_0_fst
                by contradiction /* impossible chain */
              next
                case d_0_snd
                by solve( (#vr.5, 0) ~~> (#vk.2, 0) )
              qed
            qed
          qed
        next
          case coerce
          solve( !KD( (~k2⊕x⊕~r1.1) ) ▶₀ #vk.1 )
            case acceptreader
            by solve( (#vl.1, 0) ~~> (#vk.1, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.1, 0) ~~> (#vk.1, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.5, 0) ~~> (#vk.1, 0) )
            qed
          qed
        qed
      next
        case split_case_6
        solve( !KU( (~k2⊕x) ) @ #vk.1 )
          case c_xor
          by solve( !KU( ~k2 ) @ #vk.4 )
        next
          case coerce
          solve( !KD( (~k2⊕x) ) ▶₀ #vk.1 )
            case acceptreader
            by solve( (#vl.1, 0) ~~> (#vk.1, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.1, 0) ~~> (#vk.1, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.5, 0) ~~> (#vk.1, 0) )
            qed
          qed
        qed
      next
        case split_case_7
        solve( !KU( (x⊕~r1.1) ) @ #vk.1 )
          case c_xor
          solve( !KU( (~k⊕~k2⊕x⊕h((~k⊕~r1⊕x⊕~r1.1))) ) @ #vk.2 )
            case c_xor_case_1
            solve( !KU( (~k⊕~k2⊕h((~k⊕~r1⊕x⊕~r1.1))) ) @ #vk.5 )
              case c_xor_case_1
              by solve( !KU( ~k2 ) @ #vk.7 )
            next
              case c_xor_case_2
              by solve( !KU( ~k ) @ #vk.7 )
            next
              case c_xor_case_3
              solve( !KU( h((~k⊕~r1⊕x⊕~r1.1)) ) @ #vk.6 )
                case c_h
                solve( !KU( (~k⊕~k2) ) @ #vk.7 )
                  case c_xor
                  by solve( !KU( ~k2 ) @ #vk.9 )
                next
                  case coerce
                  solve( !KD( (~k⊕~k2) ) ▶₀ #vk.5 )
                    case acceptreader
                    by solve( (#vl.1, 0) ~~> (#vk.5, 0) )
                  next
                    case initiatereader
                    by contradiction /* impossible chain */
                  next
                    case tag1
                    solve( (#vl.1, 0) ~~> (#vk.5, 0) )
                      case d_0_fst
                      by contradiction /* impossible chain */
                    next
                      case d_0_snd
                      by solve( (#vr.5, 0) ~~> (#vk.5, 0) )
                    qed
                  qed
                qed
              next
                case tag1_case_1
                by contradiction /* cyclic */
              next
                case tag1_case_2
                solve( !KU( (~k⊕~k2) ) @ #vk.7 )
                  case c_xor
                  by solve( !KU( ~k2 ) @ #vk.9 )
                next
                  case coerce
                  solve( !KD( (~k⊕~k2) ) ▶₀ #vk.5 )
                    case acceptreader
                    by solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                  next
                    case initiatereader
                    by contradiction /* impossible chain */
                  next
                    case tag1
                    solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                      case d_0_fst
                      by contradiction /* impossible chain */
                    next
                      case d_0_snd
                      by solve( (#vr.7, 0) ~~> (#vk.5, 0) )
                    qed
                  qed
                qed
              qed
            next
              case coerce
              solve( !KD( (~k⊕~k2⊕h((~k⊕~r1⊕x⊕~r1.1))) ) ▶₀ #vk.3 )
                case acceptreader
                by solve( (#vl.1, 0) ~~> (#vk.3, 0) )
              next
                case initiatereader
                by contradiction /* impossible chain */
              next
                case tag1
                solve( (#vl.1, 0) ~~> (#vk.3, 0) )
                  case d_0_fst
                  by contradiction /* impossible chain */
                next
                  case d_0_snd
                  by solve( (#vr.5, 0) ~~> (#vk.3, 0) )
                qed
              qed
            qed
          next
            case c_xor_case_2
            by solve( !KU( ~k2 ) @ #vk.6 )
          next
            case c_xor_case_3
            solve( !KU( (~k⊕h((~k⊕~r1⊕x⊕~r1.1))) ) @ #vk.5 )
              case c_xor
              by solve( !KU( ~k ) @ #vk.8 )
            next
              case coerce
              solve( !KD( (~k⊕h((~k⊕~r1⊕x⊕~r1.1))) ) ▶₀ #vk.3 )
                case acceptreader
                by solve( (#vl.1, 0) ~~> (#vk.3, 0) )
              next
                case initiatereader
                by contradiction /* impossible chain */
              next
                case tag1
                solve( (#vl.1, 0) ~~> (#vk.3, 0) )
                  case d_0_fst
                  by contradiction /* impossible chain */
                next
                  case d_0_snd
                  by solve( (#vr.5, 0) ~~> (#vk.3, 0) )
                qed
              qed
            qed
          next
            case c_xor_case_4
            by solve( !KU( ~k ) @ #vk.6 )
          next
            case c_xor_case_5
            solve( !KU( (~k2⊕h((~k⊕~r1⊕x⊕~r1.1))) ) @ #vk.5 )
              case c_xor
              by solve( !KU( ~k2 ) @ #vk.8 )
            next
              case coerce
              solve( !KD( (~k2⊕h((~k⊕~r1⊕x⊕~r1.1))) ) ▶₀ #vk.3 )
                case acceptreader
                by solve( (#vl.1, 0) ~~> (#vk.3, 0) )
              next
                case initiatereader
                by contradiction /* impossible chain */
              next
                case tag1
                solve( (#vl.1, 0) ~~> (#vk.3, 0) )
                  case d_0_fst
                  by contradiction /* impossible chain */
                next
                  case d_0_snd
                  by solve( (#vr.5, 0) ~~> (#vk.3, 0) )
                qed
              qed
            qed
          next
            case c_xor_case_6
            solve( !KU( (x⊕h((~k⊕~r1⊕x⊕~r1.1))) ) @ #vk.5 )
              case c_xor
              solve( !KU( (~k⊕~k2) ) @ #vk.6 )
                case c_xor
                by solve( !KU( ~k2 ) @ #vk.8 )
              next
                case coerce
                solve( !KD( (~k⊕~k2) ) ▶₀ #vk.4 )
                  case acceptreader
                  by solve( (#vl.1, 0) ~~> (#vk.4, 0) )
                next
                  case initiatereader
                  by contradiction /* impossible chain */
                next
                  case tag1
                  solve( (#vl.1, 0) ~~> (#vk.4, 0) )
                    case d_0_fst
                    by contradiction /* impossible chain */
                  next
                    case d_0_snd
                    by solve( (#vr.5, 0) ~~> (#vk.4, 0) )
                  qed
                qed
              qed
            next
              case coerce
              solve( !KD( (x⊕h((~k⊕~r1⊕x⊕~r1.1))) ) ▶₀ #vk.3 )
                case acceptreader
                by solve( (#vl.1, 0) ~~> (#vk.3, 0) )
              next
                case initiatereader
                by contradiction /* impossible chain */
              next
                case tag1
                solve( (#vl.1, 0) ~~> (#vk.3, 0) )
                  case d_0_fst
                  by contradiction /* impossible chain */
                next
                  case d_0_snd
                  by solve( (#vr.5, 0) ~~> (#vk.3, 0) )
                qed
              qed
            qed
          next
            case c_xor_case_7
            solve( !KU( h((~k⊕~r1⊕x⊕~r1.1)) ) @ #vk.5 )
              case c_h
              solve( !KU( (~k⊕~k2⊕x) ) @ #vk.6 )
                case c_xor_case_1
                by solve( !KU( ~k2 ) @ #vk.9 )
              next
                case c_xor_case_2
                by solve( !KU( ~k ) @ #vk.9 )
              next
                case c_xor_case_3
                solve( !KU( (~k⊕~r1⊕x⊕~r1.1) ) @ #vk.7 )
                  case c_xor_case_1
                  solve( !KU( (~k⊕~k2) ) @ #vk.8 )
                    case c_xor
                    by solve( !KU( ~k2 ) @ #vk.10 )
                  next
                    case coerce
                    solve( !KD( (~k⊕~k2) ) ▶₀ #vk.6 )
                      case acceptreader
                      by solve( (#vl.1, 0) ~~> (#vk.6, 0) )
                    next
                      case initiatereader
                      by contradiction /* impossible chain */
                    next
                      case tag1
                      solve( (#vl.1, 0) ~~> (#vk.6, 0) )
                        case d_0_fst
                        by contradiction /* impossible chain */
                      next
                        case d_0_snd
                        by solve( (#vr.5, 0) ~~> (#vk.6, 0) )
                      qed
                    qed
                  qed
                next
                  case c_xor_case_2
                  by contradiction /* cyclic */
                next
                  case c_xor_case_3
                  solve( !KU( (~k⊕~k2) ) @ #vk.8 )
                    case c_xor
                    by solve( !KU( ~k2 ) @ #vk.11 )
                  next
                    case coerce
                    solve( !KD( (~k⊕~k2) ) ▶₀ #vk.6 )
                      case acceptreader
                      by solve( (#vl.1, 0) ~~> (#vk.6, 0) )
                    next
                      case initiatereader
                      by contradiction /* impossible chain */
                    next
                      case tag1
                      solve( (#vl.1, 0) ~~> (#vk.6, 0) )
                        case d_0_fst
                        by contradiction /* impossible chain */
                      next
                        case d_0_snd
                        by solve( (#vr.5, 0) ~~> (#vk.6, 0) )
                      qed
                    qed
                  qed
                next
                  case c_xor_case_4
                  by solve( !KU( ~k ) @ #vk.10 )
                next
                  case c_xor_case_5
                  solve( !KU( (~k⊕~k2) ) @ #vk.8 )
                    case c_xor
                    by solve( !KU( ~k2 ) @ #vk.11 )
                  next
                    case coerce
                    solve( !KD( (~k⊕~k2) ) ▶₀ #vk.6 )
                      case acceptreader
                      by solve( (#vl.1, 0) ~~> (#vk.6, 0) )
                    next
                      case initiatereader
                      by contradiction /* impossible chain */
                    next
                      case tag1
                      solve( (#vl.1, 0) ~~> (#vk.6, 0) )
                        case d_0_fst
                        by contradiction /* impossible chain */
                      next
                        case d_0_snd
                        by solve( (#vr.5, 0) ~~> (#vk.6, 0) )
                      qed
                    qed
                  qed
                next
                  case c_xor_case_6
                  by contradiction /* cyclic */
                next
                  case c_xor_case_7
                  by contradiction /* cyclic */
                next
                  case coerce
                  solve( !KD( (~k⊕~r1⊕x⊕~r1.1) ) ▶₀ #vk.5 )
                    case acceptreader
                    by solve( (#vl.1, 0) ~~> (#vk.5, 0) )
                  next
                    case initiatereader
                    by contradiction /* impossible chain */
                  next
                    case tag1
                    solve( (#vl.1, 0) ~~> (#vk.5, 0) )
                      case d_0_fst
                      by contradiction /* impossible chain */
                    next
                      case d_0_snd
                      by solve( (#vr.5, 0) ~~> (#vk.5, 0) )
                    qed
                  qed
                qed
              next
                case coerce
                solve( !KD( (~k⊕~k2⊕x) ) ▶₀ #vk.4 )
                  case acceptreader
                  by solve( (#vl.1, 0) ~~> (#vk.4, 0) )
                next
                  case initiatereader
                  by contradiction /* impossible chain */
                next
                  case tag1
                  solve( (#vl.1, 0) ~~> (#vk.4, 0) )
                    case d_0_fst
                    by contradiction /* impossible chain */
                  next
                    case d_0_snd
                    by solve( (#vr.5, 0) ~~> (#vk.4, 0) )
                  qed
                qed
              qed
            next
              case tag1_case_1
              by contradiction /* cyclic */
            next
              case tag1_case_2
              solve( !KU( (~k⊕~k2⊕x) ) @ #vk.6 )
                case c_xor_case_1
                by solve( !KU( ~k2 ) @ #vk.9 )
              next
                case c_xor_case_2
                by solve( !KU( ~k ) @ #vk.9 )
              next
                case c_xor_case_3
                solve( !KU( (~k⊕~k2) ) @ #vk.8 )
                  case c_xor
                  by solve( !KU( ~k2 ) @ #vk.9 )
                next
                  case coerce
                  solve( !KD( (~k⊕~k2) ) ▶₀ #vk.5 )
                    case acceptreader
                    by solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                  next
                    case initiatereader
                    by contradiction /* impossible chain */
                  next
                    case tag1
                    solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                      case d_0_fst
                      by contradiction /* impossible chain */
                    next
                      case d_0_snd
                      by solve( (#vr.7, 0) ~~> (#vk.5, 0) )
                    qed
                  qed
                qed
              next
                case coerce
                solve( !KD( (~k⊕~k2⊕x) ) ▶₀ #vk.4 )
                  case acceptreader
                  by solve( (#vl.2, 0) ~~> (#vk.4, 0) )
                next
                  case initiatereader
                  by contradiction /* impossible chain */
                next
                  case tag1
                  solve( (#vl.2, 0) ~~> (#vk.4, 0) )
                    case d_0_fst
                    by contradiction /* impossible chain */
                  next
                    case d_0_snd
                    by solve( (#vr.7, 0) ~~> (#vk.4, 0) )
                  qed
                qed
              qed
            qed
          next
            case coerce
            solve( !KD( (~k⊕~k2⊕x⊕h((~k⊕~r1⊕x⊕~r1.1))) ) ▶₀ #vk.2 )
              case acceptreader
              by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
            next
              case initiatereader
              by contradiction /* impossible chain */
            next
              case tag1
              solve( (#vl.1, 0) ~~> (#vk.2, 0) )
                case d_0_fst
                by contradiction /* impossible chain */
              next
                case d_0_snd
                by solve( (#vr.5, 0) ~~> (#vk.2, 0) )
              qed
            qed
          qed
        next
          case coerce
          solve( !KD( (x⊕~r1.1) ) ▶₀ #vk.1 )
            case acceptreader
            by solve( (#vl.1, 0) ~~> (#vk.1, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.1, 0) ~~> (#vk.1, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.5, 0) ~~> (#vk.1, 0) )
            qed
          qed
        qed
      qed
    qed
  next
    case split_case_6
    solve( !KU( h((~k⊕~r1⊕x⊕h((~k⊕x)))) ) @ #vk )
      case c_h
      solve( !KU( (~r1⊕x) ) @ #vk.1 )
        case c_xor
        by contradiction /* cyclic */
      next
        case coerce
        solve( !KD( (~r1⊕x) ) ▶₀ #vk.1 )
          case acceptreader
          by solve( (#vl, 0) ~~> (#vk.1, 0) )
        next
          case initiatereader
          by contradiction /* impossible chain */
        next
          case tag1
          solve( (#vl, 0) ~~> (#vk.1, 0) )
            case d_0_fst
            by contradiction /* impossible chain */
          next
            case d_0_snd
            by solve( (#vr.3, 0) ~~> (#vk.1, 0) )
          qed
        qed
      qed
    next
      case tag1_case_1
      solve( !KU( (~r1⊕x) ) @ #vk.1 )
        case c_xor
        by contradiction /* cyclic */
      next
        case coerce
        solve( !KD( (~r1⊕x) ) ▶₀ #vk.1 )
          case acceptreader
          by solve( (#vl.1, 0) ~~> (#vk.1, 0) )
        next
          case initiatereader
          by contradiction /* impossible chain */
        next
          case tag1
          solve( (#vl.1, 0) ~~> (#vk.1, 0) )
            case d_0_fst
            by contradiction /* impossible chain */
          next
            case d_0_snd
            by solve( (#vr.5, 0) ~~> (#vk.1, 0) )
          qed
        qed
      qed
    next
      case tag1_case_2
      solve( !KU( (~r1⊕x) ) @ #vk.1 )
        case c_xor
        by contradiction /* cyclic */
      next
        case coerce
        solve( !KD( (~r1⊕x) ) ▶₀ #vk.1 )
          case acceptreader
          by solve( (#vl.1, 0) ~~> (#vk.1, 0) )
        next
          case initiatereader
          by contradiction /* impossible chain */
        next
          case tag1
          solve( (#vl.1, 0) ~~> (#vk.1, 0) )
            case d_0_fst
            by contradiction /* impossible chain */
          next
            case d_0_snd
            by solve( (#vr.5, 0) ~~> (#vk.1, 0) )
          qed
        qed
      qed
    qed
  next
    case split_case_7
    solve( !KU( h((~r1⊕z⊕h(z))) ) @ #vk )
      case c_h
      solve( !KU( (~k⊕~r1⊕z) ) @ #vk.1 )
        case c_xor_case_1
        by contradiction /* cyclic */
      next
        case c_xor_case_2
        by solve( !KU( ~k ) @ #vk.4 )
      next
        case c_xor_case_3
        solve( !KU( (~r1⊕z⊕h(z)) ) @ #vk.2 )
          case c_xor_case_1
          solve( !KU( (~k⊕~r1) ) @ #vk.4 )
            case c_xor
            by contradiction /* cyclic */
          next
            case coerce
            solve( !KD( (~k⊕~r1) ) ▶₀ #vk.3 )
              case acceptreader
              by solve( (#vl, 0) ~~> (#vk.3, 0) )
            next
              case initiatereader
              by contradiction /* impossible chain */
            next
              case tag1
              solve( (#vl, 0) ~~> (#vk.3, 0) )
                case d_0_fst
                by contradiction /* impossible chain */
              next
                case d_0_snd
                by solve( (#vr.3, 0) ~~> (#vk.3, 0) )
              qed
            qed
          qed
        next
          case c_xor_case_2
          solve( !KU( (~k⊕~r1) ) @ #vk.4 )
            case c_xor
            by contradiction /* cyclic */
          next
            case coerce
            solve( !KD( (~k⊕~r1) ) ▶₀ #vk.3 )
              case acceptreader
              by solve( (#vl, 0) ~~> (#vk.3, 0) )
            next
              case initiatereader
              by contradiction /* impossible chain */
            next
              case tag1
              solve( (#vl, 0) ~~> (#vk.3, 0) )
                case d_0_fst
                by contradiction /* impossible chain */
              next
                case d_0_snd
                by solve( (#vr.3, 0) ~~> (#vk.3, 0) )
              qed
            qed
          qed
        next
          case c_xor_case_3
          solve( !KU( (~k⊕~r1) ) @ #vk.4 )
            case c_xor
            by contradiction /* cyclic */
          next
            case coerce
            solve( !KD( (~k⊕~r1) ) ▶₀ #vk.3 )
              case acceptreader
              by solve( (#vl, 0) ~~> (#vk.3, 0) )
            next
              case initiatereader
              by contradiction /* impossible chain */
            next
              case tag1
              solve( (#vl, 0) ~~> (#vk.3, 0) )
                case d_0_fst
                by contradiction /* impossible chain */
              next
                case d_0_snd
                by solve( (#vr.3, 0) ~~> (#vk.3, 0) )
              qed
            qed
          qed
        next
          case coerce
          solve( !KD( (~r1⊕z⊕h(z)) ) ▶₀ #vk.2 )
            case acceptreader
            by solve( (#vl, 0) ~~> (#vk.2, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl, 0) ~~> (#vk.2, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.3, 0) ~~> (#vk.2, 0) )
            qed
          qed
        qed
      next
        case coerce
        solve( !KD( (~k⊕~r1⊕z) ) ▶₀ #vk.1 )
          case acceptreader
          by solve( (#vl, 0) ~~> (#vk.1, 0) )
        next
          case initiatereader
          by contradiction /* impossible chain */
        next
          case tag1
          solve( (#vl, 0) ~~> (#vk.1, 0) )
            case d_0_fst
            by contradiction /* impossible chain */
          next
            case d_0_snd
            by solve( (#vr.3, 0) ~~> (#vk.1, 0) )
          qed
        qed
      qed
    next
      case tag1_case_1
      solve( !KU( (~k⊕~r1⊕z) ) @ #vk.1 )
        case c_xor_case_1
        by contradiction /* cyclic */
      next
        case c_xor_case_2
        by solve( !KU( ~k ) @ #vk.4 )
      next
        case c_xor_case_3
        solve( !KU( (~k⊕~r1) ) @ #vk.4 )
          case c_xor
          by contradiction /* cyclic */
        next
          case coerce
          solve( !KD( (~k⊕~r1) ) ▶₀ #vk.2 )
            case acceptreader
            by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.1, 0) ~~> (#vk.2, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.5, 0) ~~> (#vk.2, 0) )
            qed
          qed
        qed
      next
        case coerce
        solve( !KD( (~k⊕~r1⊕z) ) ▶₀ #vk.1 )
          case acceptreader
          by solve( (#vl.1, 0) ~~> (#vk.1, 0) )
        next
          case initiatereader
          by contradiction /* impossible chain */
        next
          case tag1
          solve( (#vl.1, 0) ~~> (#vk.1, 0) )
            case d_0_fst
            by contradiction /* impossible chain */
          next
            case d_0_snd
            by solve( (#vr.5, 0) ~~> (#vk.1, 0) )
          qed
        qed
      qed
    next
      case tag1_case_2
      solve( !KU( (~k⊕~r1⊕z) ) @ #vk.1 )
        case c_xor_case_1
        by contradiction /* cyclic */
      next
        case c_xor_case_2
        by solve( !KU( ~k ) @ #vk.4 )
      next
        case c_xor_case_3
        solve( !KU( (~k⊕~r1) ) @ #vk.4 )
          case c_xor
          by contradiction /* cyclic */
        next
          case coerce
          solve( !KD( (~k⊕~r1) ) ▶₀ #vk.2 )
            case acceptreader
            by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.1, 0) ~~> (#vk.2, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.5, 0) ~~> (#vk.2, 0) )
            qed
          qed
        qed
      next
        case coerce
        solve( !KD( (~k⊕~r1⊕z) ) ▶₀ #vk.1 )
          case acceptreader
          by solve( (#vl.1, 0) ~~> (#vk.1, 0) )
        next
          case initiatereader
          by contradiction /* impossible chain */
        next
          case tag1
          solve( (#vl.1, 0) ~~> (#vk.1, 0) )
            case d_0_fst
            by contradiction /* impossible chain */
          next
            case d_0_snd
            by solve( (#vr.5, 0) ~~> (#vk.1, 0) )
          qed
        qed
      qed
    qed
  next
    case split_case_8
    solve( splitEqs(1) )
      case split
      solve( !KU( h((x⊕h((~r1⊕x)))) ) @ #vk )
        case c_h
        solve( !KU( (~k⊕x) ) @ #vk.1 )
          case c_xor
          by solve( !KU( ~k ) @ #vk.4 )
        next
          case coerce
          solve( !KD( (~k⊕x) ) ▶₀ #vk.1 )
            case acceptreader
            by solve( (#vl, 0) ~~> (#vk.1, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl, 0) ~~> (#vk.1, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.3, 0) ~~> (#vk.1, 0) )
            qed
          qed
        qed
      next
        case tag1_case_1
        solve( !KU( (~k⊕x) ) @ #vk.1 )
          case c_xor
          by solve( !KU( ~k ) @ #vk.4 )
        next
          case coerce
          solve( !KD( (~k⊕x) ) ▶₀ #vk.1 )
            case acceptreader
            by solve( (#vl.1, 0) ~~> (#vk.1, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.1, 0) ~~> (#vk.1, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.5, 0) ~~> (#vk.1, 0) )
            qed
          qed
        qed
      next
        case tag1_case_2
        solve( !KU( (~k⊕x) ) @ #vk.1 )
          case c_xor
          by solve( !KU( ~k ) @ #vk.4 )
        next
          case coerce
          solve( !KD( (~k⊕x) ) ▶₀ #vk.1 )
            case acceptreader
            by solve( (#vl.1, 0) ~~> (#vk.1, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.1, 0) ~~> (#vk.1, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.5, 0) ~~> (#vk.1, 0) )
            qed
          qed
        qed
      qed
    qed
  qed
next
  case tag1_case_2
  solve( splitEqs(0) )
    case split_case_1
    by solve( !KU( ~k ) @ #vk.1 )
  next
    case split_case_2
    by contradiction /* cyclic */
  next
    case split_case_3
    solve( !KU( h((~k⊕h((~k⊕~r1)))) ) @ #vk )
      case c_h
      solve( !KU( (~k⊕h((~k⊕~r1))) ) @ #vk.2 )
        case c_xor
        by solve( !KU( ~k ) @ #vk.4 )
      next
        case coerce
        solve( !KD( (~k⊕h((~k⊕~r1))) ) ▶₀ #vk.1 )
          case acceptreader
          by solve( (#vl, 0) ~~> (#vk.1, 0) )
        next
          case initiatereader
          by contradiction /* impossible chain */
        next
          case tag1
          solve( (#vl, 0) ~~> (#vk.1, 0) )
            case d_0_fst
            by contradiction /* impossible chain */
          next
            case d_0_snd
            by solve( (#vr.3, 0) ~~> (#vk.1, 0) )
          qed
        qed
      qed
    next
      case tag1_case_1
      solve( !KU( (x⊕~x.1) ) @ #vk.2 )
        case c_xor
        solve( !KU( ~x ) @ #vk.3 )
          case fresh
          by solve( splitEqs(3) )
        next
          case tag1_case_1
          by solve( splitEqs(3) )
        next
          case tag1_case_2
          by solve( splitEqs(3) )
        qed
      next
        case coerce
        solve( !KD( (x⊕~x.1) ) ▶₀ #vk.1 )
          case acceptreader
          by solve( (#vl.1, 0) ~~> (#vk.1, 0) )
        next
          case initiatereader
          by contradiction /* impossible chain */
        next
          case tag1
          solve( (#vl.1, 0) ~~> (#vk.1, 0) )
            case d_0_fst
            by contradiction /* impossible chain */
          next
            case d_0_snd
            by solve( (#vr.5, 0) ~~> (#vk.1, 0) )
          qed
        qed
      qed
    next
      case tag1_case_2
      solve( !KU( (~r1.1⊕h((~k⊕~r1))) ) @ #vk.2 )
        case c_xor
        by contradiction /* cyclic */
      next
        case coerce
        solve( !KD( (~r1.1⊕h((~k⊕~r1))) ) ▶₀ #vk.1 )
          case acceptreader
          by solve( (#vl.1, 0) ~~> (#vk.1, 0) )
        next
          case initiatereader
          by contradiction /* impossible chain */
        next
          case tag1
          solve( (#vl.1, 0) ~~> (#vk.1, 0) )
            case d_0_fst
            by contradiction /* impossible chain */
          next
            case d_0_snd
            by solve( (#vr.5, 0) ~~> (#vk.1, 0) )
          qed
        qed
      qed
    qed
  next
    case split_case_4
    solve( !KU( h((~r1⊕h(zero))) ) @ #vk )
      case c_h
      solve( !KU( (~k⊕~r1) ) @ #vk.1 )
        case c_xor
        by contradiction /* cyclic */
      next
        case coerce
        solve( !KD( (~k⊕~r1) ) ▶₀ #vk.1 )
          case acceptreader
          by solve( (#vl, 0) ~~> (#vk.1, 0) )
        next
          case initiatereader
          by contradiction /* impossible chain */
        next
          case tag1
          solve( (#vl, 0) ~~> (#vk.1, 0) )
            case d_0_fst
            by contradiction /* impossible chain */
          next
            case d_0_snd
            by solve( (#vr.3, 0) ~~> (#vk.1, 0) )
          qed
        qed
      qed
    next
      case tag1_case_1
      solve( !KU( (~k⊕~r1) ) @ #vk.1 )
        case c_xor
        by contradiction /* cyclic */
      next
        case coerce
        solve( !KD( (~k⊕~r1) ) ▶₀ #vk.1 )
          case acceptreader
          by solve( (#vl.1, 0) ~~> (#vk.1, 0) )
        next
          case initiatereader
          by contradiction /* impossible chain */
        next
          case tag1
          solve( (#vl.1, 0) ~~> (#vk.1, 0) )
            case d_0_fst
            by contradiction /* impossible chain */
          next
            case d_0_snd
            by solve( (#vr.5, 0) ~~> (#vk.1, 0) )
          qed
        qed
      qed
    next
      case tag1_case_2
      solve( splitEqs(3) )
        case split
        solve( !KU( (~k⊕~r1) ) @ #vk.1 )
          case c_xor
          by contradiction /* cyclic */
        next
          case coerce
          solve( !KD( (~k⊕~r1) ) ▶₀ #vk.1 )
            case acceptreader
            by solve( (#vl.1, 0) ~~> (#vk.1, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.1, 0) ~~> (#vk.1, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.5, 0) ~~> (#vk.1, 0) )
            qed
          qed
        qed
      qed
    qed
  next
    case split_case_5
    solve( !KU( h((~k⊕r0⊕h((~k⊕~r1⊕r0)))) ) @ #vk )
      case c_h
      solve( !KU( (~k⊕r0⊕h((~k⊕~r1⊕r0))) ) @ #vk.2 )
        case c_xor_case_1
        solve( !KU( (~k⊕h((~k⊕~r1⊕r0))) ) @ #vk.3 )
          case c_xor
          by solve( !KU( ~k ) @ #vk.5 )
        next
          case coerce
          solve( !KD( (~k⊕h((~k⊕~r1⊕r0))) ) ▶₀ #vk.2 )
            case acceptreader
            by solve( (#vl, 0) ~~> (#vk.2, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl, 0) ~~> (#vk.2, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.3, 0) ~~> (#vk.2, 0) )
            qed
          qed
        qed
      next
        case c_xor_case_2
        by solve( !KU( ~k ) @ #vk.4 )
      next
        case c_xor_case_3
        solve( !KU( (~k⊕r0) ) @ #vk.4 )
          case c_xor
          by solve( !KU( ~k ) @ #vk.5 )
        next
          case coerce
          solve( !KD( (~k⊕r0) ) ▶₀ #vk.2 )
            case acceptreader
            by solve( (#vl, 0) ~~> (#vk.2, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl, 0) ~~> (#vk.2, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.3, 0) ~~> (#vk.2, 0) )
            qed
          qed
        qed
      next
        case coerce
        solve( !KD( (~k⊕r0⊕h((~k⊕~r1⊕r0))) ) ▶₀ #vk.1 )
          case acceptreader
          by solve( (#vl, 0) ~~> (#vk.1, 0) )
        next
          case initiatereader
          by contradiction /* impossible chain */
        next
          case tag1
          solve( (#vl, 0) ~~> (#vk.1, 0) )
            case d_0_fst
            by contradiction /* impossible chain */
          next
            case d_0_snd
            by solve( (#vr.3, 0) ~~> (#vk.1, 0) )
          qed
        qed
      qed
    next
      case tag1_case_1
      solve( splitEqs(3) )
        case split_case_1
        by solve( !KU( ~k1 ) @ #vk.1 )
      next
        case split_case_2
        solve( !KU( (~k⊕~k1⊕r0⊕~r1.1⊕h((~k⊕~r1⊕r0))) ) @ #vk.2 )
          case c_xor_case_01
          by contradiction /* cyclic */
        next
          case c_xor_case_02
          solve( !KU( (~k⊕~k1⊕~r1.1⊕h((~k⊕~r1⊕r0))) ) @ #vk.3 )
            case c_xor_case_1
            by contradiction /* cyclic */
          next
            case c_xor_case_2
            by solve( !KU( ~k1 ) @ #vk.5 )
          next
            case c_xor_case_3
            solve( !KU( (~k⊕h((~k⊕~r1⊕r0))) ) @ #vk.4 )
              case c_xor
              by solve( !KU( ~k ) @ #vk.7 )
            next
              case coerce
              solve( !KD( (~k⊕h((~k⊕~r1⊕r0))) ) ▶₀ #vk.3 )
                case acceptreader
                by solve( (#vl.1, 0) ~~> (#vk.3, 0) )
              next
                case initiatereader
                by contradiction /* impossible chain */
              next
                case tag1
                solve( (#vl.1, 0) ~~> (#vk.3, 0) )
                  case d_0_fst
                  by contradiction /* impossible chain */
                next
                  case d_0_snd
                  by solve( (#vr.5, 0) ~~> (#vk.3, 0) )
                qed
              qed
            qed
          next
            case c_xor_case_4
            by solve( !KU( ~k ) @ #vk.5 )
          next
            case c_xor_case_5
            solve( !KU( (~k1⊕h((~k⊕~r1⊕r0))) ) @ #vk.4 )
              case c_xor
              by solve( !KU( ~k1 ) @ #vk.7 )
            next
              case coerce
              solve( !KD( (~k1⊕h((~k⊕~r1⊕r0))) ) ▶₀ #vk.3 )
                case acceptreader
                by solve( (#vl.1, 0) ~~> (#vk.3, 0) )
              next
                case initiatereader
                by contradiction /* impossible chain */
              next
                case tag1
                solve( (#vl.1, 0) ~~> (#vk.3, 0) )
                  case d_0_fst
                  by contradiction /* impossible chain */
                next
                  case d_0_snd
                  by solve( (#vr.5, 0) ~~> (#vk.3, 0) )
                qed
              qed
            qed
          next
            case c_xor_case_6
            solve( !KU( (~r1.1⊕h((~k⊕~r1⊕r0))) ) @ #vk.4 )
              case c_xor
              by contradiction /* cyclic */
            next
              case coerce
              solve( !KD( (~r1.1⊕h((~k⊕~r1⊕r0))) ) ▶₀ #vk.3 )
                case acceptreader
                by solve( (#vl.1, 0) ~~> (#vk.3, 0) )
              next
                case initiatereader
                by contradiction /* impossible chain */
              next
                case tag1
                solve( (#vl.1, 0) ~~> (#vk.3, 0) )
                  case d_0_fst
                  by contradiction /* impossible chain */
                next
                  case d_0_snd
                  by solve( (#vr.5, 0) ~~> (#vk.3, 0) )
                qed
              qed
            qed
          next
            case c_xor_case_7
            solve( !KU( (~k⊕~k1⊕~r1.1) ) @ #vk.5 )
              case c_xor_case_1
              by solve( !KU( ~k1 ) @ #vk.7 )
            next
              case c_xor_case_2
              by solve( !KU( ~k ) @ #vk.7 )
            next
              case c_xor_case_3
              by contradiction /* cyclic */
            next
              case coerce
              solve( !KD( (~k⊕~k1⊕~r1.1) ) ▶₀ #vk.3 )
                case acceptreader
                by solve( (#vl.1, 0) ~~> (#vk.3, 0) )
              next
                case initiatereader
                by contradiction /* impossible chain */
              next
                case tag1
                solve( (#vl.1, 0) ~~> (#vk.3, 0) )
                  case d_0_fst
                  by contradiction /* impossible chain */
                next
                  case d_0_snd
                  by solve( (#vr.5, 0) ~~> (#vk.3, 0) )
                qed
              qed
            qed
          next
            case coerce
            solve( !KD( (~k⊕~k1⊕~r1.1⊕h((~k⊕~r1⊕r0))) ) ▶₀ #vk.2 )
              case acceptreader
              by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
            next
              case initiatereader
              by contradiction /* impossible chain */
            next
              case tag1
              solve( (#vl.1, 0) ~~> (#vk.2, 0) )
                case d_0_fst
                by contradiction /* impossible chain */
              next
                case d_0_snd
                by solve( (#vr.5, 0) ~~> (#vk.2, 0) )
              qed
            qed
          qed
        next
          case c_xor_case_03
          solve( !KU( (~k⊕~k1⊕h((~k⊕~r1⊕r0))) ) @ #vk.3 )
            case c_xor_case_1
            by solve( !KU( ~k1 ) @ #vk.6 )
          next
            case c_xor_case_2
            by solve( !KU( ~k ) @ #vk.6 )
          next
            case c_xor_case_3
            solve( !KU( (r0⊕~r1.1) ) @ #vk.4 )
              case c_xor
              by contradiction /* cyclic */
            next
              case coerce
              solve( !KD( (r0⊕~r1.1) ) ▶₀ #vk.3 )
                case acceptreader
                by solve( (#vl.1, 0) ~~> (#vk.3, 0) )
              next
                case initiatereader
                by contradiction /* impossible chain */
              next
                case tag1
                solve( (#vl.1, 0) ~~> (#vk.3, 0) )
                  case d_0_fst
                  by contradiction /* impossible chain */
                next
                  case d_0_snd
                  by solve( (#vr.5, 0) ~~> (#vk.3, 0) )
                qed
              qed
            qed
          next
            case coerce
            solve( !KD( (~k⊕~k1⊕h((~k⊕~r1⊕r0))) ) ▶₀ #vk.2 )
              case acceptreader
              by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
            next
              case initiatereader
              by contradiction /* impossible chain */
            next
              case tag1
              solve( (#vl.1, 0) ~~> (#vk.2, 0) )
                case d_0_fst
                by contradiction /* impossible chain */
              next
                case d_0_snd
                by solve( (#vr.5, 0) ~~> (#vk.2, 0) )
              qed
            qed
          qed
        next
          case c_xor_case_04
          by solve( !KU( ~k1 ) @ #vk.4 )
        next
          case c_xor_case_05
          solve( !KU( (~k⊕r0⊕h((~k⊕~r1⊕r0))) ) @ #vk.3 )
            case c_xor_case_1
            solve( !KU( (~k1⊕~r1.1) ) @ #vk.4 )
              case c_xor
              by contradiction /* cyclic */
            next
              case coerce
              solve( !KD( (~k1⊕~r1.1) ) ▶₀ #vk.3 )
                case acceptreader
                by solve( (#vl.1, 0) ~~> (#vk.3, 0) )
              next
                case initiatereader
                by contradiction /* impossible chain */
              next
                case tag1
                solve( (#vl.1, 0) ~~> (#vk.3, 0) )
                  case d_0_fst
                  by contradiction /* impossible chain */
                next
                  case d_0_snd
                  by solve( (#vr.5, 0) ~~> (#vk.3, 0) )
                qed
              qed
            qed
          next
            case c_xor_case_2
            by solve( !KU( ~k ) @ #vk.6 )
          next
            case c_xor_case_3
            solve( !KU( (~k1⊕~r1.1) ) @ #vk.4 )
              case c_xor
              by contradiction /* cyclic */
            next
              case coerce
              solve( !KD( (~k1⊕~r1.1) ) ▶₀ #vk.3 )
                case acceptreader
                by solve( (#vl.1, 0) ~~> (#vk.3, 0) )
              next
                case initiatereader
                by contradiction /* impossible chain */
              next
                case tag1
                solve( (#vl.1, 0) ~~> (#vk.3, 0) )
                  case d_0_fst
                  by contradiction /* impossible chain */
                next
                  case d_0_snd
                  by solve( (#vr.5, 0) ~~> (#vk.3, 0) )
                qed
              qed
            qed
          next
            case coerce
            solve( !KD( (~k⊕r0⊕h((~k⊕~r1⊕r0))) ) ▶₀ #vk.2 )
              case acceptreader
              by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
            next
              case initiatereader
              by contradiction /* impossible chain */
            next
              case tag1
              solve( (#vl.1, 0) ~~> (#vk.2, 0) )
                case d_0_fst
                by contradiction /* impossible chain */
              next
                case d_0_snd
                by solve( (#vr.5, 0) ~~> (#vk.2, 0) )
              qed
            qed
          qed
        next
          case c_xor_case_06
          solve( !KU( (~k⊕~r1.1⊕h((~k⊕~r1⊕r0))) ) @ #vk.3 )
            case c_xor_case_1
            by contradiction /* cyclic */
          next
            case c_xor_case_2
            by solve( !KU( ~k ) @ #vk.6 )
          next
            case c_xor_case_3
            solve( !KU( (~k1⊕r0) ) @ #vk.4 )
              case c_xor
              by solve( !KU( ~k1 ) @ #vk.7 )
            next
              case coerce
              solve( !KD( (~k1⊕r0) ) ▶₀ #vk.3 )
                case acceptreader
                by solve( (#vl.1, 0) ~~> (#vk.3, 0) )
              next
                case initiatereader
                by contradiction /* impossible chain */
              next
                case tag1
                solve( (#vl.1, 0) ~~> (#vk.3, 0) )
                  case d_0_fst
                  by contradiction /* impossible chain */
                next
                  case d_0_snd
                  by solve( (#vr.5, 0) ~~> (#vk.3, 0) )
                qed
              qed
            qed
          next
            case coerce
            solve( !KD( (~k⊕~r1.1⊕h((~k⊕~r1⊕r0))) ) ▶₀ #vk.2 )
              case acceptreader
              by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
            next
              case initiatereader
              by contradiction /* impossible chain */
            next
              case tag1
              solve( (#vl.1, 0) ~~> (#vk.2, 0) )
                case d_0_fst
                by contradiction /* impossible chain */
              next
                case d_0_snd
                by solve( (#vr.5, 0) ~~> (#vk.2, 0) )
              qed
            qed
          qed
        next
          case c_xor_case_07
          solve( !KU( (~k⊕h((~k⊕~r1⊕r0))) ) @ #vk.3 )
            case c_xor
            by solve( !KU( ~k ) @ #vk.6 )
          next
            case coerce
            solve( !KD( (~k⊕h((~k⊕~r1⊕r0))) ) ▶₀ #vk.2 )
              case acceptreader
              by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
            next
              case initiatereader
              by contradiction /* impossible chain */
            next
              case tag1
              solve( (#vl.1, 0) ~~> (#vk.2, 0) )
                case d_0_fst
                by contradiction /* impossible chain */
              next
                case d_0_snd
                by solve( (#vr.5, 0) ~~> (#vk.2, 0) )
              qed
            qed
          qed
        next
          case c_xor_case_08
          by solve( !KU( ~k ) @ #vk.4 )
        next
          case c_xor_case_09
          solve( !KU( (~k1⊕r0⊕h((~k⊕~r1⊕r0))) ) @ #vk.3 )
            case c_xor_case_1
            solve( !KU( (~k⊕~r1.1) ) @ #vk.4 )
              case c_xor
              by contradiction /* cyclic */
            next
              case coerce
              solve( !KD( (~k⊕~r1.1) ) ▶₀ #vk.3 )
                case acceptreader
                by solve( (#vl.1, 0) ~~> (#vk.3, 0) )
              next
                case initiatereader
                by contradiction /* impossible chain */
              next
                case tag1
                solve( (#vl.1, 0) ~~> (#vk.3, 0) )
                  case d_0_fst
                  by contradiction /* impossible chain */
                next
                  case d_0_snd
                  by solve( (#vr.5, 0) ~~> (#vk.3, 0) )
                qed
              qed
            qed
          next
            case c_xor_case_2
            by solve( !KU( ~k1 ) @ #vk.6 )
          next
            case c_xor_case_3
            solve( !KU( (~k⊕~r1.1) ) @ #vk.4 )
              case c_xor
              by contradiction /* cyclic */
            next
              case coerce
              solve( !KD( (~k⊕~r1.1) ) ▶₀ #vk.3 )
                case acceptreader
                by solve( (#vl.1, 0) ~~> (#vk.3, 0) )
              next
                case initiatereader
                by contradiction /* impossible chain */
              next
                case tag1
                solve( (#vl.1, 0) ~~> (#vk.3, 0) )
                  case d_0_fst
                  by contradiction /* impossible chain */
                next
                  case d_0_snd
                  by solve( (#vr.5, 0) ~~> (#vk.3, 0) )
                qed
              qed
            qed
          next
            case coerce
            solve( !KD( (~k1⊕r0⊕h((~k⊕~r1⊕r0))) ) ▶₀ #vk.2 )
              case acceptreader
              by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
            next
              case initiatereader
              by contradiction /* impossible chain */
            next
              case tag1
              solve( (#vl.1, 0) ~~> (#vk.2, 0) )
                case d_0_fst
                by contradiction /* impossible chain */
              next
                case d_0_snd
                by solve( (#vr.5, 0) ~~> (#vk.2, 0) )
              qed
            qed
          qed
        next
          case c_xor_case_10
          solve( !KU( (~k1⊕~r1.1⊕h((~k⊕~r1⊕r0))) ) @ #vk.3 )
            case c_xor_case_1
            by contradiction /* cyclic */
          next
            case c_xor_case_2
            by solve( !KU( ~k1 ) @ #vk.6 )
          next
            case c_xor_case_3
            solve( !KU( (~k⊕r0) ) @ #vk.4 )
              case c_xor
              by solve( !KU( ~k ) @ #vk.7 )
            next
              case coerce
              solve( !KD( (~k⊕r0) ) ▶₀ #vk.3 )
                case acceptreader
                by solve( (#vl.1, 0) ~~> (#vk.3, 0) )
              next
                case initiatereader
                by contradiction /* impossible chain */
              next
                case tag1
                solve( (#vl.1, 0) ~~> (#vk.3, 0) )
                  case d_0_fst
                  by contradiction /* impossible chain */
                next
                  case d_0_snd
                  by solve( (#vr.5, 0) ~~> (#vk.3, 0) )
                qed
              qed
            qed
          next
            case coerce
            solve( !KD( (~k1⊕~r1.1⊕h((~k⊕~r1⊕r0))) ) ▶₀ #vk.2 )
              case acceptreader
              by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
            next
              case initiatereader
              by contradiction /* impossible chain */
            next
              case tag1
              solve( (#vl.1, 0) ~~> (#vk.2, 0) )
                case d_0_fst
                by contradiction /* impossible chain */
              next
                case d_0_snd
                by solve( (#vr.5, 0) ~~> (#vk.2, 0) )
              qed
            qed
          qed
        next
          case c_xor_case_11
          solve( !KU( (~k1⊕h((~k⊕~r1⊕r0))) ) @ #vk.3 )
            case c_xor
            by solve( !KU( ~k1 ) @ #vk.6 )
          next
            case coerce
            solve( !KD( (~k1⊕h((~k⊕~r1⊕r0))) ) ▶₀ #vk.2 )
              case acceptreader
              by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
            next
              case initiatereader
              by contradiction /* impossible chain */
            next
              case tag1
              solve( (#vl.1, 0) ~~> (#vk.2, 0) )
                case d_0_fst
                by contradiction /* impossible chain */
              next
                case d_0_snd
                by solve( (#vr.5, 0) ~~> (#vk.2, 0) )
              qed
            qed
          qed
        next
          case c_xor_case_12
          solve( !KU( (r0⊕~r1.1⊕h((~k⊕~r1⊕r0))) ) @ #vk.3 )
            case c_xor_case_1
            by contradiction /* cyclic */
          next
            case c_xor_case_2
            solve( !KU( (~k⊕~k1) ) @ #vk.4 )
              case c_xor
              by solve( !KU( ~k1 ) @ #vk.6 )
            next
              case coerce
              solve( !KD( (~k⊕~k1) ) ▶₀ #vk.3 )
                case acceptreader
                by solve( (#vl.1, 0) ~~> (#vk.3, 0) )
              next
                case initiatereader
                by contradiction /* impossible chain */
              next
                case tag1
                solve( (#vl.1, 0) ~~> (#vk.3, 0) )
                  case d_0_fst
                  by contradiction /* impossible chain */
                next
                  case d_0_snd
                  by solve( (#vr.5, 0) ~~> (#vk.3, 0) )
                qed
              qed
            qed
          next
            case c_xor_case_3
            solve( !KU( (~k⊕~k1) ) @ #vk.4 )
              case c_xor
              by solve( !KU( ~k1 ) @ #vk.7 )
            next
              case coerce
              solve( !KD( (~k⊕~k1) ) ▶₀ #vk.3 )
                case acceptreader
                by solve( (#vl.1, 0) ~~> (#vk.3, 0) )
              next
                case initiatereader
                by contradiction /* impossible chain */
              next
                case tag1
                solve( (#vl.1, 0) ~~> (#vk.3, 0) )
                  case d_0_fst
                  by contradiction /* impossible chain */
                next
                  case d_0_snd
                  by solve( (#vr.5, 0) ~~> (#vk.3, 0) )
                qed
              qed
            qed
          next
            case coerce
            solve( !KD( (r0⊕~r1.1⊕h((~k⊕~r1⊕r0))) ) ▶₀ #vk.2 )
              case acceptreader
              by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
            next
              case initiatereader
              by contradiction /* impossible chain */
            next
              case tag1
              solve( (#vl.1, 0) ~~> (#vk.2, 0) )
                case d_0_fst
                by contradiction /* impossible chain */
              next
                case d_0_snd
                by solve( (#vr.5, 0) ~~> (#vk.2, 0) )
              qed
            qed
          qed
        next
          case c_xor_case_13
          solve( !KU( (r0⊕h((~k⊕~r1⊕r0))) ) @ #vk.3 )
            case c_xor
            solve( !KU( (~k⊕~k1⊕~r1.1) ) @ #vk.4 )
              case c_xor_case_1
              by solve( !KU( ~k1 ) @ #vk.7 )
            next
              case c_xor_case_2
              by solve( !KU( ~k ) @ #vk.7 )
            next
              case c_xor_case_3
              by contradiction /* cyclic */
            next
              case coerce
              solve( !KD( (~k⊕~k1⊕~r1.1) ) ▶₀ #vk.3 )
                case acceptreader
                by solve( (#vl.1, 0) ~~> (#vk.3, 0) )
              next
                case initiatereader
                by contradiction /* impossible chain */
              next
                case tag1
                solve( (#vl.1, 0) ~~> (#vk.3, 0) )
                  case d_0_fst
                  by contradiction /* impossible chain */
                next
                  case d_0_snd
                  by solve( (#vr.5, 0) ~~> (#vk.3, 0) )
                qed
              qed
            qed
          next
            case coerce
            solve( !KD( (r0⊕h((~k⊕~r1⊕r0))) ) ▶₀ #vk.2 )
              case acceptreader
              by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
            next
              case initiatereader
              by contradiction /* impossible chain */
            next
              case tag1
              solve( (#vl.1, 0) ~~> (#vk.2, 0) )
                case d_0_fst
                by contradiction /* impossible chain */
              next
                case d_0_snd
                by solve( (#vr.5, 0) ~~> (#vk.2, 0) )
              qed
            qed
          qed
        next
          case c_xor_case_14
          solve( !KU( (~r1.1⊕h((~k⊕~r1⊕r0))) ) @ #vk.3 )
            case c_xor
            by contradiction /* cyclic */
          next
            case coerce
            solve( !KD( (~r1.1⊕h((~k⊕~r1⊕r0))) ) ▶₀ #vk.2 )
              case acceptreader
              by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
            next
              case initiatereader
              by contradiction /* impossible chain */
            next
              case tag1
              solve( (#vl.1, 0) ~~> (#vk.2, 0) )
                case d_0_fst
                by contradiction /* impossible chain */
              next
                case d_0_snd
                by solve( (#vr.5, 0) ~~> (#vk.2, 0) )
              qed
            qed
          qed
        next
          case c_xor_case_15
          solve( !KU( (~k⊕~k1⊕r0⊕~r1.1) ) @ #vk.4 )
            case c_xor_case_1
            solve( !KU( (~k⊕~k1⊕~r1.1) ) @ #vk.5 )
              case c_xor_case_1
              by solve( !KU( ~k1 ) @ #vk.7 )
            next
              case c_xor_case_2
              by solve( !KU( ~k ) @ #vk.7 )
            next
              case c_xor_case_3
              by contradiction /* cyclic */
            next
              case coerce
              solve( !KD( (~k⊕~k1⊕~r1.1) ) ▶₀ #vk.3 )
                case acceptreader
                by solve( (#vl.1, 0) ~~> (#vk.3, 0) )
              next
                case initiatereader
                by contradiction /* impossible chain */
              next
                case tag1
                solve( (#vl.1, 0) ~~> (#vk.3, 0) )
                  case d_0_fst
                  by contradiction /* impossible chain */
                next
                  case d_0_snd
                  by solve( (#vr.5, 0) ~~> (#vk.3, 0) )
                qed
              qed
            qed
          next
            case c_xor_case_2
            by solve( !KU( ~k1 ) @ #vk.6 )
          next
            case c_xor_case_3
            solve( !KU( (~k⊕~r1.1) ) @ #vk.5 )
              case c_xor
              by contradiction /* cyclic */
            next
              case coerce
              solve( !KD( (~k⊕~r1.1) ) ▶₀ #vk.3 )
                case acceptreader
                by solve( (#vl.1, 0) ~~> (#vk.3, 0) )
              next
                case initiatereader
                by contradiction /* impossible chain */
              next
                case tag1
                solve( (#vl.1, 0) ~~> (#vk.3, 0) )
                  case d_0_fst
                  by contradiction /* impossible chain */
                next
                  case d_0_snd
                  by solve( (#vr.5, 0) ~~> (#vk.3, 0) )
                qed
              qed
            qed
          next
            case c_xor_case_4
            by solve( !KU( ~k ) @ #vk.6 )
          next
            case c_xor_case_5
            solve( !KU( (~k1⊕~r1.1) ) @ #vk.5 )
              case c_xor
              by contradiction /* cyclic */
            next
              case coerce
              solve( !KD( (~k1⊕~r1.1) ) ▶₀ #vk.3 )
                case acceptreader
                by solve( (#vl.1, 0) ~~> (#vk.3, 0) )
              next
                case initiatereader
                by contradiction /* impossible chain */
              next
                case tag1
                solve( (#vl.1, 0) ~~> (#vk.3, 0) )
                  case d_0_fst
                  by contradiction /* impossible chain */
                next
                  case d_0_snd
                  by solve( (#vr.5, 0) ~~> (#vk.3, 0) )
                qed
              qed
            qed
          next
            case c_xor_case_6
            solve( !KU( (r0⊕~r1.1) ) @ #vk.5 )
              case c_xor
              by contradiction /* cyclic */
            next
              case coerce
              solve( !KD( (r0⊕~r1.1) ) ▶₀ #vk.3 )
                case acceptreader
                by solve( (#vl.1, 0) ~~> (#vk.3, 0) )
              next
                case initiatereader
                by contradiction /* impossible chain */
              next
                case tag1
                solve( (#vl.1, 0) ~~> (#vk.3, 0) )
                  case d_0_fst
                  by contradiction /* impossible chain */
                next
                  case d_0_snd
                  by solve( (#vr.5, 0) ~~> (#vk.3, 0) )
                qed
              qed
            qed
          next
            case c_xor_case_7
            by contradiction /* cyclic */
          next
            case coerce
            solve( !KD( (~k⊕~k1⊕r0⊕~r1.1) ) ▶₀ #vk.2 )
              case acceptreader
              by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
            next
              case initiatereader
              by contradiction /* impossible chain */
            next
              case tag1
              solve( (#vl.1, 0) ~~> (#vk.2, 0) )
                case d_0_fst
                by contradiction /* impossible chain */
              next
                case d_0_snd
                by solve( (#vr.5, 0) ~~> (#vk.2, 0) )
              qed
            qed
          qed
        next
          case coerce
          solve( !KD( (~k⊕~k1⊕r0⊕~r1.1⊕h((~k⊕~r1⊕r0))) ) ▶₀ #vk.1 )
            case acceptreader
            by solve( (#vl.1, 0) ~~> (#vk.1, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.1, 0) ~~> (#vk.1, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.5, 0) ~~> (#vk.1, 0) )
            qed
          qed
        qed
      next
        case split_case_3
        solve( !KU( (~k⊕~k1⊕h((~k⊕~r0⊕~r1))) ) @ #vk.2 )
          case c_xor_case_1
          by solve( !KU( ~k1 ) @ #vk.4 )
        next
          case c_xor_case_2
          by solve( !KU( ~k ) @ #vk.4 )
        next
          case c_xor_case_3
          solve( !KU( h((~k⊕~r0⊕~r1)) ) @ #vk.3 )
            case c_h
            solve( !KU( (~k⊕~k1) ) @ #vk.4 )
              case c_xor
              by solve( !KU( ~k1 ) @ #vk.6 )
            next
              case coerce
              solve( !KD( (~k⊕~k1) ) ▶₀ #vk.3 )
                case acceptreader
                by solve( (#vl.1, 0) ~~> (#vk.3, 0) )
              next
                case initiatereader
                by contradiction /* impossible chain */
              next
                case tag1
                solve( (#vl.1, 0) ~~> (#vk.3, 0) )
                  case d_0_fst
                  by contradiction /* impossible chain */
                next
                  case d_0_snd
                  by solve( (#vr.5, 0) ~~> (#vk.3, 0) )
                qed
              qed
            qed
          next
            case tag1_case_1
            by contradiction /* cyclic */
          next
            case tag1_case_2
            solve( !KU( (~k⊕~k1) ) @ #vk.4 )
              case c_xor
              by solve( !KU( ~k1 ) @ #vk.6 )
            next
              case coerce
              solve( !KD( (~k⊕~k1) ) ▶₀ #vk.3 )
                case acceptreader
                by solve( (#vl.2, 0) ~~> (#vk.3, 0) )
              next
                case initiatereader
                by contradiction /* impossible chain */
              next
                case tag1
                solve( (#vl.2, 0) ~~> (#vk.3, 0) )
                  case d_0_fst
                  by contradiction /* impossible chain */
                next
                  case d_0_snd
                  by solve( (#vr.7, 0) ~~> (#vk.3, 0) )
                qed
              qed
            qed
          qed
        next
          case coerce
          solve( !KD( (~k⊕~k1⊕h((~k⊕~r0⊕~r1))) ) ▶₀ #vk.1 )
            case acceptreader
            by solve( (#vl.1, 0) ~~> (#vk.1, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.1, 0) ~~> (#vk.1, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.5, 0) ~~> (#vk.1, 0) )
            qed
          qed
        qed
      next
        case split_case_4
        solve( !KU( (~k1⊕~r1.1) ) @ #vk.1 )
          case c_xor
          by solve( !KU( ~k1 ) @ #vk.4 )
        next
          case coerce
          solve( !KD( (~k1⊕~r1.1) ) ▶₀ #vk.1 )
            case acceptreader
            by solve( (#vl.1, 0) ~~> (#vk.1, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.1, 0) ~~> (#vk.1, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.5, 0) ~~> (#vk.1, 0) )
            qed
          qed
        qed
      next
        case split_case_5
        solve( !KU( (~k1⊕x⊕~r1.1) ) @ #vk.1 )
          case c_xor_case_1
          solve( !KU( (~k⊕x⊕h((~k⊕~k1⊕~r1⊕x⊕~r1.1))) ) @ #vk.2 )
            case c_xor_case_1
            solve( !KU( (~k1⊕~r1.1) ) @ #vk.3 )
              case c_xor
              by solve( !KU( ~k1 ) @ #vk.7 )
            next
              case coerce
              solve( !KD( (~k1⊕~r1.1) ) ▶₀ #vk.3 )
                case acceptreader
                by solve( (#vl.1, 0) ~~> (#vk.3, 0) )
              next
                case initiatereader
                by contradiction /* impossible chain */
              next
                case tag1
                solve( (#vl.1, 0) ~~> (#vk.3, 0) )
                  case d_0_fst
                  by contradiction /* impossible chain */
                next
                  case d_0_snd
                  by solve( (#vr.5, 0) ~~> (#vk.3, 0) )
                qed
              qed
            qed
          next
            case c_xor_case_2
            by solve( !KU( ~k ) @ #vk.6 )
          next
            case c_xor_case_3
            solve( !KU( (~k1⊕~r1.1) ) @ #vk.3 )
              case c_xor
              by solve( !KU( ~k1 ) @ #vk.8 )
            next
              case coerce
              solve( !KD( (~k1⊕~r1.1) ) ▶₀ #vk.3 )
                case acceptreader
                by solve( (#vl.1, 0) ~~> (#vk.3, 0) )
              next
                case initiatereader
                by contradiction /* impossible chain */
              next
                case tag1
                solve( (#vl.1, 0) ~~> (#vk.3, 0) )
                  case d_0_fst
                  by contradiction /* impossible chain */
                next
                  case d_0_snd
                  by solve( (#vr.5, 0) ~~> (#vk.3, 0) )
                qed
              qed
            qed
          next
            case coerce
            solve( !KD( (~k⊕x⊕h((~k⊕~k1⊕~r1⊕x⊕~r1.1))) ) ▶₀ #vk.2 )
              case acceptreader
              by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
            next
              case initiatereader
              by contradiction /* impossible chain */
            next
              case tag1
              solve( (#vl.1, 0) ~~> (#vk.2, 0) )
                case d_0_fst
                by contradiction /* impossible chain */
              next
                case d_0_snd
                by solve( (#vr.5, 0) ~~> (#vk.2, 0) )
              qed
            qed
          qed
        next
          case c_xor_case_2
          by solve( !KU( ~k1 ) @ #vk.4 )
        next
          case c_xor_case_3
          solve( !KU( (~k⊕x⊕h((~k⊕~k1⊕~r1⊕x⊕~r1.1))) ) @ #vk.2 )
            case c_xor_case_1
            solve( !KU( (~k1⊕x) ) @ #vk.4 )
              case c_xor
              by solve( !KU( ~k1 ) @ #vk.7 )
            next
              case coerce
              solve( !KD( (~k1⊕x) ) ▶₀ #vk.3 )
                case acceptreader
                by solve( (#vl.1, 0) ~~> (#vk.3, 0) )
              next
                case initiatereader
                by contradiction /* impossible chain */
              next
                case tag1
                solve( (#vl.1, 0) ~~> (#vk.3, 0) )
                  case d_0_fst
                  by contradiction /* impossible chain */
                next
                  case d_0_snd
                  by solve( (#vr.5, 0) ~~> (#vk.3, 0) )
                qed
              qed
            qed
          next
            case c_xor_case_2
            by solve( !KU( ~k ) @ #vk.6 )
          next
            case c_xor_case_3
            solve( !KU( (~k1⊕x) ) @ #vk.4 )
              case c_xor
              by solve( !KU( ~k1 ) @ #vk.8 )
            next
              case coerce
              solve( !KD( (~k1⊕x) ) ▶₀ #vk.3 )
                case acceptreader
                by solve( (#vl.1, 0) ~~> (#vk.3, 0) )
              next
                case initiatereader
                by contradiction /* impossible chain */
              next
                case tag1
                solve( (#vl.1, 0) ~~> (#vk.3, 0) )
                  case d_0_fst
                  by contradiction /* impossible chain */
                next
                  case d_0_snd
                  by solve( (#vr.5, 0) ~~> (#vk.3, 0) )
                qed
              qed
            qed
          next
            case coerce
            solve( !KD( (~k⊕x⊕h((~k⊕~k1⊕~r1⊕x⊕~r1.1))) ) ▶₀ #vk.2 )
              case acceptreader
              by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
            next
              case initiatereader
              by contradiction /* impossible chain */
            next
              case tag1
              solve( (#vl.1, 0) ~~> (#vk.2, 0) )
                case d_0_fst
                by contradiction /* impossible chain */
              next
                case d_0_snd
                by solve( (#vr.5, 0) ~~> (#vk.2, 0) )
              qed
            qed
          qed
        next
          case coerce
          solve( !KD( (~k1⊕x⊕~r1.1) ) ▶₀ #vk.1 )
            case acceptreader
            by solve( (#vl.1, 0) ~~> (#vk.1, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.1, 0) ~~> (#vk.1, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.5, 0) ~~> (#vk.1, 0) )
            qed
          qed
        qed
      next
        case split_case_6
        solve( !KU( (~k1⊕x) ) @ #vk.1 )
          case c_xor
          by solve( !KU( ~k1 ) @ #vk.4 )
        next
          case coerce
          solve( !KD( (~k1⊕x) ) ▶₀ #vk.1 )
            case acceptreader
            by solve( (#vl.1, 0) ~~> (#vk.1, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.1, 0) ~~> (#vk.1, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.5, 0) ~~> (#vk.1, 0) )
            qed
          qed
        qed
      next
        case split_case_7
        solve( !KU( (x⊕~r1.1) ) @ #vk.1 )
          case c_xor
          solve( !KU( (~k⊕~k1⊕x⊕h((~k⊕~r1⊕x⊕~r1.1))) ) @ #vk.2 )
            case c_xor_case_1
            solve( !KU( (~k⊕~k1⊕h((~k⊕~r1⊕x⊕~r1.1))) ) @ #vk.5 )
              case c_xor_case_1
              by solve( !KU( ~k1 ) @ #vk.7 )
            next
              case c_xor_case_2
              by solve( !KU( ~k ) @ #vk.7 )
            next
              case c_xor_case_3
              solve( !KU( h((~k⊕~r1⊕x⊕~r1.1)) ) @ #vk.6 )
                case c_h
                solve( !KU( (~k⊕~k1) ) @ #vk.7 )
                  case c_xor
                  by solve( !KU( ~k1 ) @ #vk.9 )
                next
                  case coerce
                  solve( !KD( (~k⊕~k1) ) ▶₀ #vk.5 )
                    case acceptreader
                    by solve( (#vl.1, 0) ~~> (#vk.5, 0) )
                  next
                    case initiatereader
                    by contradiction /* impossible chain */
                  next
                    case tag1
                    solve( (#vl.1, 0) ~~> (#vk.5, 0) )
                      case d_0_fst
                      by contradiction /* impossible chain */
                    next
                      case d_0_snd
                      by solve( (#vr.5, 0) ~~> (#vk.5, 0) )
                    qed
                  qed
                qed
              next
                case tag1_case_1
                by contradiction /* cyclic */
              next
                case tag1_case_2
                solve( !KU( (~k⊕~k1) ) @ #vk.7 )
                  case c_xor
                  by solve( !KU( ~k1 ) @ #vk.9 )
                next
                  case coerce
                  solve( !KD( (~k⊕~k1) ) ▶₀ #vk.5 )
                    case acceptreader
                    by solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                  next
                    case initiatereader
                    by contradiction /* impossible chain */
                  next
                    case tag1
                    solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                      case d_0_fst
                      by contradiction /* impossible chain */
                    next
                      case d_0_snd
                      by solve( (#vr.7, 0) ~~> (#vk.5, 0) )
                    qed
                  qed
                qed
              qed
            next
              case coerce
              solve( !KD( (~k⊕~k1⊕h((~k⊕~r1⊕x⊕~r1.1))) ) ▶₀ #vk.3 )
                case acceptreader
                by solve( (#vl.1, 0) ~~> (#vk.3, 0) )
              next
                case initiatereader
                by contradiction /* impossible chain */
              next
                case tag1
                solve( (#vl.1, 0) ~~> (#vk.3, 0) )
                  case d_0_fst
                  by contradiction /* impossible chain */
                next
                  case d_0_snd
                  by solve( (#vr.5, 0) ~~> (#vk.3, 0) )
                qed
              qed
            qed
          next
            case c_xor_case_2
            by solve( !KU( ~k1 ) @ #vk.6 )
          next
            case c_xor_case_3
            solve( !KU( (~k⊕h((~k⊕~r1⊕x⊕~r1.1))) ) @ #vk.5 )
              case c_xor
              by solve( !KU( ~k ) @ #vk.8 )
            next
              case coerce
              solve( !KD( (~k⊕h((~k⊕~r1⊕x⊕~r1.1))) ) ▶₀ #vk.3 )
                case acceptreader
                by solve( (#vl.1, 0) ~~> (#vk.3, 0) )
              next
                case initiatereader
                by contradiction /* impossible chain */
              next
                case tag1
                solve( (#vl.1, 0) ~~> (#vk.3, 0) )
                  case d_0_fst
                  by contradiction /* impossible chain */
                next
                  case d_0_snd
                  by solve( (#vr.5, 0) ~~> (#vk.3, 0) )
                qed
              qed
            qed
          next
            case c_xor_case_4
            by solve( !KU( ~k ) @ #vk.6 )
          next
            case c_xor_case_5
            solve( !KU( (~k1⊕h((~k⊕~r1⊕x⊕~r1.1))) ) @ #vk.5 )
              case c_xor
              by solve( !KU( ~k1 ) @ #vk.8 )
            next
              case coerce
              solve( !KD( (~k1⊕h((~k⊕~r1⊕x⊕~r1.1))) ) ▶₀ #vk.3 )
                case acceptreader
                by solve( (#vl.1, 0) ~~> (#vk.3, 0) )
              next
                case initiatereader
                by contradiction /* impossible chain */
              next
                case tag1
                solve( (#vl.1, 0) ~~> (#vk.3, 0) )
                  case d_0_fst
                  by contradiction /* impossible chain */
                next
                  case d_0_snd
                  by solve( (#vr.5, 0) ~~> (#vk.3, 0) )
                qed
              qed
            qed
          next
            case c_xor_case_6
            solve( !KU( (x⊕h((~k⊕~r1⊕x⊕~r1.1))) ) @ #vk.5 )
              case c_xor
              solve( !KU( (~k⊕~k1) ) @ #vk.6 )
                case c_xor
                by solve( !KU( ~k1 ) @ #vk.8 )
              next
                case coerce
                solve( !KD( (~k⊕~k1) ) ▶₀ #vk.4 )
                  case acceptreader
                  by solve( (#vl.1, 0) ~~> (#vk.4, 0) )
                next
                  case initiatereader
                  by contradiction /* impossible chain */
                next
                  case tag1
                  solve( (#vl.1, 0) ~~> (#vk.4, 0) )
                    case d_0_fst
                    by contradiction /* impossible chain */
                  next
                    case d_0_snd
                    by solve( (#vr.5, 0) ~~> (#vk.4, 0) )
                  qed
                qed
              qed
            next
              case coerce
              solve( !KD( (x⊕h((~k⊕~r1⊕x⊕~r1.1))) ) ▶₀ #vk.3 )
                case acceptreader
                by solve( (#vl.1, 0) ~~> (#vk.3, 0) )
              next
                case initiatereader
                by contradiction /* impossible chain */
              next
                case tag1
                solve( (#vl.1, 0) ~~> (#vk.3, 0) )
                  case d_0_fst
                  by contradiction /* impossible chain */
                next
                  case d_0_snd
                  by solve( (#vr.5, 0) ~~> (#vk.3, 0) )
                qed
              qed
            qed
          next
            case c_xor_case_7
            solve( !KU( h((~k⊕~r1⊕x⊕~r1.1)) ) @ #vk.5 )
              case c_h
              solve( !KU( (~k⊕~k1⊕x) ) @ #vk.6 )
                case c_xor_case_1
                by solve( !KU( ~k1 ) @ #vk.9 )
              next
                case c_xor_case_2
                by solve( !KU( ~k ) @ #vk.9 )
              next
                case c_xor_case_3
                solve( !KU( (~k⊕~r1⊕x⊕~r1.1) ) @ #vk.7 )
                  case c_xor_case_1
                  solve( !KU( (~k⊕~k1) ) @ #vk.8 )
                    case c_xor
                    by solve( !KU( ~k1 ) @ #vk.10 )
                  next
                    case coerce
                    solve( !KD( (~k⊕~k1) ) ▶₀ #vk.6 )
                      case acceptreader
                      by solve( (#vl.1, 0) ~~> (#vk.6, 0) )
                    next
                      case initiatereader
                      by contradiction /* impossible chain */
                    next
                      case tag1
                      solve( (#vl.1, 0) ~~> (#vk.6, 0) )
                        case d_0_fst
                        by contradiction /* impossible chain */
                      next
                        case d_0_snd
                        by solve( (#vr.5, 0) ~~> (#vk.6, 0) )
                      qed
                    qed
                  qed
                next
                  case c_xor_case_2
                  by contradiction /* cyclic */
                next
                  case c_xor_case_3
                  solve( !KU( (~k⊕~k1) ) @ #vk.8 )
                    case c_xor
                    by solve( !KU( ~k1 ) @ #vk.11 )
                  next
                    case coerce
                    solve( !KD( (~k⊕~k1) ) ▶₀ #vk.6 )
                      case acceptreader
                      by solve( (#vl.1, 0) ~~> (#vk.6, 0) )
                    next
                      case initiatereader
                      by contradiction /* impossible chain */
                    next
                      case tag1
                      solve( (#vl.1, 0) ~~> (#vk.6, 0) )
                        case d_0_fst
                        by contradiction /* impossible chain */
                      next
                        case d_0_snd
                        by solve( (#vr.5, 0) ~~> (#vk.6, 0) )
                      qed
                    qed
                  qed
                next
                  case c_xor_case_4
                  by solve( !KU( ~k ) @ #vk.10 )
                next
                  case c_xor_case_5
                  solve( !KU( (~k⊕~k1) ) @ #vk.8 )
                    case c_xor
                    by solve( !KU( ~k1 ) @ #vk.11 )
                  next
                    case coerce
                    solve( !KD( (~k⊕~k1) ) ▶₀ #vk.6 )
                      case acceptreader
                      by solve( (#vl.1, 0) ~~> (#vk.6, 0) )
                    next
                      case initiatereader
                      by contradiction /* impossible chain */
                    next
                      case tag1
                      solve( (#vl.1, 0) ~~> (#vk.6, 0) )
                        case d_0_fst
                        by contradiction /* impossible chain */
                      next
                        case d_0_snd
                        by solve( (#vr.5, 0) ~~> (#vk.6, 0) )
                      qed
                    qed
                  qed
                next
                  case c_xor_case_6
                  by contradiction /* cyclic */
                next
                  case c_xor_case_7
                  by contradiction /* cyclic */
                next
                  case coerce
                  solve( !KD( (~k⊕~r1⊕x⊕~r1.1) ) ▶₀ #vk.5 )
                    case acceptreader
                    by solve( (#vl.1, 0) ~~> (#vk.5, 0) )
                  next
                    case initiatereader
                    by contradiction /* impossible chain */
                  next
                    case tag1
                    solve( (#vl.1, 0) ~~> (#vk.5, 0) )
                      case d_0_fst
                      by contradiction /* impossible chain */
                    next
                      case d_0_snd
                      by solve( (#vr.5, 0) ~~> (#vk.5, 0) )
                    qed
                  qed
                qed
              next
                case coerce
                solve( !KD( (~k⊕~k1⊕x) ) ▶₀ #vk.4 )
                  case acceptreader
                  by solve( (#vl.1, 0) ~~> (#vk.4, 0) )
                next
                  case initiatereader
                  by contradiction /* impossible chain */
                next
                  case tag1
                  solve( (#vl.1, 0) ~~> (#vk.4, 0) )
                    case d_0_fst
                    by contradiction /* impossible chain */
                  next
                    case d_0_snd
                    by solve( (#vr.5, 0) ~~> (#vk.4, 0) )
                  qed
                qed
              qed
            next
              case tag1_case_1
              by contradiction /* cyclic */
            next
              case tag1_case_2
              solve( !KU( (~k⊕~k1⊕x) ) @ #vk.6 )
                case c_xor_case_1
                by solve( !KU( ~k1 ) @ #vk.9 )
              next
                case c_xor_case_2
                by solve( !KU( ~k ) @ #vk.9 )
              next
                case c_xor_case_3
                solve( !KU( (~k⊕~k1) ) @ #vk.8 )
                  case c_xor
                  by solve( !KU( ~k1 ) @ #vk.9 )
                next
                  case coerce
                  solve( !KD( (~k⊕~k1) ) ▶₀ #vk.5 )
                    case acceptreader
                    by solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                  next
                    case initiatereader
                    by contradiction /* impossible chain */
                  next
                    case tag1
                    solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                      case d_0_fst
                      by contradiction /* impossible chain */
                    next
                      case d_0_snd
                      by solve( (#vr.7, 0) ~~> (#vk.5, 0) )
                    qed
                  qed
                qed
              next
                case coerce
                solve( !KD( (~k⊕~k1⊕x) ) ▶₀ #vk.4 )
                  case acceptreader
                  by solve( (#vl.2, 0) ~~> (#vk.4, 0) )
                next
                  case initiatereader
                  by contradiction /* impossible chain */
                next
                  case tag1
                  solve( (#vl.2, 0) ~~> (#vk.4, 0) )
                    case d_0_fst
                    by contradiction /* impossible chain */
                  next
                    case d_0_snd
                    by solve( (#vr.7, 0) ~~> (#vk.4, 0) )
                  qed
                qed
              qed
            qed
          next
            case coerce
            solve( !KD( (~k⊕~k1⊕x⊕h((~k⊕~r1⊕x⊕~r1.1))) ) ▶₀ #vk.2 )
              case acceptreader
              by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
            next
              case initiatereader
              by contradiction /* impossible chain */
            next
              case tag1
              solve( (#vl.1, 0) ~~> (#vk.2, 0) )
                case d_0_fst
                by contradiction /* impossible chain */
              next
                case d_0_snd
                by solve( (#vr.5, 0) ~~> (#vk.2, 0) )
              qed
            qed
          qed
        next
          case coerce
          solve( !KD( (x⊕~r1.1) ) ▶₀ #vk.1 )
            case acceptreader
            by solve( (#vl.1, 0) ~~> (#vk.1, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.1, 0) ~~> (#vk.1, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.5, 0) ~~> (#vk.1, 0) )
            qed
          qed
        qed
      qed
    next
      case tag1_case_2
      solve( splitEqs(3) )
        case split_case_1
        solve( !KU( (r0⊕~r1.1⊕h((~k⊕~r1⊕r0))) ) @ #vk.2 )
          case c_xor_case_1
          by contradiction /* cyclic */
        next
          case c_xor_case_2
          solve( !KU( (~r1.1⊕h((~k⊕~r1⊕r0))) ) @ #vk.3 )
            case c_xor
            by contradiction /* cyclic */
          next
            case coerce
            solve( !KD( (~r1.1⊕h((~k⊕~r1⊕r0))) ) ▶₀ #vk.2 )
              case acceptreader
              by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
            next
              case initiatereader
              by contradiction /* impossible chain */
            next
              case tag1
              solve( (#vl.1, 0) ~~> (#vk.2, 0) )
                case d_0_fst
                by contradiction /* impossible chain */
              next
                case d_0_snd
                by solve( (#vr.5, 0) ~~> (#vk.2, 0) )
              qed
            qed
          qed
        next
          case c_xor_case_3
          solve( !KU( (r0⊕~r1.1) ) @ #vk.4 )
            case c_xor
            by contradiction /* cyclic */
          next
            case coerce
            solve( !KD( (r0⊕~r1.1) ) ▶₀ #vk.2 )
              case acceptreader
              by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
            next
              case initiatereader
              by contradiction /* impossible chain */
            next
              case tag1
              solve( (#vl.1, 0) ~~> (#vk.2, 0) )
                case d_0_fst
                by contradiction /* impossible chain */
              next
                case d_0_snd
                by solve( (#vr.5, 0) ~~> (#vk.2, 0) )
              qed
            qed
          qed
        next
          case coerce
          solve( !KD( (r0⊕~r1.1⊕h((~k⊕~r1⊕r0))) ) ▶₀ #vk.1 )
            case acceptreader
            by solve( (#vl.1, 0) ~~> (#vk.1, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.1, 0) ~~> (#vk.1, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.5, 0) ~~> (#vk.1, 0) )
            qed
          qed
        qed
      next
        case split_case_2
        solve( !KU( h((~k⊕~r0⊕~r1)) ) @ #vk.2 )
          case c_h
          solve( !KU( (~k⊕~r0⊕~r1) ) @ #vk.3 )
            case c_xor_case_1
            by contradiction /* cyclic */
          next
            case c_xor_case_2
            by solve( !KU( ~k ) @ #vk.5 )
          next
            case c_xor_case_3
            by contradiction /* cyclic */
          next
            case coerce
            solve( !KD( (~k⊕~r0⊕~r1) ) ▶₀ #vk.2 )
              case acceptreader
              by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
            next
              case initiatereader
              by contradiction /* impossible chain */
            next
              case tag1
              solve( (#vl.1, 0) ~~> (#vk.2, 0) )
                case d_0_fst
                by contradiction /* impossible chain */
              next
                case d_0_snd
                by solve( (#vr.5, 0) ~~> (#vk.2, 0) )
              qed
            qed
          qed
        next
          case tag1_case_1
          solve( splitEqs(5) )
            case split
            solve( !KU( (~k⊕~k1⊕~r0⊕~r1⊕~r1.1) ) @ #vk.3 )
              case c_xor_case_01
              by contradiction /* cyclic */
            next
              case c_xor_case_02
              by contradiction /* cyclic */
            next
              case c_xor_case_03
              solve( !KU( (~k⊕~k1⊕~r1.1) ) @ #vk.4 )
                case c_xor_case_1
                by solve( !KU( ~k1 ) @ #vk.7 )
              next
                case c_xor_case_2
                by solve( !KU( ~k ) @ #vk.7 )
              next
                case c_xor_case_3
                by contradiction /* cyclic */
              next
                case coerce
                solve( !KD( (~k⊕~k1⊕~r1.1) ) ▶₀ #vk.3 )
                  case acceptreader
                  by solve( (#vl.2, 0) ~~> (#vk.3, 0) )
                next
                  case initiatereader
                  by contradiction /* impossible chain */
                next
                  case tag1
                  solve( (#vl.2, 0) ~~> (#vk.3, 0) )
                    case d_0_fst
                    by contradiction /* impossible chain */
                  next
                    case d_0_snd
                    by solve( (#vr.7, 0) ~~> (#vk.3, 0) )
                  qed
                qed
              qed
            next
              case c_xor_case_04
              by solve( !KU( ~k1 ) @ #vk.5 )
            next
              case c_xor_case_05
              solve( !KU( (~k⊕~r0⊕~r1.1) ) @ #vk.4 )
                case c_xor_case_1
                by contradiction /* cyclic */
              next
                case c_xor_case_2
                by solve( !KU( ~k ) @ #vk.7 )
              next
                case c_xor_case_3
                by contradiction /* cyclic */
              next
                case coerce
                solve( !KD( (~k⊕~r0⊕~r1.1) ) ▶₀ #vk.3 )
                  case acceptreader
                  by solve( (#vl.2, 0) ~~> (#vk.3, 0) )
                next
                  case initiatereader
                  by contradiction /* impossible chain */
                next
                  case tag1
                  solve( (#vl.2, 0) ~~> (#vk.3, 0) )
                    case d_0_fst
                    by contradiction /* impossible chain */
                  next
                    case d_0_snd
                    by solve( (#vr.7, 0) ~~> (#vk.3, 0) )
                  qed
                qed
              qed
            next
              case c_xor_case_06
              solve( !KU( (~k⊕~r1⊕~r1.1) ) @ #vk.4 )
                case c_xor_case_1
                by contradiction /* cyclic */
              next
                case c_xor_case_2
                by solve( !KU( ~k ) @ #vk.7 )
              next
                case c_xor_case_3
                by contradiction /* cyclic */
              next
                case coerce
                solve( !KD( (~k⊕~r1⊕~r1.1) ) ▶₀ #vk.3 )
                  case acceptreader
                  by solve( (#vl.2, 0) ~~> (#vk.3, 0) )
                next
                  case initiatereader
                  by contradiction /* impossible chain */
                next
                  case tag1
                  solve( (#vl.2, 0) ~~> (#vk.3, 0) )
                    case d_0_fst
                    by contradiction /* impossible chain */
                  next
                    case d_0_snd
                    by solve( (#vr.7, 0) ~~> (#vk.3, 0) )
                  qed
                qed
              qed
            next
              case c_xor_case_07
              solve( !KU( (~k⊕~r1.1) ) @ #vk.4 )
                case c_xor
                by contradiction /* cyclic */
              next
                case coerce
                solve( !KD( (~k⊕~r1.1) ) ▶₀ #vk.3 )
                  case acceptreader
                  by solve( (#vl.2, 0) ~~> (#vk.3, 0) )
                next
                  case initiatereader
                  by contradiction /* impossible chain */
                next
                  case tag1
                  solve( (#vl.2, 0) ~~> (#vk.3, 0) )
                    case d_0_fst
                    by contradiction /* impossible chain */
                  next
                    case d_0_snd
                    by solve( (#vr.7, 0) ~~> (#vk.3, 0) )
                  qed
                qed
              qed
            next
              case c_xor_case_08
              by solve( !KU( ~k ) @ #vk.5 )
            next
              case c_xor_case_09
              solve( !KU( (~k1⊕~r0⊕~r1.1) ) @ #vk.4 )
                case c_xor_case_1
                by contradiction /* cyclic */
              next
                case c_xor_case_2
                by solve( !KU( ~k1 ) @ #vk.7 )
              next
                case c_xor_case_3
                by contradiction /* cyclic */
              next
                case coerce
                solve( !KD( (~k1⊕~r0⊕~r1.1) ) ▶₀ #vk.3 )
                  case acceptreader
                  by solve( (#vl.2, 0) ~~> (#vk.3, 0) )
                next
                  case initiatereader
                  by contradiction /* impossible chain */
                next
                  case tag1
                  solve( (#vl.2, 0) ~~> (#vk.3, 0) )
                    case d_0_fst
                    by contradiction /* impossible chain */
                  next
                    case d_0_snd
                    by solve( (#vr.7, 0) ~~> (#vk.3, 0) )
                  qed
                qed
              qed
            next
              case c_xor_case_10
              solve( !KU( (~k1⊕~r1⊕~r1.1) ) @ #vk.4 )
                case c_xor_case_1
                by contradiction /* cyclic */
              next
                case c_xor_case_2
                by solve( !KU( ~k1 ) @ #vk.7 )
              next
                case c_xor_case_3
                by contradiction /* cyclic */
              next
                case coerce
                solve( !KD( (~k1⊕~r1⊕~r1.1) ) ▶₀ #vk.3 )
                  case acceptreader
                  by solve( (#vl.2, 0) ~~> (#vk.3, 0) )
                next
                  case initiatereader
                  by contradiction /* impossible chain */
                next
                  case tag1
                  solve( (#vl.2, 0) ~~> (#vk.3, 0) )
                    case d_0_fst
                    by contradiction /* impossible chain */
                  next
                    case d_0_snd
                    by solve( (#vr.7, 0) ~~> (#vk.3, 0) )
                  qed
                qed
              qed
            next
              case c_xor_case_11
              solve( !KU( (~k1⊕~r1.1) ) @ #vk.4 )
                case c_xor
                by contradiction /* cyclic */
              next
                case coerce
                solve( !KD( (~k1⊕~r1.1) ) ▶₀ #vk.3 )
                  case acceptreader
                  by solve( (#vl.2, 0) ~~> (#vk.3, 0) )
                next
                  case initiatereader
                  by contradiction /* impossible chain */
                next
                  case tag1
                  solve( (#vl.2, 0) ~~> (#vk.3, 0) )
                    case d_0_fst
                    by contradiction /* impossible chain */
                  next
                    case d_0_snd
                    by solve( (#vr.7, 0) ~~> (#vk.3, 0) )
                  qed
                qed
              qed
            next
              case c_xor_case_12
              solve( !KU( (~r0⊕~r1⊕~r1.1) ) @ #vk.4 )
                case c_xor_case_1
                by contradiction /* cyclic */
              next
                case c_xor_case_2
                by contradiction /* cyclic */
              next
                case c_xor_case_3
                by contradiction /* cyclic */
              next
                case coerce
                solve( !KD( (~r0⊕~r1⊕~r1.1) ) ▶₀ #vk.3 )
                  case acceptreader
                  by solve( (#vl.2, 0) ~~> (#vk.3, 0) )
                next
                  case initiatereader
                  by contradiction /* impossible chain */
                next
                  case tag1
                  solve( (#vl.2, 0) ~~> (#vk.3, 0) )
                    case d_0_fst
                    by contradiction /* impossible chain */
                  next
                    case d_0_snd
                    by solve( (#vr.7, 0) ~~> (#vk.3, 0) )
                  qed
                qed
              qed
            next
              case c_xor_case_13
              solve( !KU( (~r0⊕~r1.1) ) @ #vk.4 )
                case c_xor
                by contradiction /* cyclic */
              next
                case coerce
                solve( !KD( (~r0⊕~r1.1) ) ▶₀ #vk.3 )
                  case acceptreader
                  by solve( (#vl.2, 0) ~~> (#vk.3, 0) )
                next
                  case initiatereader
                  by contradiction /* impossible chain */
                next
                  case tag1
                  solve( (#vl.2, 0) ~~> (#vk.3, 0) )
                    case d_0_fst
                    by contradiction /* impossible chain */
                  next
                    case d_0_snd
                    by solve( (#vr.7, 0) ~~> (#vk.3, 0) )
                  qed
                qed
              qed
            next
              case c_xor_case_14
              solve( !KU( (~r1⊕~r1.1) ) @ #vk.4 )
                case c_xor
                by contradiction /* cyclic */
              next
                case coerce
                solve( !KD( (~r1⊕~r1.1) ) ▶₀ #vk.3 )
                  case acceptreader
                  by solve( (#vl.2, 0) ~~> (#vk.3, 0) )
                next
                  case initiatereader
                  by contradiction /* impossible chain */
                next
                  case tag1
                  solve( (#vl.2, 0) ~~> (#vk.3, 0) )
                    case d_0_fst
                    by contradiction /* impossible chain */
                  next
                    case d_0_snd
                    by solve( (#vr.7, 0) ~~> (#vk.3, 0) )
                  qed
                qed
              qed
            next
              case c_xor_case_15
              by contradiction /* cyclic */
            next
              case coerce
              solve( !KD( (~k⊕~k1⊕~r0⊕~r1⊕~r1.1) ) ▶₀ #vk.2 )
                case acceptreader
                by solve( (#vl.2, 0) ~~> (#vk.2, 0) )
              next
                case initiatereader
                by contradiction /* impossible chain */
              next
                case tag1
                solve( (#vl.2, 0) ~~> (#vk.2, 0) )
                  case d_0_fst
                  by contradiction /* impossible chain */
                next
                  case d_0_snd
                  by solve( (#vr.7, 0) ~~> (#vk.2, 0) )
                qed
              qed
            qed
          qed
        next
          case tag1_case_2
          by contradiction /* cyclic */
        qed
      next
        case split_case_3
        solve( !KU( (x⊕~r1.1) ) @ #vk.1 )
          case c_xor
          solve( !KU( (x⊕h((~k⊕~r1⊕x⊕~r1.1))) ) @ #vk.2 )
            case c_xor
            solve( !KU( h((~k⊕~r1⊕x⊕~r1.1)) ) @ #vk.5 )
              case c_h
              solve( !KU( (~k⊕~r1⊕x⊕~r1.1) ) @ #vk.6 )
                case c_xor_case_1
                solve( !KU( (~k⊕~r1⊕~r1.1) ) @ #vk.7 )
                  case c_xor_case_1
                  by contradiction /* cyclic */
                next
                  case c_xor_case_2
                  by solve( !KU( ~k ) @ #vk.9 )
                next
                  case c_xor_case_3
                  by contradiction /* cyclic */
                next
                  case coerce
                  solve( !KD( (~k⊕~r1⊕~r1.1) ) ▶₀ #vk.5 )
                    case acceptreader
                    by solve( (#vl.1, 0) ~~> (#vk.5, 0) )
                  next
                    case initiatereader
                    by contradiction /* impossible chain */
                  next
                    case tag1
                    solve( (#vl.1, 0) ~~> (#vk.5, 0) )
                      case d_0_fst
                      by contradiction /* impossible chain */
                    next
                      case d_0_snd
                      by solve( (#vr.5, 0) ~~> (#vk.5, 0) )
                    qed
                  qed
                qed
              next
                case c_xor_case_2
                by contradiction /* cyclic */
              next
                case c_xor_case_3
                solve( !KU( (~k⊕~r1.1) ) @ #vk.7 )
                  case c_xor
                  by contradiction /* cyclic */
                next
                  case coerce
                  solve( !KD( (~k⊕~r1.1) ) ▶₀ #vk.5 )
                    case acceptreader
                    by solve( (#vl.1, 0) ~~> (#vk.5, 0) )
                  next
                    case initiatereader
                    by contradiction /* impossible chain */
                  next
                    case tag1
                    solve( (#vl.1, 0) ~~> (#vk.5, 0) )
                      case d_0_fst
                      by contradiction /* impossible chain */
                    next
                      case d_0_snd
                      by solve( (#vr.5, 0) ~~> (#vk.5, 0) )
                    qed
                  qed
                qed
              next
                case c_xor_case_4
                by solve( !KU( ~k ) @ #vk.8 )
              next
                case c_xor_case_5
                solve( !KU( (~r1⊕~r1.1) ) @ #vk.7 )
                  case c_xor
                  by contradiction /* cyclic */
                next
                  case coerce
                  solve( !KD( (~r1⊕~r1.1) ) ▶₀ #vk.5 )
                    case acceptreader
                    by solve( (#vl.1, 0) ~~> (#vk.5, 0) )
                  next
                    case initiatereader
                    by contradiction /* impossible chain */
                  next
                    case tag1
                    solve( (#vl.1, 0) ~~> (#vk.5, 0) )
                      case d_0_fst
                      by contradiction /* impossible chain */
                    next
                      case d_0_snd
                      by solve( (#vr.5, 0) ~~> (#vk.5, 0) )
                    qed
                  qed
                qed
              next
                case c_xor_case_6
                by contradiction /* cyclic */
              next
                case c_xor_case_7
                by contradiction /* cyclic */
              next
                case coerce
                solve( !KD( (~k⊕~r1⊕x⊕~r1.1) ) ▶₀ #vk.4 )
                  case acceptreader
                  by solve( (#vl.1, 0) ~~> (#vk.4, 0) )
                next
                  case initiatereader
                  by contradiction /* impossible chain */
                next
                  case tag1
                  solve( (#vl.1, 0) ~~> (#vk.4, 0) )
                    case d_0_fst
                    by contradiction /* impossible chain */
                  next
                    case d_0_snd
                    by solve( (#vr.5, 0) ~~> (#vk.4, 0) )
                  qed
                qed
              qed
            next
              case tag1_case_1
              solve( splitEqs(5) )
                case split_case_1
                by solve( !KU( ~k1 ) @ #vk.5 )
              next
                case split_case_2
                solve( !KU( (~k⊕~k1⊕~r1⊕x⊕~r1.1⊕~r1.2) ) @ #vk.6 )
                  case c_xor_case_01
                  by contradiction /* cyclic */
                next
                  case c_xor_case_02
                  solve( !KU( (~k⊕~k1⊕~r1⊕~r1.1⊕~r1.2) ) @ #vk.7 )
                    case c_xor_case_01
                    by contradiction /* cyclic */
                  next
                    case c_xor_case_02
                    by contradiction /* cyclic */
                  next
                    case c_xor_case_03
                    solve( !KU( (~k⊕~k1⊕~r1.2) ) @ #vk.8 )
                      case c_xor_case_1
                      by solve( !KU( ~k1 ) @ #vk.11 )
                    next
                      case c_xor_case_2
                      by solve( !KU( ~k ) @ #vk.11 )
                    next
                      case c_xor_case_3
                      by contradiction /* cyclic */
                    next
                      case coerce
                      solve( !KD( (~k⊕~k1⊕~r1.2) ) ▶₀ #vk.6 )
                        case acceptreader
                        by solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                      next
                        case initiatereader
                        by contradiction /* impossible chain */
                      next
                        case tag1
                        solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                          case d_0_fst
                          by contradiction /* impossible chain */
                        next
                          case d_0_snd
                          by solve( (#vr.7, 0) ~~> (#vk.6, 0) )
                        qed
                      qed
                    qed
                  next
                    case c_xor_case_04
                    by solve( !KU( ~k1 ) @ #vk.9 )
                  next
                    case c_xor_case_05
                    solve( !KU( (~k⊕~r1⊕~r1.2) ) @ #vk.8 )
                      case c_xor_case_1
                      by contradiction /* cyclic */
                    next
                      case c_xor_case_2
                      by solve( !KU( ~k ) @ #vk.11 )
                    next
                      case c_xor_case_3
                      by contradiction /* cyclic */
                    next
                      case coerce
                      solve( !KD( (~k⊕~r1⊕~r1.2) ) ▶₀ #vk.6 )
                        case acceptreader
                        by solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                      next
                        case initiatereader
                        by contradiction /* impossible chain */
                      next
                        case tag1
                        solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                          case d_0_fst
                          by contradiction /* impossible chain */
                        next
                          case d_0_snd
                          by solve( (#vr.7, 0) ~~> (#vk.6, 0) )
                        qed
                      qed
                    qed
                  next
                    case c_xor_case_06
                    solve( !KU( (~k⊕~r1.1⊕~r1.2) ) @ #vk.8 )
                      case c_xor_case_1
                      by contradiction /* cyclic */
                    next
                      case c_xor_case_2
                      by solve( !KU( ~k ) @ #vk.11 )
                    next
                      case c_xor_case_3
                      by contradiction /* cyclic */
                    next
                      case coerce
                      solve( !KD( (~k⊕~r1.1⊕~r1.2) ) ▶₀ #vk.6 )
                        case acceptreader
                        by solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                      next
                        case initiatereader
                        by contradiction /* impossible chain */
                      next
                        case tag1
                        solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                          case d_0_fst
                          by contradiction /* impossible chain */
                        next
                          case d_0_snd
                          by solve( (#vr.7, 0) ~~> (#vk.6, 0) )
                        qed
                      qed
                    qed
                  next
                    case c_xor_case_07
                    solve( !KU( (~k⊕~r1.2) ) @ #vk.8 )
                      case c_xor
                      by contradiction /* cyclic */
                    next
                      case coerce
                      solve( !KD( (~k⊕~r1.2) ) ▶₀ #vk.6 )
                        case acceptreader
                        by solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                      next
                        case initiatereader
                        by contradiction /* impossible chain */
                      next
                        case tag1
                        solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                          case d_0_fst
                          by contradiction /* impossible chain */
                        next
                          case d_0_snd
                          by solve( (#vr.7, 0) ~~> (#vk.6, 0) )
                        qed
                      qed
                    qed
                  next
                    case c_xor_case_08
                    by solve( !KU( ~k ) @ #vk.9 )
                  next
                    case c_xor_case_09
                    solve( !KU( (~k1⊕~r1⊕~r1.2) ) @ #vk.8 )
                      case c_xor_case_1
                      by contradiction /* cyclic */
                    next
                      case c_xor_case_2
                      by solve( !KU( ~k1 ) @ #vk.11 )
                    next
                      case c_xor_case_3
                      by contradiction /* cyclic */
                    next
                      case coerce
                      solve( !KD( (~k1⊕~r1⊕~r1.2) ) ▶₀ #vk.6 )
                        case acceptreader
                        by solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                      next
                        case initiatereader
                        by contradiction /* impossible chain */
                      next
                        case tag1
                        solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                          case d_0_fst
                          by contradiction /* impossible chain */
                        next
                          case d_0_snd
                          by solve( (#vr.7, 0) ~~> (#vk.6, 0) )
                        qed
                      qed
                    qed
                  next
                    case c_xor_case_10
                    solve( !KU( (~k1⊕~r1.1⊕~r1.2) ) @ #vk.8 )
                      case c_xor_case_1
                      by contradiction /* cyclic */
                    next
                      case c_xor_case_2
                      by solve( !KU( ~k1 ) @ #vk.11 )
                    next
                      case c_xor_case_3
                      by contradiction /* cyclic */
                    next
                      case coerce
                      solve( !KD( (~k1⊕~r1.1⊕~r1.2) ) ▶₀ #vk.6 )
                        case acceptreader
                        by solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                      next
                        case initiatereader
                        by contradiction /* impossible chain */
                      next
                        case tag1
                        solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                          case d_0_fst
                          by contradiction /* impossible chain */
                        next
                          case d_0_snd
                          by solve( (#vr.7, 0) ~~> (#vk.6, 0) )
                        qed
                      qed
                    qed
                  next
                    case c_xor_case_11
                    solve( !KU( (~k1⊕~r1.2) ) @ #vk.8 )
                      case c_xor
                      by contradiction /* cyclic */
                    next
                      case coerce
                      solve( !KD( (~k1⊕~r1.2) ) ▶₀ #vk.6 )
                        case acceptreader
                        by solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                      next
                        case initiatereader
                        by contradiction /* impossible chain */
                      next
                        case tag1
                        solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                          case d_0_fst
                          by contradiction /* impossible chain */
                        next
                          case d_0_snd
                          by solve( (#vr.7, 0) ~~> (#vk.6, 0) )
                        qed
                      qed
                    qed
                  next
                    case c_xor_case_12
                    solve( !KU( (~r1⊕~r1.1⊕~r1.2) ) @ #vk.8 )
                      case c_xor_case_1
                      by contradiction /* cyclic */
                    next
                      case c_xor_case_2
                      by contradiction /* cyclic */
                    next
                      case c_xor_case_3
                      by contradiction /* cyclic */
                    next
                      case coerce
                      solve( !KD( (~r1⊕~r1.1⊕~r1.2) ) ▶₀ #vk.6 )
                        case acceptreader
                        by solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                      next
                        case initiatereader
                        by contradiction /* impossible chain */
                      next
                        case tag1
                        solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                          case d_0_fst
                          by contradiction /* impossible chain */
                        next
                          case d_0_snd
                          by solve( (#vr.7, 0) ~~> (#vk.6, 0) )
                        qed
                      qed
                    qed
                  next
                    case c_xor_case_13
                    solve( !KU( (~r1⊕~r1.2) ) @ #vk.8 )
                      case c_xor
                      by contradiction /* cyclic */
                    next
                      case coerce
                      solve( !KD( (~r1⊕~r1.2) ) ▶₀ #vk.6 )
                        case acceptreader
                        by solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                      next
                        case initiatereader
                        by contradiction /* impossible chain */
                      next
                        case tag1
                        solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                          case d_0_fst
                          by contradiction /* impossible chain */
                        next
                          case d_0_snd
                          by solve( (#vr.7, 0) ~~> (#vk.6, 0) )
                        qed
                      qed
                    qed
                  next
                    case c_xor_case_14
                    solve( !KU( (~r1.1⊕~r1.2) ) @ #vk.8 )
                      case c_xor
                      by contradiction /* cyclic */
                    next
                      case coerce
                      solve( !KD( (~r1.1⊕~r1.2) ) ▶₀ #vk.6 )
                        case acceptreader
                        by solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                      next
                        case initiatereader
                        by contradiction /* impossible chain */
                      next
                        case tag1
                        solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                          case d_0_fst
                          by contradiction /* impossible chain */
                        next
                          case d_0_snd
                          by solve( (#vr.7, 0) ~~> (#vk.6, 0) )
                        qed
                      qed
                    qed
                  next
                    case c_xor_case_15
                    by contradiction /* cyclic */
                  next
                    case coerce
                    solve( !KD( (~k⊕~k1⊕~r1⊕~r1.1⊕~r1.2) ) ▶₀ #vk.5 )
                      case acceptreader
                      by solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                    next
                      case initiatereader
                      by contradiction /* impossible chain */
                    next
                      case tag1
                      solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                        case d_0_fst
                        by contradiction /* impossible chain */
                      next
                        case d_0_snd
                        by solve( (#vr.7, 0) ~~> (#vk.5, 0) )
                      qed
                    qed
                  qed
                next
                  case c_xor_case_03
                  by contradiction /* cyclic */
                next
                  case c_xor_case_04
                  by contradiction /* cyclic */
                next
                  case c_xor_case_05
                  solve( !KU( (~k⊕~k1⊕x⊕~r1.2) ) @ #vk.7 )
                    case c_xor_case_1
                    solve( !KU( (~r1⊕~r1.1) ) @ #vk.8 )
                      case c_xor
                      by contradiction /* cyclic */
                    next
                      case coerce
                      solve( !KD( (~r1⊕~r1.1) ) ▶₀ #vk.6 )
                        case acceptreader
                        by solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                      next
                        case initiatereader
                        by contradiction /* impossible chain */
                      next
                        case tag1
                        solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                          case d_0_fst
                          by contradiction /* impossible chain */
                        next
                          case d_0_snd
                          by solve( (#vr.7, 0) ~~> (#vk.6, 0) )
                        qed
                      qed
                    qed
                  next
                    case c_xor_case_2
                    by solve( !KU( ~k1 ) @ #vk.10 )
                  next
                    case c_xor_case_3
                    solve( !KU( (~r1⊕~r1.1) ) @ #vk.8 )
                      case c_xor
                      by contradiction /* cyclic */
                    next
                      case coerce
                      solve( !KD( (~r1⊕~r1.1) ) ▶₀ #vk.6 )
                        case acceptreader
                        by solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                      next
                        case initiatereader
                        by contradiction /* impossible chain */
                      next
                        case tag1
                        solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                          case d_0_fst
                          by contradiction /* impossible chain */
                        next
                          case d_0_snd
                          by solve( (#vr.7, 0) ~~> (#vk.6, 0) )
                        qed
                      qed
                    qed
                  next
                    case c_xor_case_4
                    by solve( !KU( ~k ) @ #vk.10 )
                  next
                    case c_xor_case_5
                    solve( !KU( (~r1⊕~r1.1) ) @ #vk.8 )
                      case c_xor
                      by contradiction /* cyclic */
                    next
                      case coerce
                      solve( !KD( (~r1⊕~r1.1) ) ▶₀ #vk.6 )
                        case acceptreader
                        by solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                      next
                        case initiatereader
                        by contradiction /* impossible chain */
                      next
                        case tag1
                        solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                          case d_0_fst
                          by contradiction /* impossible chain */
                        next
                          case d_0_snd
                          by solve( (#vr.7, 0) ~~> (#vk.6, 0) )
                        qed
                      qed
                    qed
                  next
                    case c_xor_case_6
                    solve( !KU( (~r1⊕~r1.1) ) @ #vk.8 )
                      case c_xor
                      by contradiction /* cyclic */
                    next
                      case coerce
                      solve( !KD( (~r1⊕~r1.1) ) ▶₀ #vk.6 )
                        case acceptreader
                        by solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                      next
                        case initiatereader
                        by contradiction /* impossible chain */
                      next
                        case tag1
                        solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                          case d_0_fst
                          by contradiction /* impossible chain */
                        next
                          case d_0_snd
                          by solve( (#vr.7, 0) ~~> (#vk.6, 0) )
                        qed
                      qed
                    qed
                  next
                    case c_xor_case_7
                    by contradiction /* cyclic */
                  next
                    case coerce
                    solve( !KD( (~k⊕~k1⊕x⊕~r1.2) ) ▶₀ #vk.5 )
                      case acceptreader
                      by solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                    next
                      case initiatereader
                      by contradiction /* impossible chain */
                    next
                      case tag1
                      solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                        case d_0_fst
                        by contradiction /* impossible chain */
                      next
                        case d_0_snd
                        by solve( (#vr.7, 0) ~~> (#vk.5, 0) )
                      qed
                    qed
                  qed
                next
                  case c_xor_case_06
                  solve( !KU( (~k⊕~k1⊕~r1.1⊕~r1.2) ) @ #vk.7 )
                    case c_xor_case_1
                    by contradiction /* cyclic */
                  next
                    case c_xor_case_2
                    by solve( !KU( ~k1 ) @ #vk.10 )
                  next
                    case c_xor_case_3
                    solve( !KU( (~r1⊕x) ) @ #vk.8 )
                      case c_xor
                      by contradiction /* cyclic */
                    next
                      case coerce
                      solve( !KD( (~r1⊕x) ) ▶₀ #vk.6 )
                        case acceptreader
                        by solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                      next
                        case initiatereader
                        by contradiction /* impossible chain */
                      next
                        case tag1
                        solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                          case d_0_fst
                          by contradiction /* impossible chain */
                        next
                          case d_0_snd
                          by solve( (#vr.7, 0) ~~> (#vk.6, 0) )
                        qed
                      qed
                    qed
                  next
                    case c_xor_case_4
                    by solve( !KU( ~k ) @ #vk.10 )
                  next
                    case c_xor_case_5
                    solve( !KU( (~r1⊕x) ) @ #vk.8 )
                      case c_xor
                      by contradiction /* cyclic */
                    next
                      case coerce
                      solve( !KD( (~r1⊕x) ) ▶₀ #vk.6 )
                        case acceptreader
                        by solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                      next
                        case initiatereader
                        by contradiction /* impossible chain */
                      next
                        case tag1
                        solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                          case d_0_fst
                          by contradiction /* impossible chain */
                        next
                          case d_0_snd
                          by solve( (#vr.7, 0) ~~> (#vk.6, 0) )
                        qed
                      qed
                    qed
                  next
                    case c_xor_case_6
                    solve( !KU( (~r1⊕x) ) @ #vk.8 )
                      case c_xor
                      by contradiction /* cyclic */
                    next
                      case coerce
                      solve( !KD( (~r1⊕x) ) ▶₀ #vk.6 )
                        case acceptreader
                        by solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                      next
                        case initiatereader
                        by contradiction /* impossible chain */
                      next
                        case tag1
                        solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                          case d_0_fst
                          by contradiction /* impossible chain */
                        next
                          case d_0_snd
                          by solve( (#vr.7, 0) ~~> (#vk.6, 0) )
                        qed
                      qed
                    qed
                  next
                    case c_xor_case_7
                    by contradiction /* cyclic */
                  next
                    case coerce
                    solve( !KD( (~k⊕~k1⊕~r1.1⊕~r1.2) ) ▶₀ #vk.5 )
                      case acceptreader
                      by solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                    next
                      case initiatereader
                      by contradiction /* impossible chain */
                    next
                      case tag1
                      solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                        case d_0_fst
                        by contradiction /* impossible chain */
                      next
                        case d_0_snd
                        by solve( (#vr.7, 0) ~~> (#vk.5, 0) )
                      qed
                    qed
                  qed
                next
                  case c_xor_case_07
                  solve( !KU( (~k⊕~k1⊕~r1.2) ) @ #vk.7 )
                    case c_xor_case_1
                    by solve( !KU( ~k1 ) @ #vk.10 )
                  next
                    case c_xor_case_2
                    by solve( !KU( ~k ) @ #vk.10 )
                  next
                    case c_xor_case_3
                    by contradiction /* cyclic */
                  next
                    case coerce
                    solve( !KD( (~k⊕~k1⊕~r1.2) ) ▶₀ #vk.5 )
                      case acceptreader
                      by solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                    next
                      case initiatereader
                      by contradiction /* impossible chain */
                    next
                      case tag1
                      solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                        case d_0_fst
                        by contradiction /* impossible chain */
                      next
                        case d_0_snd
                        by solve( (#vr.7, 0) ~~> (#vk.5, 0) )
                      qed
                    qed
                  qed
                next
                  case c_xor_case_08
                  by solve( !KU( ~k1 ) @ #vk.8 )
                next
                  case c_xor_case_09
                  solve( !KU( (~k⊕~r1⊕x⊕~r1.2) ) @ #vk.7 )
                    case c_xor_case_1
                    solve( !KU( (~k1⊕~r1.1) ) @ #vk.8 )
                      case c_xor
                      by contradiction /* cyclic */
                    next
                      case coerce
                      solve( !KD( (~k1⊕~r1.1) ) ▶₀ #vk.6 )
                        case acceptreader
                        by solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                      next
                        case initiatereader
                        by contradiction /* impossible chain */
                      next
                        case tag1
                        solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                          case d_0_fst
                          by contradiction /* impossible chain */
                        next
                          case d_0_snd
                          by solve( (#vr.7, 0) ~~> (#vk.6, 0) )
                        qed
                      qed
                    qed
                  next
                    case c_xor_case_2
                    by contradiction /* cyclic */
                  next
                    case c_xor_case_3
                    solve( !KU( (~k1⊕~r1.1) ) @ #vk.8 )
                      case c_xor
                      by contradiction /* cyclic */
                    next
                      case coerce
                      solve( !KD( (~k1⊕~r1.1) ) ▶₀ #vk.6 )
                        case acceptreader
                        by solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                      next
                        case initiatereader
                        by contradiction /* impossible chain */
                      next
                        case tag1
                        solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                          case d_0_fst
                          by contradiction /* impossible chain */
                        next
                          case d_0_snd
                          by solve( (#vr.7, 0) ~~> (#vk.6, 0) )
                        qed
                      qed
                    qed
                  next
                    case c_xor_case_4
                    by solve( !KU( ~k ) @ #vk.10 )
                  next
                    case c_xor_case_5
                    solve( !KU( (~k1⊕~r1.1) ) @ #vk.8 )
                      case c_xor
                      by contradiction /* cyclic */
                    next
                      case coerce
                      solve( !KD( (~k1⊕~r1.1) ) ▶₀ #vk.6 )
                        case acceptreader
                        by solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                      next
                        case initiatereader
                        by contradiction /* impossible chain */
                      next
                        case tag1
                        solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                          case d_0_fst
                          by contradiction /* impossible chain */
                        next
                          case d_0_snd
                          by solve( (#vr.7, 0) ~~> (#vk.6, 0) )
                        qed
                      qed
                    qed
                  next
                    case c_xor_case_6
                    solve( !KU( (~k1⊕~r1.1) ) @ #vk.8 )
                      case c_xor
                      by contradiction /* cyclic */
                    next
                      case coerce
                      solve( !KD( (~k1⊕~r1.1) ) ▶₀ #vk.6 )
                        case acceptreader
                        by solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                      next
                        case initiatereader
                        by contradiction /* impossible chain */
                      next
                        case tag1
                        solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                          case d_0_fst
                          by contradiction /* impossible chain */
                        next
                          case d_0_snd
                          by solve( (#vr.7, 0) ~~> (#vk.6, 0) )
                        qed
                      qed
                    qed
                  next
                    case c_xor_case_7
                    by contradiction /* cyclic */
                  next
                    case coerce
                    solve( !KD( (~k⊕~r1⊕x⊕~r1.2) ) ▶₀ #vk.5 )
                      case acceptreader
                      by solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                    next
                      case initiatereader
                      by contradiction /* impossible chain */
                    next
                      case tag1
                      solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                        case d_0_fst
                        by contradiction /* impossible chain */
                      next
                        case d_0_snd
                        by solve( (#vr.7, 0) ~~> (#vk.5, 0) )
                      qed
                    qed
                  qed
                next
                  case c_xor_case_10
                  solve( !KU( (~k⊕~r1⊕~r1.1⊕~r1.2) ) @ #vk.7 )
                    case c_xor_case_1
                    by contradiction /* cyclic */
                  next
                    case c_xor_case_2
                    by contradiction /* cyclic */
                  next
                    case c_xor_case_3
                    solve( !KU( (~k1⊕x) ) @ #vk.8 )
                      case c_xor
                      by solve( !KU( ~k1 ) @ #vk.11 )
                    next
                      case coerce
                      solve( !KD( (~k1⊕x) ) ▶₀ #vk.6 )
                        case acceptreader
                        by solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                      next
                        case initiatereader
                        by contradiction /* impossible chain */
                      next
                        case tag1
                        solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                          case d_0_fst
                          by contradiction /* impossible chain */
                        next
                          case d_0_snd
                          by solve( (#vr.7, 0) ~~> (#vk.6, 0) )
                        qed
                      qed
                    qed
                  next
                    case c_xor_case_4
                    by solve( !KU( ~k ) @ #vk.10 )
                  next
                    case c_xor_case_5
                    solve( !KU( (~k1⊕x) ) @ #vk.8 )
                      case c_xor
                      by solve( !KU( ~k1 ) @ #vk.11 )
                    next
                      case coerce
                      solve( !KD( (~k1⊕x) ) ▶₀ #vk.6 )
                        case acceptreader
                        by solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                      next
                        case initiatereader
                        by contradiction /* impossible chain */
                      next
                        case tag1
                        solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                          case d_0_fst
                          by contradiction /* impossible chain */
                        next
                          case d_0_snd
                          by solve( (#vr.7, 0) ~~> (#vk.6, 0) )
                        qed
                      qed
                    qed
                  next
                    case c_xor_case_6
                    solve( !KU( (~k1⊕x) ) @ #vk.8 )
                      case c_xor
                      by solve( !KU( ~k1 ) @ #vk.11 )
                    next
                      case coerce
                      solve( !KD( (~k1⊕x) ) ▶₀ #vk.6 )
                        case acceptreader
                        by solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                      next
                        case initiatereader
                        by contradiction /* impossible chain */
                      next
                        case tag1
                        solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                          case d_0_fst
                          by contradiction /* impossible chain */
                        next
                          case d_0_snd
                          by solve( (#vr.7, 0) ~~> (#vk.6, 0) )
                        qed
                      qed
                    qed
                  next
                    case c_xor_case_7
                    by contradiction /* cyclic */
                  next
                    case coerce
                    solve( !KD( (~k⊕~r1⊕~r1.1⊕~r1.2) ) ▶₀ #vk.5 )
                      case acceptreader
                      by solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                    next
                      case initiatereader
                      by contradiction /* impossible chain */
                    next
                      case tag1
                      solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                        case d_0_fst
                        by contradiction /* impossible chain */
                      next
                        case d_0_snd
                        by solve( (#vr.7, 0) ~~> (#vk.5, 0) )
                      qed
                    qed
                  qed
                next
                  case c_xor_case_11
                  solve( !KU( (~k⊕~r1⊕~r1.2) ) @ #vk.7 )
                    case c_xor_case_1
                    by contradiction /* cyclic */
                  next
                    case c_xor_case_2
                    by solve( !KU( ~k ) @ #vk.10 )
                  next
                    case c_xor_case_3
                    by contradiction /* cyclic */
                  next
                    case coerce
                    solve( !KD( (~k⊕~r1⊕~r1.2) ) ▶₀ #vk.5 )
                      case acceptreader
                      by solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                    next
                      case initiatereader
                      by contradiction /* impossible chain */
                    next
                      case tag1
                      solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                        case d_0_fst
                        by contradiction /* impossible chain */
                      next
                        case d_0_snd
                        by solve( (#vr.7, 0) ~~> (#vk.5, 0) )
                      qed
                    qed
                  qed
                next
                  case c_xor_case_12
                  solve( !KU( (~k⊕x⊕~r1.1⊕~r1.2) ) @ #vk.7 )
                    case c_xor_case_1
                    by contradiction /* cyclic */
                  next
                    case c_xor_case_2
                    solve( !KU( (~k1⊕~r1) ) @ #vk.8 )
                      case c_xor
                      by contradiction /* cyclic */
                    next
                      case coerce
                      solve( !KD( (~k1⊕~r1) ) ▶₀ #vk.6 )
                        case acceptreader
                        by solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                      next
                        case initiatereader
                        by contradiction /* impossible chain */
                      next
                        case tag1
                        solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                          case d_0_fst
                          by contradiction /* impossible chain */
                        next
                          case d_0_snd
                          by solve( (#vr.7, 0) ~~> (#vk.6, 0) )
                        qed
                      qed
                    qed
                  next
                    case c_xor_case_3
                    by contradiction /* cyclic */
                  next
                    case c_xor_case_4
                    by solve( !KU( ~k ) @ #vk.10 )
                  next
                    case c_xor_case_5
                    solve( !KU( (~k1⊕~r1) ) @ #vk.8 )
                      case c_xor
                      by contradiction /* cyclic */
                    next
                      case coerce
                      solve( !KD( (~k1⊕~r1) ) ▶₀ #vk.6 )
                        case acceptreader
                        by solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                      next
                        case initiatereader
                        by contradiction /* impossible chain */
                      next
                        case tag1
                        solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                          case d_0_fst
                          by contradiction /* impossible chain */
                        next
                          case d_0_snd
                          by solve( (#vr.7, 0) ~~> (#vk.6, 0) )
                        qed
                      qed
                    qed
                  next
                    case c_xor_case_6
                    solve( !KU( (~k1⊕~r1) ) @ #vk.8 )
                      case c_xor
                      by contradiction /* cyclic */
                    next
                      case coerce
                      solve( !KD( (~k1⊕~r1) ) ▶₀ #vk.6 )
                        case acceptreader
                        by solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                      next
                        case initiatereader
                        by contradiction /* impossible chain */
                      next
                        case tag1
                        solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                          case d_0_fst
                          by contradiction /* impossible chain */
                        next
                          case d_0_snd
                          by solve( (#vr.7, 0) ~~> (#vk.6, 0) )
                        qed
                      qed
                    qed
                  next
                    case c_xor_case_7
                    by contradiction /* cyclic */
                  next
                    case coerce
                    solve( !KD( (~k⊕x⊕~r1.1⊕~r1.2) ) ▶₀ #vk.5 )
                      case acceptreader
                      by solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                    next
                      case initiatereader
                      by contradiction /* impossible chain */
                    next
                      case tag1
                      solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                        case d_0_fst
                        by contradiction /* impossible chain */
                      next
                        case d_0_snd
                        by solve( (#vr.7, 0) ~~> (#vk.5, 0) )
                      qed
                    qed
                  qed
                next
                  case c_xor_case_13
                  solve( !KU( (~k⊕x⊕~r1.2) ) @ #vk.7 )
                    case c_xor_case_1
                    solve( !KU( (~k1⊕~r1⊕~r1.1) ) @ #vk.8 )
                      case c_xor_case_1
                      by contradiction /* cyclic */
                    next
                      case c_xor_case_2
                      by solve( !KU( ~k1 ) @ #vk.11 )
                    next
                      case c_xor_case_3
                      by contradiction /* cyclic */
                    next
                      case coerce
                      solve( !KD( (~k1⊕~r1⊕~r1.1) ) ▶₀ #vk.6 )
                        case acceptreader
                        by solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                      next
                        case initiatereader
                        by contradiction /* impossible chain */
                      next
                        case tag1
                        solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                          case d_0_fst
                          by contradiction /* impossible chain */
                        next
                          case d_0_snd
                          by solve( (#vr.7, 0) ~~> (#vk.6, 0) )
                        qed
                      qed
                    qed
                  next
                    case c_xor_case_2
                    by solve( !KU( ~k ) @ #vk.10 )
                  next
                    case c_xor_case_3
                    by contradiction /* cyclic */
                  next
                    case coerce
                    solve( !KD( (~k⊕x⊕~r1.2) ) ▶₀ #vk.5 )
                      case acceptreader
                      by solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                    next
                      case initiatereader
                      by contradiction /* impossible chain */
                    next
                      case tag1
                      solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                        case d_0_fst
                        by contradiction /* impossible chain */
                      next
                        case d_0_snd
                        by solve( (#vr.7, 0) ~~> (#vk.5, 0) )
                      qed
                    qed
                  qed
                next
                  case c_xor_case_14
                  solve( !KU( (~k⊕~r1.1⊕~r1.2) ) @ #vk.7 )
                    case c_xor_case_1
                    by contradiction /* cyclic */
                  next
                    case c_xor_case_2
                    by solve( !KU( ~k ) @ #vk.10 )
                  next
                    case c_xor_case_3
                    by contradiction /* cyclic */
                  next
                    case coerce
                    solve( !KD( (~k⊕~r1.1⊕~r1.2) ) ▶₀ #vk.5 )
                      case acceptreader
                      by solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                    next
                      case initiatereader
                      by contradiction /* impossible chain */
                    next
                      case tag1
                      solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                        case d_0_fst
                        by contradiction /* impossible chain */
                      next
                        case d_0_snd
                        by solve( (#vr.7, 0) ~~> (#vk.5, 0) )
                      qed
                    qed
                  qed
                next
                  case c_xor_case_15
                  solve( !KU( (~k⊕~r1.2) ) @ #vk.7 )
                    case c_xor
                    by contradiction /* cyclic */
                  next
                    case coerce
                    solve( !KD( (~k⊕~r1.2) ) ▶₀ #vk.5 )
                      case acceptreader
                      by solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                    next
                      case initiatereader
                      by contradiction /* impossible chain */
                    next
                      case tag1
                      solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                        case d_0_fst
                        by contradiction /* impossible chain */
                      next
                        case d_0_snd
                        by solve( (#vr.7, 0) ~~> (#vk.5, 0) )
                      qed
                    qed
                  qed
                next
                  case c_xor_case_16
                  by solve( !KU( ~k ) @ #vk.8 )
                next
                  case c_xor_case_17
                  solve( !KU( (~k1⊕~r1⊕x⊕~r1.2) ) @ #vk.7 )
                    case c_xor_case_1
                    solve( !KU( (~k⊕~r1.1) ) @ #vk.8 )
                      case c_xor
                      by contradiction /* cyclic */
                    next
                      case coerce
                      solve( !KD( (~k⊕~r1.1) ) ▶₀ #vk.6 )
                        case acceptreader
                        by solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                      next
                        case initiatereader
                        by contradiction /* impossible chain */
                      next
                        case tag1
                        solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                          case d_0_fst
                          by contradiction /* impossible chain */
                        next
                          case d_0_snd
                          by solve( (#vr.7, 0) ~~> (#vk.6, 0) )
                        qed
                      qed
                    qed
                  next
                    case c_xor_case_2
                    by contradiction /* cyclic */
                  next
                    case c_xor_case_3
                    solve( !KU( (~k⊕~r1.1) ) @ #vk.8 )
                      case c_xor
                      by contradiction /* cyclic */
                    next
                      case coerce
                      solve( !KD( (~k⊕~r1.1) ) ▶₀ #vk.6 )
                        case acceptreader
                        by solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                      next
                        case initiatereader
                        by contradiction /* impossible chain */
                      next
                        case tag1
                        solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                          case d_0_fst
                          by contradiction /* impossible chain */
                        next
                          case d_0_snd
                          by solve( (#vr.7, 0) ~~> (#vk.6, 0) )
                        qed
                      qed
                    qed
                  next
                    case c_xor_case_4
                    by solve( !KU( ~k1 ) @ #vk.10 )
                  next
                    case c_xor_case_5
                    solve( !KU( (~k⊕~r1.1) ) @ #vk.8 )
                      case c_xor
                      by contradiction /* cyclic */
                    next
                      case coerce
                      solve( !KD( (~k⊕~r1.1) ) ▶₀ #vk.6 )
                        case acceptreader
                        by solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                      next
                        case initiatereader
                        by contradiction /* impossible chain */
                      next
                        case tag1
                        solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                          case d_0_fst
                          by contradiction /* impossible chain */
                        next
                          case d_0_snd
                          by solve( (#vr.7, 0) ~~> (#vk.6, 0) )
                        qed
                      qed
                    qed
                  next
                    case c_xor_case_6
                    solve( !KU( (~k⊕~r1.1) ) @ #vk.8 )
                      case c_xor
                      by contradiction /* cyclic */
                    next
                      case coerce
                      solve( !KD( (~k⊕~r1.1) ) ▶₀ #vk.6 )
                        case acceptreader
                        by solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                      next
                        case initiatereader
                        by contradiction /* impossible chain */
                      next
                        case tag1
                        solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                          case d_0_fst
                          by contradiction /* impossible chain */
                        next
                          case d_0_snd
                          by solve( (#vr.7, 0) ~~> (#vk.6, 0) )
                        qed
                      qed
                    qed
                  next
                    case c_xor_case_7
                    by contradiction /* cyclic */
                  next
                    case coerce
                    solve( !KD( (~k1⊕~r1⊕x⊕~r1.2) ) ▶₀ #vk.5 )
                      case acceptreader
                      by solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                    next
                      case initiatereader
                      by contradiction /* impossible chain */
                    next
                      case tag1
                      solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                        case d_0_fst
                        by contradiction /* impossible chain */
                      next
                        case d_0_snd
                        by solve( (#vr.7, 0) ~~> (#vk.5, 0) )
                      qed
                    qed
                  qed
                next
                  case c_xor_case_18
                  solve( !KU( (~k1⊕~r1⊕~r1.1⊕~r1.2) ) @ #vk.7 )
                    case c_xor_case_1
                    by contradiction /* cyclic */
                  next
                    case c_xor_case_2
                    by contradiction /* cyclic */
                  next
                    case c_xor_case_3
                    solve( !KU( (~k⊕x) ) @ #vk.8 )
                      case c_xor
                      by solve( !KU( ~k ) @ #vk.11 )
                    next
                      case coerce
                      solve( !KD( (~k⊕x) ) ▶₀ #vk.6 )
                        case acceptreader
                        by solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                      next
                        case initiatereader
                        by contradiction /* impossible chain */
                      next
                        case tag1
                        solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                          case d_0_fst
                          by contradiction /* impossible chain */
                        next
                          case d_0_snd
                          by solve( (#vr.7, 0) ~~> (#vk.6, 0) )
                        qed
                      qed
                    qed
                  next
                    case c_xor_case_4
                    by solve( !KU( ~k1 ) @ #vk.10 )
                  next
                    case c_xor_case_5
                    solve( !KU( (~k⊕x) ) @ #vk.8 )
                      case c_xor
                      by solve( !KU( ~k ) @ #vk.11 )
                    next
                      case coerce
                      solve( !KD( (~k⊕x) ) ▶₀ #vk.6 )
                        case acceptreader
                        by solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                      next
                        case initiatereader
                        by contradiction /* impossible chain */
                      next
                        case tag1
                        solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                          case d_0_fst
                          by contradiction /* impossible chain */
                        next
                          case d_0_snd
                          by solve( (#vr.7, 0) ~~> (#vk.6, 0) )
                        qed
                      qed
                    qed
                  next
                    case c_xor_case_6
                    solve( !KU( (~k⊕x) ) @ #vk.8 )
                      case c_xor
                      by solve( !KU( ~k ) @ #vk.11 )
                    next
                      case coerce
                      solve( !KD( (~k⊕x) ) ▶₀ #vk.6 )
                        case acceptreader
                        by solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                      next
                        case initiatereader
                        by contradiction /* impossible chain */
                      next
                        case tag1
                        solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                          case d_0_fst
                          by contradiction /* impossible chain */
                        next
                          case d_0_snd
                          by solve( (#vr.7, 0) ~~> (#vk.6, 0) )
                        qed
                      qed
                    qed
                  next
                    case c_xor_case_7
                    by contradiction /* cyclic */
                  next
                    case coerce
                    solve( !KD( (~k1⊕~r1⊕~r1.1⊕~r1.2) ) ▶₀ #vk.5 )
                      case acceptreader
                      by solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                    next
                      case initiatereader
                      by contradiction /* impossible chain */
                    next
                      case tag1
                      solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                        case d_0_fst
                        by contradiction /* impossible chain */
                      next
                        case d_0_snd
                        by solve( (#vr.7, 0) ~~> (#vk.5, 0) )
                      qed
                    qed
                  qed
                next
                  case c_xor_case_19
                  solve( !KU( (~k1⊕~r1⊕~r1.2) ) @ #vk.7 )
                    case c_xor_case_1
                    by contradiction /* cyclic */
                  next
                    case c_xor_case_2
                    by solve( !KU( ~k1 ) @ #vk.10 )
                  next
                    case c_xor_case_3
                    by contradiction /* cyclic */
                  next
                    case coerce
                    solve( !KD( (~k1⊕~r1⊕~r1.2) ) ▶₀ #vk.5 )
                      case acceptreader
                      by solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                    next
                      case initiatereader
                      by contradiction /* impossible chain */
                    next
                      case tag1
                      solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                        case d_0_fst
                        by contradiction /* impossible chain */
                      next
                        case d_0_snd
                        by solve( (#vr.7, 0) ~~> (#vk.5, 0) )
                      qed
                    qed
                  qed
                next
                  case c_xor_case_20
                  solve( !KU( (~k1⊕x⊕~r1.1⊕~r1.2) ) @ #vk.7 )
                    case c_xor_case_1
                    by contradiction /* cyclic */
                  next
                    case c_xor_case_2
                    solve( !KU( (~k⊕~r1) ) @ #vk.8 )
                      case c_xor
                      by contradiction /* cyclic */
                    next
                      case coerce
                      solve( !KD( (~k⊕~r1) ) ▶₀ #vk.6 )
                        case acceptreader
                        by solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                      next
                        case initiatereader
                        by contradiction /* impossible chain */
                      next
                        case tag1
                        solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                          case d_0_fst
                          by contradiction /* impossible chain */
                        next
                          case d_0_snd
                          by solve( (#vr.7, 0) ~~> (#vk.6, 0) )
                        qed
                      qed
                    qed
                  next
                    case c_xor_case_3
                    by contradiction /* cyclic */
                  next
                    case c_xor_case_4
                    by solve( !KU( ~k1 ) @ #vk.10 )
                  next
                    case c_xor_case_5
                    solve( !KU( (~k⊕~r1) ) @ #vk.8 )
                      case c_xor
                      by contradiction /* cyclic */
                    next
                      case coerce
                      solve( !KD( (~k⊕~r1) ) ▶₀ #vk.6 )
                        case acceptreader
                        by solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                      next
                        case initiatereader
                        by contradiction /* impossible chain */
                      next
                        case tag1
                        solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                          case d_0_fst
                          by contradiction /* impossible chain */
                        next
                          case d_0_snd
                          by solve( (#vr.7, 0) ~~> (#vk.6, 0) )
                        qed
                      qed
                    qed
                  next
                    case c_xor_case_6
                    solve( !KU( (~k⊕~r1) ) @ #vk.8 )
                      case c_xor
                      by contradiction /* cyclic */
                    next
                      case coerce
                      solve( !KD( (~k⊕~r1) ) ▶₀ #vk.6 )
                        case acceptreader
                        by solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                      next
                        case initiatereader
                        by contradiction /* impossible chain */
                      next
                        case tag1
                        solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                          case d_0_fst
                          by contradiction /* impossible chain */
                        next
                          case d_0_snd
                          by solve( (#vr.7, 0) ~~> (#vk.6, 0) )
                        qed
                      qed
                    qed
                  next
                    case c_xor_case_7
                    by contradiction /* cyclic */
                  next
                    case coerce
                    solve( !KD( (~k1⊕x⊕~r1.1⊕~r1.2) ) ▶₀ #vk.5 )
                      case acceptreader
                      by solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                    next
                      case initiatereader
                      by contradiction /* impossible chain */
                    next
                      case tag1
                      solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                        case d_0_fst
                        by contradiction /* impossible chain */
                      next
                        case d_0_snd
                        by solve( (#vr.7, 0) ~~> (#vk.5, 0) )
                      qed
                    qed
                  qed
                next
                  case c_xor_case_21
                  solve( !KU( (~k1⊕x⊕~r1.2) ) @ #vk.7 )
                    case c_xor_case_1
                    solve( !KU( (~k⊕~r1⊕~r1.1) ) @ #vk.8 )
                      case c_xor_case_1
                      by contradiction /* cyclic */
                    next
                      case c_xor_case_2
                      by solve( !KU( ~k ) @ #vk.11 )
                    next
                      case c_xor_case_3
                      by contradiction /* cyclic */
                    next
                      case coerce
                      solve( !KD( (~k⊕~r1⊕~r1.1) ) ▶₀ #vk.6 )
                        case acceptreader
                        by solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                      next
                        case initiatereader
                        by contradiction /* impossible chain */
                      next
                        case tag1
                        solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                          case d_0_fst
                          by contradiction /* impossible chain */
                        next
                          case d_0_snd
                          by solve( (#vr.7, 0) ~~> (#vk.6, 0) )
                        qed
                      qed
                    qed
                  next
                    case c_xor_case_2
                    by solve( !KU( ~k1 ) @ #vk.10 )
                  next
                    case c_xor_case_3
                    by contradiction /* cyclic */
                  next
                    case coerce
                    solve( !KD( (~k1⊕x⊕~r1.2) ) ▶₀ #vk.5 )
                      case acceptreader
                      by solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                    next
                      case initiatereader
                      by contradiction /* impossible chain */
                    next
                      case tag1
                      solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                        case d_0_fst
                        by contradiction /* impossible chain */
                      next
                        case d_0_snd
                        by solve( (#vr.7, 0) ~~> (#vk.5, 0) )
                      qed
                    qed
                  qed
                next
                  case c_xor_case_22
                  solve( !KU( (~k1⊕~r1.1⊕~r1.2) ) @ #vk.7 )
                    case c_xor_case_1
                    by contradiction /* cyclic */
                  next
                    case c_xor_case_2
                    by solve( !KU( ~k1 ) @ #vk.10 )
                  next
                    case c_xor_case_3
                    by contradiction /* cyclic */
                  next
                    case coerce
                    solve( !KD( (~k1⊕~r1.1⊕~r1.2) ) ▶₀ #vk.5 )
                      case acceptreader
                      by solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                    next
                      case initiatereader
                      by contradiction /* impossible chain */
                    next
                      case tag1
                      solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                        case d_0_fst
                        by contradiction /* impossible chain */
                      next
                        case d_0_snd
                        by solve( (#vr.7, 0) ~~> (#vk.5, 0) )
                      qed
                    qed
                  qed
                next
                  case c_xor_case_23
                  solve( !KU( (~k1⊕~r1.2) ) @ #vk.7 )
                    case c_xor
                    by contradiction /* cyclic */
                  next
                    case coerce
                    solve( !KD( (~k1⊕~r1.2) ) ▶₀ #vk.5 )
                      case acceptreader
                      by solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                    next
                      case initiatereader
                      by contradiction /* impossible chain */
                    next
                      case tag1
                      solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                        case d_0_fst
                        by contradiction /* impossible chain */
                      next
                        case d_0_snd
                        by solve( (#vr.7, 0) ~~> (#vk.5, 0) )
                      qed
                    qed
                  qed
                next
                  case c_xor_case_24
                  solve( !KU( (~r1⊕x⊕~r1.1⊕~r1.2) ) @ #vk.7 )
                    case c_xor_case_1
                    by contradiction /* cyclic */
                  next
                    case c_xor_case_2
                    solve( !KU( (~k⊕~k1) ) @ #vk.8 )
                      case c_xor
                      by solve( !KU( ~k1 ) @ #vk.10 )
                    next
                      case coerce
                      solve( !KD( (~k⊕~k1) ) ▶₀ #vk.6 )
                        case acceptreader
                        by solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                      next
                        case initiatereader
                        by contradiction /* impossible chain */
                      next
                        case tag1
                        solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                          case d_0_fst
                          by contradiction /* impossible chain */
                        next
                          case d_0_snd
                          by solve( (#vr.7, 0) ~~> (#vk.6, 0) )
                        qed
                      qed
                    qed
                  next
                    case c_xor_case_3
                    by contradiction /* cyclic */
                  next
                    case c_xor_case_4
                    by contradiction /* cyclic */
                  next
                    case c_xor_case_5
                    solve( !KU( (~k⊕~k1) ) @ #vk.8 )
                      case c_xor
                      by solve( !KU( ~k1 ) @ #vk.11 )
                    next
                      case coerce
                      solve( !KD( (~k⊕~k1) ) ▶₀ #vk.6 )
                        case acceptreader
                        by solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                      next
                        case initiatereader
                        by contradiction /* impossible chain */
                      next
                        case tag1
                        solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                          case d_0_fst
                          by contradiction /* impossible chain */
                        next
                          case d_0_snd
                          by solve( (#vr.7, 0) ~~> (#vk.6, 0) )
                        qed
                      qed
                    qed
                  next
                    case c_xor_case_6
                    solve( !KU( (~k⊕~k1) ) @ #vk.8 )
                      case c_xor
                      by solve( !KU( ~k1 ) @ #vk.11 )
                    next
                      case coerce
                      solve( !KD( (~k⊕~k1) ) ▶₀ #vk.6 )
                        case acceptreader
                        by solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                      next
                        case initiatereader
                        by contradiction /* impossible chain */
                      next
                        case tag1
                        solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                          case d_0_fst
                          by contradiction /* impossible chain */
                        next
                          case d_0_snd
                          by solve( (#vr.7, 0) ~~> (#vk.6, 0) )
                        qed
                      qed
                    qed
                  next
                    case c_xor_case_7
                    by contradiction /* cyclic */
                  next
                    case coerce
                    solve( !KD( (~r1⊕x⊕~r1.1⊕~r1.2) ) ▶₀ #vk.5 )
                      case acceptreader
                      by solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                    next
                      case initiatereader
                      by contradiction /* impossible chain */
                    next
                      case tag1
                      solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                        case d_0_fst
                        by contradiction /* impossible chain */
                      next
                        case d_0_snd
                        by solve( (#vr.7, 0) ~~> (#vk.5, 0) )
                      qed
                    qed
                  qed
                next
                  case c_xor_case_25
                  solve( !KU( (~r1⊕x⊕~r1.2) ) @ #vk.7 )
                    case c_xor_case_1
                    solve( !KU( (~k⊕~k1⊕~r1.1) ) @ #vk.8 )
                      case c_xor_case_1
                      by solve( !KU( ~k1 ) @ #vk.11 )
                    next
                      case c_xor_case_2
                      by solve( !KU( ~k ) @ #vk.11 )
                    next
                      case c_xor_case_3
                      by contradiction /* cyclic */
                    next
                      case coerce
                      solve( !KD( (~k⊕~k1⊕~r1.1) ) ▶₀ #vk.6 )
                        case acceptreader
                        by solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                      next
                        case initiatereader
                        by contradiction /* impossible chain */
                      next
                        case tag1
                        solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                          case d_0_fst
                          by contradiction /* impossible chain */
                        next
                          case d_0_snd
                          by solve( (#vr.7, 0) ~~> (#vk.6, 0) )
                        qed
                      qed
                    qed
                  next
                    case c_xor_case_2
                    by contradiction /* cyclic */
                  next
                    case c_xor_case_3
                    by contradiction /* cyclic */
                  next
                    case coerce
                    solve( !KD( (~r1⊕x⊕~r1.2) ) ▶₀ #vk.5 )
                      case acceptreader
                      by solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                    next
                      case initiatereader
                      by contradiction /* impossible chain */
                    next
                      case tag1
                      solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                        case d_0_fst
                        by contradiction /* impossible chain */
                      next
                        case d_0_snd
                        by solve( (#vr.7, 0) ~~> (#vk.5, 0) )
                      qed
                    qed
                  qed
                next
                  case c_xor_case_26
                  solve( !KU( (~r1⊕~r1.1⊕~r1.2) ) @ #vk.7 )
                    case c_xor_case_1
                    by contradiction /* cyclic */
                  next
                    case c_xor_case_2
                    by contradiction /* cyclic */
                  next
                    case c_xor_case_3
                    by contradiction /* cyclic */
                  next
                    case coerce
                    solve( !KD( (~r1⊕~r1.1⊕~r1.2) ) ▶₀ #vk.5 )
                      case acceptreader
                      by solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                    next
                      case initiatereader
                      by contradiction /* impossible chain */
                    next
                      case tag1
                      solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                        case d_0_fst
                        by contradiction /* impossible chain */
                      next
                        case d_0_snd
                        by solve( (#vr.7, 0) ~~> (#vk.5, 0) )
                      qed
                    qed
                  qed
                next
                  case c_xor_case_27
                  solve( !KU( (~r1⊕~r1.2) ) @ #vk.7 )
                    case c_xor
                    by contradiction /* cyclic */
                  next
                    case coerce
                    solve( !KD( (~r1⊕~r1.2) ) ▶₀ #vk.5 )
                      case acceptreader
                      by solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                    next
                      case initiatereader
                      by contradiction /* impossible chain */
                    next
                      case tag1
                      solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                        case d_0_fst
                        by contradiction /* impossible chain */
                      next
                        case d_0_snd
                        by solve( (#vr.7, 0) ~~> (#vk.5, 0) )
                      qed
                    qed
                  qed
                next
                  case c_xor_case_28
                  solve( !KU( (x⊕~r1.1⊕~r1.2) ) @ #vk.7 )
                    case c_xor_case_1
                    by contradiction /* cyclic */
                  next
                    case c_xor_case_2
                    solve( !KU( (~k⊕~k1⊕~r1) ) @ #vk.8 )
                      case c_xor_case_1
                      by solve( !KU( ~k1 ) @ #vk.11 )
                    next
                      case c_xor_case_2
                      by solve( !KU( ~k ) @ #vk.11 )
                    next
                      case c_xor_case_3
                      by contradiction /* cyclic */
                    next
                      case coerce
                      solve( !KD( (~k⊕~k1⊕~r1) ) ▶₀ #vk.6 )
                        case acceptreader
                        by solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                      next
                        case initiatereader
                        by contradiction /* impossible chain */
                      next
                        case tag1
                        solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                          case d_0_fst
                          by contradiction /* impossible chain */
                        next
                          case d_0_snd
                          by solve( (#vr.7, 0) ~~> (#vk.6, 0) )
                        qed
                      qed
                    qed
                  next
                    case c_xor_case_3
                    by contradiction /* cyclic */
                  next
                    case coerce
                    solve( !KD( (x⊕~r1.1⊕~r1.2) ) ▶₀ #vk.5 )
                      case acceptreader
                      by solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                    next
                      case initiatereader
                      by contradiction /* impossible chain */
                    next
                      case tag1
                      solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                        case d_0_fst
                        by contradiction /* impossible chain */
                      next
                        case d_0_snd
                        by solve( (#vr.7, 0) ~~> (#vk.5, 0) )
                      qed
                    qed
                  qed
                next
                  case c_xor_case_29
                  solve( !KU( (x⊕~r1.2) ) @ #vk.7 )
                    case c_xor
                    by contradiction /* cyclic */
                  next
                    case coerce
                    solve( !KD( (x⊕~r1.2) ) ▶₀ #vk.5 )
                      case acceptreader
                      by solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                    next
                      case initiatereader
                      by contradiction /* impossible chain */
                    next
                      case tag1
                      solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                        case d_0_fst
                        by contradiction /* impossible chain */
                      next
                        case d_0_snd
                        by solve( (#vr.7, 0) ~~> (#vk.5, 0) )
                      qed
                    qed
                  qed
                next
                  case c_xor_case_30
                  solve( !KU( (~r1.1⊕~r1.2) ) @ #vk.7 )
                    case c_xor
                    by contradiction /* cyclic */
                  next
                    case coerce
                    solve( !KD( (~r1.1⊕~r1.2) ) ▶₀ #vk.5 )
                      case acceptreader
                      by solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                    next
                      case initiatereader
                      by contradiction /* impossible chain */
                    next
                      case tag1
                      solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                        case d_0_fst
                        by contradiction /* impossible chain */
                      next
                        case d_0_snd
                        by solve( (#vr.7, 0) ~~> (#vk.5, 0) )
                      qed
                    qed
                  qed
                next
                  case c_xor_case_31
                  by contradiction /* cyclic */
                next
                  case coerce
                  solve( !KD( (~k⊕~k1⊕~r1⊕x⊕~r1.1⊕~r1.2) ) ▶₀ #vk.4 )
                    case acceptreader
                    by solve( (#vl.2, 0) ~~> (#vk.4, 0) )
                  next
                    case initiatereader
                    by contradiction /* impossible chain */
                  next
                    case tag1
                    solve( (#vl.2, 0) ~~> (#vk.4, 0) )
                      case d_0_fst
                      by contradiction /* impossible chain */
                    next
                      case d_0_snd
                      by solve( (#vr.7, 0) ~~> (#vk.4, 0) )
                    qed
                  qed
                qed
              next
                case split_case_3
                solve( !KU( (~k⊕~k1⊕~r1⊕~r1.1) ) @ #vk.6 )
                  case c_xor_case_1
                  by contradiction /* cyclic */
                next
                  case c_xor_case_2
                  by solve( !KU( ~k1 ) @ #vk.8 )
                next
                  case c_xor_case_3
                  solve( !KU( (~k⊕~r1.1) ) @ #vk.7 )
                    case c_xor
                    by contradiction /* cyclic */
                  next
                    case coerce
                    solve( !KD( (~k⊕~r1.1) ) ▶₀ #vk.5 )
                      case acceptreader
                      by solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                    next
                      case initiatereader
                      by contradiction /* impossible chain */
                    next
                      case tag1
                      solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                        case d_0_fst
                        by contradiction /* impossible chain */
                      next
                        case d_0_snd
                        by solve( (#vr.7, 0) ~~> (#vk.5, 0) )
                      qed
                    qed
                  qed
                next
                  case c_xor_case_4
                  by solve( !KU( ~k ) @ #vk.8 )
                next
                  case c_xor_case_5
                  solve( !KU( (~k1⊕~r1.1) ) @ #vk.7 )
                    case c_xor
                    by contradiction /* cyclic */
                  next
                    case coerce
                    solve( !KD( (~k1⊕~r1.1) ) ▶₀ #vk.5 )
                      case acceptreader
                      by solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                    next
                      case initiatereader
                      by contradiction /* impossible chain */
                    next
                      case tag1
                      solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                        case d_0_fst
                        by contradiction /* impossible chain */
                      next
                        case d_0_snd
                        by solve( (#vr.7, 0) ~~> (#vk.5, 0) )
                      qed
                    qed
                  qed
                next
                  case c_xor_case_6
                  solve( !KU( (~r1⊕~r1.1) ) @ #vk.7 )
                    case c_xor
                    by contradiction /* cyclic */
                  next
                    case coerce
                    solve( !KD( (~r1⊕~r1.1) ) ▶₀ #vk.5 )
                      case acceptreader
                      by solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                    next
                      case initiatereader
                      by contradiction /* impossible chain */
                    next
                      case tag1
                      solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                        case d_0_fst
                        by contradiction /* impossible chain */
                      next
                        case d_0_snd
                        by solve( (#vr.7, 0) ~~> (#vk.5, 0) )
                      qed
                    qed
                  qed
                next
                  case c_xor_case_7
                  by contradiction /* cyclic */
                next
                  case coerce
                  solve( !KD( (~k⊕~k1⊕~r1⊕~r1.1) ) ▶₀ #vk.4 )
                    case acceptreader
                    by solve( (#vl.2, 0) ~~> (#vk.4, 0) )
                  next
                    case initiatereader
                    by contradiction /* impossible chain */
                  next
                    case tag1
                    solve( (#vl.2, 0) ~~> (#vk.4, 0) )
                      case d_0_fst
                      by contradiction /* impossible chain */
                    next
                      case d_0_snd
                      by solve( (#vr.7, 0) ~~> (#vk.4, 0) )
                    qed
                  qed
                qed
              next
                case split_case_4
                solve( !KU( (~k⊕~r1⊕~r1.1) ) @ #vk.6 )
                  case c_xor_case_1
                  by contradiction /* cyclic */
                next
                  case c_xor_case_2
                  by solve( !KU( ~k ) @ #vk.8 )
                next
                  case c_xor_case_3
                  by contradiction /* cyclic */
                next
                  case coerce
                  solve( !KD( (~k⊕~r1⊕~r1.1) ) ▶₀ #vk.4 )
                    case acceptreader
                    by solve( (#vl.2, 0) ~~> (#vk.4, 0) )
                  next
                    case initiatereader
                    by contradiction /* impossible chain */
                  next
                    case tag1
                    solve( (#vl.2, 0) ~~> (#vk.4, 0) )
                      case d_0_fst
                      by contradiction /* impossible chain */
                    next
                      case d_0_snd
                      by solve( (#vr.7, 0) ~~> (#vk.4, 0) )
                    qed
                  qed
                qed
              next
                case split_case_5
                solve( !KU( (~k⊕~r1⊕x⊕~r1.1) ) @ #vk.6 )
                  case c_xor_case_1
                  solve( !KU( (~k1⊕x⊕~r1.2) ) @ #vk.6 )
                    case c_xor_case_1
                    solve( !KU( (~k⊕~r1⊕~r1.1) ) @ #vk.7 )
                      case c_xor_case_1
                      by contradiction /* cyclic */
                    next
                      case c_xor_case_2
                      by solve( !KU( ~k ) @ #vk.11 )
                    next
                      case c_xor_case_3
                      by contradiction /* cyclic */
                    next
                      case coerce
                      solve( !KD( (~k⊕~r1⊕~r1.1) ) ▶₀ #vk.6 )
                        case acceptreader
                        by solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                      next
                        case initiatereader
                        by contradiction /* impossible chain */
                      next
                        case tag1
                        solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                          case d_0_fst
                          by contradiction /* impossible chain */
                        next
                          case d_0_snd
                          by solve( (#vr.7, 0) ~~> (#vk.6, 0) )
                        qed
                      qed
                    qed
                  next
                    case c_xor_case_2
                    by solve( !KU( ~k1 ) @ #vk.10 )
                  next
                    case c_xor_case_3
                    solve( !KU( (~k⊕~r1⊕~r1.1) ) @ #vk.7 )
                      case c_xor_case_1
                      by contradiction /* cyclic */
                    next
                      case c_xor_case_2
                      by solve( !KU( ~k ) @ #vk.12 )
                    next
                      case c_xor_case_3
                      by contradiction /* cyclic */
                    next
                      case coerce
                      solve( !KD( (~k⊕~r1⊕~r1.1) ) ▶₀ #vk.6 )
                        case acceptreader
                        by solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                      next
                        case initiatereader
                        by contradiction /* impossible chain */
                      next
                        case tag1
                        solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                          case d_0_fst
                          by contradiction /* impossible chain */
                        next
                          case d_0_snd
                          by solve( (#vr.7, 0) ~~> (#vk.6, 0) )
                        qed
                      qed
                    qed
                  next
                    case coerce
                    solve( !KD( (~k1⊕x⊕~r1.2) ) ▶₀ #vk.5 )
                      case acceptreader
                      by solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                    next
                      case initiatereader
                      by contradiction /* impossible chain */
                    next
                      case tag1
                      solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                        case d_0_fst
                        by contradiction /* impossible chain */
                      next
                        case d_0_snd
                        by solve( (#vr.7, 0) ~~> (#vk.5, 0) )
                      qed
                    qed
                  qed
                next
                  case c_xor_case_2
                  by contradiction /* cyclic */
                next
                  case c_xor_case_3
                  solve( !KU( (~k1⊕x⊕~r1.2) ) @ #vk.6 )
                    case c_xor_case_1
                    solve( !KU( (~k⊕~r1.1) ) @ #vk.7 )
                      case c_xor
                      by contradiction /* cyclic */
                    next
                      case coerce
                      solve( !KD( (~k⊕~r1.1) ) ▶₀ #vk.6 )
                        case acceptreader
                        by solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                      next
                        case initiatereader
                        by contradiction /* impossible chain */
                      next
                        case tag1
                        solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                          case d_0_fst
                          by contradiction /* impossible chain */
                        next
                          case d_0_snd
                          by solve( (#vr.7, 0) ~~> (#vk.6, 0) )
                        qed
                      qed
                    qed
                  next
                    case c_xor_case_2
                    by solve( !KU( ~k1 ) @ #vk.10 )
                  next
                    case c_xor_case_3
                    solve( !KU( (~k⊕~r1.1) ) @ #vk.7 )
                      case c_xor
                      by contradiction /* cyclic */
                    next
                      case coerce
                      solve( !KD( (~k⊕~r1.1) ) ▶₀ #vk.6 )
                        case acceptreader
                        by solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                      next
                        case initiatereader
                        by contradiction /* impossible chain */
                      next
                        case tag1
                        solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                          case d_0_fst
                          by contradiction /* impossible chain */
                        next
                          case d_0_snd
                          by solve( (#vr.7, 0) ~~> (#vk.6, 0) )
                        qed
                      qed
                    qed
                  next
                    case coerce
                    solve( !KD( (~k1⊕x⊕~r1.2) ) ▶₀ #vk.5 )
                      case acceptreader
                      by solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                    next
                      case initiatereader
                      by contradiction /* impossible chain */
                    next
                      case tag1
                      solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                        case d_0_fst
                        by contradiction /* impossible chain */
                      next
                        case d_0_snd
                        by solve( (#vr.7, 0) ~~> (#vk.5, 0) )
                      qed
                    qed
                  qed
                next
                  case c_xor_case_4
                  by solve( !KU( ~k ) @ #vk.8 )
                next
                  case c_xor_case_5
                  solve( !KU( (~k1⊕x⊕~r1.2) ) @ #vk.6 )
                    case c_xor_case_1
                    solve( !KU( (~r1⊕~r1.1) ) @ #vk.7 )
                      case c_xor
                      by contradiction /* cyclic */
                    next
                      case coerce
                      solve( !KD( (~r1⊕~r1.1) ) ▶₀ #vk.6 )
                        case acceptreader
                        by solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                      next
                        case initiatereader
                        by contradiction /* impossible chain */
                      next
                        case tag1
                        solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                          case d_0_fst
                          by contradiction /* impossible chain */
                        next
                          case d_0_snd
                          by solve( (#vr.7, 0) ~~> (#vk.6, 0) )
                        qed
                      qed
                    qed
                  next
                    case c_xor_case_2
                    by solve( !KU( ~k1 ) @ #vk.10 )
                  next
                    case c_xor_case_3
                    solve( !KU( (~r1⊕~r1.1) ) @ #vk.7 )
                      case c_xor
                      by contradiction /* cyclic */
                    next
                      case coerce
                      solve( !KD( (~r1⊕~r1.1) ) ▶₀ #vk.6 )
                        case acceptreader
                        by solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                      next
                        case initiatereader
                        by contradiction /* impossible chain */
                      next
                        case tag1
                        solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                          case d_0_fst
                          by contradiction /* impossible chain */
                        next
                          case d_0_snd
                          by solve( (#vr.7, 0) ~~> (#vk.6, 0) )
                        qed
                      qed
                    qed
                  next
                    case coerce
                    solve( !KD( (~k1⊕x⊕~r1.2) ) ▶₀ #vk.5 )
                      case acceptreader
                      by solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                    next
                      case initiatereader
                      by contradiction /* impossible chain */
                    next
                      case tag1
                      solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                        case d_0_fst
                        by contradiction /* impossible chain */
                      next
                        case d_0_snd
                        by solve( (#vr.7, 0) ~~> (#vk.5, 0) )
                      qed
                    qed
                  qed
                next
                  case c_xor_case_6
                  solve( !KU( (~k1⊕x⊕~r1.2) ) @ #vk.6 )
                    case c_xor_case_1
                    solve( !KU( (x⊕~r1.1) ) @ #vk.7 )
                      case c_xor
                      by contradiction /* cyclic */
                    next
                      case coerce
                      solve( !KD( (x⊕~r1.1) ) ▶₀ #vk.6 )
                        case acceptreader
                        by solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                      next
                        case initiatereader
                        by contradiction /* impossible chain */
                      next
                        case tag1
                        solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                          case d_0_fst
                          by contradiction /* impossible chain */
                        next
                          case d_0_snd
                          by solve( (#vr.7, 0) ~~> (#vk.6, 0) )
                        qed
                      qed
                    qed
                  next
                    case c_xor_case_2
                    by solve( !KU( ~k1 ) @ #vk.10 )
                  next
                    case c_xor_case_3
                    solve( !KU( (x⊕~r1.1) ) @ #vk.7 )
                      case c_xor
                      by contradiction /* cyclic */
                    next
                      case coerce
                      solve( !KD( (x⊕~r1.1) ) ▶₀ #vk.6 )
                        case acceptreader
                        by solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                      next
                        case initiatereader
                        by contradiction /* impossible chain */
                      next
                        case tag1
                        solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                          case d_0_fst
                          by contradiction /* impossible chain */
                        next
                          case d_0_snd
                          by solve( (#vr.7, 0) ~~> (#vk.6, 0) )
                        qed
                      qed
                    qed
                  next
                    case coerce
                    solve( !KD( (~k1⊕x⊕~r1.2) ) ▶₀ #vk.5 )
                      case acceptreader
                      by solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                    next
                      case initiatereader
                      by contradiction /* impossible chain */
                    next
                      case tag1
                      solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                        case d_0_fst
                        by contradiction /* impossible chain */
                      next
                        case d_0_snd
                        by solve( (#vr.7, 0) ~~> (#vk.5, 0) )
                      qed
                    qed
                  qed
                next
                  case c_xor_case_7
                  by contradiction /* cyclic */
                next
                  case coerce
                  solve( !KD( (~k⊕~r1⊕x⊕~r1.1) ) ▶₀ #vk.4 )
                    case acceptreader
                    by solve( (#vl.2, 0) ~~> (#vk.4, 0) )
                  next
                    case initiatereader
                    by contradiction /* impossible chain */
                  next
                    case tag1
                    solve( (#vl.2, 0) ~~> (#vk.4, 0) )
                      case d_0_fst
                      by contradiction /* impossible chain */
                    next
                      case d_0_snd
                      by solve( (#vr.7, 0) ~~> (#vk.4, 0) )
                    qed
                  qed
                qed
              next
                case split_case_6
                solve( !KU( (~k⊕~r1⊕x⊕~r1.1⊕~r1.2) ) @ #vk.6 )
                  case c_xor_case_01
                  by contradiction /* cyclic */
                next
                  case c_xor_case_02
                  solve( !KU( (~k1⊕x) ) @ #vk.6 )
                    case c_xor
                    by solve( !KU( ~k1 ) @ #vk.9 )
                  next
                    case coerce
                    solve( !KD( (~k1⊕x) ) ▶₀ #vk.5 )
                      case acceptreader
                      by solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                    next
                      case initiatereader
                      by contradiction /* impossible chain */
                    next
                      case tag1
                      solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                        case d_0_fst
                        by contradiction /* impossible chain */
                      next
                        case d_0_snd
                        by solve( (#vr.7, 0) ~~> (#vk.5, 0) )
                      qed
                    qed
                  qed
                next
                  case c_xor_case_03
                  solve( !KU( (~k1⊕x) ) @ #vk.6 )
                    case c_xor
                    by solve( !KU( ~k1 ) @ #vk.10 )
                  next
                    case coerce
                    solve( !KD( (~k1⊕x) ) ▶₀ #vk.5 )
                      case acceptreader
                      by solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                    next
                      case initiatereader
                      by contradiction /* impossible chain */
                    next
                      case tag1
                      solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                        case d_0_fst
                        by contradiction /* impossible chain */
                      next
                        case d_0_snd
                        by solve( (#vr.7, 0) ~~> (#vk.5, 0) )
                      qed
                    qed
                  qed
                next
                  case c_xor_case_04
                  by contradiction /* cyclic */
                next
                  case c_xor_case_05
                  solve( !KU( (~k1⊕x) ) @ #vk.6 )
                    case c_xor
                    by solve( !KU( ~k1 ) @ #vk.10 )
                  next
                    case coerce
                    solve( !KD( (~k1⊕x) ) ▶₀ #vk.5 )
                      case acceptreader
                      by solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                    next
                      case initiatereader
                      by contradiction /* impossible chain */
                    next
                      case tag1
                      solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                        case d_0_fst
                        by contradiction /* impossible chain */
                      next
                        case d_0_snd
                        by solve( (#vr.7, 0) ~~> (#vk.5, 0) )
                      qed
                    qed
                  qed
                next
                  case c_xor_case_06
                  solve( !KU( (~k1⊕x) ) @ #vk.6 )
                    case c_xor
                    by solve( !KU( ~k1 ) @ #vk.10 )
                  next
                    case coerce
                    solve( !KD( (~k1⊕x) ) ▶₀ #vk.5 )
                      case acceptreader
                      by solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                    next
                      case initiatereader
                      by contradiction /* impossible chain */
                    next
                      case tag1
                      solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                        case d_0_fst
                        by contradiction /* impossible chain */
                      next
                        case d_0_snd
                        by solve( (#vr.7, 0) ~~> (#vk.5, 0) )
                      qed
                    qed
                  qed
                next
                  case c_xor_case_07
                  solve( !KU( (~k1⊕x) ) @ #vk.6 )
                    case c_xor
                    by solve( !KU( ~k1 ) @ #vk.10 )
                  next
                    case coerce
                    solve( !KD( (~k1⊕x) ) ▶₀ #vk.5 )
                      case acceptreader
                      by solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                    next
                      case initiatereader
                      by contradiction /* impossible chain */
                    next
                      case tag1
                      solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                        case d_0_fst
                        by contradiction /* impossible chain */
                      next
                        case d_0_snd
                        by solve( (#vr.7, 0) ~~> (#vk.5, 0) )
                      qed
                    qed
                  qed
                next
                  case c_xor_case_08
                  by solve( !KU( ~k ) @ #vk.8 )
                next
                  case c_xor_case_09
                  solve( !KU( (~k1⊕x) ) @ #vk.6 )
                    case c_xor
                    by solve( !KU( ~k1 ) @ #vk.10 )
                  next
                    case coerce
                    solve( !KD( (~k1⊕x) ) ▶₀ #vk.5 )
                      case acceptreader
                      by solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                    next
                      case initiatereader
                      by contradiction /* impossible chain */
                    next
                      case tag1
                      solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                        case d_0_fst
                        by contradiction /* impossible chain */
                      next
                        case d_0_snd
                        by solve( (#vr.7, 0) ~~> (#vk.5, 0) )
                      qed
                    qed
                  qed
                next
                  case c_xor_case_10
                  solve( !KU( (~k1⊕x) ) @ #vk.6 )
                    case c_xor
                    by solve( !KU( ~k1 ) @ #vk.10 )
                  next
                    case coerce
                    solve( !KD( (~k1⊕x) ) ▶₀ #vk.5 )
                      case acceptreader
                      by solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                    next
                      case initiatereader
                      by contradiction /* impossible chain */
                    next
                      case tag1
                      solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                        case d_0_fst
                        by contradiction /* impossible chain */
                      next
                        case d_0_snd
                        by solve( (#vr.7, 0) ~~> (#vk.5, 0) )
                      qed
                    qed
                  qed
                next
                  case c_xor_case_11
                  solve( !KU( (~k1⊕x) ) @ #vk.6 )
                    case c_xor
                    by solve( !KU( ~k1 ) @ #vk.10 )
                  next
                    case coerce
                    solve( !KD( (~k1⊕x) ) ▶₀ #vk.5 )
                      case acceptreader
                      by solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                    next
                      case initiatereader
                      by contradiction /* impossible chain */
                    next
                      case tag1
                      solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                        case d_0_fst
                        by contradiction /* impossible chain */
                      next
                        case d_0_snd
                        by solve( (#vr.7, 0) ~~> (#vk.5, 0) )
                      qed
                    qed
                  qed
                next
                  case c_xor_case_12
                  solve( !KU( (~k1⊕x) ) @ #vk.6 )
                    case c_xor
                    by solve( !KU( ~k1 ) @ #vk.10 )
                  next
                    case coerce
                    solve( !KD( (~k1⊕x) ) ▶₀ #vk.5 )
                      case acceptreader
                      by solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                    next
                      case initiatereader
                      by contradiction /* impossible chain */
                    next
                      case tag1
                      solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                        case d_0_fst
                        by contradiction /* impossible chain */
                      next
                        case d_0_snd
                        by solve( (#vr.7, 0) ~~> (#vk.5, 0) )
                      qed
                    qed
                  qed
                next
                  case c_xor_case_13
                  solve( !KU( (~k1⊕x) ) @ #vk.6 )
                    case c_xor
                    by solve( !KU( ~k1 ) @ #vk.10 )
                  next
                    case coerce
                    solve( !KD( (~k1⊕x) ) ▶₀ #vk.5 )
                      case acceptreader
                      by solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                    next
                      case initiatereader
                      by contradiction /* impossible chain */
                    next
                      case tag1
                      solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                        case d_0_fst
                        by contradiction /* impossible chain */
                      next
                        case d_0_snd
                        by solve( (#vr.7, 0) ~~> (#vk.5, 0) )
                      qed
                    qed
                  qed
                next
                  case c_xor_case_14
                  solve( !KU( (~k1⊕x) ) @ #vk.6 )
                    case c_xor
                    by solve( !KU( ~k1 ) @ #vk.10 )
                  next
                    case coerce
                    solve( !KD( (~k1⊕x) ) ▶₀ #vk.5 )
                      case acceptreader
                      by solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                    next
                      case initiatereader
                      by contradiction /* impossible chain */
                    next
                      case tag1
                      solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                        case d_0_fst
                        by contradiction /* impossible chain */
                      next
                        case d_0_snd
                        by solve( (#vr.7, 0) ~~> (#vk.5, 0) )
                      qed
                    qed
                  qed
                next
                  case c_xor_case_15
                  by contradiction /* cyclic */
                next
                  case coerce
                  solve( !KD( (~k⊕~r1⊕x⊕~r1.1⊕~r1.2) ) ▶₀ #vk.4 )
                    case acceptreader
                    by solve( (#vl.2, 0) ~~> (#vk.4, 0) )
                  next
                    case initiatereader
                    by contradiction /* impossible chain */
                  next
                    case tag1
                    solve( (#vl.2, 0) ~~> (#vk.4, 0) )
                      case d_0_fst
                      by contradiction /* impossible chain */
                    next
                      case d_0_snd
                      by solve( (#vr.7, 0) ~~> (#vk.4, 0) )
                    qed
                  qed
                qed
              next
                case split_case_7
                solve( !KU( (~k⊕~k1⊕~r1⊕x⊕~r1.1) ) @ #vk.6 )
                  case c_xor_case_01
                  solve( !KU( (x⊕~r1.2) ) @ #vk.6 )
                    case c_xor
                    solve( !KU( (~k⊕~k1⊕~r1⊕~r1.1) ) @ #vk.7 )
                      case c_xor_case_1
                      by contradiction /* cyclic */
                    next
                      case c_xor_case_2
                      by solve( !KU( ~k1 ) @ #vk.11 )
                    next
                      case c_xor_case_3
                      solve( !KU( (~k⊕~r1.1) ) @ #vk.10 )
                        case c_xor
                        by contradiction /* cyclic */
                      next
                        case coerce
                        solve( !KD( (~k⊕~r1.1) ) ▶₀ #vk.7 )
                          case acceptreader
                          by solve( (#vl.2, 0) ~~> (#vk.7, 0) )
                        next
                          case initiatereader
                          by contradiction /* impossible chain */
                        next
                          case tag1
                          solve( (#vl.2, 0) ~~> (#vk.7, 0) )
                            case d_0_fst
                            by contradiction /* impossible chain */
                          next
                            case d_0_snd
                            by solve( (#vr.7, 0) ~~> (#vk.7, 0) )
                          qed
                        qed
                      qed
                    next
                      case c_xor_case_4
                      by solve( !KU( ~k ) @ #vk.11 )
                    next
                      case c_xor_case_5
                      solve( !KU( (~k1⊕~r1.1) ) @ #vk.10 )
                        case c_xor
                        by contradiction /* cyclic */
                      next
                        case coerce
                        solve( !KD( (~k1⊕~r1.1) ) ▶₀ #vk.7 )
                          case acceptreader
                          by solve( (#vl.2, 0) ~~> (#vk.7, 0) )
                        next
                          case initiatereader
                          by contradiction /* impossible chain */
                        next
                          case tag1
                          solve( (#vl.2, 0) ~~> (#vk.7, 0) )
                            case d_0_fst
                            by contradiction /* impossible chain */
                          next
                            case d_0_snd
                            by solve( (#vr.7, 0) ~~> (#vk.7, 0) )
                          qed
                        qed
                      qed
                    next
                      case c_xor_case_6
                      solve( !KU( (~r1⊕~r1.1) ) @ #vk.10 )
                        case c_xor
                        by contradiction /* cyclic */
                      next
                        case coerce
                        solve( !KD( (~r1⊕~r1.1) ) ▶₀ #vk.7 )
                          case acceptreader
                          by solve( (#vl.2, 0) ~~> (#vk.7, 0) )
                        next
                          case initiatereader
                          by contradiction /* impossible chain */
                        next
                          case tag1
                          solve( (#vl.2, 0) ~~> (#vk.7, 0) )
                            case d_0_fst
                            by contradiction /* impossible chain */
                          next
                            case d_0_snd
                            by solve( (#vr.7, 0) ~~> (#vk.7, 0) )
                          qed
                        qed
                      qed
                    next
                      case c_xor_case_7
                      by contradiction /* cyclic */
                    next
                      case coerce
                      solve( !KD( (~k⊕~k1⊕~r1⊕~r1.1) ) ▶₀ #vk.6 )
                        case acceptreader
                        by solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                      next
                        case initiatereader
                        by contradiction /* impossible chain */
                      next
                        case tag1
                        solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                          case d_0_fst
                          by contradiction /* impossible chain */
                        next
                          case d_0_snd
                          by solve( (#vr.7, 0) ~~> (#vk.6, 0) )
                        qed
                      qed
                    qed
                  next
                    case coerce
                    solve( !KD( (x⊕~r1.2) ) ▶₀ #vk.5 )
                      case acceptreader
                      by solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                    next
                      case initiatereader
                      by contradiction /* impossible chain */
                    next
                      case tag1
                      solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                        case d_0_fst
                        by contradiction /* impossible chain */
                      next
                        case d_0_snd
                        by solve( (#vr.7, 0) ~~> (#vk.5, 0) )
                      qed
                    qed
                  qed
                next
                  case c_xor_case_02
                  by contradiction /* cyclic */
                next
                  case c_xor_case_03
                  solve( !KU( (x⊕~r1.2) ) @ #vk.6 )
                    case c_xor
                    solve( !KU( (~k⊕~k1⊕~r1.1) ) @ #vk.7 )
                      case c_xor_case_1
                      by solve( !KU( ~k1 ) @ #vk.12 )
                    next
                      case c_xor_case_2
                      by solve( !KU( ~k ) @ #vk.12 )
                    next
                      case c_xor_case_3
                      by contradiction /* cyclic */
                    next
                      case coerce
                      solve( !KD( (~k⊕~k1⊕~r1.1) ) ▶₀ #vk.6 )
                        case acceptreader
                        by solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                      next
                        case initiatereader
                        by contradiction /* impossible chain */
                      next
                        case tag1
                        solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                          case d_0_fst
                          by contradiction /* impossible chain */
                        next
                          case d_0_snd
                          by solve( (#vr.7, 0) ~~> (#vk.6, 0) )
                        qed
                      qed
                    qed
                  next
                    case coerce
                    solve( !KD( (x⊕~r1.2) ) ▶₀ #vk.5 )
                      case acceptreader
                      by solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                    next
                      case initiatereader
                      by contradiction /* impossible chain */
                    next
                      case tag1
                      solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                        case d_0_fst
                        by contradiction /* impossible chain */
                      next
                        case d_0_snd
                        by solve( (#vr.7, 0) ~~> (#vk.5, 0) )
                      qed
                    qed
                  qed
                next
                  case c_xor_case_04
                  by solve( !KU( ~k1 ) @ #vk.8 )
                next
                  case c_xor_case_05
                  solve( !KU( (x⊕~r1.2) ) @ #vk.6 )
                    case c_xor
                    solve( !KU( (~k⊕~r1⊕~r1.1) ) @ #vk.7 )
                      case c_xor_case_1
                      by contradiction /* cyclic */
                    next
                      case c_xor_case_2
                      by solve( !KU( ~k ) @ #vk.12 )
                    next
                      case c_xor_case_3
                      by contradiction /* cyclic */
                    next
                      case coerce
                      solve( !KD( (~k⊕~r1⊕~r1.1) ) ▶₀ #vk.6 )
                        case acceptreader
                        by solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                      next
                        case initiatereader
                        by contradiction /* impossible chain */
                      next
                        case tag1
                        solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                          case d_0_fst
                          by contradiction /* impossible chain */
                        next
                          case d_0_snd
                          by solve( (#vr.7, 0) ~~> (#vk.6, 0) )
                        qed
                      qed
                    qed
                  next
                    case coerce
                    solve( !KD( (x⊕~r1.2) ) ▶₀ #vk.5 )
                      case acceptreader
                      by solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                    next
                      case initiatereader
                      by contradiction /* impossible chain */
                    next
                      case tag1
                      solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                        case d_0_fst
                        by contradiction /* impossible chain */
                      next
                        case d_0_snd
                        by solve( (#vr.7, 0) ~~> (#vk.5, 0) )
                      qed
                    qed
                  qed
                next
                  case c_xor_case_06
                  solve( !KU( (x⊕~r1.2) ) @ #vk.6 )
                    case c_xor
                    solve( !KU( (~k⊕x⊕~r1.1) ) @ #vk.7 )
                      case c_xor_case_1
                      solve( !KU( (~k1⊕~r1) ) @ #vk.8 )
                        case c_xor
                        by contradiction /* cyclic */
                      next
                        case coerce
                        solve( !KD( (~k1⊕~r1) ) ▶₀ #vk.7 )
                          case acceptreader
                          by solve( (#vl.2, 0) ~~> (#vk.7, 0) )
                        next
                          case initiatereader
                          by contradiction /* impossible chain */
                        next
                          case tag1
                          solve( (#vl.2, 0) ~~> (#vk.7, 0) )
                            case d_0_fst
                            by contradiction /* impossible chain */
                          next
                            case d_0_snd
                            by solve( (#vr.7, 0) ~~> (#vk.7, 0) )
                          qed
                        qed
                      qed
                    next
                      case c_xor_case_2
                      by solve( !KU( ~k ) @ #vk.12 )
                    next
                      case c_xor_case_3
                      by contradiction /* cyclic */
                    next
                      case coerce
                      solve( !KD( (~k⊕x⊕~r1.1) ) ▶₀ #vk.6 )
                        case acceptreader
                        by solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                      next
                        case initiatereader
                        by contradiction /* impossible chain */
                      next
                        case tag1
                        solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                          case d_0_fst
                          by contradiction /* impossible chain */
                        next
                          case d_0_snd
                          by solve( (#vr.7, 0) ~~> (#vk.6, 0) )
                        qed
                      qed
                    qed
                  next
                    case coerce
                    solve( !KD( (x⊕~r1.2) ) ▶₀ #vk.5 )
                      case acceptreader
                      by solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                    next
                      case initiatereader
                      by contradiction /* impossible chain */
                    next
                      case tag1
                      solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                        case d_0_fst
                        by contradiction /* impossible chain */
                      next
                        case d_0_snd
                        by solve( (#vr.7, 0) ~~> (#vk.5, 0) )
                      qed
                    qed
                  qed
                next
                  case c_xor_case_07
                  solve( !KU( (x⊕~r1.2) ) @ #vk.6 )
                    case c_xor
                    solve( !KU( (~k⊕~r1.1) ) @ #vk.7 )
                      case c_xor
                      by contradiction /* cyclic */
                    next
                      case coerce
                      solve( !KD( (~k⊕~r1.1) ) ▶₀ #vk.6 )
                        case acceptreader
                        by solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                      next
                        case initiatereader
                        by contradiction /* impossible chain */
                      next
                        case tag1
                        solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                          case d_0_fst
                          by contradiction /* impossible chain */
                        next
                          case d_0_snd
                          by solve( (#vr.7, 0) ~~> (#vk.6, 0) )
                        qed
                      qed
                    qed
                  next
                    case coerce
                    solve( !KD( (x⊕~r1.2) ) ▶₀ #vk.5 )
                      case acceptreader
                      by solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                    next
                      case initiatereader
                      by contradiction /* impossible chain */
                    next
                      case tag1
                      solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                        case d_0_fst
                        by contradiction /* impossible chain */
                      next
                        case d_0_snd
                        by solve( (#vr.7, 0) ~~> (#vk.5, 0) )
                      qed
                    qed
                  qed
                next
                  case c_xor_case_08
                  by solve( !KU( ~k ) @ #vk.8 )
                next
                  case c_xor_case_09
                  solve( !KU( (x⊕~r1.2) ) @ #vk.6 )
                    case c_xor
                    solve( !KU( (~k1⊕~r1⊕~r1.1) ) @ #vk.7 )
                      case c_xor_case_1
                      by contradiction /* cyclic */
                    next
                      case c_xor_case_2
                      by solve( !KU( ~k1 ) @ #vk.12 )
                    next
                      case c_xor_case_3
                      by contradiction /* cyclic */
                    next
                      case coerce
                      solve( !KD( (~k1⊕~r1⊕~r1.1) ) ▶₀ #vk.6 )
                        case acceptreader
                        by solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                      next
                        case initiatereader
                        by contradiction /* impossible chain */
                      next
                        case tag1
                        solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                          case d_0_fst
                          by contradiction /* impossible chain */
                        next
                          case d_0_snd
                          by solve( (#vr.7, 0) ~~> (#vk.6, 0) )
                        qed
                      qed
                    qed
                  next
                    case coerce
                    solve( !KD( (x⊕~r1.2) ) ▶₀ #vk.5 )
                      case acceptreader
                      by solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                    next
                      case initiatereader
                      by contradiction /* impossible chain */
                    next
                      case tag1
                      solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                        case d_0_fst
                        by contradiction /* impossible chain */
                      next
                        case d_0_snd
                        by solve( (#vr.7, 0) ~~> (#vk.5, 0) )
                      qed
                    qed
                  qed
                next
                  case c_xor_case_10
                  solve( !KU( (x⊕~r1.2) ) @ #vk.6 )
                    case c_xor
                    solve( !KU( (~k1⊕x⊕~r1.1) ) @ #vk.7 )
                      case c_xor_case_1
                      solve( !KU( (~k⊕~r1) ) @ #vk.8 )
                        case c_xor
                        by contradiction /* cyclic */
                      next
                        case coerce
                        solve( !KD( (~k⊕~r1) ) ▶₀ #vk.7 )
                          case acceptreader
                          by solve( (#vl.2, 0) ~~> (#vk.7, 0) )
                        next
                          case initiatereader
                          by contradiction /* impossible chain */
                        next
                          case tag1
                          solve( (#vl.2, 0) ~~> (#vk.7, 0) )
                            case d_0_fst
                            by contradiction /* impossible chain */
                          next
                            case d_0_snd
                            by solve( (#vr.7, 0) ~~> (#vk.7, 0) )
                          qed
                        qed
                      qed
                    next
                      case c_xor_case_2
                      by solve( !KU( ~k1 ) @ #vk.12 )
                    next
                      case c_xor_case_3
                      by contradiction /* cyclic */
                    next
                      case coerce
                      solve( !KD( (~k1⊕x⊕~r1.1) ) ▶₀ #vk.6 )
                        case acceptreader
                        by solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                      next
                        case initiatereader
                        by contradiction /* impossible chain */
                      next
                        case tag1
                        solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                          case d_0_fst
                          by contradiction /* impossible chain */
                        next
                          case d_0_snd
                          by solve( (#vr.7, 0) ~~> (#vk.6, 0) )
                        qed
                      qed
                    qed
                  next
                    case coerce
                    solve( !KD( (x⊕~r1.2) ) ▶₀ #vk.5 )
                      case acceptreader
                      by solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                    next
                      case initiatereader
                      by contradiction /* impossible chain */
                    next
                      case tag1
                      solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                        case d_0_fst
                        by contradiction /* impossible chain */
                      next
                        case d_0_snd
                        by solve( (#vr.7, 0) ~~> (#vk.5, 0) )
                      qed
                    qed
                  qed
                next
                  case c_xor_case_11
                  solve( !KU( (x⊕~r1.2) ) @ #vk.6 )
                    case c_xor
                    solve( !KU( (~k1⊕~r1.1) ) @ #vk.7 )
                      case c_xor
                      by contradiction /* cyclic */
                    next
                      case coerce
                      solve( !KD( (~k1⊕~r1.1) ) ▶₀ #vk.6 )
                        case acceptreader
                        by solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                      next
                        case initiatereader
                        by contradiction /* impossible chain */
                      next
                        case tag1
                        solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                          case d_0_fst
                          by contradiction /* impossible chain */
                        next
                          case d_0_snd
                          by solve( (#vr.7, 0) ~~> (#vk.6, 0) )
                        qed
                      qed
                    qed
                  next
                    case coerce
                    solve( !KD( (x⊕~r1.2) ) ▶₀ #vk.5 )
                      case acceptreader
                      by solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                    next
                      case initiatereader
                      by contradiction /* impossible chain */
                    next
                      case tag1
                      solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                        case d_0_fst
                        by contradiction /* impossible chain */
                      next
                        case d_0_snd
                        by solve( (#vr.7, 0) ~~> (#vk.5, 0) )
                      qed
                    qed
                  qed
                next
                  case c_xor_case_12
                  solve( !KU( (x⊕~r1.2) ) @ #vk.6 )
                    case c_xor
                    solve( !KU( (~r1⊕x⊕~r1.1) ) @ #vk.7 )
                      case c_xor_case_1
                      solve( !KU( (~k⊕~k1) ) @ #vk.8 )
                        case c_xor
                        by solve( !KU( ~k1 ) @ #vk.12 )
                      next
                        case coerce
                        solve( !KD( (~k⊕~k1) ) ▶₀ #vk.7 )
                          case acceptreader
                          by solve( (#vl.2, 0) ~~> (#vk.7, 0) )
                        next
                          case initiatereader
                          by contradiction /* impossible chain */
                        next
                          case tag1
                          solve( (#vl.2, 0) ~~> (#vk.7, 0) )
                            case d_0_fst
                            by contradiction /* impossible chain */
                          next
                            case d_0_snd
                            by solve( (#vr.7, 0) ~~> (#vk.7, 0) )
                          qed
                        qed
                      qed
                    next
                      case c_xor_case_2
                      by contradiction /* cyclic */
                    next
                      case c_xor_case_3
                      by contradiction /* cyclic */
                    next
                      case coerce
                      solve( !KD( (~r1⊕x⊕~r1.1) ) ▶₀ #vk.6 )
                        case acceptreader
                        by solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                      next
                        case initiatereader
                        by contradiction /* impossible chain */
                      next
                        case tag1
                        solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                          case d_0_fst
                          by contradiction /* impossible chain */
                        next
                          case d_0_snd
                          by solve( (#vr.7, 0) ~~> (#vk.6, 0) )
                        qed
                      qed
                    qed
                  next
                    case coerce
                    solve( !KD( (x⊕~r1.2) ) ▶₀ #vk.5 )
                      case acceptreader
                      by solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                    next
                      case initiatereader
                      by contradiction /* impossible chain */
                    next
                      case tag1
                      solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                        case d_0_fst
                        by contradiction /* impossible chain */
                      next
                        case d_0_snd
                        by solve( (#vr.7, 0) ~~> (#vk.5, 0) )
                      qed
                    qed
                  qed
                next
                  case c_xor_case_13
                  solve( !KU( (x⊕~r1.2) ) @ #vk.6 )
                    case c_xor
                    solve( !KU( (~r1⊕~r1.1) ) @ #vk.7 )
                      case c_xor
                      by contradiction /* cyclic */
                    next
                      case coerce
                      solve( !KD( (~r1⊕~r1.1) ) ▶₀ #vk.6 )
                        case acceptreader
                        by solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                      next
                        case initiatereader
                        by contradiction /* impossible chain */
                      next
                        case tag1
                        solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                          case d_0_fst
                          by contradiction /* impossible chain */
                        next
                          case d_0_snd
                          by solve( (#vr.7, 0) ~~> (#vk.6, 0) )
                        qed
                      qed
                    qed
                  next
                    case coerce
                    solve( !KD( (x⊕~r1.2) ) ▶₀ #vk.5 )
                      case acceptreader
                      by solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                    next
                      case initiatereader
                      by contradiction /* impossible chain */
                    next
                      case tag1
                      solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                        case d_0_fst
                        by contradiction /* impossible chain */
                      next
                        case d_0_snd
                        by solve( (#vr.7, 0) ~~> (#vk.5, 0) )
                      qed
                    qed
                  qed
                next
                  case c_xor_case_14
                  solve( !KU( (x⊕~r1.2) ) @ #vk.6 )
                    case c_xor
                    solve( !KU( (x⊕~r1.1) ) @ #vk.7 )
                      case c_xor
                      by contradiction /* cyclic */
                    next
                      case coerce
                      solve( !KD( (x⊕~r1.1) ) ▶₀ #vk.6 )
                        case acceptreader
                        by solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                      next
                        case initiatereader
                        by contradiction /* impossible chain */
                      next
                        case tag1
                        solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                          case d_0_fst
                          by contradiction /* impossible chain */
                        next
                          case d_0_snd
                          by solve( (#vr.7, 0) ~~> (#vk.6, 0) )
                        qed
                      qed
                    qed
                  next
                    case coerce
                    solve( !KD( (x⊕~r1.2) ) ▶₀ #vk.5 )
                      case acceptreader
                      by solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                    next
                      case initiatereader
                      by contradiction /* impossible chain */
                    next
                      case tag1
                      solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                        case d_0_fst
                        by contradiction /* impossible chain */
                      next
                        case d_0_snd
                        by solve( (#vr.7, 0) ~~> (#vk.5, 0) )
                      qed
                    qed
                  qed
                next
                  case c_xor_case_15
                  by contradiction /* cyclic */
                next
                  case coerce
                  solve( !KD( (~k⊕~k1⊕~r1⊕x⊕~r1.1) ) ▶₀ #vk.4 )
                    case acceptreader
                    by solve( (#vl.2, 0) ~~> (#vk.4, 0) )
                  next
                    case initiatereader
                    by contradiction /* impossible chain */
                  next
                    case tag1
                    solve( (#vl.2, 0) ~~> (#vk.4, 0) )
                      case d_0_fst
                      by contradiction /* impossible chain */
                    next
                      case d_0_snd
                      by solve( (#vr.7, 0) ~~> (#vk.4, 0) )
                    qed
                  qed
                qed
              qed
            next
              case tag1_case_2
              by contradiction /* cyclic */
            qed
          next
            case coerce
            solve( !KD( (x⊕h((~k⊕~r1⊕x⊕~r1.1))) ) ▶₀ #vk.2 )
              case acceptreader
              by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
            next
              case initiatereader
              by contradiction /* impossible chain */
            next
              case tag1
              solve( (#vl.1, 0) ~~> (#vk.2, 0) )
                case d_0_fst
                by contradiction /* impossible chain */
              next
                case d_0_snd
                by solve( (#vr.5, 0) ~~> (#vk.2, 0) )
              qed
            qed
          qed
        next
          case coerce
          solve( !KD( (x⊕~r1.1) ) ▶₀ #vk.1 )
            case acceptreader
            by solve( (#vl.1, 0) ~~> (#vk.1, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.1, 0) ~~> (#vk.1, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.5, 0) ~~> (#vk.1, 0) )
            qed
          qed
        qed
      qed
    qed
  next
    case split_case_6
    solve( !KU( h((~k⊕~r1⊕x⊕h((~k⊕x)))) ) @ #vk )
      case c_h
      solve( !KU( (~r1⊕x) ) @ #vk.1 )
        case c_xor
        by contradiction /* cyclic */
      next
        case coerce
        solve( !KD( (~r1⊕x) ) ▶₀ #vk.1 )
          case acceptreader
          by solve( (#vl, 0) ~~> (#vk.1, 0) )
        next
          case initiatereader
          by contradiction /* impossible chain */
        next
          case tag1
          solve( (#vl, 0) ~~> (#vk.1, 0) )
            case d_0_fst
            by contradiction /* impossible chain */
          next
            case d_0_snd
            by solve( (#vr.3, 0) ~~> (#vk.1, 0) )
          qed
        qed
      qed
    next
      case tag1_case_1
      solve( !KU( (~r1⊕x) ) @ #vk.1 )
        case c_xor
        by contradiction /* cyclic */
      next
        case coerce
        solve( !KD( (~r1⊕x) ) ▶₀ #vk.1 )
          case acceptreader
          by solve( (#vl.1, 0) ~~> (#vk.1, 0) )
        next
          case initiatereader
          by contradiction /* impossible chain */
        next
          case tag1
          solve( (#vl.1, 0) ~~> (#vk.1, 0) )
            case d_0_fst
            by contradiction /* impossible chain */
          next
            case d_0_snd
            by solve( (#vr.5, 0) ~~> (#vk.1, 0) )
          qed
        qed
      qed
    next
      case tag1_case_2
      solve( !KU( (~r1⊕x) ) @ #vk.1 )
        case c_xor
        by contradiction /* cyclic */
      next
        case coerce
        solve( !KD( (~r1⊕x) ) ▶₀ #vk.1 )
          case acceptreader
          by solve( (#vl.1, 0) ~~> (#vk.1, 0) )
        next
          case initiatereader
          by contradiction /* impossible chain */
        next
          case tag1
          solve( (#vl.1, 0) ~~> (#vk.1, 0) )
            case d_0_fst
            by contradiction /* impossible chain */
          next
            case d_0_snd
            by solve( (#vr.5, 0) ~~> (#vk.1, 0) )
          qed
        qed
      qed
    qed
  next
    case split_case_7
    solve( !KU( h((~r1⊕z⊕h(z))) ) @ #vk )
      case c_h
      solve( !KU( (~k⊕~r1⊕z) ) @ #vk.1 )
        case c_xor_case_1
        by contradiction /* cyclic */
      next
        case c_xor_case_2
        by solve( !KU( ~k ) @ #vk.4 )
      next
        case c_xor_case_3
        solve( !KU( (~r1⊕z⊕h(z)) ) @ #vk.2 )
          case c_xor_case_1
          solve( !KU( (~k⊕~r1) ) @ #vk.4 )
            case c_xor
            by contradiction /* cyclic */
          next
            case coerce
            solve( !KD( (~k⊕~r1) ) ▶₀ #vk.3 )
              case acceptreader
              by solve( (#vl, 0) ~~> (#vk.3, 0) )
            next
              case initiatereader
              by contradiction /* impossible chain */
            next
              case tag1
              solve( (#vl, 0) ~~> (#vk.3, 0) )
                case d_0_fst
                by contradiction /* impossible chain */
              next
                case d_0_snd
                by solve( (#vr.3, 0) ~~> (#vk.3, 0) )
              qed
            qed
          qed
        next
          case c_xor_case_2
          solve( !KU( (~k⊕~r1) ) @ #vk.4 )
            case c_xor
            by contradiction /* cyclic */
          next
            case coerce
            solve( !KD( (~k⊕~r1) ) ▶₀ #vk.3 )
              case acceptreader
              by solve( (#vl, 0) ~~> (#vk.3, 0) )
            next
              case initiatereader
              by contradiction /* impossible chain */
            next
              case tag1
              solve( (#vl, 0) ~~> (#vk.3, 0) )
                case d_0_fst
                by contradiction /* impossible chain */
              next
                case d_0_snd
                by solve( (#vr.3, 0) ~~> (#vk.3, 0) )
              qed
            qed
          qed
        next
          case c_xor_case_3
          solve( !KU( (~k⊕~r1) ) @ #vk.4 )
            case c_xor
            by contradiction /* cyclic */
          next
            case coerce
            solve( !KD( (~k⊕~r1) ) ▶₀ #vk.3 )
              case acceptreader
              by solve( (#vl, 0) ~~> (#vk.3, 0) )
            next
              case initiatereader
              by contradiction /* impossible chain */
            next
              case tag1
              solve( (#vl, 0) ~~> (#vk.3, 0) )
                case d_0_fst
                by contradiction /* impossible chain */
              next
                case d_0_snd
                by solve( (#vr.3, 0) ~~> (#vk.3, 0) )
              qed
            qed
          qed
        next
          case coerce
          solve( !KD( (~r1⊕z⊕h(z)) ) ▶₀ #vk.2 )
            case acceptreader
            by solve( (#vl, 0) ~~> (#vk.2, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl, 0) ~~> (#vk.2, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.3, 0) ~~> (#vk.2, 0) )
            qed
          qed
        qed
      next
        case coerce
        solve( !KD( (~k⊕~r1⊕z) ) ▶₀ #vk.1 )
          case acceptreader
          by solve( (#vl, 0) ~~> (#vk.1, 0) )
        next
          case initiatereader
          by contradiction /* impossible chain */
        next
          case tag1
          solve( (#vl, 0) ~~> (#vk.1, 0) )
            case d_0_fst
            by contradiction /* impossible chain */
          next
            case d_0_snd
            by solve( (#vr.3, 0) ~~> (#vk.1, 0) )
          qed
        qed
      qed
    next
      case tag1_case_1
      solve( !KU( (~k⊕~r1⊕z) ) @ #vk.1 )
        case c_xor_case_1
        by contradiction /* cyclic */
      next
        case c_xor_case_2
        by solve( !KU( ~k ) @ #vk.4 )
      next
        case c_xor_case_3
        solve( !KU( (~k⊕~r1) ) @ #vk.4 )
          case c_xor
          by contradiction /* cyclic */
        next
          case coerce
          solve( !KD( (~k⊕~r1) ) ▶₀ #vk.2 )
            case acceptreader
            by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.1, 0) ~~> (#vk.2, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.5, 0) ~~> (#vk.2, 0) )
            qed
          qed
        qed
      next
        case coerce
        solve( !KD( (~k⊕~r1⊕z) ) ▶₀ #vk.1 )
          case acceptreader
          by solve( (#vl.1, 0) ~~> (#vk.1, 0) )
        next
          case initiatereader
          by contradiction /* impossible chain */
        next
          case tag1
          solve( (#vl.1, 0) ~~> (#vk.1, 0) )
            case d_0_fst
            by contradiction /* impossible chain */
          next
            case d_0_snd
            by solve( (#vr.5, 0) ~~> (#vk.1, 0) )
          qed
        qed
      qed
    next
      case tag1_case_2
      solve( !KU( (~k⊕~r1⊕z) ) @ #vk.1 )
        case c_xor_case_1
        by contradiction /* cyclic */
      next
        case c_xor_case_2
        by solve( !KU( ~k ) @ #vk.4 )
      next
        case c_xor_case_3
        solve( !KU( (~x⊕x.1⊕x.2) ) @ #vk.2 )
          case c_xor_case_1
          solve( !KU( (~k⊕~r1) ) @ #vk.4 )
            case c_xor
            by contradiction /* cyclic */
          next
            case coerce
            solve( !KD( (~k⊕~r1) ) ▶₀ #vk.3 )
              case acceptreader
              by solve( (#vl.1, 0) ~~> (#vk.3, 0) )
            next
              case initiatereader
              by contradiction /* impossible chain */
            next
              case tag1
              solve( (#vl.1, 0) ~~> (#vk.3, 0) )
                case d_0_fst
                by contradiction /* impossible chain */
              next
                case d_0_snd
                by solve( (#vr.5, 0) ~~> (#vk.3, 0) )
              qed
            qed
          qed
        next
          case c_xor_case_2
          solve( !KU( ~x.2 ) @ #vk.6 )
            case fresh
            solve( !KU( (~k⊕~r1) ) @ #vk.5 )
              case c_xor
              by contradiction /* cyclic */
            next
              case coerce
              solve( !KD( (~k⊕~r1) ) ▶₀ #vk.4 )
                case acceptreader
                by solve( (#vl.1, 0) ~~> (#vk.4, 0) )
              next
                case initiatereader
                by contradiction /* impossible chain */
              next
                case tag1
                solve( (#vl.1, 0) ~~> (#vk.4, 0) )
                  case d_0_fst
                  by contradiction /* impossible chain */
                next
                  case d_0_snd
                  by solve( (#vr.5, 0) ~~> (#vk.4, 0) )
                qed
              qed
            qed
          next
            case tag1
            solve( !KU( (~k⊕~r1) ) @ #vk.5 )
              case c_xor
              by contradiction /* cyclic */
            next
              case coerce
              solve( !KD( (~k⊕~r1) ) ▶₀ #vk.4 )
                case acceptreader
                by solve( (#vl.2, 0) ~~> (#vk.4, 0) )
              next
                case initiatereader
                by contradiction /* impossible chain */
              next
                case tag1
                solve( (#vl.2, 0) ~~> (#vk.4, 0) )
                  case d_0_fst
                  by contradiction /* impossible chain */
                next
                  case d_0_snd
                  by solve( (#vr.7, 0) ~~> (#vk.4, 0) )
                qed
              qed
            qed
          qed
        next
          case c_xor_case_3
          solve( !KU( (~k⊕~r1) ) @ #vk.4 )
            case c_xor
            by contradiction /* cyclic */
          next
            case coerce
            solve( !KD( (~k⊕~r1) ) ▶₀ #vk.3 )
              case acceptreader
              by solve( (#vl.1, 0) ~~> (#vk.3, 0) )
            next
              case initiatereader
              by contradiction /* impossible chain */
            next
              case tag1
              solve( (#vl.1, 0) ~~> (#vk.3, 0) )
                case d_0_fst
                by contradiction /* impossible chain */
              next
                case d_0_snd
                by solve( (#vr.5, 0) ~~> (#vk.3, 0) )
              qed
            qed
          qed
        next
          case coerce
          solve( !KD( (~x⊕x.1⊕x.2) ) ▶₀ #vk.2 )
            case acceptreader
            by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.1, 0) ~~> (#vk.2, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.5, 0) ~~> (#vk.2, 0) )
            qed
          qed
        qed
      next
        case coerce
        solve( !KD( (~k⊕~r1⊕z) ) ▶₀ #vk.1 )
          case acceptreader
          by solve( (#vl.1, 0) ~~> (#vk.1, 0) )
        next
          case initiatereader
          by contradiction /* impossible chain */
        next
          case tag1
          solve( (#vl.1, 0) ~~> (#vk.1, 0) )
            case d_0_fst
            by contradiction /* impossible chain */
          next
            case d_0_snd
            by solve( (#vr.5, 0) ~~> (#vk.1, 0) )
          qed
        qed
      qed
    qed
  next
    case split_case_8
    solve( splitEqs(1) )
      case split
      solve( !KU( h((x⊕h((~r1⊕x)))) ) @ #vk )
        case c_h
        solve( !KU( (~k⊕x) ) @ #vk.1 )
          case c_xor
          by solve( !KU( ~k ) @ #vk.4 )
        next
          case coerce
          solve( !KD( (~k⊕x) ) ▶₀ #vk.1 )
            case acceptreader
            by solve( (#vl, 0) ~~> (#vk.1, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl, 0) ~~> (#vk.1, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.3, 0) ~~> (#vk.1, 0) )
            qed
          qed
        qed
      next
        case tag1_case_1
        solve( !KU( (~k⊕x) ) @ #vk.1 )
          case c_xor
          by solve( !KU( ~k ) @ #vk.4 )
        next
          case coerce
          solve( !KD( (~k⊕x) ) ▶₀ #vk.1 )
            case acceptreader
            by solve( (#vl.1, 0) ~~> (#vk.1, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.1, 0) ~~> (#vk.1, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.5, 0) ~~> (#vk.1, 0) )
            qed
          qed
        qed
      next
        case tag1_case_2
        solve( !KU( (~k⊕x) ) @ #vk.1 )
          case c_xor
          by solve( !KU( ~k ) @ #vk.4 )
        next
          case coerce
          solve( !KD( (~k⊕x) ) ▶₀ #vk.1 )
            case acceptreader
            by solve( (#vl.1, 0) ~~> (#vk.1, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.1, 0) ~~> (#vk.1, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.5, 0) ~~> (#vk.1, 0) )
            qed
          qed
        qed
      qed
    qed
  qed
next
  case tag1_case_3
  solve( splitEqs(0) )
    case split_case_1
    by solve( !KU( ~k ) @ #vk.1 )
  next
    case split_case_2
    by contradiction /* cyclic */
  next
    case split_case_3
    solve( !KU( h((~k⊕h((~k⊕~r1)))) ) @ #vk )
      case c_h
      solve( !KU( (~k⊕h((~k⊕~r1))) ) @ #vk.2 )
        case c_xor
        by solve( !KU( ~k ) @ #vk.4 )
      next
        case coerce
        solve( !KD( (~k⊕h((~k⊕~r1))) ) ▶₀ #vk.1 )
          case acceptreader
          by solve( (#vl, 0) ~~> (#vk.1, 0) )
        next
          case initiatereader
          by contradiction /* impossible chain */
        next
          case tag1
          solve( (#vl, 0) ~~> (#vk.1, 0) )
            case d_0_fst
            by contradiction /* impossible chain */
          next
            case d_0_snd
            by solve( (#vr.3, 0) ~~> (#vk.1, 0) )
          qed
        qed
      qed
    next
      case tag1_case_1
      solve( !KU( (x⊕~x.1) ) @ #vk.2 )
        case c_xor
        solve( !KU( ~x ) @ #vk.3 )
          case fresh
          by solve( splitEqs(3) )
        next
          case tag1_case_1
          by solve( splitEqs(3) )
        next
          case tag1_case_2
          by solve( splitEqs(3) )
        qed
      next
        case coerce
        solve( !KD( (x⊕~x.1) ) ▶₀ #vk.1 )
          case acceptreader
          by solve( (#vl.1, 0) ~~> (#vk.1, 0) )
        next
          case initiatereader
          by contradiction /* impossible chain */
        next
          case tag1
          solve( (#vl.1, 0) ~~> (#vk.1, 0) )
            case d_0_fst
            by contradiction /* impossible chain */
          next
            case d_0_snd
            by solve( (#vr.5, 0) ~~> (#vk.1, 0) )
          qed
        qed
      qed
    next
      case tag1_case_2
      solve( !KU( (~r1.1⊕h((~k⊕~r1))) ) @ #vk.2 )
        case c_xor
        by contradiction /* cyclic */
      next
        case coerce
        solve( !KD( (~r1.1⊕h((~k⊕~r1))) ) ▶₀ #vk.1 )
          case acceptreader
          by solve( (#vl.1, 0) ~~> (#vk.1, 0) )
        next
          case initiatereader
          by contradiction /* impossible chain */
        next
          case tag1
          solve( (#vl.1, 0) ~~> (#vk.1, 0) )
            case d_0_fst
            by contradiction /* impossible chain */
          next
            case d_0_snd
            by solve( (#vr.5, 0) ~~> (#vk.1, 0) )
          qed
        qed
      qed
    qed
  next
    case split_case_4
    solve( !KU( h((~r1⊕h(zero))) ) @ #vk )
      case c_h
      solve( !KU( (~k⊕~r1) ) @ #vk.1 )
        case c_xor
        by contradiction /* cyclic */
      next
        case coerce
        solve( !KD( (~k⊕~r1) ) ▶₀ #vk.1 )
          case acceptreader
          by solve( (#vl, 0) ~~> (#vk.1, 0) )
        next
          case initiatereader
          by contradiction /* impossible chain */
        next
          case tag1
          solve( (#vl, 0) ~~> (#vk.1, 0) )
            case d_0_fst
            by contradiction /* impossible chain */
          next
            case d_0_snd
            by solve( (#vr.3, 0) ~~> (#vk.1, 0) )
          qed
        qed
      qed
    next
      case tag1_case_1
      solve( !KU( (~k⊕~r1) ) @ #vk.1 )
        case c_xor
        by contradiction /* cyclic */
      next
        case coerce
        solve( !KD( (~k⊕~r1) ) ▶₀ #vk.1 )
          case acceptreader
          by solve( (#vl.1, 0) ~~> (#vk.1, 0) )
        next
          case initiatereader
          by contradiction /* impossible chain */
        next
          case tag1
          solve( (#vl.1, 0) ~~> (#vk.1, 0) )
            case d_0_fst
            by contradiction /* impossible chain */
          next
            case d_0_snd
            by solve( (#vr.5, 0) ~~> (#vk.1, 0) )
          qed
        qed
      qed
    next
      case tag1_case_2
      solve( splitEqs(3) )
        case split
        solve( !KU( (~k⊕~r1) ) @ #vk.1 )
          case c_xor
          by contradiction /* cyclic */
        next
          case coerce
          solve( !KD( (~k⊕~r1) ) ▶₀ #vk.1 )
            case acceptreader
            by solve( (#vl.1, 0) ~~> (#vk.1, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.1, 0) ~~> (#vk.1, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.5, 0) ~~> (#vk.1, 0) )
            qed
          qed
        qed
      qed
    qed
  next
    case split_case_5
    solve( !KU( h((~k⊕r0⊕h((~k⊕~r1⊕r0)))) ) @ #vk )
      case c_h
      solve( !KU( (~k⊕r0⊕h((~k⊕~r1⊕r0))) ) @ #vk.2 )
        case c_xor_case_1
        solve( !KU( (~k⊕h((~k⊕~r1⊕r0))) ) @ #vk.3 )
          case c_xor
          by solve( !KU( ~k ) @ #vk.5 )
        next
          case coerce
          solve( !KD( (~k⊕h((~k⊕~r1⊕r0))) ) ▶₀ #vk.2 )
            case acceptreader
            by solve( (#vl, 0) ~~> (#vk.2, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl, 0) ~~> (#vk.2, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.3, 0) ~~> (#vk.2, 0) )
            qed
          qed
        qed
      next
        case c_xor_case_2
        by solve( !KU( ~k ) @ #vk.4 )
      next
        case c_xor_case_3
        solve( !KU( (~k⊕r0) ) @ #vk.4 )
          case c_xor
          by solve( !KU( ~k ) @ #vk.5 )
        next
          case coerce
          solve( !KD( (~k⊕r0) ) ▶₀ #vk.2 )
            case acceptreader
            by solve( (#vl, 0) ~~> (#vk.2, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl, 0) ~~> (#vk.2, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.3, 0) ~~> (#vk.2, 0) )
            qed
          qed
        qed
      next
        case coerce
        solve( !KD( (~k⊕r0⊕h((~k⊕~r1⊕r0))) ) ▶₀ #vk.1 )
          case acceptreader
          by solve( (#vl, 0) ~~> (#vk.1, 0) )
        next
          case initiatereader
          by contradiction /* impossible chain */
        next
          case tag1
          solve( (#vl, 0) ~~> (#vk.1, 0) )
            case d_0_fst
            by contradiction /* impossible chain */
          next
            case d_0_snd
            by solve( (#vr.3, 0) ~~> (#vk.1, 0) )
          qed
        qed
      qed
    next
      case tag1_case_1
      solve( splitEqs(3) )
        case split_case_1
        by solve( !KU( ~k1 ) @ #vk.1 )
      next
        case split_case_2
        solve( !KU( (~k⊕~k1⊕r0⊕~r1.1⊕h((~k⊕~r1⊕r0))) ) @ #vk.2 )
          case c_xor_case_01
          by contradiction /* cyclic */
        next
          case c_xor_case_02
          solve( !KU( (~k⊕~k1⊕~r1.1⊕h((~k⊕~r1⊕r0))) ) @ #vk.3 )
            case c_xor_case_1
            by contradiction /* cyclic */
          next
            case c_xor_case_2
            by solve( !KU( ~k1 ) @ #vk.5 )
          next
            case c_xor_case_3
            solve( !KU( (~k⊕h((~k⊕~r1⊕r0))) ) @ #vk.4 )
              case c_xor
              by solve( !KU( ~k ) @ #vk.7 )
            next
              case coerce
              solve( !KD( (~k⊕h((~k⊕~r1⊕r0))) ) ▶₀ #vk.3 )
                case acceptreader
                by solve( (#vl.1, 0) ~~> (#vk.3, 0) )
              next
                case initiatereader
                by contradiction /* impossible chain */
              next
                case tag1
                solve( (#vl.1, 0) ~~> (#vk.3, 0) )
                  case d_0_fst
                  by contradiction /* impossible chain */
                next
                  case d_0_snd
                  by solve( (#vr.5, 0) ~~> (#vk.3, 0) )
                qed
              qed
            qed
          next
            case c_xor_case_4
            by solve( !KU( ~k ) @ #vk.5 )
          next
            case c_xor_case_5
            solve( !KU( (~k1⊕h((~k⊕~r1⊕r0))) ) @ #vk.4 )
              case c_xor
              by solve( !KU( ~k1 ) @ #vk.7 )
            next
              case coerce
              solve( !KD( (~k1⊕h((~k⊕~r1⊕r0))) ) ▶₀ #vk.3 )
                case acceptreader
                by solve( (#vl.1, 0) ~~> (#vk.3, 0) )
              next
                case initiatereader
                by contradiction /* impossible chain */
              next
                case tag1
                solve( (#vl.1, 0) ~~> (#vk.3, 0) )
                  case d_0_fst
                  by contradiction /* impossible chain */
                next
                  case d_0_snd
                  by solve( (#vr.5, 0) ~~> (#vk.3, 0) )
                qed
              qed
            qed
          next
            case c_xor_case_6
            solve( !KU( (~r1.1⊕h((~k⊕~r1⊕r0))) ) @ #vk.4 )
              case c_xor
              by contradiction /* cyclic */
            next
              case coerce
              solve( !KD( (~r1.1⊕h((~k⊕~r1⊕r0))) ) ▶₀ #vk.3 )
                case acceptreader
                by solve( (#vl.1, 0) ~~> (#vk.3, 0) )
              next
                case initiatereader
                by contradiction /* impossible chain */
              next
                case tag1
                solve( (#vl.1, 0) ~~> (#vk.3, 0) )
                  case d_0_fst
                  by contradiction /* impossible chain */
                next
                  case d_0_snd
                  by solve( (#vr.5, 0) ~~> (#vk.3, 0) )
                qed
              qed
            qed
          next
            case c_xor_case_7
            solve( !KU( (~k⊕~k1⊕~r1.1) ) @ #vk.5 )
              case c_xor_case_1
              by solve( !KU( ~k1 ) @ #vk.7 )
            next
              case c_xor_case_2
              by solve( !KU( ~k ) @ #vk.7 )
            next
              case c_xor_case_3
              by contradiction /* cyclic */
            next
              case coerce
              solve( !KD( (~k⊕~k1⊕~r1.1) ) ▶₀ #vk.3 )
                case acceptreader
                by solve( (#vl.1, 0) ~~> (#vk.3, 0) )
              next
                case initiatereader
                by contradiction /* impossible chain */
              next
                case tag1
                solve( (#vl.1, 0) ~~> (#vk.3, 0) )
                  case d_0_fst
                  by contradiction /* impossible chain */
                next
                  case d_0_snd
                  by solve( (#vr.5, 0) ~~> (#vk.3, 0) )
                qed
              qed
            qed
          next
            case coerce
            solve( !KD( (~k⊕~k1⊕~r1.1⊕h((~k⊕~r1⊕r0))) ) ▶₀ #vk.2 )
              case acceptreader
              by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
            next
              case initiatereader
              by contradiction /* impossible chain */
            next
              case tag1
              solve( (#vl.1, 0) ~~> (#vk.2, 0) )
                case d_0_fst
                by contradiction /* impossible chain */
              next
                case d_0_snd
                by solve( (#vr.5, 0) ~~> (#vk.2, 0) )
              qed
            qed
          qed
        next
          case c_xor_case_03
          solve( !KU( (~k⊕~k1⊕h((~k⊕~r1⊕r0))) ) @ #vk.3 )
            case c_xor_case_1
            by solve( !KU( ~k1 ) @ #vk.6 )
          next
            case c_xor_case_2
            by solve( !KU( ~k ) @ #vk.6 )
          next
            case c_xor_case_3
            solve( !KU( (r0⊕~r1.1) ) @ #vk.4 )
              case c_xor
              by contradiction /* cyclic */
            next
              case coerce
              solve( !KD( (r0⊕~r1.1) ) ▶₀ #vk.3 )
                case acceptreader
                by solve( (#vl.1, 0) ~~> (#vk.3, 0) )
              next
                case initiatereader
                by contradiction /* impossible chain */
              next
                case tag1
                solve( (#vl.1, 0) ~~> (#vk.3, 0) )
                  case d_0_fst
                  by contradiction /* impossible chain */
                next
                  case d_0_snd
                  by solve( (#vr.5, 0) ~~> (#vk.3, 0) )
                qed
              qed
            qed
          next
            case coerce
            solve( !KD( (~k⊕~k1⊕h((~k⊕~r1⊕r0))) ) ▶₀ #vk.2 )
              case acceptreader
              by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
            next
              case initiatereader
              by contradiction /* impossible chain */
            next
              case tag1
              solve( (#vl.1, 0) ~~> (#vk.2, 0) )
                case d_0_fst
                by contradiction /* impossible chain */
              next
                case d_0_snd
                by solve( (#vr.5, 0) ~~> (#vk.2, 0) )
              qed
            qed
          qed
        next
          case c_xor_case_04
          by solve( !KU( ~k1 ) @ #vk.4 )
        next
          case c_xor_case_05
          solve( !KU( (~k⊕r0⊕h((~k⊕~r1⊕r0))) ) @ #vk.3 )
            case c_xor_case_1
            solve( !KU( (~k1⊕~r1.1) ) @ #vk.4 )
              case c_xor
              by contradiction /* cyclic */
            next
              case coerce
              solve( !KD( (~k1⊕~r1.1) ) ▶₀ #vk.3 )
                case acceptreader
                by solve( (#vl.1, 0) ~~> (#vk.3, 0) )
              next
                case initiatereader
                by contradiction /* impossible chain */
              next
                case tag1
                solve( (#vl.1, 0) ~~> (#vk.3, 0) )
                  case d_0_fst
                  by contradiction /* impossible chain */
                next
                  case d_0_snd
                  by solve( (#vr.5, 0) ~~> (#vk.3, 0) )
                qed
              qed
            qed
          next
            case c_xor_case_2
            by solve( !KU( ~k ) @ #vk.6 )
          next
            case c_xor_case_3
            solve( !KU( (~k1⊕~r1.1) ) @ #vk.4 )
              case c_xor
              by contradiction /* cyclic */
            next
              case coerce
              solve( !KD( (~k1⊕~r1.1) ) ▶₀ #vk.3 )
                case acceptreader
                by solve( (#vl.1, 0) ~~> (#vk.3, 0) )
              next
                case initiatereader
                by contradiction /* impossible chain */
              next
                case tag1
                solve( (#vl.1, 0) ~~> (#vk.3, 0) )
                  case d_0_fst
                  by contradiction /* impossible chain */
                next
                  case d_0_snd
                  by solve( (#vr.5, 0) ~~> (#vk.3, 0) )
                qed
              qed
            qed
          next
            case coerce
            solve( !KD( (~k⊕r0⊕h((~k⊕~r1⊕r0))) ) ▶₀ #vk.2 )
              case acceptreader
              by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
            next
              case initiatereader
              by contradiction /* impossible chain */
            next
              case tag1
              solve( (#vl.1, 0) ~~> (#vk.2, 0) )
                case d_0_fst
                by contradiction /* impossible chain */
              next
                case d_0_snd
                by solve( (#vr.5, 0) ~~> (#vk.2, 0) )
              qed
            qed
          qed
        next
          case c_xor_case_06
          solve( !KU( (~k⊕~r1.1⊕h((~k⊕~r1⊕r0))) ) @ #vk.3 )
            case c_xor_case_1
            by contradiction /* cyclic */
          next
            case c_xor_case_2
            by solve( !KU( ~k ) @ #vk.6 )
          next
            case c_xor_case_3
            solve( !KU( (~k1⊕r0) ) @ #vk.4 )
              case c_xor
              by solve( !KU( ~k1 ) @ #vk.7 )
            next
              case coerce
              solve( !KD( (~k1⊕r0) ) ▶₀ #vk.3 )
                case acceptreader
                by solve( (#vl.1, 0) ~~> (#vk.3, 0) )
              next
                case initiatereader
                by contradiction /* impossible chain */
              next
                case tag1
                solve( (#vl.1, 0) ~~> (#vk.3, 0) )
                  case d_0_fst
                  by contradiction /* impossible chain */
                next
                  case d_0_snd
                  by solve( (#vr.5, 0) ~~> (#vk.3, 0) )
                qed
              qed
            qed
          next
            case coerce
            solve( !KD( (~k⊕~r1.1⊕h((~k⊕~r1⊕r0))) ) ▶₀ #vk.2 )
              case acceptreader
              by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
            next
              case initiatereader
              by contradiction /* impossible chain */
            next
              case tag1
              solve( (#vl.1, 0) ~~> (#vk.2, 0) )
                case d_0_fst
                by contradiction /* impossible chain */
              next
                case d_0_snd
                by solve( (#vr.5, 0) ~~> (#vk.2, 0) )
              qed
            qed
          qed
        next
          case c_xor_case_07
          solve( !KU( (~k⊕h((~k⊕~r1⊕r0))) ) @ #vk.3 )
            case c_xor
            by solve( !KU( ~k ) @ #vk.6 )
          next
            case coerce
            solve( !KD( (~k⊕h((~k⊕~r1⊕r0))) ) ▶₀ #vk.2 )
              case acceptreader
              by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
            next
              case initiatereader
              by contradiction /* impossible chain */
            next
              case tag1
              solve( (#vl.1, 0) ~~> (#vk.2, 0) )
                case d_0_fst
                by contradiction /* impossible chain */
              next
                case d_0_snd
                by solve( (#vr.5, 0) ~~> (#vk.2, 0) )
              qed
            qed
          qed
        next
          case c_xor_case_08
          by solve( !KU( ~k ) @ #vk.4 )
        next
          case c_xor_case_09
          solve( !KU( (~k1⊕r0⊕h((~k⊕~r1⊕r0))) ) @ #vk.3 )
            case c_xor_case_1
            solve( !KU( (~k⊕~r1.1) ) @ #vk.4 )
              case c_xor
              by contradiction /* cyclic */
            next
              case coerce
              solve( !KD( (~k⊕~r1.1) ) ▶₀ #vk.3 )
                case acceptreader
                by solve( (#vl.1, 0) ~~> (#vk.3, 0) )
              next
                case initiatereader
                by contradiction /* impossible chain */
              next
                case tag1
                solve( (#vl.1, 0) ~~> (#vk.3, 0) )
                  case d_0_fst
                  by contradiction /* impossible chain */
                next
                  case d_0_snd
                  by solve( (#vr.5, 0) ~~> (#vk.3, 0) )
                qed
              qed
            qed
          next
            case c_xor_case_2
            by solve( !KU( ~k1 ) @ #vk.6 )
          next
            case c_xor_case_3
            solve( !KU( (~k⊕~r1.1) ) @ #vk.4 )
              case c_xor
              by contradiction /* cyclic */
            next
              case coerce
              solve( !KD( (~k⊕~r1.1) ) ▶₀ #vk.3 )
                case acceptreader
                by solve( (#vl.1, 0) ~~> (#vk.3, 0) )
              next
                case initiatereader
                by contradiction /* impossible chain */
              next
                case tag1
                solve( (#vl.1, 0) ~~> (#vk.3, 0) )
                  case d_0_fst
                  by contradiction /* impossible chain */
                next
                  case d_0_snd
                  by solve( (#vr.5, 0) ~~> (#vk.3, 0) )
                qed
              qed
            qed
          next
            case coerce
            solve( !KD( (~k1⊕r0⊕h((~k⊕~r1⊕r0))) ) ▶₀ #vk.2 )
              case acceptreader
              by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
            next
              case initiatereader
              by contradiction /* impossible chain */
            next
              case tag1
              solve( (#vl.1, 0) ~~> (#vk.2, 0) )
                case d_0_fst
                by contradiction /* impossible chain */
              next
                case d_0_snd
                by solve( (#vr.5, 0) ~~> (#vk.2, 0) )
              qed
            qed
          qed
        next
          case c_xor_case_10
          solve( !KU( (~k1⊕~r1.1⊕h((~k⊕~r1⊕r0))) ) @ #vk.3 )
            case c_xor_case_1
            by contradiction /* cyclic */
          next
            case c_xor_case_2
            by solve( !KU( ~k1 ) @ #vk.6 )
          next
            case c_xor_case_3
            solve( !KU( (~k⊕r0) ) @ #vk.4 )
              case c_xor
              by solve( !KU( ~k ) @ #vk.7 )
            next
              case coerce
              solve( !KD( (~k⊕r0) ) ▶₀ #vk.3 )
                case acceptreader
                by solve( (#vl.1, 0) ~~> (#vk.3, 0) )
              next
                case initiatereader
                by contradiction /* impossible chain */
              next
                case tag1
                solve( (#vl.1, 0) ~~> (#vk.3, 0) )
                  case d_0_fst
                  by contradiction /* impossible chain */
                next
                  case d_0_snd
                  by solve( (#vr.5, 0) ~~> (#vk.3, 0) )
                qed
              qed
            qed
          next
            case coerce
            solve( !KD( (~k1⊕~r1.1⊕h((~k⊕~r1⊕r0))) ) ▶₀ #vk.2 )
              case acceptreader
              by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
            next
              case initiatereader
              by contradiction /* impossible chain */
            next
              case tag1
              solve( (#vl.1, 0) ~~> (#vk.2, 0) )
                case d_0_fst
                by contradiction /* impossible chain */
              next
                case d_0_snd
                by solve( (#vr.5, 0) ~~> (#vk.2, 0) )
              qed
            qed
          qed
        next
          case c_xor_case_11
          solve( !KU( (~k1⊕h((~k⊕~r1⊕r0))) ) @ #vk.3 )
            case c_xor
            by solve( !KU( ~k1 ) @ #vk.6 )
          next
            case coerce
            solve( !KD( (~k1⊕h((~k⊕~r1⊕r0))) ) ▶₀ #vk.2 )
              case acceptreader
              by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
            next
              case initiatereader
              by contradiction /* impossible chain */
            next
              case tag1
              solve( (#vl.1, 0) ~~> (#vk.2, 0) )
                case d_0_fst
                by contradiction /* impossible chain */
              next
                case d_0_snd
                by solve( (#vr.5, 0) ~~> (#vk.2, 0) )
              qed
            qed
          qed
        next
          case c_xor_case_12
          solve( !KU( (r0⊕~r1.1⊕h((~k⊕~r1⊕r0))) ) @ #vk.3 )
            case c_xor_case_1
            by contradiction /* cyclic */
          next
            case c_xor_case_2
            solve( !KU( (~k⊕~k1) ) @ #vk.4 )
              case c_xor
              by solve( !KU( ~k1 ) @ #vk.6 )
            next
              case coerce
              solve( !KD( (~k⊕~k1) ) ▶₀ #vk.3 )
                case acceptreader
                by solve( (#vl.1, 0) ~~> (#vk.3, 0) )
              next
                case initiatereader
                by contradiction /* impossible chain */
              next
                case tag1
                solve( (#vl.1, 0) ~~> (#vk.3, 0) )
                  case d_0_fst
                  by contradiction /* impossible chain */
                next
                  case d_0_snd
                  by solve( (#vr.5, 0) ~~> (#vk.3, 0) )
                qed
              qed
            qed
          next
            case c_xor_case_3
            solve( !KU( (~k⊕~k1) ) @ #vk.4 )
              case c_xor
              by solve( !KU( ~k1 ) @ #vk.7 )
            next
              case coerce
              solve( !KD( (~k⊕~k1) ) ▶₀ #vk.3 )
                case acceptreader
                by solve( (#vl.1, 0) ~~> (#vk.3, 0) )
              next
                case initiatereader
                by contradiction /* impossible chain */
              next
                case tag1
                solve( (#vl.1, 0) ~~> (#vk.3, 0) )
                  case d_0_fst
                  by contradiction /* impossible chain */
                next
                  case d_0_snd
                  by solve( (#vr.5, 0) ~~> (#vk.3, 0) )
                qed
              qed
            qed
          next
            case coerce
            solve( !KD( (r0⊕~r1.1⊕h((~k⊕~r1⊕r0))) ) ▶₀ #vk.2 )
              case acceptreader
              by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
            next
              case initiatereader
              by contradiction /* impossible chain */
            next
              case tag1
              solve( (#vl.1, 0) ~~> (#vk.2, 0) )
                case d_0_fst
                by contradiction /* impossible chain */
              next
                case d_0_snd
                by solve( (#vr.5, 0) ~~> (#vk.2, 0) )
              qed
            qed
          qed
        next
          case c_xor_case_13
          solve( !KU( (r0⊕h((~k⊕~r1⊕r0))) ) @ #vk.3 )
            case c_xor
            solve( !KU( (~k⊕~k1⊕~r1.1) ) @ #vk.4 )
              case c_xor_case_1
              by solve( !KU( ~k1 ) @ #vk.7 )
            next
              case c_xor_case_2
              by solve( !KU( ~k ) @ #vk.7 )
            next
              case c_xor_case_3
              by contradiction /* cyclic */
            next
              case coerce
              solve( !KD( (~k⊕~k1⊕~r1.1) ) ▶₀ #vk.3 )
                case acceptreader
                by solve( (#vl.1, 0) ~~> (#vk.3, 0) )
              next
                case initiatereader
                by contradiction /* impossible chain */
              next
                case tag1
                solve( (#vl.1, 0) ~~> (#vk.3, 0) )
                  case d_0_fst
                  by contradiction /* impossible chain */
                next
                  case d_0_snd
                  by solve( (#vr.5, 0) ~~> (#vk.3, 0) )
                qed
              qed
            qed
          next
            case coerce
            solve( !KD( (r0⊕h((~k⊕~r1⊕r0))) ) ▶₀ #vk.2 )
              case acceptreader
              by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
            next
              case initiatereader
              by contradiction /* impossible chain */
            next
              case tag1
              solve( (#vl.1, 0) ~~> (#vk.2, 0) )
                case d_0_fst
                by contradiction /* impossible chain */
              next
                case d_0_snd
                by solve( (#vr.5, 0) ~~> (#vk.2, 0) )
              qed
            qed
          qed
        next
          case c_xor_case_14
          solve( !KU( (~r1.1⊕h((~k⊕~r1⊕r0))) ) @ #vk.3 )
            case c_xor
            by contradiction /* cyclic */
          next
            case coerce
            solve( !KD( (~r1.1⊕h((~k⊕~r1⊕r0))) ) ▶₀ #vk.2 )
              case acceptreader
              by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
            next
              case initiatereader
              by contradiction /* impossible chain */
            next
              case tag1
              solve( (#vl.1, 0) ~~> (#vk.2, 0) )
                case d_0_fst
                by contradiction /* impossible chain */
              next
                case d_0_snd
                by solve( (#vr.5, 0) ~~> (#vk.2, 0) )
              qed
            qed
          qed
        next
          case c_xor_case_15
          solve( !KU( (~k⊕~k1⊕r0⊕~r1.1) ) @ #vk.4 )
            case c_xor_case_1
            solve( !KU( (~k⊕~k1⊕~r1.1) ) @ #vk.5 )
              case c_xor_case_1
              by solve( !KU( ~k1 ) @ #vk.7 )
            next
              case c_xor_case_2
              by solve( !KU( ~k ) @ #vk.7 )
            next
              case c_xor_case_3
              by contradiction /* cyclic */
            next
              case coerce
              solve( !KD( (~k⊕~k1⊕~r1.1) ) ▶₀ #vk.3 )
                case acceptreader
                by solve( (#vl.1, 0) ~~> (#vk.3, 0) )
              next
                case initiatereader
                by contradiction /* impossible chain */
              next
                case tag1
                solve( (#vl.1, 0) ~~> (#vk.3, 0) )
                  case d_0_fst
                  by contradiction /* impossible chain */
                next
                  case d_0_snd
                  by solve( (#vr.5, 0) ~~> (#vk.3, 0) )
                qed
              qed
            qed
          next
            case c_xor_case_2
            by solve( !KU( ~k1 ) @ #vk.6 )
          next
            case c_xor_case_3
            solve( !KU( (~k⊕~r1.1) ) @ #vk.5 )
              case c_xor
              by contradiction /* cyclic */
            next
              case coerce
              solve( !KD( (~k⊕~r1.1) ) ▶₀ #vk.3 )
                case acceptreader
                by solve( (#vl.1, 0) ~~> (#vk.3, 0) )
              next
                case initiatereader
                by contradiction /* impossible chain */
              next
                case tag1
                solve( (#vl.1, 0) ~~> (#vk.3, 0) )
                  case d_0_fst
                  by contradiction /* impossible chain */
                next
                  case d_0_snd
                  by solve( (#vr.5, 0) ~~> (#vk.3, 0) )
                qed
              qed
            qed
          next
            case c_xor_case_4
            by solve( !KU( ~k ) @ #vk.6 )
          next
            case c_xor_case_5
            solve( !KU( (~k1⊕~r1.1) ) @ #vk.5 )
              case c_xor
              by contradiction /* cyclic */
            next
              case coerce
              solve( !KD( (~k1⊕~r1.1) ) ▶₀ #vk.3 )
                case acceptreader
                by solve( (#vl.1, 0) ~~> (#vk.3, 0) )
              next
                case initiatereader
                by contradiction /* impossible chain */
              next
                case tag1
                solve( (#vl.1, 0) ~~> (#vk.3, 0) )
                  case d_0_fst
                  by contradiction /* impossible chain */
                next
                  case d_0_snd
                  by solve( (#vr.5, 0) ~~> (#vk.3, 0) )
                qed
              qed
            qed
          next
            case c_xor_case_6
            solve( !KU( (r0⊕~r1.1) ) @ #vk.5 )
              case c_xor
              by contradiction /* cyclic */
            next
              case coerce
              solve( !KD( (r0⊕~r1.1) ) ▶₀ #vk.3 )
                case acceptreader
                by solve( (#vl.1, 0) ~~> (#vk.3, 0) )
              next
                case initiatereader
                by contradiction /* impossible chain */
              next
                case tag1
                solve( (#vl.1, 0) ~~> (#vk.3, 0) )
                  case d_0_fst
                  by contradiction /* impossible chain */
                next
                  case d_0_snd
                  by solve( (#vr.5, 0) ~~> (#vk.3, 0) )
                qed
              qed
            qed
          next
            case c_xor_case_7
            by contradiction /* cyclic */
          next
            case coerce
            solve( !KD( (~k⊕~k1⊕r0⊕~r1.1) ) ▶₀ #vk.2 )
              case acceptreader
              by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
            next
              case initiatereader
              by contradiction /* impossible chain */
            next
              case tag1
              solve( (#vl.1, 0) ~~> (#vk.2, 0) )
                case d_0_fst
                by contradiction /* impossible chain */
              next
                case d_0_snd
                by solve( (#vr.5, 0) ~~> (#vk.2, 0) )
              qed
            qed
          qed
        next
          case coerce
          solve( !KD( (~k⊕~k1⊕r0⊕~r1.1⊕h((~k⊕~r1⊕r0))) ) ▶₀ #vk.1 )
            case acceptreader
            by solve( (#vl.1, 0) ~~> (#vk.1, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.1, 0) ~~> (#vk.1, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.5, 0) ~~> (#vk.1, 0) )
            qed
          qed
        qed
      next
        case split_case_3
        solve( !KU( (~k⊕~k1⊕h((~k⊕~r0⊕~r1))) ) @ #vk.2 )
          case c_xor_case_1
          by solve( !KU( ~k1 ) @ #vk.4 )
        next
          case c_xor_case_2
          by solve( !KU( ~k ) @ #vk.4 )
        next
          case c_xor_case_3
          solve( !KU( h((~k⊕~r0⊕~r1)) ) @ #vk.3 )
            case c_h
            solve( !KU( (~k⊕~k1) ) @ #vk.4 )
              case c_xor
              by solve( !KU( ~k1 ) @ #vk.6 )
            next
              case coerce
              solve( !KD( (~k⊕~k1) ) ▶₀ #vk.3 )
                case acceptreader
                by solve( (#vl.1, 0) ~~> (#vk.3, 0) )
              next
                case initiatereader
                by contradiction /* impossible chain */
              next
                case tag1
                solve( (#vl.1, 0) ~~> (#vk.3, 0) )
                  case d_0_fst
                  by contradiction /* impossible chain */
                next
                  case d_0_snd
                  by solve( (#vr.5, 0) ~~> (#vk.3, 0) )
                qed
              qed
            qed
          next
            case tag1_case_1
            solve( !KU( (~k⊕~k1) ) @ #vk.4 )
              case c_xor
              by solve( !KU( ~k1 ) @ #vk.6 )
            next
              case coerce
              solve( !KD( (~k⊕~k1) ) ▶₀ #vk.3 )
                case acceptreader
                by solve( (#vl.2, 0) ~~> (#vk.3, 0) )
              next
                case initiatereader
                by contradiction /* impossible chain */
              next
                case tag1
                solve( (#vl.2, 0) ~~> (#vk.3, 0) )
                  case d_0_fst
                  by contradiction /* impossible chain */
                next
                  case d_0_snd
                  by solve( (#vr.7, 0) ~~> (#vk.3, 0) )
                qed
              qed
            qed
          next
            case tag1_case_2
            by contradiction /* cyclic */
          qed
        next
          case coerce
          solve( !KD( (~k⊕~k1⊕h((~k⊕~r0⊕~r1))) ) ▶₀ #vk.1 )
            case acceptreader
            by solve( (#vl.1, 0) ~~> (#vk.1, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.1, 0) ~~> (#vk.1, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.5, 0) ~~> (#vk.1, 0) )
            qed
          qed
        qed
      next
        case split_case_4
        solve( !KU( (~k1⊕~r1.1) ) @ #vk.1 )
          case c_xor
          by solve( !KU( ~k1 ) @ #vk.4 )
        next
          case coerce
          solve( !KD( (~k1⊕~r1.1) ) ▶₀ #vk.1 )
            case acceptreader
            by solve( (#vl.1, 0) ~~> (#vk.1, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.1, 0) ~~> (#vk.1, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.5, 0) ~~> (#vk.1, 0) )
            qed
          qed
        qed
      next
        case split_case_5
        solve( !KU( (~k1⊕x⊕~r1.1) ) @ #vk.1 )
          case c_xor_case_1
          solve( !KU( (~k⊕x⊕h((~k⊕~k1⊕~r1⊕x⊕~r1.1))) ) @ #vk.2 )
            case c_xor_case_1
            solve( !KU( (~k1⊕~r1.1) ) @ #vk.3 )
              case c_xor
              by solve( !KU( ~k1 ) @ #vk.7 )
            next
              case coerce
              solve( !KD( (~k1⊕~r1.1) ) ▶₀ #vk.3 )
                case acceptreader
                by solve( (#vl.1, 0) ~~> (#vk.3, 0) )
              next
                case initiatereader
                by contradiction /* impossible chain */
              next
                case tag1
                solve( (#vl.1, 0) ~~> (#vk.3, 0) )
                  case d_0_fst
                  by contradiction /* impossible chain */
                next
                  case d_0_snd
                  by solve( (#vr.5, 0) ~~> (#vk.3, 0) )
                qed
              qed
            qed
          next
            case c_xor_case_2
            by solve( !KU( ~k ) @ #vk.6 )
          next
            case c_xor_case_3
            solve( !KU( (~k1⊕~r1.1) ) @ #vk.3 )
              case c_xor
              by solve( !KU( ~k1 ) @ #vk.8 )
            next
              case coerce
              solve( !KD( (~k1⊕~r1.1) ) ▶₀ #vk.3 )
                case acceptreader
                by solve( (#vl.1, 0) ~~> (#vk.3, 0) )
              next
                case initiatereader
                by contradiction /* impossible chain */
              next
                case tag1
                solve( (#vl.1, 0) ~~> (#vk.3, 0) )
                  case d_0_fst
                  by contradiction /* impossible chain */
                next
                  case d_0_snd
                  by solve( (#vr.5, 0) ~~> (#vk.3, 0) )
                qed
              qed
            qed
          next
            case coerce
            solve( !KD( (~k⊕x⊕h((~k⊕~k1⊕~r1⊕x⊕~r1.1))) ) ▶₀ #vk.2 )
              case acceptreader
              by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
            next
              case initiatereader
              by contradiction /* impossible chain */
            next
              case tag1
              solve( (#vl.1, 0) ~~> (#vk.2, 0) )
                case d_0_fst
                by contradiction /* impossible chain */
              next
                case d_0_snd
                by solve( (#vr.5, 0) ~~> (#vk.2, 0) )
              qed
            qed
          qed
        next
          case c_xor_case_2
          by solve( !KU( ~k1 ) @ #vk.4 )
        next
          case c_xor_case_3
          solve( !KU( (~k⊕x⊕h((~k⊕~k1⊕~r1⊕x⊕~r1.1))) ) @ #vk.2 )
            case c_xor_case_1
            solve( !KU( (~k1⊕x) ) @ #vk.4 )
              case c_xor
              by solve( !KU( ~k1 ) @ #vk.7 )
            next
              case coerce
              solve( !KD( (~k1⊕x) ) ▶₀ #vk.3 )
                case acceptreader
                by solve( (#vl.1, 0) ~~> (#vk.3, 0) )
              next
                case initiatereader
                by contradiction /* impossible chain */
              next
                case tag1
                solve( (#vl.1, 0) ~~> (#vk.3, 0) )
                  case d_0_fst
                  by contradiction /* impossible chain */
                next
                  case d_0_snd
                  by solve( (#vr.5, 0) ~~> (#vk.3, 0) )
                qed
              qed
            qed
          next
            case c_xor_case_2
            by solve( !KU( ~k ) @ #vk.6 )
          next
            case c_xor_case_3
            solve( !KU( (~k1⊕x) ) @ #vk.4 )
              case c_xor
              by solve( !KU( ~k1 ) @ #vk.8 )
            next
              case coerce
              solve( !KD( (~k1⊕x) ) ▶₀ #vk.3 )
                case acceptreader
                by solve( (#vl.1, 0) ~~> (#vk.3, 0) )
              next
                case initiatereader
                by contradiction /* impossible chain */
              next
                case tag1
                solve( (#vl.1, 0) ~~> (#vk.3, 0) )
                  case d_0_fst
                  by contradiction /* impossible chain */
                next
                  case d_0_snd
                  by solve( (#vr.5, 0) ~~> (#vk.3, 0) )
                qed
              qed
            qed
          next
            case coerce
            solve( !KD( (~k⊕x⊕h((~k⊕~k1⊕~r1⊕x⊕~r1.1))) ) ▶₀ #vk.2 )
              case acceptreader
              by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
            next
              case initiatereader
              by contradiction /* impossible chain */
            next
              case tag1
              solve( (#vl.1, 0) ~~> (#vk.2, 0) )
                case d_0_fst
                by contradiction /* impossible chain */
              next
                case d_0_snd
                by solve( (#vr.5, 0) ~~> (#vk.2, 0) )
              qed
            qed
          qed
        next
          case coerce
          solve( !KD( (~k1⊕x⊕~r1.1) ) ▶₀ #vk.1 )
            case acceptreader
            by solve( (#vl.1, 0) ~~> (#vk.1, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.1, 0) ~~> (#vk.1, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.5, 0) ~~> (#vk.1, 0) )
            qed
          qed
        qed
      next
        case split_case_6
        solve( !KU( (~k1⊕x) ) @ #vk.1 )
          case c_xor
          by solve( !KU( ~k1 ) @ #vk.4 )
        next
          case coerce
          solve( !KD( (~k1⊕x) ) ▶₀ #vk.1 )
            case acceptreader
            by solve( (#vl.1, 0) ~~> (#vk.1, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.1, 0) ~~> (#vk.1, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.5, 0) ~~> (#vk.1, 0) )
            qed
          qed
        qed
      next
        case split_case_7
        solve( !KU( (x⊕~r1.1) ) @ #vk.1 )
          case c_xor
          solve( !KU( (~k⊕~k1⊕x⊕h((~k⊕~r1⊕x⊕~r1.1))) ) @ #vk.2 )
            case c_xor_case_1
            solve( !KU( (~k⊕~k1⊕h((~k⊕~r1⊕x⊕~r1.1))) ) @ #vk.5 )
              case c_xor_case_1
              by solve( !KU( ~k1 ) @ #vk.7 )
            next
              case c_xor_case_2
              by solve( !KU( ~k ) @ #vk.7 )
            next
              case c_xor_case_3
              solve( !KU( h((~k⊕~r1⊕x⊕~r1.1)) ) @ #vk.6 )
                case c_h
                solve( !KU( (~k⊕~k1) ) @ #vk.7 )
                  case c_xor
                  by solve( !KU( ~k1 ) @ #vk.9 )
                next
                  case coerce
                  solve( !KD( (~k⊕~k1) ) ▶₀ #vk.5 )
                    case acceptreader
                    by solve( (#vl.1, 0) ~~> (#vk.5, 0) )
                  next
                    case initiatereader
                    by contradiction /* impossible chain */
                  next
                    case tag1
                    solve( (#vl.1, 0) ~~> (#vk.5, 0) )
                      case d_0_fst
                      by contradiction /* impossible chain */
                    next
                      case d_0_snd
                      by solve( (#vr.5, 0) ~~> (#vk.5, 0) )
                    qed
                  qed
                qed
              next
                case tag1_case_1
                solve( !KU( (~k⊕~k1) ) @ #vk.7 )
                  case c_xor
                  by solve( !KU( ~k1 ) @ #vk.9 )
                next
                  case coerce
                  solve( !KD( (~k⊕~k1) ) ▶₀ #vk.5 )
                    case acceptreader
                    by solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                  next
                    case initiatereader
                    by contradiction /* impossible chain */
                  next
                    case tag1
                    solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                      case d_0_fst
                      by contradiction /* impossible chain */
                    next
                      case d_0_snd
                      by solve( (#vr.7, 0) ~~> (#vk.5, 0) )
                    qed
                  qed
                qed
              next
                case tag1_case_2
                by contradiction /* cyclic */
              qed
            next
              case coerce
              solve( !KD( (~k⊕~k1⊕h((~k⊕~r1⊕x⊕~r1.1))) ) ▶₀ #vk.3 )
                case acceptreader
                by solve( (#vl.1, 0) ~~> (#vk.3, 0) )
              next
                case initiatereader
                by contradiction /* impossible chain */
              next
                case tag1
                solve( (#vl.1, 0) ~~> (#vk.3, 0) )
                  case d_0_fst
                  by contradiction /* impossible chain */
                next
                  case d_0_snd
                  by solve( (#vr.5, 0) ~~> (#vk.3, 0) )
                qed
              qed
            qed
          next
            case c_xor_case_2
            by solve( !KU( ~k1 ) @ #vk.6 )
          next
            case c_xor_case_3
            solve( !KU( (~k⊕h((~k⊕~r1⊕x⊕~r1.1))) ) @ #vk.5 )
              case c_xor
              by solve( !KU( ~k ) @ #vk.8 )
            next
              case coerce
              solve( !KD( (~k⊕h((~k⊕~r1⊕x⊕~r1.1))) ) ▶₀ #vk.3 )
                case acceptreader
                by solve( (#vl.1, 0) ~~> (#vk.3, 0) )
              next
                case initiatereader
                by contradiction /* impossible chain */
              next
                case tag1
                solve( (#vl.1, 0) ~~> (#vk.3, 0) )
                  case d_0_fst
                  by contradiction /* impossible chain */
                next
                  case d_0_snd
                  by solve( (#vr.5, 0) ~~> (#vk.3, 0) )
                qed
              qed
            qed
          next
            case c_xor_case_4
            by solve( !KU( ~k ) @ #vk.6 )
          next
            case c_xor_case_5
            solve( !KU( (~k1⊕h((~k⊕~r1⊕x⊕~r1.1))) ) @ #vk.5 )
              case c_xor
              by solve( !KU( ~k1 ) @ #vk.8 )
            next
              case coerce
              solve( !KD( (~k1⊕h((~k⊕~r1⊕x⊕~r1.1))) ) ▶₀ #vk.3 )
                case acceptreader
                by solve( (#vl.1, 0) ~~> (#vk.3, 0) )
              next
                case initiatereader
                by contradiction /* impossible chain */
              next
                case tag1
                solve( (#vl.1, 0) ~~> (#vk.3, 0) )
                  case d_0_fst
                  by contradiction /* impossible chain */
                next
                  case d_0_snd
                  by solve( (#vr.5, 0) ~~> (#vk.3, 0) )
                qed
              qed
            qed
          next
            case c_xor_case_6
            solve( !KU( (x⊕h((~k⊕~r1⊕x⊕~r1.1))) ) @ #vk.5 )
              case c_xor
              solve( !KU( (~k⊕~k1) ) @ #vk.6 )
                case c_xor
                by solve( !KU( ~k1 ) @ #vk.8 )
              next
                case coerce
                solve( !KD( (~k⊕~k1) ) ▶₀ #vk.4 )
                  case acceptreader
                  by solve( (#vl.1, 0) ~~> (#vk.4, 0) )
                next
                  case initiatereader
                  by contradiction /* impossible chain */
                next
                  case tag1
                  solve( (#vl.1, 0) ~~> (#vk.4, 0) )
                    case d_0_fst
                    by contradiction /* impossible chain */
                  next
                    case d_0_snd
                    by solve( (#vr.5, 0) ~~> (#vk.4, 0) )
                  qed
                qed
              qed
            next
              case coerce
              solve( !KD( (x⊕h((~k⊕~r1⊕x⊕~r1.1))) ) ▶₀ #vk.3 )
                case acceptreader
                by solve( (#vl.1, 0) ~~> (#vk.3, 0) )
              next
                case initiatereader
                by contradiction /* impossible chain */
              next
                case tag1
                solve( (#vl.1, 0) ~~> (#vk.3, 0) )
                  case d_0_fst
                  by contradiction /* impossible chain */
                next
                  case d_0_snd
                  by solve( (#vr.5, 0) ~~> (#vk.3, 0) )
                qed
              qed
            qed
          next
            case c_xor_case_7
            solve( !KU( h((~k⊕~r1⊕x⊕~r1.1)) ) @ #vk.5 )
              case c_h
              solve( !KU( (~k⊕~k1⊕x) ) @ #vk.6 )
                case c_xor_case_1
                by solve( !KU( ~k1 ) @ #vk.9 )
              next
                case c_xor_case_2
                by solve( !KU( ~k ) @ #vk.9 )
              next
                case c_xor_case_3
                solve( !KU( (~k⊕~r1⊕x⊕~r1.1) ) @ #vk.7 )
                  case c_xor_case_1
                  solve( !KU( (~k⊕~k1) ) @ #vk.8 )
                    case c_xor
                    by solve( !KU( ~k1 ) @ #vk.10 )
                  next
                    case coerce
                    solve( !KD( (~k⊕~k1) ) ▶₀ #vk.6 )
                      case acceptreader
                      by solve( (#vl.1, 0) ~~> (#vk.6, 0) )
                    next
                      case initiatereader
                      by contradiction /* impossible chain */
                    next
                      case tag1
                      solve( (#vl.1, 0) ~~> (#vk.6, 0) )
                        case d_0_fst
                        by contradiction /* impossible chain */
                      next
                        case d_0_snd
                        by solve( (#vr.5, 0) ~~> (#vk.6, 0) )
                      qed
                    qed
                  qed
                next
                  case c_xor_case_2
                  by contradiction /* cyclic */
                next
                  case c_xor_case_3
                  solve( !KU( (~k⊕~k1) ) @ #vk.8 )
                    case c_xor
                    by solve( !KU( ~k1 ) @ #vk.11 )
                  next
                    case coerce
                    solve( !KD( (~k⊕~k1) ) ▶₀ #vk.6 )
                      case acceptreader
                      by solve( (#vl.1, 0) ~~> (#vk.6, 0) )
                    next
                      case initiatereader
                      by contradiction /* impossible chain */
                    next
                      case tag1
                      solve( (#vl.1, 0) ~~> (#vk.6, 0) )
                        case d_0_fst
                        by contradiction /* impossible chain */
                      next
                        case d_0_snd
                        by solve( (#vr.5, 0) ~~> (#vk.6, 0) )
                      qed
                    qed
                  qed
                next
                  case c_xor_case_4
                  by solve( !KU( ~k ) @ #vk.10 )
                next
                  case c_xor_case_5
                  solve( !KU( (~k⊕~k1) ) @ #vk.8 )
                    case c_xor
                    by solve( !KU( ~k1 ) @ #vk.11 )
                  next
                    case coerce
                    solve( !KD( (~k⊕~k1) ) ▶₀ #vk.6 )
                      case acceptreader
                      by solve( (#vl.1, 0) ~~> (#vk.6, 0) )
                    next
                      case initiatereader
                      by contradiction /* impossible chain */
                    next
                      case tag1
                      solve( (#vl.1, 0) ~~> (#vk.6, 0) )
                        case d_0_fst
                        by contradiction /* impossible chain */
                      next
                        case d_0_snd
                        by solve( (#vr.5, 0) ~~> (#vk.6, 0) )
                      qed
                    qed
                  qed
                next
                  case c_xor_case_6
                  by contradiction /* cyclic */
                next
                  case c_xor_case_7
                  by contradiction /* cyclic */
                next
                  case coerce
                  solve( !KD( (~k⊕~r1⊕x⊕~r1.1) ) ▶₀ #vk.5 )
                    case acceptreader
                    by solve( (#vl.1, 0) ~~> (#vk.5, 0) )
                  next
                    case initiatereader
                    by contradiction /* impossible chain */
                  next
                    case tag1
                    solve( (#vl.1, 0) ~~> (#vk.5, 0) )
                      case d_0_fst
                      by contradiction /* impossible chain */
                    next
                      case d_0_snd
                      by solve( (#vr.5, 0) ~~> (#vk.5, 0) )
                    qed
                  qed
                qed
              next
                case coerce
                solve( !KD( (~k⊕~k1⊕x) ) ▶₀ #vk.4 )
                  case acceptreader
                  by solve( (#vl.1, 0) ~~> (#vk.4, 0) )
                next
                  case initiatereader
                  by contradiction /* impossible chain */
                next
                  case tag1
                  solve( (#vl.1, 0) ~~> (#vk.4, 0) )
                    case d_0_fst
                    by contradiction /* impossible chain */
                  next
                    case d_0_snd
                    by solve( (#vr.5, 0) ~~> (#vk.4, 0) )
                  qed
                qed
              qed
            next
              case tag1_case_1
              solve( !KU( (~k⊕~k1⊕x) ) @ #vk.6 )
                case c_xor_case_1
                by solve( !KU( ~k1 ) @ #vk.9 )
              next
                case c_xor_case_2
                by solve( !KU( ~k ) @ #vk.9 )
              next
                case c_xor_case_3
                solve( !KU( (~k⊕~k1) ) @ #vk.8 )
                  case c_xor
                  by solve( !KU( ~k1 ) @ #vk.9 )
                next
                  case coerce
                  solve( !KD( (~k⊕~k1) ) ▶₀ #vk.5 )
                    case acceptreader
                    by solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                  next
                    case initiatereader
                    by contradiction /* impossible chain */
                  next
                    case tag1
                    solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                      case d_0_fst
                      by contradiction /* impossible chain */
                    next
                      case d_0_snd
                      by solve( (#vr.7, 0) ~~> (#vk.5, 0) )
                    qed
                  qed
                qed
              next
                case coerce
                solve( !KD( (~k⊕~k1⊕x) ) ▶₀ #vk.4 )
                  case acceptreader
                  by solve( (#vl.2, 0) ~~> (#vk.4, 0) )
                next
                  case initiatereader
                  by contradiction /* impossible chain */
                next
                  case tag1
                  solve( (#vl.2, 0) ~~> (#vk.4, 0) )
                    case d_0_fst
                    by contradiction /* impossible chain */
                  next
                    case d_0_snd
                    by solve( (#vr.7, 0) ~~> (#vk.4, 0) )
                  qed
                qed
              qed
            next
              case tag1_case_2
              by contradiction /* cyclic */
            qed
          next
            case coerce
            solve( !KD( (~k⊕~k1⊕x⊕h((~k⊕~r1⊕x⊕~r1.1))) ) ▶₀ #vk.2 )
              case acceptreader
              by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
            next
              case initiatereader
              by contradiction /* impossible chain */
            next
              case tag1
              solve( (#vl.1, 0) ~~> (#vk.2, 0) )
                case d_0_fst
                by contradiction /* impossible chain */
              next
                case d_0_snd
                by solve( (#vr.5, 0) ~~> (#vk.2, 0) )
              qed
            qed
          qed
        next
          case coerce
          solve( !KD( (x⊕~r1.1) ) ▶₀ #vk.1 )
            case acceptreader
            by solve( (#vl.1, 0) ~~> (#vk.1, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.1, 0) ~~> (#vk.1, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.5, 0) ~~> (#vk.1, 0) )
            qed
          qed
        qed
      qed
    next
      case tag1_case_2
      solve( splitEqs(3) )
        case split_case_1
        solve( !KU( (r0⊕~r1.1⊕h((~k⊕~r1⊕r0))) ) @ #vk.2 )
          case c_xor_case_1
          by contradiction /* cyclic */
        next
          case c_xor_case_2
          solve( !KU( (~r1.1⊕h((~k⊕~r1⊕r0))) ) @ #vk.3 )
            case c_xor
            by contradiction /* cyclic */
          next
            case coerce
            solve( !KD( (~r1.1⊕h((~k⊕~r1⊕r0))) ) ▶₀ #vk.2 )
              case acceptreader
              by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
            next
              case initiatereader
              by contradiction /* impossible chain */
            next
              case tag1
              solve( (#vl.1, 0) ~~> (#vk.2, 0) )
                case d_0_fst
                by contradiction /* impossible chain */
              next
                case d_0_snd
                by solve( (#vr.5, 0) ~~> (#vk.2, 0) )
              qed
            qed
          qed
        next
          case c_xor_case_3
          solve( !KU( (r0⊕~r1.1) ) @ #vk.4 )
            case c_xor
            by contradiction /* cyclic */
          next
            case coerce
            solve( !KD( (r0⊕~r1.1) ) ▶₀ #vk.2 )
              case acceptreader
              by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
            next
              case initiatereader
              by contradiction /* impossible chain */
            next
              case tag1
              solve( (#vl.1, 0) ~~> (#vk.2, 0) )
                case d_0_fst
                by contradiction /* impossible chain */
              next
                case d_0_snd
                by solve( (#vr.5, 0) ~~> (#vk.2, 0) )
              qed
            qed
          qed
        next
          case coerce
          solve( !KD( (r0⊕~r1.1⊕h((~k⊕~r1⊕r0))) ) ▶₀ #vk.1 )
            case acceptreader
            by solve( (#vl.1, 0) ~~> (#vk.1, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.1, 0) ~~> (#vk.1, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.5, 0) ~~> (#vk.1, 0) )
            qed
          qed
        qed
      next
        case split_case_2
        solve( !KU( h((~k⊕~r0⊕~r1)) ) @ #vk.2 )
          case c_h
          solve( !KU( (~k⊕~r0⊕~r1) ) @ #vk.3 )
            case c_xor_case_1
            by contradiction /* cyclic */
          next
            case c_xor_case_2
            by solve( !KU( ~k ) @ #vk.5 )
          next
            case c_xor_case_3
            by contradiction /* cyclic */
          next
            case coerce
            solve( !KD( (~k⊕~r0⊕~r1) ) ▶₀ #vk.2 )
              case acceptreader
              by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
            next
              case initiatereader
              by contradiction /* impossible chain */
            next
              case tag1
              solve( (#vl.1, 0) ~~> (#vk.2, 0) )
                case d_0_fst
                by contradiction /* impossible chain */
              next
                case d_0_snd
                by solve( (#vr.5, 0) ~~> (#vk.2, 0) )
              qed
            qed
          qed
        next
          case tag1_case_1
          solve( splitEqs(5) )
            case split
            solve( !KU( (~k⊕~k1⊕~r0⊕~r1⊕~r1.1) ) @ #vk.3 )
              case c_xor_case_01
              by contradiction /* cyclic */
            next
              case c_xor_case_02
              by contradiction /* cyclic */
            next
              case c_xor_case_03
              solve( !KU( (~k⊕~k1⊕~r1.1) ) @ #vk.4 )
                case c_xor_case_1
                by solve( !KU( ~k1 ) @ #vk.7 )
              next
                case c_xor_case_2
                by solve( !KU( ~k ) @ #vk.7 )
              next
                case c_xor_case_3
                by contradiction /* cyclic */
              next
                case coerce
                solve( !KD( (~k⊕~k1⊕~r1.1) ) ▶₀ #vk.3 )
                  case acceptreader
                  by solve( (#vl.2, 0) ~~> (#vk.3, 0) )
                next
                  case initiatereader
                  by contradiction /* impossible chain */
                next
                  case tag1
                  solve( (#vl.2, 0) ~~> (#vk.3, 0) )
                    case d_0_fst
                    by contradiction /* impossible chain */
                  next
                    case d_0_snd
                    by solve( (#vr.7, 0) ~~> (#vk.3, 0) )
                  qed
                qed
              qed
            next
              case c_xor_case_04
              by solve( !KU( ~k1 ) @ #vk.5 )
            next
              case c_xor_case_05
              solve( !KU( (~k⊕~r0⊕~r1.1) ) @ #vk.4 )
                case c_xor_case_1
                by contradiction /* cyclic */
              next
                case c_xor_case_2
                by solve( !KU( ~k ) @ #vk.7 )
              next
                case c_xor_case_3
                by contradiction /* cyclic */
              next
                case coerce
                solve( !KD( (~k⊕~r0⊕~r1.1) ) ▶₀ #vk.3 )
                  case acceptreader
                  by solve( (#vl.2, 0) ~~> (#vk.3, 0) )
                next
                  case initiatereader
                  by contradiction /* impossible chain */
                next
                  case tag1
                  solve( (#vl.2, 0) ~~> (#vk.3, 0) )
                    case d_0_fst
                    by contradiction /* impossible chain */
                  next
                    case d_0_snd
                    by solve( (#vr.7, 0) ~~> (#vk.3, 0) )
                  qed
                qed
              qed
            next
              case c_xor_case_06
              solve( !KU( (~k⊕~r1⊕~r1.1) ) @ #vk.4 )
                case c_xor_case_1
                by contradiction /* cyclic */
              next
                case c_xor_case_2
                by solve( !KU( ~k ) @ #vk.7 )
              next
                case c_xor_case_3
                by contradiction /* cyclic */
              next
                case coerce
                solve( !KD( (~k⊕~r1⊕~r1.1) ) ▶₀ #vk.3 )
                  case acceptreader
                  by solve( (#vl.2, 0) ~~> (#vk.3, 0) )
                next
                  case initiatereader
                  by contradiction /* impossible chain */
                next
                  case tag1
                  solve( (#vl.2, 0) ~~> (#vk.3, 0) )
                    case d_0_fst
                    by contradiction /* impossible chain */
                  next
                    case d_0_snd
                    by solve( (#vr.7, 0) ~~> (#vk.3, 0) )
                  qed
                qed
              qed
            next
              case c_xor_case_07
              solve( !KU( (~k⊕~r1.1) ) @ #vk.4 )
                case c_xor
                by contradiction /* cyclic */
              next
                case coerce
                solve( !KD( (~k⊕~r1.1) ) ▶₀ #vk.3 )
                  case acceptreader
                  by solve( (#vl.2, 0) ~~> (#vk.3, 0) )
                next
                  case initiatereader
                  by contradiction /* impossible chain */
                next
                  case tag1
                  solve( (#vl.2, 0) ~~> (#vk.3, 0) )
                    case d_0_fst
                    by contradiction /* impossible chain */
                  next
                    case d_0_snd
                    by solve( (#vr.7, 0) ~~> (#vk.3, 0) )
                  qed
                qed
              qed
            next
              case c_xor_case_08
              by solve( !KU( ~k ) @ #vk.5 )
            next
              case c_xor_case_09
              solve( !KU( (~k1⊕~r0⊕~r1.1) ) @ #vk.4 )
                case c_xor_case_1
                by contradiction /* cyclic */
              next
                case c_xor_case_2
                by solve( !KU( ~k1 ) @ #vk.7 )
              next
                case c_xor_case_3
                by contradiction /* cyclic */
              next
                case coerce
                solve( !KD( (~k1⊕~r0⊕~r1.1) ) ▶₀ #vk.3 )
                  case acceptreader
                  by solve( (#vl.2, 0) ~~> (#vk.3, 0) )
                next
                  case initiatereader
                  by contradiction /* impossible chain */
                next
                  case tag1
                  solve( (#vl.2, 0) ~~> (#vk.3, 0) )
                    case d_0_fst
                    by contradiction /* impossible chain */
                  next
                    case d_0_snd
                    by solve( (#vr.7, 0) ~~> (#vk.3, 0) )
                  qed
                qed
              qed
            next
              case c_xor_case_10
              solve( !KU( (~k1⊕~r1⊕~r1.1) ) @ #vk.4 )
                case c_xor_case_1
                by contradiction /* cyclic */
              next
                case c_xor_case_2
                by solve( !KU( ~k1 ) @ #vk.7 )
              next
                case c_xor_case_3
                by contradiction /* cyclic */
              next
                case coerce
                solve( !KD( (~k1⊕~r1⊕~r1.1) ) ▶₀ #vk.3 )
                  case acceptreader
                  by solve( (#vl.2, 0) ~~> (#vk.3, 0) )
                next
                  case initiatereader
                  by contradiction /* impossible chain */
                next
                  case tag1
                  solve( (#vl.2, 0) ~~> (#vk.3, 0) )
                    case d_0_fst
                    by contradiction /* impossible chain */
                  next
                    case d_0_snd
                    by solve( (#vr.7, 0) ~~> (#vk.3, 0) )
                  qed
                qed
              qed
            next
              case c_xor_case_11
              solve( !KU( (~k1⊕~r1.1) ) @ #vk.4 )
                case c_xor
                by contradiction /* cyclic */
              next
                case coerce
                solve( !KD( (~k1⊕~r1.1) ) ▶₀ #vk.3 )
                  case acceptreader
                  by solve( (#vl.2, 0) ~~> (#vk.3, 0) )
                next
                  case initiatereader
                  by contradiction /* impossible chain */
                next
                  case tag1
                  solve( (#vl.2, 0) ~~> (#vk.3, 0) )
                    case d_0_fst
                    by contradiction /* impossible chain */
                  next
                    case d_0_snd
                    by solve( (#vr.7, 0) ~~> (#vk.3, 0) )
                  qed
                qed
              qed
            next
              case c_xor_case_12
              solve( !KU( (~r0⊕~r1⊕~r1.1) ) @ #vk.4 )
                case c_xor_case_1
                by contradiction /* cyclic */
              next
                case c_xor_case_2
                by contradiction /* cyclic */
              next
                case c_xor_case_3
                by contradiction /* cyclic */
              next
                case coerce
                solve( !KD( (~r0⊕~r1⊕~r1.1) ) ▶₀ #vk.3 )
                  case acceptreader
                  by solve( (#vl.2, 0) ~~> (#vk.3, 0) )
                next
                  case initiatereader
                  by contradiction /* impossible chain */
                next
                  case tag1
                  solve( (#vl.2, 0) ~~> (#vk.3, 0) )
                    case d_0_fst
                    by contradiction /* impossible chain */
                  next
                    case d_0_snd
                    by solve( (#vr.7, 0) ~~> (#vk.3, 0) )
                  qed
                qed
              qed
            next
              case c_xor_case_13
              solve( !KU( (~r0⊕~r1.1) ) @ #vk.4 )
                case c_xor
                by contradiction /* cyclic */
              next
                case coerce
                solve( !KD( (~r0⊕~r1.1) ) ▶₀ #vk.3 )
                  case acceptreader
                  by solve( (#vl.2, 0) ~~> (#vk.3, 0) )
                next
                  case initiatereader
                  by contradiction /* impossible chain */
                next
                  case tag1
                  solve( (#vl.2, 0) ~~> (#vk.3, 0) )
                    case d_0_fst
                    by contradiction /* impossible chain */
                  next
                    case d_0_snd
                    by solve( (#vr.7, 0) ~~> (#vk.3, 0) )
                  qed
                qed
              qed
            next
              case c_xor_case_14
              solve( !KU( (~r1⊕~r1.1) ) @ #vk.4 )
                case c_xor
                by contradiction /* cyclic */
              next
                case coerce
                solve( !KD( (~r1⊕~r1.1) ) ▶₀ #vk.3 )
                  case acceptreader
                  by solve( (#vl.2, 0) ~~> (#vk.3, 0) )
                next
                  case initiatereader
                  by contradiction /* impossible chain */
                next
                  case tag1
                  solve( (#vl.2, 0) ~~> (#vk.3, 0) )
                    case d_0_fst
                    by contradiction /* impossible chain */
                  next
                    case d_0_snd
                    by solve( (#vr.7, 0) ~~> (#vk.3, 0) )
                  qed
                qed
              qed
            next
              case c_xor_case_15
              by contradiction /* cyclic */
            next
              case coerce
              solve( !KD( (~k⊕~k1⊕~r0⊕~r1⊕~r1.1) ) ▶₀ #vk.2 )
                case acceptreader
                by solve( (#vl.2, 0) ~~> (#vk.2, 0) )
              next
                case initiatereader
                by contradiction /* impossible chain */
              next
                case tag1
                solve( (#vl.2, 0) ~~> (#vk.2, 0) )
                  case d_0_fst
                  by contradiction /* impossible chain */
                next
                  case d_0_snd
                  by solve( (#vr.7, 0) ~~> (#vk.2, 0) )
                qed
              qed
            qed
          qed
        next
          case tag1_case_2
          by contradiction /* cyclic */
        qed
      next
        case split_case_3
        solve( !KU( (x⊕~r1.1) ) @ #vk.1 )
          case c_xor
          solve( !KU( (x⊕h((~k⊕~r1⊕x⊕~r1.1))) ) @ #vk.2 )
            case c_xor
            solve( !KU( h((~k⊕~r1⊕x⊕~r1.1)) ) @ #vk.5 )
              case c_h
              solve( !KU( (~k⊕~r1⊕x⊕~r1.1) ) @ #vk.6 )
                case c_xor_case_1
                solve( !KU( (~k⊕~r1⊕~r1.1) ) @ #vk.7 )
                  case c_xor_case_1
                  by contradiction /* cyclic */
                next
                  case c_xor_case_2
                  by solve( !KU( ~k ) @ #vk.9 )
                next
                  case c_xor_case_3
                  by contradiction /* cyclic */
                next
                  case coerce
                  solve( !KD( (~k⊕~r1⊕~r1.1) ) ▶₀ #vk.5 )
                    case acceptreader
                    by solve( (#vl.1, 0) ~~> (#vk.5, 0) )
                  next
                    case initiatereader
                    by contradiction /* impossible chain */
                  next
                    case tag1
                    solve( (#vl.1, 0) ~~> (#vk.5, 0) )
                      case d_0_fst
                      by contradiction /* impossible chain */
                    next
                      case d_0_snd
                      by solve( (#vr.5, 0) ~~> (#vk.5, 0) )
                    qed
                  qed
                qed
              next
                case c_xor_case_2
                by contradiction /* cyclic */
              next
                case c_xor_case_3
                solve( !KU( (~k⊕~r1.1) ) @ #vk.7 )
                  case c_xor
                  by contradiction /* cyclic */
                next
                  case coerce
                  solve( !KD( (~k⊕~r1.1) ) ▶₀ #vk.5 )
                    case acceptreader
                    by solve( (#vl.1, 0) ~~> (#vk.5, 0) )
                  next
                    case initiatereader
                    by contradiction /* impossible chain */
                  next
                    case tag1
                    solve( (#vl.1, 0) ~~> (#vk.5, 0) )
                      case d_0_fst
                      by contradiction /* impossible chain */
                    next
                      case d_0_snd
                      by solve( (#vr.5, 0) ~~> (#vk.5, 0) )
                    qed
                  qed
                qed
              next
                case c_xor_case_4
                by solve( !KU( ~k ) @ #vk.8 )
              next
                case c_xor_case_5
                solve( !KU( (~r1⊕~r1.1) ) @ #vk.7 )
                  case c_xor
                  by contradiction /* cyclic */
                next
                  case coerce
                  solve( !KD( (~r1⊕~r1.1) ) ▶₀ #vk.5 )
                    case acceptreader
                    by solve( (#vl.1, 0) ~~> (#vk.5, 0) )
                  next
                    case initiatereader
                    by contradiction /* impossible chain */
                  next
                    case tag1
                    solve( (#vl.1, 0) ~~> (#vk.5, 0) )
                      case d_0_fst
                      by contradiction /* impossible chain */
                    next
                      case d_0_snd
                      by solve( (#vr.5, 0) ~~> (#vk.5, 0) )
                    qed
                  qed
                qed
              next
                case c_xor_case_6
                by contradiction /* cyclic */
              next
                case c_xor_case_7
                by contradiction /* cyclic */
              next
                case coerce
                solve( !KD( (~k⊕~r1⊕x⊕~r1.1) ) ▶₀ #vk.4 )
                  case acceptreader
                  by solve( (#vl.1, 0) ~~> (#vk.4, 0) )
                next
                  case initiatereader
                  by contradiction /* impossible chain */
                next
                  case tag1
                  solve( (#vl.1, 0) ~~> (#vk.4, 0) )
                    case d_0_fst
                    by contradiction /* impossible chain */
                  next
                    case d_0_snd
                    by solve( (#vr.5, 0) ~~> (#vk.4, 0) )
                  qed
                qed
              qed
            next
              case tag1_case_1
              solve( splitEqs(5) )
                case split_case_1
                by solve( !KU( ~k1 ) @ #vk.5 )
              next
                case split_case_2
                solve( !KU( (~k⊕~k1⊕~r1⊕x⊕~r1.1⊕~r1.2) ) @ #vk.6 )
                  case c_xor_case_01
                  by contradiction /* cyclic */
                next
                  case c_xor_case_02
                  solve( !KU( (~k⊕~k1⊕~r1⊕~r1.1⊕~r1.2) ) @ #vk.7 )
                    case c_xor_case_01
                    by contradiction /* cyclic */
                  next
                    case c_xor_case_02
                    by contradiction /* cyclic */
                  next
                    case c_xor_case_03
                    solve( !KU( (~k⊕~k1⊕~r1.2) ) @ #vk.8 )
                      case c_xor_case_1
                      by solve( !KU( ~k1 ) @ #vk.11 )
                    next
                      case c_xor_case_2
                      by solve( !KU( ~k ) @ #vk.11 )
                    next
                      case c_xor_case_3
                      by contradiction /* cyclic */
                    next
                      case coerce
                      solve( !KD( (~k⊕~k1⊕~r1.2) ) ▶₀ #vk.6 )
                        case acceptreader
                        by solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                      next
                        case initiatereader
                        by contradiction /* impossible chain */
                      next
                        case tag1
                        solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                          case d_0_fst
                          by contradiction /* impossible chain */
                        next
                          case d_0_snd
                          by solve( (#vr.7, 0) ~~> (#vk.6, 0) )
                        qed
                      qed
                    qed
                  next
                    case c_xor_case_04
                    by solve( !KU( ~k1 ) @ #vk.9 )
                  next
                    case c_xor_case_05
                    solve( !KU( (~k⊕~r1⊕~r1.2) ) @ #vk.8 )
                      case c_xor_case_1
                      by contradiction /* cyclic */
                    next
                      case c_xor_case_2
                      by solve( !KU( ~k ) @ #vk.11 )
                    next
                      case c_xor_case_3
                      by contradiction /* cyclic */
                    next
                      case coerce
                      solve( !KD( (~k⊕~r1⊕~r1.2) ) ▶₀ #vk.6 )
                        case acceptreader
                        by solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                      next
                        case initiatereader
                        by contradiction /* impossible chain */
                      next
                        case tag1
                        solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                          case d_0_fst
                          by contradiction /* impossible chain */
                        next
                          case d_0_snd
                          by solve( (#vr.7, 0) ~~> (#vk.6, 0) )
                        qed
                      qed
                    qed
                  next
                    case c_xor_case_06
                    solve( !KU( (~k⊕~r1.1⊕~r1.2) ) @ #vk.8 )
                      case c_xor_case_1
                      by contradiction /* cyclic */
                    next
                      case c_xor_case_2
                      by solve( !KU( ~k ) @ #vk.11 )
                    next
                      case c_xor_case_3
                      by contradiction /* cyclic */
                    next
                      case coerce
                      solve( !KD( (~k⊕~r1.1⊕~r1.2) ) ▶₀ #vk.6 )
                        case acceptreader
                        by solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                      next
                        case initiatereader
                        by contradiction /* impossible chain */
                      next
                        case tag1
                        solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                          case d_0_fst
                          by contradiction /* impossible chain */
                        next
                          case d_0_snd
                          by solve( (#vr.7, 0) ~~> (#vk.6, 0) )
                        qed
                      qed
                    qed
                  next
                    case c_xor_case_07
                    solve( !KU( (~k⊕~r1.2) ) @ #vk.8 )
                      case c_xor
                      by contradiction /* cyclic */
                    next
                      case coerce
                      solve( !KD( (~k⊕~r1.2) ) ▶₀ #vk.6 )
                        case acceptreader
                        by solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                      next
                        case initiatereader
                        by contradiction /* impossible chain */
                      next
                        case tag1
                        solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                          case d_0_fst
                          by contradiction /* impossible chain */
                        next
                          case d_0_snd
                          by solve( (#vr.7, 0) ~~> (#vk.6, 0) )
                        qed
                      qed
                    qed
                  next
                    case c_xor_case_08
                    by solve( !KU( ~k ) @ #vk.9 )
                  next
                    case c_xor_case_09
                    solve( !KU( (~k1⊕~r1⊕~r1.2) ) @ #vk.8 )
                      case c_xor_case_1
                      by contradiction /* cyclic */
                    next
                      case c_xor_case_2
                      by solve( !KU( ~k1 ) @ #vk.11 )
                    next
                      case c_xor_case_3
                      by contradiction /* cyclic */
                    next
                      case coerce
                      solve( !KD( (~k1⊕~r1⊕~r1.2) ) ▶₀ #vk.6 )
                        case acceptreader
                        by solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                      next
                        case initiatereader
                        by contradiction /* impossible chain */
                      next
                        case tag1
                        solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                          case d_0_fst
                          by contradiction /* impossible chain */
                        next
                          case d_0_snd
                          by solve( (#vr.7, 0) ~~> (#vk.6, 0) )
                        qed
                      qed
                    qed
                  next
                    case c_xor_case_10
                    solve( !KU( (~k1⊕~r1.1⊕~r1.2) ) @ #vk.8 )
                      case c_xor_case_1
                      by contradiction /* cyclic */
                    next
                      case c_xor_case_2
                      by solve( !KU( ~k1 ) @ #vk.11 )
                    next
                      case c_xor_case_3
                      by contradiction /* cyclic */
                    next
                      case coerce
                      solve( !KD( (~k1⊕~r1.1⊕~r1.2) ) ▶₀ #vk.6 )
                        case acceptreader
                        by solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                      next
                        case initiatereader
                        by contradiction /* impossible chain */
                      next
                        case tag1
                        solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                          case d_0_fst
                          by contradiction /* impossible chain */
                        next
                          case d_0_snd
                          by solve( (#vr.7, 0) ~~> (#vk.6, 0) )
                        qed
                      qed
                    qed
                  next
                    case c_xor_case_11
                    solve( !KU( (~k1⊕~r1.2) ) @ #vk.8 )
                      case c_xor
                      by contradiction /* cyclic */
                    next
                      case coerce
                      solve( !KD( (~k1⊕~r1.2) ) ▶₀ #vk.6 )
                        case acceptreader
                        by solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                      next
                        case initiatereader
                        by contradiction /* impossible chain */
                      next
                        case tag1
                        solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                          case d_0_fst
                          by contradiction /* impossible chain */
                        next
                          case d_0_snd
                          by solve( (#vr.7, 0) ~~> (#vk.6, 0) )
                        qed
                      qed
                    qed
                  next
                    case c_xor_case_12
                    solve( !KU( (~r1⊕~r1.1⊕~r1.2) ) @ #vk.8 )
                      case c_xor_case_1
                      by contradiction /* cyclic */
                    next
                      case c_xor_case_2
                      by contradiction /* cyclic */
                    next
                      case c_xor_case_3
                      by contradiction /* cyclic */
                    next
                      case coerce
                      solve( !KD( (~r1⊕~r1.1⊕~r1.2) ) ▶₀ #vk.6 )
                        case acceptreader
                        by solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                      next
                        case initiatereader
                        by contradiction /* impossible chain */
                      next
                        case tag1
                        solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                          case d_0_fst
                          by contradiction /* impossible chain */
                        next
                          case d_0_snd
                          by solve( (#vr.7, 0) ~~> (#vk.6, 0) )
                        qed
                      qed
                    qed
                  next
                    case c_xor_case_13
                    solve( !KU( (~r1⊕~r1.2) ) @ #vk.8 )
                      case c_xor
                      by contradiction /* cyclic */
                    next
                      case coerce
                      solve( !KD( (~r1⊕~r1.2) ) ▶₀ #vk.6 )
                        case acceptreader
                        by solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                      next
                        case initiatereader
                        by contradiction /* impossible chain */
                      next
                        case tag1
                        solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                          case d_0_fst
                          by contradiction /* impossible chain */
                        next
                          case d_0_snd
                          by solve( (#vr.7, 0) ~~> (#vk.6, 0) )
                        qed
                      qed
                    qed
                  next
                    case c_xor_case_14
                    solve( !KU( (~r1.1⊕~r1.2) ) @ #vk.8 )
                      case c_xor
                      by contradiction /* cyclic */
                    next
                      case coerce
                      solve( !KD( (~r1.1⊕~r1.2) ) ▶₀ #vk.6 )
                        case acceptreader
                        by solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                      next
                        case initiatereader
                        by contradiction /* impossible chain */
                      next
                        case tag1
                        solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                          case d_0_fst
                          by contradiction /* impossible chain */
                        next
                          case d_0_snd
                          by solve( (#vr.7, 0) ~~> (#vk.6, 0) )
                        qed
                      qed
                    qed
                  next
                    case c_xor_case_15
                    by contradiction /* cyclic */
                  next
                    case coerce
                    solve( !KD( (~k⊕~k1⊕~r1⊕~r1.1⊕~r1.2) ) ▶₀ #vk.5 )
                      case acceptreader
                      by solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                    next
                      case initiatereader
                      by contradiction /* impossible chain */
                    next
                      case tag1
                      solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                        case d_0_fst
                        by contradiction /* impossible chain */
                      next
                        case d_0_snd
                        by solve( (#vr.7, 0) ~~> (#vk.5, 0) )
                      qed
                    qed
                  qed
                next
                  case c_xor_case_03
                  by contradiction /* cyclic */
                next
                  case c_xor_case_04
                  by contradiction /* cyclic */
                next
                  case c_xor_case_05
                  solve( !KU( (~k⊕~k1⊕x⊕~r1.2) ) @ #vk.7 )
                    case c_xor_case_1
                    solve( !KU( (~r1⊕~r1.1) ) @ #vk.8 )
                      case c_xor
                      by contradiction /* cyclic */
                    next
                      case coerce
                      solve( !KD( (~r1⊕~r1.1) ) ▶₀ #vk.6 )
                        case acceptreader
                        by solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                      next
                        case initiatereader
                        by contradiction /* impossible chain */
                      next
                        case tag1
                        solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                          case d_0_fst
                          by contradiction /* impossible chain */
                        next
                          case d_0_snd
                          by solve( (#vr.7, 0) ~~> (#vk.6, 0) )
                        qed
                      qed
                    qed
                  next
                    case c_xor_case_2
                    by solve( !KU( ~k1 ) @ #vk.10 )
                  next
                    case c_xor_case_3
                    solve( !KU( (~r1⊕~r1.1) ) @ #vk.8 )
                      case c_xor
                      by contradiction /* cyclic */
                    next
                      case coerce
                      solve( !KD( (~r1⊕~r1.1) ) ▶₀ #vk.6 )
                        case acceptreader
                        by solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                      next
                        case initiatereader
                        by contradiction /* impossible chain */
                      next
                        case tag1
                        solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                          case d_0_fst
                          by contradiction /* impossible chain */
                        next
                          case d_0_snd
                          by solve( (#vr.7, 0) ~~> (#vk.6, 0) )
                        qed
                      qed
                    qed
                  next
                    case c_xor_case_4
                    by solve( !KU( ~k ) @ #vk.10 )
                  next
                    case c_xor_case_5
                    solve( !KU( (~r1⊕~r1.1) ) @ #vk.8 )
                      case c_xor
                      by contradiction /* cyclic */
                    next
                      case coerce
                      solve( !KD( (~r1⊕~r1.1) ) ▶₀ #vk.6 )
                        case acceptreader
                        by solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                      next
                        case initiatereader
                        by contradiction /* impossible chain */
                      next
                        case tag1
                        solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                          case d_0_fst
                          by contradiction /* impossible chain */
                        next
                          case d_0_snd
                          by solve( (#vr.7, 0) ~~> (#vk.6, 0) )
                        qed
                      qed
                    qed
                  next
                    case c_xor_case_6
                    solve( !KU( (~r1⊕~r1.1) ) @ #vk.8 )
                      case c_xor
                      by contradiction /* cyclic */
                    next
                      case coerce
                      solve( !KD( (~r1⊕~r1.1) ) ▶₀ #vk.6 )
                        case acceptreader
                        by solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                      next
                        case initiatereader
                        by contradiction /* impossible chain */
                      next
                        case tag1
                        solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                          case d_0_fst
                          by contradiction /* impossible chain */
                        next
                          case d_0_snd
                          by solve( (#vr.7, 0) ~~> (#vk.6, 0) )
                        qed
                      qed
                    qed
                  next
                    case c_xor_case_7
                    by contradiction /* cyclic */
                  next
                    case coerce
                    solve( !KD( (~k⊕~k1⊕x⊕~r1.2) ) ▶₀ #vk.5 )
                      case acceptreader
                      by solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                    next
                      case initiatereader
                      by contradiction /* impossible chain */
                    next
                      case tag1
                      solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                        case d_0_fst
                        by contradiction /* impossible chain */
                      next
                        case d_0_snd
                        by solve( (#vr.7, 0) ~~> (#vk.5, 0) )
                      qed
                    qed
                  qed
                next
                  case c_xor_case_06
                  solve( !KU( (~k⊕~k1⊕~r1.1⊕~r1.2) ) @ #vk.7 )
                    case c_xor_case_1
                    by contradiction /* cyclic */
                  next
                    case c_xor_case_2
                    by solve( !KU( ~k1 ) @ #vk.10 )
                  next
                    case c_xor_case_3
                    solve( !KU( (~r1⊕x) ) @ #vk.8 )
                      case c_xor
                      by contradiction /* cyclic */
                    next
                      case coerce
                      solve( !KD( (~r1⊕x) ) ▶₀ #vk.6 )
                        case acceptreader
                        by solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                      next
                        case initiatereader
                        by contradiction /* impossible chain */
                      next
                        case tag1
                        solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                          case d_0_fst
                          by contradiction /* impossible chain */
                        next
                          case d_0_snd
                          by solve( (#vr.7, 0) ~~> (#vk.6, 0) )
                        qed
                      qed
                    qed
                  next
                    case c_xor_case_4
                    by solve( !KU( ~k ) @ #vk.10 )
                  next
                    case c_xor_case_5
                    solve( !KU( (~r1⊕x) ) @ #vk.8 )
                      case c_xor
                      by contradiction /* cyclic */
                    next
                      case coerce
                      solve( !KD( (~r1⊕x) ) ▶₀ #vk.6 )
                        case acceptreader
                        by solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                      next
                        case initiatereader
                        by contradiction /* impossible chain */
                      next
                        case tag1
                        solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                          case d_0_fst
                          by contradiction /* impossible chain */
                        next
                          case d_0_snd
                          by solve( (#vr.7, 0) ~~> (#vk.6, 0) )
                        qed
                      qed
                    qed
                  next
                    case c_xor_case_6
                    solve( !KU( (~r1⊕x) ) @ #vk.8 )
                      case c_xor
                      by contradiction /* cyclic */
                    next
                      case coerce
                      solve( !KD( (~r1⊕x) ) ▶₀ #vk.6 )
                        case acceptreader
                        by solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                      next
                        case initiatereader
                        by contradiction /* impossible chain */
                      next
                        case tag1
                        solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                          case d_0_fst
                          by contradiction /* impossible chain */
                        next
                          case d_0_snd
                          by solve( (#vr.7, 0) ~~> (#vk.6, 0) )
                        qed
                      qed
                    qed
                  next
                    case c_xor_case_7
                    by contradiction /* cyclic */
                  next
                    case coerce
                    solve( !KD( (~k⊕~k1⊕~r1.1⊕~r1.2) ) ▶₀ #vk.5 )
                      case acceptreader
                      by solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                    next
                      case initiatereader
                      by contradiction /* impossible chain */
                    next
                      case tag1
                      solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                        case d_0_fst
                        by contradiction /* impossible chain */
                      next
                        case d_0_snd
                        by solve( (#vr.7, 0) ~~> (#vk.5, 0) )
                      qed
                    qed
                  qed
                next
                  case c_xor_case_07
                  solve( !KU( (~k⊕~k1⊕~r1.2) ) @ #vk.7 )
                    case c_xor_case_1
                    by solve( !KU( ~k1 ) @ #vk.10 )
                  next
                    case c_xor_case_2
                    by solve( !KU( ~k ) @ #vk.10 )
                  next
                    case c_xor_case_3
                    by contradiction /* cyclic */
                  next
                    case coerce
                    solve( !KD( (~k⊕~k1⊕~r1.2) ) ▶₀ #vk.5 )
                      case acceptreader
                      by solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                    next
                      case initiatereader
                      by contradiction /* impossible chain */
                    next
                      case tag1
                      solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                        case d_0_fst
                        by contradiction /* impossible chain */
                      next
                        case d_0_snd
                        by solve( (#vr.7, 0) ~~> (#vk.5, 0) )
                      qed
                    qed
                  qed
                next
                  case c_xor_case_08
                  by solve( !KU( ~k1 ) @ #vk.8 )
                next
                  case c_xor_case_09
                  solve( !KU( (~k⊕~r1⊕x⊕~r1.2) ) @ #vk.7 )
                    case c_xor_case_1
                    solve( !KU( (~k1⊕~r1.1) ) @ #vk.8 )
                      case c_xor
                      by contradiction /* cyclic */
                    next
                      case coerce
                      solve( !KD( (~k1⊕~r1.1) ) ▶₀ #vk.6 )
                        case acceptreader
                        by solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                      next
                        case initiatereader
                        by contradiction /* impossible chain */
                      next
                        case tag1
                        solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                          case d_0_fst
                          by contradiction /* impossible chain */
                        next
                          case d_0_snd
                          by solve( (#vr.7, 0) ~~> (#vk.6, 0) )
                        qed
                      qed
                    qed
                  next
                    case c_xor_case_2
                    by contradiction /* cyclic */
                  next
                    case c_xor_case_3
                    solve( !KU( (~k1⊕~r1.1) ) @ #vk.8 )
                      case c_xor
                      by contradiction /* cyclic */
                    next
                      case coerce
                      solve( !KD( (~k1⊕~r1.1) ) ▶₀ #vk.6 )
                        case acceptreader
                        by solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                      next
                        case initiatereader
                        by contradiction /* impossible chain */
                      next
                        case tag1
                        solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                          case d_0_fst
                          by contradiction /* impossible chain */
                        next
                          case d_0_snd
                          by solve( (#vr.7, 0) ~~> (#vk.6, 0) )
                        qed
                      qed
                    qed
                  next
                    case c_xor_case_4
                    by solve( !KU( ~k ) @ #vk.10 )
                  next
                    case c_xor_case_5
                    solve( !KU( (~k1⊕~r1.1) ) @ #vk.8 )
                      case c_xor
                      by contradiction /* cyclic */
                    next
                      case coerce
                      solve( !KD( (~k1⊕~r1.1) ) ▶₀ #vk.6 )
                        case acceptreader
                        by solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                      next
                        case initiatereader
                        by contradiction /* impossible chain */
                      next
                        case tag1
                        solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                          case d_0_fst
                          by contradiction /* impossible chain */
                        next
                          case d_0_snd
                          by solve( (#vr.7, 0) ~~> (#vk.6, 0) )
                        qed
                      qed
                    qed
                  next
                    case c_xor_case_6
                    solve( !KU( (~k1⊕~r1.1) ) @ #vk.8 )
                      case c_xor
                      by contradiction /* cyclic */
                    next
                      case coerce
                      solve( !KD( (~k1⊕~r1.1) ) ▶₀ #vk.6 )
                        case acceptreader
                        by solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                      next
                        case initiatereader
                        by contradiction /* impossible chain */
                      next
                        case tag1
                        solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                          case d_0_fst
                          by contradiction /* impossible chain */
                        next
                          case d_0_snd
                          by solve( (#vr.7, 0) ~~> (#vk.6, 0) )
                        qed
                      qed
                    qed
                  next
                    case c_xor_case_7
                    by contradiction /* cyclic */
                  next
                    case coerce
                    solve( !KD( (~k⊕~r1⊕x⊕~r1.2) ) ▶₀ #vk.5 )
                      case acceptreader
                      by solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                    next
                      case initiatereader
                      by contradiction /* impossible chain */
                    next
                      case tag1
                      solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                        case d_0_fst
                        by contradiction /* impossible chain */
                      next
                        case d_0_snd
                        by solve( (#vr.7, 0) ~~> (#vk.5, 0) )
                      qed
                    qed
                  qed
                next
                  case c_xor_case_10
                  solve( !KU( (~k⊕~r1⊕~r1.1⊕~r1.2) ) @ #vk.7 )
                    case c_xor_case_1
                    by contradiction /* cyclic */
                  next
                    case c_xor_case_2
                    by contradiction /* cyclic */
                  next
                    case c_xor_case_3
                    solve( !KU( (~k1⊕x) ) @ #vk.8 )
                      case c_xor
                      by solve( !KU( ~k1 ) @ #vk.11 )
                    next
                      case coerce
                      solve( !KD( (~k1⊕x) ) ▶₀ #vk.6 )
                        case acceptreader
                        by solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                      next
                        case initiatereader
                        by contradiction /* impossible chain */
                      next
                        case tag1
                        solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                          case d_0_fst
                          by contradiction /* impossible chain */
                        next
                          case d_0_snd
                          by solve( (#vr.7, 0) ~~> (#vk.6, 0) )
                        qed
                      qed
                    qed
                  next
                    case c_xor_case_4
                    by solve( !KU( ~k ) @ #vk.10 )
                  next
                    case c_xor_case_5
                    solve( !KU( (~k1⊕x) ) @ #vk.8 )
                      case c_xor
                      by solve( !KU( ~k1 ) @ #vk.11 )
                    next
                      case coerce
                      solve( !KD( (~k1⊕x) ) ▶₀ #vk.6 )
                        case acceptreader
                        by solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                      next
                        case initiatereader
                        by contradiction /* impossible chain */
                      next
                        case tag1
                        solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                          case d_0_fst
                          by contradiction /* impossible chain */
                        next
                          case d_0_snd
                          by solve( (#vr.7, 0) ~~> (#vk.6, 0) )
                        qed
                      qed
                    qed
                  next
                    case c_xor_case_6
                    solve( !KU( (~k1⊕x) ) @ #vk.8 )
                      case c_xor
                      by solve( !KU( ~k1 ) @ #vk.11 )
                    next
                      case coerce
                      solve( !KD( (~k1⊕x) ) ▶₀ #vk.6 )
                        case acceptreader
                        by solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                      next
                        case initiatereader
                        by contradiction /* impossible chain */
                      next
                        case tag1
                        solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                          case d_0_fst
                          by contradiction /* impossible chain */
                        next
                          case d_0_snd
                          by solve( (#vr.7, 0) ~~> (#vk.6, 0) )
                        qed
                      qed
                    qed
                  next
                    case c_xor_case_7
                    by contradiction /* cyclic */
                  next
                    case coerce
                    solve( !KD( (~k⊕~r1⊕~r1.1⊕~r1.2) ) ▶₀ #vk.5 )
                      case acceptreader
                      by solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                    next
                      case initiatereader
                      by contradiction /* impossible chain */
                    next
                      case tag1
                      solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                        case d_0_fst
                        by contradiction /* impossible chain */
                      next
                        case d_0_snd
                        by solve( (#vr.7, 0) ~~> (#vk.5, 0) )
                      qed
                    qed
                  qed
                next
                  case c_xor_case_11
                  solve( !KU( (~k⊕~r1⊕~r1.2) ) @ #vk.7 )
                    case c_xor_case_1
                    by contradiction /* cyclic */
                  next
                    case c_xor_case_2
                    by solve( !KU( ~k ) @ #vk.10 )
                  next
                    case c_xor_case_3
                    by contradiction /* cyclic */
                  next
                    case coerce
                    solve( !KD( (~k⊕~r1⊕~r1.2) ) ▶₀ #vk.5 )
                      case acceptreader
                      by solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                    next
                      case initiatereader
                      by contradiction /* impossible chain */
                    next
                      case tag1
                      solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                        case d_0_fst
                        by contradiction /* impossible chain */
                      next
                        case d_0_snd
                        by solve( (#vr.7, 0) ~~> (#vk.5, 0) )
                      qed
                    qed
                  qed
                next
                  case c_xor_case_12
                  solve( !KU( (~k⊕x⊕~r1.1⊕~r1.2) ) @ #vk.7 )
                    case c_xor_case_1
                    by contradiction /* cyclic */
                  next
                    case c_xor_case_2
                    solve( !KU( (~k1⊕~r1) ) @ #vk.8 )
                      case c_xor
                      by contradiction /* cyclic */
                    next
                      case coerce
                      solve( !KD( (~k1⊕~r1) ) ▶₀ #vk.6 )
                        case acceptreader
                        by solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                      next
                        case initiatereader
                        by contradiction /* impossible chain */
                      next
                        case tag1
                        solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                          case d_0_fst
                          by contradiction /* impossible chain */
                        next
                          case d_0_snd
                          by solve( (#vr.7, 0) ~~> (#vk.6, 0) )
                        qed
                      qed
                    qed
                  next
                    case c_xor_case_3
                    by contradiction /* cyclic */
                  next
                    case c_xor_case_4
                    by solve( !KU( ~k ) @ #vk.10 )
                  next
                    case c_xor_case_5
                    solve( !KU( (~k1⊕~r1) ) @ #vk.8 )
                      case c_xor
                      by contradiction /* cyclic */
                    next
                      case coerce
                      solve( !KD( (~k1⊕~r1) ) ▶₀ #vk.6 )
                        case acceptreader
                        by solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                      next
                        case initiatereader
                        by contradiction /* impossible chain */
                      next
                        case tag1
                        solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                          case d_0_fst
                          by contradiction /* impossible chain */
                        next
                          case d_0_snd
                          by solve( (#vr.7, 0) ~~> (#vk.6, 0) )
                        qed
                      qed
                    qed
                  next
                    case c_xor_case_6
                    solve( !KU( (~k1⊕~r1) ) @ #vk.8 )
                      case c_xor
                      by contradiction /* cyclic */
                    next
                      case coerce
                      solve( !KD( (~k1⊕~r1) ) ▶₀ #vk.6 )
                        case acceptreader
                        by solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                      next
                        case initiatereader
                        by contradiction /* impossible chain */
                      next
                        case tag1
                        solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                          case d_0_fst
                          by contradiction /* impossible chain */
                        next
                          case d_0_snd
                          by solve( (#vr.7, 0) ~~> (#vk.6, 0) )
                        qed
                      qed
                    qed
                  next
                    case c_xor_case_7
                    by contradiction /* cyclic */
                  next
                    case coerce
                    solve( !KD( (~k⊕x⊕~r1.1⊕~r1.2) ) ▶₀ #vk.5 )
                      case acceptreader
                      by solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                    next
                      case initiatereader
                      by contradiction /* impossible chain */
                    next
                      case tag1
                      solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                        case d_0_fst
                        by contradiction /* impossible chain */
                      next
                        case d_0_snd
                        by solve( (#vr.7, 0) ~~> (#vk.5, 0) )
                      qed
                    qed
                  qed
                next
                  case c_xor_case_13
                  solve( !KU( (~k⊕x⊕~r1.2) ) @ #vk.7 )
                    case c_xor_case_1
                    solve( !KU( (~k1⊕~r1⊕~r1.1) ) @ #vk.8 )
                      case c_xor_case_1
                      by contradiction /* cyclic */
                    next
                      case c_xor_case_2
                      by solve( !KU( ~k1 ) @ #vk.11 )
                    next
                      case c_xor_case_3
                      by contradiction /* cyclic */
                    next
                      case coerce
                      solve( !KD( (~k1⊕~r1⊕~r1.1) ) ▶₀ #vk.6 )
                        case acceptreader
                        by solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                      next
                        case initiatereader
                        by contradiction /* impossible chain */
                      next
                        case tag1
                        solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                          case d_0_fst
                          by contradiction /* impossible chain */
                        next
                          case d_0_snd
                          by solve( (#vr.7, 0) ~~> (#vk.6, 0) )
                        qed
                      qed
                    qed
                  next
                    case c_xor_case_2
                    by solve( !KU( ~k ) @ #vk.10 )
                  next
                    case c_xor_case_3
                    by contradiction /* cyclic */
                  next
                    case coerce
                    solve( !KD( (~k⊕x⊕~r1.2) ) ▶₀ #vk.5 )
                      case acceptreader
                      by solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                    next
                      case initiatereader
                      by contradiction /* impossible chain */
                    next
                      case tag1
                      solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                        case d_0_fst
                        by contradiction /* impossible chain */
                      next
                        case d_0_snd
                        by solve( (#vr.7, 0) ~~> (#vk.5, 0) )
                      qed
                    qed
                  qed
                next
                  case c_xor_case_14
                  solve( !KU( (~k⊕~r1.1⊕~r1.2) ) @ #vk.7 )
                    case c_xor_case_1
                    by contradiction /* cyclic */
                  next
                    case c_xor_case_2
                    by solve( !KU( ~k ) @ #vk.10 )
                  next
                    case c_xor_case_3
                    by contradiction /* cyclic */
                  next
                    case coerce
                    solve( !KD( (~k⊕~r1.1⊕~r1.2) ) ▶₀ #vk.5 )
                      case acceptreader
                      by solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                    next
                      case initiatereader
                      by contradiction /* impossible chain */
                    next
                      case tag1
                      solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                        case d_0_fst
                        by contradiction /* impossible chain */
                      next
                        case d_0_snd
                        by solve( (#vr.7, 0) ~~> (#vk.5, 0) )
                      qed
                    qed
                  qed
                next
                  case c_xor_case_15
                  solve( !KU( (~k⊕~r1.2) ) @ #vk.7 )
                    case c_xor
                    by contradiction /* cyclic */
                  next
                    case coerce
                    solve( !KD( (~k⊕~r1.2) ) ▶₀ #vk.5 )
                      case acceptreader
                      by solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                    next
                      case initiatereader
                      by contradiction /* impossible chain */
                    next
                      case tag1
                      solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                        case d_0_fst
                        by contradiction /* impossible chain */
                      next
                        case d_0_snd
                        by solve( (#vr.7, 0) ~~> (#vk.5, 0) )
                      qed
                    qed
                  qed
                next
                  case c_xor_case_16
                  by solve( !KU( ~k ) @ #vk.8 )
                next
                  case c_xor_case_17
                  solve( !KU( (~k1⊕~r1⊕x⊕~r1.2) ) @ #vk.7 )
                    case c_xor_case_1
                    solve( !KU( (~k⊕~r1.1) ) @ #vk.8 )
                      case c_xor
                      by contradiction /* cyclic */
                    next
                      case coerce
                      solve( !KD( (~k⊕~r1.1) ) ▶₀ #vk.6 )
                        case acceptreader
                        by solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                      next
                        case initiatereader
                        by contradiction /* impossible chain */
                      next
                        case tag1
                        solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                          case d_0_fst
                          by contradiction /* impossible chain */
                        next
                          case d_0_snd
                          by solve( (#vr.7, 0) ~~> (#vk.6, 0) )
                        qed
                      qed
                    qed
                  next
                    case c_xor_case_2
                    by contradiction /* cyclic */
                  next
                    case c_xor_case_3
                    solve( !KU( (~k⊕~r1.1) ) @ #vk.8 )
                      case c_xor
                      by contradiction /* cyclic */
                    next
                      case coerce
                      solve( !KD( (~k⊕~r1.1) ) ▶₀ #vk.6 )
                        case acceptreader
                        by solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                      next
                        case initiatereader
                        by contradiction /* impossible chain */
                      next
                        case tag1
                        solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                          case d_0_fst
                          by contradiction /* impossible chain */
                        next
                          case d_0_snd
                          by solve( (#vr.7, 0) ~~> (#vk.6, 0) )
                        qed
                      qed
                    qed
                  next
                    case c_xor_case_4
                    by solve( !KU( ~k1 ) @ #vk.10 )
                  next
                    case c_xor_case_5
                    solve( !KU( (~k⊕~r1.1) ) @ #vk.8 )
                      case c_xor
                      by contradiction /* cyclic */
                    next
                      case coerce
                      solve( !KD( (~k⊕~r1.1) ) ▶₀ #vk.6 )
                        case acceptreader
                        by solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                      next
                        case initiatereader
                        by contradiction /* impossible chain */
                      next
                        case tag1
                        solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                          case d_0_fst
                          by contradiction /* impossible chain */
                        next
                          case d_0_snd
                          by solve( (#vr.7, 0) ~~> (#vk.6, 0) )
                        qed
                      qed
                    qed
                  next
                    case c_xor_case_6
                    solve( !KU( (~k⊕~r1.1) ) @ #vk.8 )
                      case c_xor
                      by contradiction /* cyclic */
                    next
                      case coerce
                      solve( !KD( (~k⊕~r1.1) ) ▶₀ #vk.6 )
                        case acceptreader
                        by solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                      next
                        case initiatereader
                        by contradiction /* impossible chain */
                      next
                        case tag1
                        solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                          case d_0_fst
                          by contradiction /* impossible chain */
                        next
                          case d_0_snd
                          by solve( (#vr.7, 0) ~~> (#vk.6, 0) )
                        qed
                      qed
                    qed
                  next
                    case c_xor_case_7
                    by contradiction /* cyclic */
                  next
                    case coerce
                    solve( !KD( (~k1⊕~r1⊕x⊕~r1.2) ) ▶₀ #vk.5 )
                      case acceptreader
                      by solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                    next
                      case initiatereader
                      by contradiction /* impossible chain */
                    next
                      case tag1
                      solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                        case d_0_fst
                        by contradiction /* impossible chain */
                      next
                        case d_0_snd
                        by solve( (#vr.7, 0) ~~> (#vk.5, 0) )
                      qed
                    qed
                  qed
                next
                  case c_xor_case_18
                  solve( !KU( (~k1⊕~r1⊕~r1.1⊕~r1.2) ) @ #vk.7 )
                    case c_xor_case_1
                    by contradiction /* cyclic */
                  next
                    case c_xor_case_2
                    by contradiction /* cyclic */
                  next
                    case c_xor_case_3
                    solve( !KU( (~k⊕x) ) @ #vk.8 )
                      case c_xor
                      by solve( !KU( ~k ) @ #vk.11 )
                    next
                      case coerce
                      solve( !KD( (~k⊕x) ) ▶₀ #vk.6 )
                        case acceptreader
                        by solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                      next
                        case initiatereader
                        by contradiction /* impossible chain */
                      next
                        case tag1
                        solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                          case d_0_fst
                          by contradiction /* impossible chain */
                        next
                          case d_0_snd
                          by solve( (#vr.7, 0) ~~> (#vk.6, 0) )
                        qed
                      qed
                    qed
                  next
                    case c_xor_case_4
                    by solve( !KU( ~k1 ) @ #vk.10 )
                  next
                    case c_xor_case_5
                    solve( !KU( (~k⊕x) ) @ #vk.8 )
                      case c_xor
                      by solve( !KU( ~k ) @ #vk.11 )
                    next
                      case coerce
                      solve( !KD( (~k⊕x) ) ▶₀ #vk.6 )
                        case acceptreader
                        by solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                      next
                        case initiatereader
                        by contradiction /* impossible chain */
                      next
                        case tag1
                        solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                          case d_0_fst
                          by contradiction /* impossible chain */
                        next
                          case d_0_snd
                          by solve( (#vr.7, 0) ~~> (#vk.6, 0) )
                        qed
                      qed
                    qed
                  next
                    case c_xor_case_6
                    solve( !KU( (~k⊕x) ) @ #vk.8 )
                      case c_xor
                      by solve( !KU( ~k ) @ #vk.11 )
                    next
                      case coerce
                      solve( !KD( (~k⊕x) ) ▶₀ #vk.6 )
                        case acceptreader
                        by solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                      next
                        case initiatereader
                        by contradiction /* impossible chain */
                      next
                        case tag1
                        solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                          case d_0_fst
                          by contradiction /* impossible chain */
                        next
                          case d_0_snd
                          by solve( (#vr.7, 0) ~~> (#vk.6, 0) )
                        qed
                      qed
                    qed
                  next
                    case c_xor_case_7
                    by contradiction /* cyclic */
                  next
                    case coerce
                    solve( !KD( (~k1⊕~r1⊕~r1.1⊕~r1.2) ) ▶₀ #vk.5 )
                      case acceptreader
                      by solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                    next
                      case initiatereader
                      by contradiction /* impossible chain */
                    next
                      case tag1
                      solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                        case d_0_fst
                        by contradiction /* impossible chain */
                      next
                        case d_0_snd
                        by solve( (#vr.7, 0) ~~> (#vk.5, 0) )
                      qed
                    qed
                  qed
                next
                  case c_xor_case_19
                  solve( !KU( (~k1⊕~r1⊕~r1.2) ) @ #vk.7 )
                    case c_xor_case_1
                    by contradiction /* cyclic */
                  next
                    case c_xor_case_2
                    by solve( !KU( ~k1 ) @ #vk.10 )
                  next
                    case c_xor_case_3
                    by contradiction /* cyclic */
                  next
                    case coerce
                    solve( !KD( (~k1⊕~r1⊕~r1.2) ) ▶₀ #vk.5 )
                      case acceptreader
                      by solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                    next
                      case initiatereader
                      by contradiction /* impossible chain */
                    next
                      case tag1
                      solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                        case d_0_fst
                        by contradiction /* impossible chain */
                      next
                        case d_0_snd
                        by solve( (#vr.7, 0) ~~> (#vk.5, 0) )
                      qed
                    qed
                  qed
                next
                  case c_xor_case_20
                  solve( !KU( (~k1⊕x⊕~r1.1⊕~r1.2) ) @ #vk.7 )
                    case c_xor_case_1
                    by contradiction /* cyclic */
                  next
                    case c_xor_case_2
                    solve( !KU( (~k⊕~r1) ) @ #vk.8 )
                      case c_xor
                      by contradiction /* cyclic */
                    next
                      case coerce
                      solve( !KD( (~k⊕~r1) ) ▶₀ #vk.6 )
                        case acceptreader
                        by solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                      next
                        case initiatereader
                        by contradiction /* impossible chain */
                      next
                        case tag1
                        solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                          case d_0_fst
                          by contradiction /* impossible chain */
                        next
                          case d_0_snd
                          by solve( (#vr.7, 0) ~~> (#vk.6, 0) )
                        qed
                      qed
                    qed
                  next
                    case c_xor_case_3
                    by contradiction /* cyclic */
                  next
                    case c_xor_case_4
                    by solve( !KU( ~k1 ) @ #vk.10 )
                  next
                    case c_xor_case_5
                    solve( !KU( (~k⊕~r1) ) @ #vk.8 )
                      case c_xor
                      by contradiction /* cyclic */
                    next
                      case coerce
                      solve( !KD( (~k⊕~r1) ) ▶₀ #vk.6 )
                        case acceptreader
                        by solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                      next
                        case initiatereader
                        by contradiction /* impossible chain */
                      next
                        case tag1
                        solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                          case d_0_fst
                          by contradiction /* impossible chain */
                        next
                          case d_0_snd
                          by solve( (#vr.7, 0) ~~> (#vk.6, 0) )
                        qed
                      qed
                    qed
                  next
                    case c_xor_case_6
                    solve( !KU( (~k⊕~r1) ) @ #vk.8 )
                      case c_xor
                      by contradiction /* cyclic */
                    next
                      case coerce
                      solve( !KD( (~k⊕~r1) ) ▶₀ #vk.6 )
                        case acceptreader
                        by solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                      next
                        case initiatereader
                        by contradiction /* impossible chain */
                      next
                        case tag1
                        solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                          case d_0_fst
                          by contradiction /* impossible chain */
                        next
                          case d_0_snd
                          by solve( (#vr.7, 0) ~~> (#vk.6, 0) )
                        qed
                      qed
                    qed
                  next
                    case c_xor_case_7
                    by contradiction /* cyclic */
                  next
                    case coerce
                    solve( !KD( (~k1⊕x⊕~r1.1⊕~r1.2) ) ▶₀ #vk.5 )
                      case acceptreader
                      by solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                    next
                      case initiatereader
                      by contradiction /* impossible chain */
                    next
                      case tag1
                      solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                        case d_0_fst
                        by contradiction /* impossible chain */
                      next
                        case d_0_snd
                        by solve( (#vr.7, 0) ~~> (#vk.5, 0) )
                      qed
                    qed
                  qed
                next
                  case c_xor_case_21
                  solve( !KU( (~k1⊕x⊕~r1.2) ) @ #vk.7 )
                    case c_xor_case_1
                    solve( !KU( (~k⊕~r1⊕~r1.1) ) @ #vk.8 )
                      case c_xor_case_1
                      by contradiction /* cyclic */
                    next
                      case c_xor_case_2
                      by solve( !KU( ~k ) @ #vk.11 )
                    next
                      case c_xor_case_3
                      by contradiction /* cyclic */
                    next
                      case coerce
                      solve( !KD( (~k⊕~r1⊕~r1.1) ) ▶₀ #vk.6 )
                        case acceptreader
                        by solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                      next
                        case initiatereader
                        by contradiction /* impossible chain */
                      next
                        case tag1
                        solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                          case d_0_fst
                          by contradiction /* impossible chain */
                        next
                          case d_0_snd
                          by solve( (#vr.7, 0) ~~> (#vk.6, 0) )
                        qed
                      qed
                    qed
                  next
                    case c_xor_case_2
                    by solve( !KU( ~k1 ) @ #vk.10 )
                  next
                    case c_xor_case_3
                    by contradiction /* cyclic */
                  next
                    case coerce
                    solve( !KD( (~k1⊕x⊕~r1.2) ) ▶₀ #vk.5 )
                      case acceptreader
                      by solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                    next
                      case initiatereader
                      by contradiction /* impossible chain */
                    next
                      case tag1
                      solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                        case d_0_fst
                        by contradiction /* impossible chain */
                      next
                        case d_0_snd
                        by solve( (#vr.7, 0) ~~> (#vk.5, 0) )
                      qed
                    qed
                  qed
                next
                  case c_xor_case_22
                  solve( !KU( (~k1⊕~r1.1⊕~r1.2) ) @ #vk.7 )
                    case c_xor_case_1
                    by contradiction /* cyclic */
                  next
                    case c_xor_case_2
                    by solve( !KU( ~k1 ) @ #vk.10 )
                  next
                    case c_xor_case_3
                    by contradiction /* cyclic */
                  next
                    case coerce
                    solve( !KD( (~k1⊕~r1.1⊕~r1.2) ) ▶₀ #vk.5 )
                      case acceptreader
                      by solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                    next
                      case initiatereader
                      by contradiction /* impossible chain */
                    next
                      case tag1
                      solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                        case d_0_fst
                        by contradiction /* impossible chain */
                      next
                        case d_0_snd
                        by solve( (#vr.7, 0) ~~> (#vk.5, 0) )
                      qed
                    qed
                  qed
                next
                  case c_xor_case_23
                  solve( !KU( (~k1⊕~r1.2) ) @ #vk.7 )
                    case c_xor
                    by contradiction /* cyclic */
                  next
                    case coerce
                    solve( !KD( (~k1⊕~r1.2) ) ▶₀ #vk.5 )
                      case acceptreader
                      by solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                    next
                      case initiatereader
                      by contradiction /* impossible chain */
                    next
                      case tag1
                      solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                        case d_0_fst
                        by contradiction /* impossible chain */
                      next
                        case d_0_snd
                        by solve( (#vr.7, 0) ~~> (#vk.5, 0) )
                      qed
                    qed
                  qed
                next
                  case c_xor_case_24
                  solve( !KU( (~r1⊕x⊕~r1.1⊕~r1.2) ) @ #vk.7 )
                    case c_xor_case_1
                    by contradiction /* cyclic */
                  next
                    case c_xor_case_2
                    solve( !KU( (~k⊕~k1) ) @ #vk.8 )
                      case c_xor
                      by solve( !KU( ~k1 ) @ #vk.10 )
                    next
                      case coerce
                      solve( !KD( (~k⊕~k1) ) ▶₀ #vk.6 )
                        case acceptreader
                        by solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                      next
                        case initiatereader
                        by contradiction /* impossible chain */
                      next
                        case tag1
                        solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                          case d_0_fst
                          by contradiction /* impossible chain */
                        next
                          case d_0_snd
                          by solve( (#vr.7, 0) ~~> (#vk.6, 0) )
                        qed
                      qed
                    qed
                  next
                    case c_xor_case_3
                    by contradiction /* cyclic */
                  next
                    case c_xor_case_4
                    by contradiction /* cyclic */
                  next
                    case c_xor_case_5
                    solve( !KU( (~k⊕~k1) ) @ #vk.8 )
                      case c_xor
                      by solve( !KU( ~k1 ) @ #vk.11 )
                    next
                      case coerce
                      solve( !KD( (~k⊕~k1) ) ▶₀ #vk.6 )
                        case acceptreader
                        by solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                      next
                        case initiatereader
                        by contradiction /* impossible chain */
                      next
                        case tag1
                        solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                          case d_0_fst
                          by contradiction /* impossible chain */
                        next
                          case d_0_snd
                          by solve( (#vr.7, 0) ~~> (#vk.6, 0) )
                        qed
                      qed
                    qed
                  next
                    case c_xor_case_6
                    solve( !KU( (~k⊕~k1) ) @ #vk.8 )
                      case c_xor
                      by solve( !KU( ~k1 ) @ #vk.11 )
                    next
                      case coerce
                      solve( !KD( (~k⊕~k1) ) ▶₀ #vk.6 )
                        case acceptreader
                        by solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                      next
                        case initiatereader
                        by contradiction /* impossible chain */
                      next
                        case tag1
                        solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                          case d_0_fst
                          by contradiction /* impossible chain */
                        next
                          case d_0_snd
                          by solve( (#vr.7, 0) ~~> (#vk.6, 0) )
                        qed
                      qed
                    qed
                  next
                    case c_xor_case_7
                    by contradiction /* cyclic */
                  next
                    case coerce
                    solve( !KD( (~r1⊕x⊕~r1.1⊕~r1.2) ) ▶₀ #vk.5 )
                      case acceptreader
                      by solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                    next
                      case initiatereader
                      by contradiction /* impossible chain */
                    next
                      case tag1
                      solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                        case d_0_fst
                        by contradiction /* impossible chain */
                      next
                        case d_0_snd
                        by solve( (#vr.7, 0) ~~> (#vk.5, 0) )
                      qed
                    qed
                  qed
                next
                  case c_xor_case_25
                  solve( !KU( (~r1⊕x⊕~r1.2) ) @ #vk.7 )
                    case c_xor_case_1
                    solve( !KU( (~k⊕~k1⊕~r1.1) ) @ #vk.8 )
                      case c_xor_case_1
                      by solve( !KU( ~k1 ) @ #vk.11 )
                    next
                      case c_xor_case_2
                      by solve( !KU( ~k ) @ #vk.11 )
                    next
                      case c_xor_case_3
                      by contradiction /* cyclic */
                    next
                      case coerce
                      solve( !KD( (~k⊕~k1⊕~r1.1) ) ▶₀ #vk.6 )
                        case acceptreader
                        by solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                      next
                        case initiatereader
                        by contradiction /* impossible chain */
                      next
                        case tag1
                        solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                          case d_0_fst
                          by contradiction /* impossible chain */
                        next
                          case d_0_snd
                          by solve( (#vr.7, 0) ~~> (#vk.6, 0) )
                        qed
                      qed
                    qed
                  next
                    case c_xor_case_2
                    by contradiction /* cyclic */
                  next
                    case c_xor_case_3
                    by contradiction /* cyclic */
                  next
                    case coerce
                    solve( !KD( (~r1⊕x⊕~r1.2) ) ▶₀ #vk.5 )
                      case acceptreader
                      by solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                    next
                      case initiatereader
                      by contradiction /* impossible chain */
                    next
                      case tag1
                      solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                        case d_0_fst
                        by contradiction /* impossible chain */
                      next
                        case d_0_snd
                        by solve( (#vr.7, 0) ~~> (#vk.5, 0) )
                      qed
                    qed
                  qed
                next
                  case c_xor_case_26
                  solve( !KU( (~r1⊕~r1.1⊕~r1.2) ) @ #vk.7 )
                    case c_xor_case_1
                    by contradiction /* cyclic */
                  next
                    case c_xor_case_2
                    by contradiction /* cyclic */
                  next
                    case c_xor_case_3
                    by contradiction /* cyclic */
                  next
                    case coerce
                    solve( !KD( (~r1⊕~r1.1⊕~r1.2) ) ▶₀ #vk.5 )
                      case acceptreader
                      by solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                    next
                      case initiatereader
                      by contradiction /* impossible chain */
                    next
                      case tag1
                      solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                        case d_0_fst
                        by contradiction /* impossible chain */
                      next
                        case d_0_snd
                        by solve( (#vr.7, 0) ~~> (#vk.5, 0) )
                      qed
                    qed
                  qed
                next
                  case c_xor_case_27
                  solve( !KU( (~r1⊕~r1.2) ) @ #vk.7 )
                    case c_xor
                    by contradiction /* cyclic */
                  next
                    case coerce
                    solve( !KD( (~r1⊕~r1.2) ) ▶₀ #vk.5 )
                      case acceptreader
                      by solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                    next
                      case initiatereader
                      by contradiction /* impossible chain */
                    next
                      case tag1
                      solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                        case d_0_fst
                        by contradiction /* impossible chain */
                      next
                        case d_0_snd
                        by solve( (#vr.7, 0) ~~> (#vk.5, 0) )
                      qed
                    qed
                  qed
                next
                  case c_xor_case_28
                  solve( !KU( (x⊕~r1.1⊕~r1.2) ) @ #vk.7 )
                    case c_xor_case_1
                    by contradiction /* cyclic */
                  next
                    case c_xor_case_2
                    solve( !KU( (~k⊕~k1⊕~r1) ) @ #vk.8 )
                      case c_xor_case_1
                      by solve( !KU( ~k1 ) @ #vk.11 )
                    next
                      case c_xor_case_2
                      by solve( !KU( ~k ) @ #vk.11 )
                    next
                      case c_xor_case_3
                      by contradiction /* cyclic */
                    next
                      case coerce
                      solve( !KD( (~k⊕~k1⊕~r1) ) ▶₀ #vk.6 )
                        case acceptreader
                        by solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                      next
                        case initiatereader
                        by contradiction /* impossible chain */
                      next
                        case tag1
                        solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                          case d_0_fst
                          by contradiction /* impossible chain */
                        next
                          case d_0_snd
                          by solve( (#vr.7, 0) ~~> (#vk.6, 0) )
                        qed
                      qed
                    qed
                  next
                    case c_xor_case_3
                    by contradiction /* cyclic */
                  next
                    case coerce
                    solve( !KD( (x⊕~r1.1⊕~r1.2) ) ▶₀ #vk.5 )
                      case acceptreader
                      by solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                    next
                      case initiatereader
                      by contradiction /* impossible chain */
                    next
                      case tag1
                      solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                        case d_0_fst
                        by contradiction /* impossible chain */
                      next
                        case d_0_snd
                        by solve( (#vr.7, 0) ~~> (#vk.5, 0) )
                      qed
                    qed
                  qed
                next
                  case c_xor_case_29
                  solve( !KU( (x⊕~r1.2) ) @ #vk.7 )
                    case c_xor
                    by contradiction /* cyclic */
                  next
                    case coerce
                    solve( !KD( (x⊕~r1.2) ) ▶₀ #vk.5 )
                      case acceptreader
                      by solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                    next
                      case initiatereader
                      by contradiction /* impossible chain */
                    next
                      case tag1
                      solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                        case d_0_fst
                        by contradiction /* impossible chain */
                      next
                        case d_0_snd
                        by solve( (#vr.7, 0) ~~> (#vk.5, 0) )
                      qed
                    qed
                  qed
                next
                  case c_xor_case_30
                  solve( !KU( (~r1.1⊕~r1.2) ) @ #vk.7 )
                    case c_xor
                    by contradiction /* cyclic */
                  next
                    case coerce
                    solve( !KD( (~r1.1⊕~r1.2) ) ▶₀ #vk.5 )
                      case acceptreader
                      by solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                    next
                      case initiatereader
                      by contradiction /* impossible chain */
                    next
                      case tag1
                      solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                        case d_0_fst
                        by contradiction /* impossible chain */
                      next
                        case d_0_snd
                        by solve( (#vr.7, 0) ~~> (#vk.5, 0) )
                      qed
                    qed
                  qed
                next
                  case c_xor_case_31
                  by contradiction /* cyclic */
                next
                  case coerce
                  solve( !KD( (~k⊕~k1⊕~r1⊕x⊕~r1.1⊕~r1.2) ) ▶₀ #vk.4 )
                    case acceptreader
                    by solve( (#vl.2, 0) ~~> (#vk.4, 0) )
                  next
                    case initiatereader
                    by contradiction /* impossible chain */
                  next
                    case tag1
                    solve( (#vl.2, 0) ~~> (#vk.4, 0) )
                      case d_0_fst
                      by contradiction /* impossible chain */
                    next
                      case d_0_snd
                      by solve( (#vr.7, 0) ~~> (#vk.4, 0) )
                    qed
                  qed
                qed
              next
                case split_case_3
                solve( !KU( (~k⊕~k1⊕~r1⊕~r1.1) ) @ #vk.6 )
                  case c_xor_case_1
                  by contradiction /* cyclic */
                next
                  case c_xor_case_2
                  by solve( !KU( ~k1 ) @ #vk.8 )
                next
                  case c_xor_case_3
                  solve( !KU( (~k⊕~r1.1) ) @ #vk.7 )
                    case c_xor
                    by contradiction /* cyclic */
                  next
                    case coerce
                    solve( !KD( (~k⊕~r1.1) ) ▶₀ #vk.5 )
                      case acceptreader
                      by solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                    next
                      case initiatereader
                      by contradiction /* impossible chain */
                    next
                      case tag1
                      solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                        case d_0_fst
                        by contradiction /* impossible chain */
                      next
                        case d_0_snd
                        by solve( (#vr.7, 0) ~~> (#vk.5, 0) )
                      qed
                    qed
                  qed
                next
                  case c_xor_case_4
                  by solve( !KU( ~k ) @ #vk.8 )
                next
                  case c_xor_case_5
                  solve( !KU( (~k1⊕~r1.1) ) @ #vk.7 )
                    case c_xor
                    by contradiction /* cyclic */
                  next
                    case coerce
                    solve( !KD( (~k1⊕~r1.1) ) ▶₀ #vk.5 )
                      case acceptreader
                      by solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                    next
                      case initiatereader
                      by contradiction /* impossible chain */
                    next
                      case tag1
                      solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                        case d_0_fst
                        by contradiction /* impossible chain */
                      next
                        case d_0_snd
                        by solve( (#vr.7, 0) ~~> (#vk.5, 0) )
                      qed
                    qed
                  qed
                next
                  case c_xor_case_6
                  solve( !KU( (~r1⊕~r1.1) ) @ #vk.7 )
                    case c_xor
                    by contradiction /* cyclic */
                  next
                    case coerce
                    solve( !KD( (~r1⊕~r1.1) ) ▶₀ #vk.5 )
                      case acceptreader
                      by solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                    next
                      case initiatereader
                      by contradiction /* impossible chain */
                    next
                      case tag1
                      solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                        case d_0_fst
                        by contradiction /* impossible chain */
                      next
                        case d_0_snd
                        by solve( (#vr.7, 0) ~~> (#vk.5, 0) )
                      qed
                    qed
                  qed
                next
                  case c_xor_case_7
                  by contradiction /* cyclic */
                next
                  case coerce
                  solve( !KD( (~k⊕~k1⊕~r1⊕~r1.1) ) ▶₀ #vk.4 )
                    case acceptreader
                    by solve( (#vl.2, 0) ~~> (#vk.4, 0) )
                  next
                    case initiatereader
                    by contradiction /* impossible chain */
                  next
                    case tag1
                    solve( (#vl.2, 0) ~~> (#vk.4, 0) )
                      case d_0_fst
                      by contradiction /* impossible chain */
                    next
                      case d_0_snd
                      by solve( (#vr.7, 0) ~~> (#vk.4, 0) )
                    qed
                  qed
                qed
              next
                case split_case_4
                solve( !KU( (~k⊕~r1⊕~r1.1) ) @ #vk.6 )
                  case c_xor_case_1
                  by contradiction /* cyclic */
                next
                  case c_xor_case_2
                  by solve( !KU( ~k ) @ #vk.8 )
                next
                  case c_xor_case_3
                  by contradiction /* cyclic */
                next
                  case coerce
                  solve( !KD( (~k⊕~r1⊕~r1.1) ) ▶₀ #vk.4 )
                    case acceptreader
                    by solve( (#vl.2, 0) ~~> (#vk.4, 0) )
                  next
                    case initiatereader
                    by contradiction /* impossible chain */
                  next
                    case tag1
                    solve( (#vl.2, 0) ~~> (#vk.4, 0) )
                      case d_0_fst
                      by contradiction /* impossible chain */
                    next
                      case d_0_snd
                      by solve( (#vr.7, 0) ~~> (#vk.4, 0) )
                    qed
                  qed
                qed
              next
                case split_case_5
                solve( !KU( (~k⊕~r1⊕x⊕~r1.1) ) @ #vk.6 )
                  case c_xor_case_1
                  solve( !KU( (~k1⊕x⊕~r1.2) ) @ #vk.6 )
                    case c_xor_case_1
                    solve( !KU( (~k⊕~r1⊕~r1.1) ) @ #vk.7 )
                      case c_xor_case_1
                      by contradiction /* cyclic */
                    next
                      case c_xor_case_2
                      by solve( !KU( ~k ) @ #vk.11 )
                    next
                      case c_xor_case_3
                      by contradiction /* cyclic */
                    next
                      case coerce
                      solve( !KD( (~k⊕~r1⊕~r1.1) ) ▶₀ #vk.6 )
                        case acceptreader
                        by solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                      next
                        case initiatereader
                        by contradiction /* impossible chain */
                      next
                        case tag1
                        solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                          case d_0_fst
                          by contradiction /* impossible chain */
                        next
                          case d_0_snd
                          by solve( (#vr.7, 0) ~~> (#vk.6, 0) )
                        qed
                      qed
                    qed
                  next
                    case c_xor_case_2
                    by solve( !KU( ~k1 ) @ #vk.10 )
                  next
                    case c_xor_case_3
                    solve( !KU( (~k⊕~r1⊕~r1.1) ) @ #vk.7 )
                      case c_xor_case_1
                      by contradiction /* cyclic */
                    next
                      case c_xor_case_2
                      by solve( !KU( ~k ) @ #vk.12 )
                    next
                      case c_xor_case_3
                      by contradiction /* cyclic */
                    next
                      case coerce
                      solve( !KD( (~k⊕~r1⊕~r1.1) ) ▶₀ #vk.6 )
                        case acceptreader
                        by solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                      next
                        case initiatereader
                        by contradiction /* impossible chain */
                      next
                        case tag1
                        solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                          case d_0_fst
                          by contradiction /* impossible chain */
                        next
                          case d_0_snd
                          by solve( (#vr.7, 0) ~~> (#vk.6, 0) )
                        qed
                      qed
                    qed
                  next
                    case coerce
                    solve( !KD( (~k1⊕x⊕~r1.2) ) ▶₀ #vk.5 )
                      case acceptreader
                      by solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                    next
                      case initiatereader
                      by contradiction /* impossible chain */
                    next
                      case tag1
                      solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                        case d_0_fst
                        by contradiction /* impossible chain */
                      next
                        case d_0_snd
                        by solve( (#vr.7, 0) ~~> (#vk.5, 0) )
                      qed
                    qed
                  qed
                next
                  case c_xor_case_2
                  by contradiction /* cyclic */
                next
                  case c_xor_case_3
                  solve( !KU( (~k1⊕x⊕~r1.2) ) @ #vk.6 )
                    case c_xor_case_1
                    solve( !KU( (~k⊕~r1.1) ) @ #vk.7 )
                      case c_xor
                      by contradiction /* cyclic */
                    next
                      case coerce
                      solve( !KD( (~k⊕~r1.1) ) ▶₀ #vk.6 )
                        case acceptreader
                        by solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                      next
                        case initiatereader
                        by contradiction /* impossible chain */
                      next
                        case tag1
                        solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                          case d_0_fst
                          by contradiction /* impossible chain */
                        next
                          case d_0_snd
                          by solve( (#vr.7, 0) ~~> (#vk.6, 0) )
                        qed
                      qed
                    qed
                  next
                    case c_xor_case_2
                    by solve( !KU( ~k1 ) @ #vk.10 )
                  next
                    case c_xor_case_3
                    solve( !KU( (~k⊕~r1.1) ) @ #vk.7 )
                      case c_xor
                      by contradiction /* cyclic */
                    next
                      case coerce
                      solve( !KD( (~k⊕~r1.1) ) ▶₀ #vk.6 )
                        case acceptreader
                        by solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                      next
                        case initiatereader
                        by contradiction /* impossible chain */
                      next
                        case tag1
                        solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                          case d_0_fst
                          by contradiction /* impossible chain */
                        next
                          case d_0_snd
                          by solve( (#vr.7, 0) ~~> (#vk.6, 0) )
                        qed
                      qed
                    qed
                  next
                    case coerce
                    solve( !KD( (~k1⊕x⊕~r1.2) ) ▶₀ #vk.5 )
                      case acceptreader
                      by solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                    next
                      case initiatereader
                      by contradiction /* impossible chain */
                    next
                      case tag1
                      solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                        case d_0_fst
                        by contradiction /* impossible chain */
                      next
                        case d_0_snd
                        by solve( (#vr.7, 0) ~~> (#vk.5, 0) )
                      qed
                    qed
                  qed
                next
                  case c_xor_case_4
                  by solve( !KU( ~k ) @ #vk.8 )
                next
                  case c_xor_case_5
                  solve( !KU( (~k1⊕x⊕~r1.2) ) @ #vk.6 )
                    case c_xor_case_1
                    solve( !KU( (~r1⊕~r1.1) ) @ #vk.7 )
                      case c_xor
                      by contradiction /* cyclic */
                    next
                      case coerce
                      solve( !KD( (~r1⊕~r1.1) ) ▶₀ #vk.6 )
                        case acceptreader
                        by solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                      next
                        case initiatereader
                        by contradiction /* impossible chain */
                      next
                        case tag1
                        solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                          case d_0_fst
                          by contradiction /* impossible chain */
                        next
                          case d_0_snd
                          by solve( (#vr.7, 0) ~~> (#vk.6, 0) )
                        qed
                      qed
                    qed
                  next
                    case c_xor_case_2
                    by solve( !KU( ~k1 ) @ #vk.10 )
                  next
                    case c_xor_case_3
                    solve( !KU( (~r1⊕~r1.1) ) @ #vk.7 )
                      case c_xor
                      by contradiction /* cyclic */
                    next
                      case coerce
                      solve( !KD( (~r1⊕~r1.1) ) ▶₀ #vk.6 )
                        case acceptreader
                        by solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                      next
                        case initiatereader
                        by contradiction /* impossible chain */
                      next
                        case tag1
                        solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                          case d_0_fst
                          by contradiction /* impossible chain */
                        next
                          case d_0_snd
                          by solve( (#vr.7, 0) ~~> (#vk.6, 0) )
                        qed
                      qed
                    qed
                  next
                    case coerce
                    solve( !KD( (~k1⊕x⊕~r1.2) ) ▶₀ #vk.5 )
                      case acceptreader
                      by solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                    next
                      case initiatereader
                      by contradiction /* impossible chain */
                    next
                      case tag1
                      solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                        case d_0_fst
                        by contradiction /* impossible chain */
                      next
                        case d_0_snd
                        by solve( (#vr.7, 0) ~~> (#vk.5, 0) )
                      qed
                    qed
                  qed
                next
                  case c_xor_case_6
                  solve( !KU( (~k1⊕x⊕~r1.2) ) @ #vk.6 )
                    case c_xor_case_1
                    solve( !KU( (x⊕~r1.1) ) @ #vk.7 )
                      case c_xor
                      by contradiction /* cyclic */
                    next
                      case coerce
                      solve( !KD( (x⊕~r1.1) ) ▶₀ #vk.6 )
                        case acceptreader
                        by solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                      next
                        case initiatereader
                        by contradiction /* impossible chain */
                      next
                        case tag1
                        solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                          case d_0_fst
                          by contradiction /* impossible chain */
                        next
                          case d_0_snd
                          by solve( (#vr.7, 0) ~~> (#vk.6, 0) )
                        qed
                      qed
                    qed
                  next
                    case c_xor_case_2
                    by solve( !KU( ~k1 ) @ #vk.10 )
                  next
                    case c_xor_case_3
                    solve( !KU( (x⊕~r1.1) ) @ #vk.7 )
                      case c_xor
                      by contradiction /* cyclic */
                    next
                      case coerce
                      solve( !KD( (x⊕~r1.1) ) ▶₀ #vk.6 )
                        case acceptreader
                        by solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                      next
                        case initiatereader
                        by contradiction /* impossible chain */
                      next
                        case tag1
                        solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                          case d_0_fst
                          by contradiction /* impossible chain */
                        next
                          case d_0_snd
                          by solve( (#vr.7, 0) ~~> (#vk.6, 0) )
                        qed
                      qed
                    qed
                  next
                    case coerce
                    solve( !KD( (~k1⊕x⊕~r1.2) ) ▶₀ #vk.5 )
                      case acceptreader
                      by solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                    next
                      case initiatereader
                      by contradiction /* impossible chain */
                    next
                      case tag1
                      solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                        case d_0_fst
                        by contradiction /* impossible chain */
                      next
                        case d_0_snd
                        by solve( (#vr.7, 0) ~~> (#vk.5, 0) )
                      qed
                    qed
                  qed
                next
                  case c_xor_case_7
                  by contradiction /* cyclic */
                next
                  case coerce
                  solve( !KD( (~k⊕~r1⊕x⊕~r1.1) ) ▶₀ #vk.4 )
                    case acceptreader
                    by solve( (#vl.2, 0) ~~> (#vk.4, 0) )
                  next
                    case initiatereader
                    by contradiction /* impossible chain */
                  next
                    case tag1
                    solve( (#vl.2, 0) ~~> (#vk.4, 0) )
                      case d_0_fst
                      by contradiction /* impossible chain */
                    next
                      case d_0_snd
                      by solve( (#vr.7, 0) ~~> (#vk.4, 0) )
                    qed
                  qed
                qed
              next
                case split_case_6
                solve( !KU( (~k⊕~r1⊕x⊕~r1.1⊕~r1.2) ) @ #vk.6 )
                  case c_xor_case_01
                  by contradiction /* cyclic */
                next
                  case c_xor_case_02
                  solve( !KU( (~k1⊕x) ) @ #vk.6 )
                    case c_xor
                    by solve( !KU( ~k1 ) @ #vk.9 )
                  next
                    case coerce
                    solve( !KD( (~k1⊕x) ) ▶₀ #vk.5 )
                      case acceptreader
                      by solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                    next
                      case initiatereader
                      by contradiction /* impossible chain */
                    next
                      case tag1
                      solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                        case d_0_fst
                        by contradiction /* impossible chain */
                      next
                        case d_0_snd
                        by solve( (#vr.7, 0) ~~> (#vk.5, 0) )
                      qed
                    qed
                  qed
                next
                  case c_xor_case_03
                  solve( !KU( (~k1⊕x) ) @ #vk.6 )
                    case c_xor
                    by solve( !KU( ~k1 ) @ #vk.10 )
                  next
                    case coerce
                    solve( !KD( (~k1⊕x) ) ▶₀ #vk.5 )
                      case acceptreader
                      by solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                    next
                      case initiatereader
                      by contradiction /* impossible chain */
                    next
                      case tag1
                      solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                        case d_0_fst
                        by contradiction /* impossible chain */
                      next
                        case d_0_snd
                        by solve( (#vr.7, 0) ~~> (#vk.5, 0) )
                      qed
                    qed
                  qed
                next
                  case c_xor_case_04
                  by contradiction /* cyclic */
                next
                  case c_xor_case_05
                  solve( !KU( (~k1⊕x) ) @ #vk.6 )
                    case c_xor
                    by solve( !KU( ~k1 ) @ #vk.10 )
                  next
                    case coerce
                    solve( !KD( (~k1⊕x) ) ▶₀ #vk.5 )
                      case acceptreader
                      by solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                    next
                      case initiatereader
                      by contradiction /* impossible chain */
                    next
                      case tag1
                      solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                        case d_0_fst
                        by contradiction /* impossible chain */
                      next
                        case d_0_snd
                        by solve( (#vr.7, 0) ~~> (#vk.5, 0) )
                      qed
                    qed
                  qed
                next
                  case c_xor_case_06
                  solve( !KU( (~k1⊕x) ) @ #vk.6 )
                    case c_xor
                    by solve( !KU( ~k1 ) @ #vk.10 )
                  next
                    case coerce
                    solve( !KD( (~k1⊕x) ) ▶₀ #vk.5 )
                      case acceptreader
                      by solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                    next
                      case initiatereader
                      by contradiction /* impossible chain */
                    next
                      case tag1
                      solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                        case d_0_fst
                        by contradiction /* impossible chain */
                      next
                        case d_0_snd
                        by solve( (#vr.7, 0) ~~> (#vk.5, 0) )
                      qed
                    qed
                  qed
                next
                  case c_xor_case_07
                  solve( !KU( (~k1⊕x) ) @ #vk.6 )
                    case c_xor
                    by solve( !KU( ~k1 ) @ #vk.10 )
                  next
                    case coerce
                    solve( !KD( (~k1⊕x) ) ▶₀ #vk.5 )
                      case acceptreader
                      by solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                    next
                      case initiatereader
                      by contradiction /* impossible chain */
                    next
                      case tag1
                      solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                        case d_0_fst
                        by contradiction /* impossible chain */
                      next
                        case d_0_snd
                        by solve( (#vr.7, 0) ~~> (#vk.5, 0) )
                      qed
                    qed
                  qed
                next
                  case c_xor_case_08
                  by solve( !KU( ~k ) @ #vk.8 )
                next
                  case c_xor_case_09
                  solve( !KU( (~k1⊕x) ) @ #vk.6 )
                    case c_xor
                    by solve( !KU( ~k1 ) @ #vk.10 )
                  next
                    case coerce
                    solve( !KD( (~k1⊕x) ) ▶₀ #vk.5 )
                      case acceptreader
                      by solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                    next
                      case initiatereader
                      by contradiction /* impossible chain */
                    next
                      case tag1
                      solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                        case d_0_fst
                        by contradiction /* impossible chain */
                      next
                        case d_0_snd
                        by solve( (#vr.7, 0) ~~> (#vk.5, 0) )
                      qed
                    qed
                  qed
                next
                  case c_xor_case_10
                  solve( !KU( (~k1⊕x) ) @ #vk.6 )
                    case c_xor
                    by solve( !KU( ~k1 ) @ #vk.10 )
                  next
                    case coerce
                    solve( !KD( (~k1⊕x) ) ▶₀ #vk.5 )
                      case acceptreader
                      by solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                    next
                      case initiatereader
                      by contradiction /* impossible chain */
                    next
                      case tag1
                      solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                        case d_0_fst
                        by contradiction /* impossible chain */
                      next
                        case d_0_snd
                        by solve( (#vr.7, 0) ~~> (#vk.5, 0) )
                      qed
                    qed
                  qed
                next
                  case c_xor_case_11
                  solve( !KU( (~k1⊕x) ) @ #vk.6 )
                    case c_xor
                    by solve( !KU( ~k1 ) @ #vk.10 )
                  next
                    case coerce
                    solve( !KD( (~k1⊕x) ) ▶₀ #vk.5 )
                      case acceptreader
                      by solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                    next
                      case initiatereader
                      by contradiction /* impossible chain */
                    next
                      case tag1
                      solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                        case d_0_fst
                        by contradiction /* impossible chain */
                      next
                        case d_0_snd
                        by solve( (#vr.7, 0) ~~> (#vk.5, 0) )
                      qed
                    qed
                  qed
                next
                  case c_xor_case_12
                  solve( !KU( (~k1⊕x) ) @ #vk.6 )
                    case c_xor
                    by solve( !KU( ~k1 ) @ #vk.10 )
                  next
                    case coerce
                    solve( !KD( (~k1⊕x) ) ▶₀ #vk.5 )
                      case acceptreader
                      by solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                    next
                      case initiatereader
                      by contradiction /* impossible chain */
                    next
                      case tag1
                      solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                        case d_0_fst
                        by contradiction /* impossible chain */
                      next
                        case d_0_snd
                        by solve( (#vr.7, 0) ~~> (#vk.5, 0) )
                      qed
                    qed
                  qed
                next
                  case c_xor_case_13
                  solve( !KU( (~k1⊕x) ) @ #vk.6 )
                    case c_xor
                    by solve( !KU( ~k1 ) @ #vk.10 )
                  next
                    case coerce
                    solve( !KD( (~k1⊕x) ) ▶₀ #vk.5 )
                      case acceptreader
                      by solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                    next
                      case initiatereader
                      by contradiction /* impossible chain */
                    next
                      case tag1
                      solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                        case d_0_fst
                        by contradiction /* impossible chain */
                      next
                        case d_0_snd
                        by solve( (#vr.7, 0) ~~> (#vk.5, 0) )
                      qed
                    qed
                  qed
                next
                  case c_xor_case_14
                  solve( !KU( (~k1⊕x) ) @ #vk.6 )
                    case c_xor
                    by solve( !KU( ~k1 ) @ #vk.10 )
                  next
                    case coerce
                    solve( !KD( (~k1⊕x) ) ▶₀ #vk.5 )
                      case acceptreader
                      by solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                    next
                      case initiatereader
                      by contradiction /* impossible chain */
                    next
                      case tag1
                      solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                        case d_0_fst
                        by contradiction /* impossible chain */
                      next
                        case d_0_snd
                        by solve( (#vr.7, 0) ~~> (#vk.5, 0) )
                      qed
                    qed
                  qed
                next
                  case c_xor_case_15
                  by contradiction /* cyclic */
                next
                  case coerce
                  solve( !KD( (~k⊕~r1⊕x⊕~r1.1⊕~r1.2) ) ▶₀ #vk.4 )
                    case acceptreader
                    by solve( (#vl.2, 0) ~~> (#vk.4, 0) )
                  next
                    case initiatereader
                    by contradiction /* impossible chain */
                  next
                    case tag1
                    solve( (#vl.2, 0) ~~> (#vk.4, 0) )
                      case d_0_fst
                      by contradiction /* impossible chain */
                    next
                      case d_0_snd
                      by solve( (#vr.7, 0) ~~> (#vk.4, 0) )
                    qed
                  qed
                qed
              next
                case split_case_7
                solve( !KU( (~k⊕~k1⊕~r1⊕x⊕~r1.1) ) @ #vk.6 )
                  case c_xor_case_01
                  solve( !KU( (x⊕~r1.2) ) @ #vk.6 )
                    case c_xor
                    solve( !KU( (~k⊕~k1⊕~r1⊕~r1.1) ) @ #vk.7 )
                      case c_xor_case_1
                      by contradiction /* cyclic */
                    next
                      case c_xor_case_2
                      by solve( !KU( ~k1 ) @ #vk.11 )
                    next
                      case c_xor_case_3
                      solve( !KU( (~k⊕~r1.1) ) @ #vk.10 )
                        case c_xor
                        by contradiction /* cyclic */
                      next
                        case coerce
                        solve( !KD( (~k⊕~r1.1) ) ▶₀ #vk.7 )
                          case acceptreader
                          by solve( (#vl.2, 0) ~~> (#vk.7, 0) )
                        next
                          case initiatereader
                          by contradiction /* impossible chain */
                        next
                          case tag1
                          solve( (#vl.2, 0) ~~> (#vk.7, 0) )
                            case d_0_fst
                            by contradiction /* impossible chain */
                          next
                            case d_0_snd
                            by solve( (#vr.7, 0) ~~> (#vk.7, 0) )
                          qed
                        qed
                      qed
                    next
                      case c_xor_case_4
                      by solve( !KU( ~k ) @ #vk.11 )
                    next
                      case c_xor_case_5
                      solve( !KU( (~k1⊕~r1.1) ) @ #vk.10 )
                        case c_xor
                        by contradiction /* cyclic */
                      next
                        case coerce
                        solve( !KD( (~k1⊕~r1.1) ) ▶₀ #vk.7 )
                          case acceptreader
                          by solve( (#vl.2, 0) ~~> (#vk.7, 0) )
                        next
                          case initiatereader
                          by contradiction /* impossible chain */
                        next
                          case tag1
                          solve( (#vl.2, 0) ~~> (#vk.7, 0) )
                            case d_0_fst
                            by contradiction /* impossible chain */
                          next
                            case d_0_snd
                            by solve( (#vr.7, 0) ~~> (#vk.7, 0) )
                          qed
                        qed
                      qed
                    next
                      case c_xor_case_6
                      solve( !KU( (~r1⊕~r1.1) ) @ #vk.10 )
                        case c_xor
                        by contradiction /* cyclic */
                      next
                        case coerce
                        solve( !KD( (~r1⊕~r1.1) ) ▶₀ #vk.7 )
                          case acceptreader
                          by solve( (#vl.2, 0) ~~> (#vk.7, 0) )
                        next
                          case initiatereader
                          by contradiction /* impossible chain */
                        next
                          case tag1
                          solve( (#vl.2, 0) ~~> (#vk.7, 0) )
                            case d_0_fst
                            by contradiction /* impossible chain */
                          next
                            case d_0_snd
                            by solve( (#vr.7, 0) ~~> (#vk.7, 0) )
                          qed
                        qed
                      qed
                    next
                      case c_xor_case_7
                      by contradiction /* cyclic */
                    next
                      case coerce
                      solve( !KD( (~k⊕~k1⊕~r1⊕~r1.1) ) ▶₀ #vk.6 )
                        case acceptreader
                        by solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                      next
                        case initiatereader
                        by contradiction /* impossible chain */
                      next
                        case tag1
                        solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                          case d_0_fst
                          by contradiction /* impossible chain */
                        next
                          case d_0_snd
                          by solve( (#vr.7, 0) ~~> (#vk.6, 0) )
                        qed
                      qed
                    qed
                  next
                    case coerce
                    solve( !KD( (x⊕~r1.2) ) ▶₀ #vk.5 )
                      case acceptreader
                      by solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                    next
                      case initiatereader
                      by contradiction /* impossible chain */
                    next
                      case tag1
                      solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                        case d_0_fst
                        by contradiction /* impossible chain */
                      next
                        case d_0_snd
                        by solve( (#vr.7, 0) ~~> (#vk.5, 0) )
                      qed
                    qed
                  qed
                next
                  case c_xor_case_02
                  by contradiction /* cyclic */
                next
                  case c_xor_case_03
                  solve( !KU( (x⊕~r1.2) ) @ #vk.6 )
                    case c_xor
                    solve( !KU( (~k⊕~k1⊕~r1.1) ) @ #vk.7 )
                      case c_xor_case_1
                      by solve( !KU( ~k1 ) @ #vk.12 )
                    next
                      case c_xor_case_2
                      by solve( !KU( ~k ) @ #vk.12 )
                    next
                      case c_xor_case_3
                      by contradiction /* cyclic */
                    next
                      case coerce
                      solve( !KD( (~k⊕~k1⊕~r1.1) ) ▶₀ #vk.6 )
                        case acceptreader
                        by solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                      next
                        case initiatereader
                        by contradiction /* impossible chain */
                      next
                        case tag1
                        solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                          case d_0_fst
                          by contradiction /* impossible chain */
                        next
                          case d_0_snd
                          by solve( (#vr.7, 0) ~~> (#vk.6, 0) )
                        qed
                      qed
                    qed
                  next
                    case coerce
                    solve( !KD( (x⊕~r1.2) ) ▶₀ #vk.5 )
                      case acceptreader
                      by solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                    next
                      case initiatereader
                      by contradiction /* impossible chain */
                    next
                      case tag1
                      solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                        case d_0_fst
                        by contradiction /* impossible chain */
                      next
                        case d_0_snd
                        by solve( (#vr.7, 0) ~~> (#vk.5, 0) )
                      qed
                    qed
                  qed
                next
                  case c_xor_case_04
                  by solve( !KU( ~k1 ) @ #vk.8 )
                next
                  case c_xor_case_05
                  solve( !KU( (x⊕~r1.2) ) @ #vk.6 )
                    case c_xor
                    solve( !KU( (~k⊕~r1⊕~r1.1) ) @ #vk.7 )
                      case c_xor_case_1
                      by contradiction /* cyclic */
                    next
                      case c_xor_case_2
                      by solve( !KU( ~k ) @ #vk.12 )
                    next
                      case c_xor_case_3
                      by contradiction /* cyclic */
                    next
                      case coerce
                      solve( !KD( (~k⊕~r1⊕~r1.1) ) ▶₀ #vk.6 )
                        case acceptreader
                        by solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                      next
                        case initiatereader
                        by contradiction /* impossible chain */
                      next
                        case tag1
                        solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                          case d_0_fst
                          by contradiction /* impossible chain */
                        next
                          case d_0_snd
                          by solve( (#vr.7, 0) ~~> (#vk.6, 0) )
                        qed
                      qed
                    qed
                  next
                    case coerce
                    solve( !KD( (x⊕~r1.2) ) ▶₀ #vk.5 )
                      case acceptreader
                      by solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                    next
                      case initiatereader
                      by contradiction /* impossible chain */
                    next
                      case tag1
                      solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                        case d_0_fst
                        by contradiction /* impossible chain */
                      next
                        case d_0_snd
                        by solve( (#vr.7, 0) ~~> (#vk.5, 0) )
                      qed
                    qed
                  qed
                next
                  case c_xor_case_06
                  solve( !KU( (x⊕~r1.2) ) @ #vk.6 )
                    case c_xor
                    solve( !KU( (~k⊕x⊕~r1.1) ) @ #vk.7 )
                      case c_xor_case_1
                      solve( !KU( (~k1⊕~r1) ) @ #vk.8 )
                        case c_xor
                        by contradiction /* cyclic */
                      next
                        case coerce
                        solve( !KD( (~k1⊕~r1) ) ▶₀ #vk.7 )
                          case acceptreader
                          by solve( (#vl.2, 0) ~~> (#vk.7, 0) )
                        next
                          case initiatereader
                          by contradiction /* impossible chain */
                        next
                          case tag1
                          solve( (#vl.2, 0) ~~> (#vk.7, 0) )
                            case d_0_fst
                            by contradiction /* impossible chain */
                          next
                            case d_0_snd
                            by solve( (#vr.7, 0) ~~> (#vk.7, 0) )
                          qed
                        qed
                      qed
                    next
                      case c_xor_case_2
                      by solve( !KU( ~k ) @ #vk.12 )
                    next
                      case c_xor_case_3
                      by contradiction /* cyclic */
                    next
                      case coerce
                      solve( !KD( (~k⊕x⊕~r1.1) ) ▶₀ #vk.6 )
                        case acceptreader
                        by solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                      next
                        case initiatereader
                        by contradiction /* impossible chain */
                      next
                        case tag1
                        solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                          case d_0_fst
                          by contradiction /* impossible chain */
                        next
                          case d_0_snd
                          by solve( (#vr.7, 0) ~~> (#vk.6, 0) )
                        qed
                      qed
                    qed
                  next
                    case coerce
                    solve( !KD( (x⊕~r1.2) ) ▶₀ #vk.5 )
                      case acceptreader
                      by solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                    next
                      case initiatereader
                      by contradiction /* impossible chain */
                    next
                      case tag1
                      solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                        case d_0_fst
                        by contradiction /* impossible chain */
                      next
                        case d_0_snd
                        by solve( (#vr.7, 0) ~~> (#vk.5, 0) )
                      qed
                    qed
                  qed
                next
                  case c_xor_case_07
                  solve( !KU( (x⊕~r1.2) ) @ #vk.6 )
                    case c_xor
                    solve( !KU( (~k⊕~r1.1) ) @ #vk.7 )
                      case c_xor
                      by contradiction /* cyclic */
                    next
                      case coerce
                      solve( !KD( (~k⊕~r1.1) ) ▶₀ #vk.6 )
                        case acceptreader
                        by solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                      next
                        case initiatereader
                        by contradiction /* impossible chain */
                      next
                        case tag1
                        solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                          case d_0_fst
                          by contradiction /* impossible chain */
                        next
                          case d_0_snd
                          by solve( (#vr.7, 0) ~~> (#vk.6, 0) )
                        qed
                      qed
                    qed
                  next
                    case coerce
                    solve( !KD( (x⊕~r1.2) ) ▶₀ #vk.5 )
                      case acceptreader
                      by solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                    next
                      case initiatereader
                      by contradiction /* impossible chain */
                    next
                      case tag1
                      solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                        case d_0_fst
                        by contradiction /* impossible chain */
                      next
                        case d_0_snd
                        by solve( (#vr.7, 0) ~~> (#vk.5, 0) )
                      qed
                    qed
                  qed
                next
                  case c_xor_case_08
                  by solve( !KU( ~k ) @ #vk.8 )
                next
                  case c_xor_case_09
                  solve( !KU( (x⊕~r1.2) ) @ #vk.6 )
                    case c_xor
                    solve( !KU( (~k1⊕~r1⊕~r1.1) ) @ #vk.7 )
                      case c_xor_case_1
                      by contradiction /* cyclic */
                    next
                      case c_xor_case_2
                      by solve( !KU( ~k1 ) @ #vk.12 )
                    next
                      case c_xor_case_3
                      by contradiction /* cyclic */
                    next
                      case coerce
                      solve( !KD( (~k1⊕~r1⊕~r1.1) ) ▶₀ #vk.6 )
                        case acceptreader
                        by solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                      next
                        case initiatereader
                        by contradiction /* impossible chain */
                      next
                        case tag1
                        solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                          case d_0_fst
                          by contradiction /* impossible chain */
                        next
                          case d_0_snd
                          by solve( (#vr.7, 0) ~~> (#vk.6, 0) )
                        qed
                      qed
                    qed
                  next
                    case coerce
                    solve( !KD( (x⊕~r1.2) ) ▶₀ #vk.5 )
                      case acceptreader
                      by solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                    next
                      case initiatereader
                      by contradiction /* impossible chain */
                    next
                      case tag1
                      solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                        case d_0_fst
                        by contradiction /* impossible chain */
                      next
                        case d_0_snd
                        by solve( (#vr.7, 0) ~~> (#vk.5, 0) )
                      qed
                    qed
                  qed
                next
                  case c_xor_case_10
                  solve( !KU( (x⊕~r1.2) ) @ #vk.6 )
                    case c_xor
                    solve( !KU( (~k1⊕x⊕~r1.1) ) @ #vk.7 )
                      case c_xor_case_1
                      solve( !KU( (~k⊕~r1) ) @ #vk.8 )
                        case c_xor
                        by contradiction /* cyclic */
                      next
                        case coerce
                        solve( !KD( (~k⊕~r1) ) ▶₀ #vk.7 )
                          case acceptreader
                          by solve( (#vl.2, 0) ~~> (#vk.7, 0) )
                        next
                          case initiatereader
                          by contradiction /* impossible chain */
                        next
                          case tag1
                          solve( (#vl.2, 0) ~~> (#vk.7, 0) )
                            case d_0_fst
                            by contradiction /* impossible chain */
                          next
                            case d_0_snd
                            by solve( (#vr.7, 0) ~~> (#vk.7, 0) )
                          qed
                        qed
                      qed
                    next
                      case c_xor_case_2
                      by solve( !KU( ~k1 ) @ #vk.12 )
                    next
                      case c_xor_case_3
                      by contradiction /* cyclic */
                    next
                      case coerce
                      solve( !KD( (~k1⊕x⊕~r1.1) ) ▶₀ #vk.6 )
                        case acceptreader
                        by solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                      next
                        case initiatereader
                        by contradiction /* impossible chain */
                      next
                        case tag1
                        solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                          case d_0_fst
                          by contradiction /* impossible chain */
                        next
                          case d_0_snd
                          by solve( (#vr.7, 0) ~~> (#vk.6, 0) )
                        qed
                      qed
                    qed
                  next
                    case coerce
                    solve( !KD( (x⊕~r1.2) ) ▶₀ #vk.5 )
                      case acceptreader
                      by solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                    next
                      case initiatereader
                      by contradiction /* impossible chain */
                    next
                      case tag1
                      solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                        case d_0_fst
                        by contradiction /* impossible chain */
                      next
                        case d_0_snd
                        by solve( (#vr.7, 0) ~~> (#vk.5, 0) )
                      qed
                    qed
                  qed
                next
                  case c_xor_case_11
                  solve( !KU( (x⊕~r1.2) ) @ #vk.6 )
                    case c_xor
                    solve( !KU( (~k1⊕~r1.1) ) @ #vk.7 )
                      case c_xor
                      by contradiction /* cyclic */
                    next
                      case coerce
                      solve( !KD( (~k1⊕~r1.1) ) ▶₀ #vk.6 )
                        case acceptreader
                        by solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                      next
                        case initiatereader
                        by contradiction /* impossible chain */
                      next
                        case tag1
                        solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                          case d_0_fst
                          by contradiction /* impossible chain */
                        next
                          case d_0_snd
                          by solve( (#vr.7, 0) ~~> (#vk.6, 0) )
                        qed
                      qed
                    qed
                  next
                    case coerce
                    solve( !KD( (x⊕~r1.2) ) ▶₀ #vk.5 )
                      case acceptreader
                      by solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                    next
                      case initiatereader
                      by contradiction /* impossible chain */
                    next
                      case tag1
                      solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                        case d_0_fst
                        by contradiction /* impossible chain */
                      next
                        case d_0_snd
                        by solve( (#vr.7, 0) ~~> (#vk.5, 0) )
                      qed
                    qed
                  qed
                next
                  case c_xor_case_12
                  solve( !KU( (x⊕~r1.2) ) @ #vk.6 )
                    case c_xor
                    solve( !KU( (~r1⊕x⊕~r1.1) ) @ #vk.7 )
                      case c_xor_case_1
                      solve( !KU( (~k⊕~k1) ) @ #vk.8 )
                        case c_xor
                        by solve( !KU( ~k1 ) @ #vk.12 )
                      next
                        case coerce
                        solve( !KD( (~k⊕~k1) ) ▶₀ #vk.7 )
                          case acceptreader
                          by solve( (#vl.2, 0) ~~> (#vk.7, 0) )
                        next
                          case initiatereader
                          by contradiction /* impossible chain */
                        next
                          case tag1
                          solve( (#vl.2, 0) ~~> (#vk.7, 0) )
                            case d_0_fst
                            by contradiction /* impossible chain */
                          next
                            case d_0_snd
                            by solve( (#vr.7, 0) ~~> (#vk.7, 0) )
                          qed
                        qed
                      qed
                    next
                      case c_xor_case_2
                      by contradiction /* cyclic */
                    next
                      case c_xor_case_3
                      by contradiction /* cyclic */
                    next
                      case coerce
                      solve( !KD( (~r1⊕x⊕~r1.1) ) ▶₀ #vk.6 )
                        case acceptreader
                        by solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                      next
                        case initiatereader
                        by contradiction /* impossible chain */
                      next
                        case tag1
                        solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                          case d_0_fst
                          by contradiction /* impossible chain */
                        next
                          case d_0_snd
                          by solve( (#vr.7, 0) ~~> (#vk.6, 0) )
                        qed
                      qed
                    qed
                  next
                    case coerce
                    solve( !KD( (x⊕~r1.2) ) ▶₀ #vk.5 )
                      case acceptreader
                      by solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                    next
                      case initiatereader
                      by contradiction /* impossible chain */
                    next
                      case tag1
                      solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                        case d_0_fst
                        by contradiction /* impossible chain */
                      next
                        case d_0_snd
                        by solve( (#vr.7, 0) ~~> (#vk.5, 0) )
                      qed
                    qed
                  qed
                next
                  case c_xor_case_13
                  solve( !KU( (x⊕~r1.2) ) @ #vk.6 )
                    case c_xor
                    solve( !KU( (~r1⊕~r1.1) ) @ #vk.7 )
                      case c_xor
                      by contradiction /* cyclic */
                    next
                      case coerce
                      solve( !KD( (~r1⊕~r1.1) ) ▶₀ #vk.6 )
                        case acceptreader
                        by solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                      next
                        case initiatereader
                        by contradiction /* impossible chain */
                      next
                        case tag1
                        solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                          case d_0_fst
                          by contradiction /* impossible chain */
                        next
                          case d_0_snd
                          by solve( (#vr.7, 0) ~~> (#vk.6, 0) )
                        qed
                      qed
                    qed
                  next
                    case coerce
                    solve( !KD( (x⊕~r1.2) ) ▶₀ #vk.5 )
                      case acceptreader
                      by solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                    next
                      case initiatereader
                      by contradiction /* impossible chain */
                    next
                      case tag1
                      solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                        case d_0_fst
                        by contradiction /* impossible chain */
                      next
                        case d_0_snd
                        by solve( (#vr.7, 0) ~~> (#vk.5, 0) )
                      qed
                    qed
                  qed
                next
                  case c_xor_case_14
                  solve( !KU( (x⊕~r1.2) ) @ #vk.6 )
                    case c_xor
                    solve( !KU( (x⊕~r1.1) ) @ #vk.7 )
                      case c_xor
                      by contradiction /* cyclic */
                    next
                      case coerce
                      solve( !KD( (x⊕~r1.1) ) ▶₀ #vk.6 )
                        case acceptreader
                        by solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                      next
                        case initiatereader
                        by contradiction /* impossible chain */
                      next
                        case tag1
                        solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                          case d_0_fst
                          by contradiction /* impossible chain */
                        next
                          case d_0_snd
                          by solve( (#vr.7, 0) ~~> (#vk.6, 0) )
                        qed
                      qed
                    qed
                  next
                    case coerce
                    solve( !KD( (x⊕~r1.2) ) ▶₀ #vk.5 )
                      case acceptreader
                      by solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                    next
                      case initiatereader
                      by contradiction /* impossible chain */
                    next
                      case tag1
                      solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                        case d_0_fst
                        by contradiction /* impossible chain */
                      next
                        case d_0_snd
                        by solve( (#vr.7, 0) ~~> (#vk.5, 0) )
                      qed
                    qed
                  qed
                next
                  case c_xor_case_15
                  by contradiction /* cyclic */
                next
                  case coerce
                  solve( !KD( (~k⊕~k1⊕~r1⊕x⊕~r1.1) ) ▶₀ #vk.4 )
                    case acceptreader
                    by solve( (#vl.2, 0) ~~> (#vk.4, 0) )
                  next
                    case initiatereader
                    by contradiction /* impossible chain */
                  next
                    case tag1
                    solve( (#vl.2, 0) ~~> (#vk.4, 0) )
                      case d_0_fst
                      by contradiction /* impossible chain */
                    next
                      case d_0_snd
                      by solve( (#vr.7, 0) ~~> (#vk.4, 0) )
                    qed
                  qed
                qed
              qed
            next
              case tag1_case_2
              by contradiction /* cyclic */
            qed
          next
            case coerce
            solve( !KD( (x⊕h((~k⊕~r1⊕x⊕~r1.1))) ) ▶₀ #vk.2 )
              case acceptreader
              by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
            next
              case initiatereader
              by contradiction /* impossible chain */
            next
              case tag1
              solve( (#vl.1, 0) ~~> (#vk.2, 0) )
                case d_0_fst
                by contradiction /* impossible chain */
              next
                case d_0_snd
                by solve( (#vr.5, 0) ~~> (#vk.2, 0) )
              qed
            qed
          qed
        next
          case coerce
          solve( !KD( (x⊕~r1.1) ) ▶₀ #vk.1 )
            case acceptreader
            by solve( (#vl.1, 0) ~~> (#vk.1, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.1, 0) ~~> (#vk.1, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.5, 0) ~~> (#vk.1, 0) )
            qed
          qed
        qed
      qed
    qed
  next
    case split_case_6
    solve( !KU( h((~k⊕~r1⊕x⊕h((~k⊕x)))) ) @ #vk )
      case c_h
      solve( !KU( (~r1⊕x) ) @ #vk.1 )
        case c_xor
        by contradiction /* cyclic */
      next
        case coerce
        solve( !KD( (~r1⊕x) ) ▶₀ #vk.1 )
          case acceptreader
          by solve( (#vl, 0) ~~> (#vk.1, 0) )
        next
          case initiatereader
          by contradiction /* impossible chain */
        next
          case tag1
          solve( (#vl, 0) ~~> (#vk.1, 0) )
            case d_0_fst
            by contradiction /* impossible chain */
          next
            case d_0_snd
            by solve( (#vr.3, 0) ~~> (#vk.1, 0) )
          qed
        qed
      qed
    next
      case tag1_case_1
      solve( !KU( (~r1⊕x) ) @ #vk.1 )
        case c_xor
        by contradiction /* cyclic */
      next
        case coerce
        solve( !KD( (~r1⊕x) ) ▶₀ #vk.1 )
          case acceptreader
          by solve( (#vl.1, 0) ~~> (#vk.1, 0) )
        next
          case initiatereader
          by contradiction /* impossible chain */
        next
          case tag1
          solve( (#vl.1, 0) ~~> (#vk.1, 0) )
            case d_0_fst
            by contradiction /* impossible chain */
          next
            case d_0_snd
            by solve( (#vr.5, 0) ~~> (#vk.1, 0) )
          qed
        qed
      qed
    next
      case tag1_case_2
      solve( !KU( (~r1⊕x) ) @ #vk.1 )
        case c_xor
        by contradiction /* cyclic */
      next
        case coerce
        solve( !KD( (~r1⊕x) ) ▶₀ #vk.1 )
          case acceptreader
          by solve( (#vl.1, 0) ~~> (#vk.1, 0) )
        next
          case initiatereader
          by contradiction /* impossible chain */
        next
          case tag1
          solve( (#vl.1, 0) ~~> (#vk.1, 0) )
            case d_0_fst
            by contradiction /* impossible chain */
          next
            case d_0_snd
            by solve( (#vr.5, 0) ~~> (#vk.1, 0) )
          qed
        qed
      qed
    qed
  next
    case split_case_7
    solve( !KU( h((~r1⊕z⊕h(z))) ) @ #vk )
      case c_h
      solve( !KU( (~k⊕~r1⊕z) ) @ #vk.1 )
        case c_xor_case_1
        by contradiction /* cyclic */
      next
        case c_xor_case_2
        by solve( !KU( ~k ) @ #vk.4 )
      next
        case c_xor_case_3
        solve( !KU( (~r1⊕z⊕h(z)) ) @ #vk.2 )
          case c_xor_case_1
          solve( !KU( (~k⊕~r1) ) @ #vk.4 )
            case c_xor
            by contradiction /* cyclic */
          next
            case coerce
            solve( !KD( (~k⊕~r1) ) ▶₀ #vk.3 )
              case acceptreader
              by solve( (#vl, 0) ~~> (#vk.3, 0) )
            next
              case initiatereader
              by contradiction /* impossible chain */
            next
              case tag1
              solve( (#vl, 0) ~~> (#vk.3, 0) )
                case d_0_fst
                by contradiction /* impossible chain */
              next
                case d_0_snd
                by solve( (#vr.3, 0) ~~> (#vk.3, 0) )
              qed
            qed
          qed
        next
          case c_xor_case_2
          solve( !KU( (~k⊕~r1) ) @ #vk.4 )
            case c_xor
            by contradiction /* cyclic */
          next
            case coerce
            solve( !KD( (~k⊕~r1) ) ▶₀ #vk.3 )
              case acceptreader
              by solve( (#vl, 0) ~~> (#vk.3, 0) )
            next
              case initiatereader
              by contradiction /* impossible chain */
            next
              case tag1
              solve( (#vl, 0) ~~> (#vk.3, 0) )
                case d_0_fst
                by contradiction /* impossible chain */
              next
                case d_0_snd
                by solve( (#vr.3, 0) ~~> (#vk.3, 0) )
              qed
            qed
          qed
        next
          case c_xor_case_3
          solve( !KU( (~k⊕~r1) ) @ #vk.4 )
            case c_xor
            by contradiction /* cyclic */
          next
            case coerce
            solve( !KD( (~k⊕~r1) ) ▶₀ #vk.3 )
              case acceptreader
              by solve( (#vl, 0) ~~> (#vk.3, 0) )
            next
              case initiatereader
              by contradiction /* impossible chain */
            next
              case tag1
              solve( (#vl, 0) ~~> (#vk.3, 0) )
                case d_0_fst
                by contradiction /* impossible chain */
              next
                case d_0_snd
                by solve( (#vr.3, 0) ~~> (#vk.3, 0) )
              qed
            qed
          qed
        next
          case coerce
          solve( !KD( (~r1⊕z⊕h(z)) ) ▶₀ #vk.2 )
            case acceptreader
            by solve( (#vl, 0) ~~> (#vk.2, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl, 0) ~~> (#vk.2, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.3, 0) ~~> (#vk.2, 0) )
            qed
          qed
        qed
      next
        case coerce
        solve( !KD( (~k⊕~r1⊕z) ) ▶₀ #vk.1 )
          case acceptreader
          by solve( (#vl, 0) ~~> (#vk.1, 0) )
        next
          case initiatereader
          by contradiction /* impossible chain */
        next
          case tag1
          solve( (#vl, 0) ~~> (#vk.1, 0) )
            case d_0_fst
            by contradiction /* impossible chain */
          next
            case d_0_snd
            by solve( (#vr.3, 0) ~~> (#vk.1, 0) )
          qed
        qed
      qed
    next
      case tag1_case_1
      solve( !KU( (~k⊕~r1⊕z) ) @ #vk.1 )
        case c_xor_case_1
        by contradiction /* cyclic */
      next
        case c_xor_case_2
        by solve( !KU( ~k ) @ #vk.4 )
      next
        case c_xor_case_3
        solve( !KU( (~k⊕~r1) ) @ #vk.4 )
          case c_xor
          by contradiction /* cyclic */
        next
          case coerce
          solve( !KD( (~k⊕~r1) ) ▶₀ #vk.2 )
            case acceptreader
            by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.1, 0) ~~> (#vk.2, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.5, 0) ~~> (#vk.2, 0) )
            qed
          qed
        qed
      next
        case coerce
        solve( !KD( (~k⊕~r1⊕z) ) ▶₀ #vk.1 )
          case acceptreader
          by solve( (#vl.1, 0) ~~> (#vk.1, 0) )
        next
          case initiatereader
          by contradiction /* impossible chain */
        next
          case tag1
          solve( (#vl.1, 0) ~~> (#vk.1, 0) )
            case d_0_fst
            by contradiction /* impossible chain */
          next
            case d_0_snd
            by solve( (#vr.5, 0) ~~> (#vk.1, 0) )
          qed
        qed
      qed
    next
      case tag1_case_2
      solve( !KU( (~k⊕~r1⊕z) ) @ #vk.1 )
        case c_xor_case_1
        by contradiction /* cyclic */
      next
        case c_xor_case_2
        by solve( !KU( ~k ) @ #vk.4 )
      next
        case c_xor_case_3
        solve( !KU( (~x⊕x.1⊕x.2) ) @ #vk.2 )
          case c_xor_case_1
          solve( !KU( (~k⊕~r1) ) @ #vk.4 )
            case c_xor
            by contradiction /* cyclic */
          next
            case coerce
            solve( !KD( (~k⊕~r1) ) ▶₀ #vk.3 )
              case acceptreader
              by solve( (#vl.1, 0) ~~> (#vk.3, 0) )
            next
              case initiatereader
              by contradiction /* impossible chain */
            next
              case tag1
              solve( (#vl.1, 0) ~~> (#vk.3, 0) )
                case d_0_fst
                by contradiction /* impossible chain */
              next
                case d_0_snd
                by solve( (#vr.5, 0) ~~> (#vk.3, 0) )
              qed
            qed
          qed
        next
          case c_xor_case_2
          solve( !KU( ~x.2 ) @ #vk.6 )
            case fresh
            solve( !KU( (~k⊕~r1) ) @ #vk.5 )
              case c_xor
              by contradiction /* cyclic */
            next
              case coerce
              solve( !KD( (~k⊕~r1) ) ▶₀ #vk.4 )
                case acceptreader
                by solve( (#vl.1, 0) ~~> (#vk.4, 0) )
              next
                case initiatereader
                by contradiction /* impossible chain */
              next
                case tag1
                solve( (#vl.1, 0) ~~> (#vk.4, 0) )
                  case d_0_fst
                  by contradiction /* impossible chain */
                next
                  case d_0_snd
                  by solve( (#vr.5, 0) ~~> (#vk.4, 0) )
                qed
              qed
            qed
          next
            case tag1
            solve( !KU( (~k⊕~r1) ) @ #vk.5 )
              case c_xor
              by contradiction /* cyclic */
            next
              case coerce
              solve( !KD( (~k⊕~r1) ) ▶₀ #vk.4 )
                case acceptreader
                by solve( (#vl.2, 0) ~~> (#vk.4, 0) )
              next
                case initiatereader
                by contradiction /* impossible chain */
              next
                case tag1
                solve( (#vl.2, 0) ~~> (#vk.4, 0) )
                  case d_0_fst
                  by contradiction /* impossible chain */
                next
                  case d_0_snd
                  by solve( (#vr.7, 0) ~~> (#vk.4, 0) )
                qed
              qed
            qed
          qed
        next
          case c_xor_case_3
          solve( !KU( (~k⊕~r1) ) @ #vk.4 )
            case c_xor
            by contradiction /* cyclic */
          next
            case coerce
            solve( !KD( (~k⊕~r1) ) ▶₀ #vk.3 )
              case acceptreader
              by solve( (#vl.1, 0) ~~> (#vk.3, 0) )
            next
              case initiatereader
              by contradiction /* impossible chain */
            next
              case tag1
              solve( (#vl.1, 0) ~~> (#vk.3, 0) )
                case d_0_fst
                by contradiction /* impossible chain */
              next
                case d_0_snd
                by solve( (#vr.5, 0) ~~> (#vk.3, 0) )
              qed
            qed
          qed
        next
          case coerce
          solve( !KD( (~x⊕x.1⊕x.2) ) ▶₀ #vk.2 )
            case acceptreader
            by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.1, 0) ~~> (#vk.2, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.5, 0) ~~> (#vk.2, 0) )
            qed
          qed
        qed
      next
        case coerce
        solve( !KD( (~k⊕~r1⊕z) ) ▶₀ #vk.1 )
          case acceptreader
          by solve( (#vl.1, 0) ~~> (#vk.1, 0) )
        next
          case initiatereader
          by contradiction /* impossible chain */
        next
          case tag1
          solve( (#vl.1, 0) ~~> (#vk.1, 0) )
            case d_0_fst
            by contradiction /* impossible chain */
          next
            case d_0_snd
            by solve( (#vr.5, 0) ~~> (#vk.1, 0) )
          qed
        qed
      qed
    qed
  next
    case split_case_8
    solve( splitEqs(1) )
      case split
      solve( !KU( h((x⊕h((~r1⊕x)))) ) @ #vk )
        case c_h
        solve( !KU( (~k⊕x) ) @ #vk.1 )
          case c_xor
          by solve( !KU( ~k ) @ #vk.4 )
        next
          case coerce
          solve( !KD( (~k⊕x) ) ▶₀ #vk.1 )
            case acceptreader
            by solve( (#vl, 0) ~~> (#vk.1, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl, 0) ~~> (#vk.1, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.3, 0) ~~> (#vk.1, 0) )
            qed
          qed
        qed
      next
        case tag1_case_1
        solve( !KU( (~k⊕x) ) @ #vk.1 )
          case c_xor
          by solve( !KU( ~k ) @ #vk.4 )
        next
          case coerce
          solve( !KD( (~k⊕x) ) ▶₀ #vk.1 )
            case acceptreader
            by solve( (#vl.1, 0) ~~> (#vk.1, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.1, 0) ~~> (#vk.1, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.5, 0) ~~> (#vk.1, 0) )
            qed
          qed
        qed
      next
        case tag1_case_2
        solve( !KU( (~k⊕x) ) @ #vk.1 )
          case c_xor
          by solve( !KU( ~k ) @ #vk.4 )
        next
          case coerce
          solve( !KD( (~k⊕x) ) ▶₀ #vk.1 )
            case acceptreader
            by solve( (#vl.1, 0) ~~> (#vk.1, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.1, 0) ~~> (#vk.1, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.5, 0) ~~> (#vk.1, 0) )
            qed
          qed
        qed
      qed
    qed
  qed
qed

lemma executable [left]:
  exists-trace
  "(∃ #i. FinTag( ) @ #i) ∧
   (∀ x #i1 #i2.
     ((OnlyOnce( x ) @ #i1) ∧ (OnlyOnce( x ) @ #i2)) ⇒ (#i1 = #i2))"
/*
guarded formula characterizing all satisfying traces:
"(∃ #i. (FinTag( ) @ #i)) ∧
 (∀ x #i1 #i2. (OnlyOnce( x ) @ #i1) ∧ (OnlyOnce( x ) @ #i2) ⇒ #i1 = #i2)"
*/
simplify
solve( TagState1( ~k, ~r1, r0, phase ) ▶₀ #i )
  case tag1_case_1
  solve( splitEqs(0) )
    case split_case_1
    by solve( !KU( ~k ) @ #vk.1 )
  next
    case split_case_2
    by contradiction /* cyclic */
  next
    case split_case_3
    solve( !KU( h((~k⊕h((~k⊕~r1)))) ) @ #vk )
      case c_h
      solve( !KU( (~k⊕h((~k⊕~r1))) ) @ #vk.2 )
        case c_xor
        by solve( !KU( ~k ) @ #vk.4 )
      next
        case coerce
        solve( !KD( (~k⊕h((~k⊕~r1))) ) ▶₀ #vk.1 )
          case acceptreader
          by solve( (#vl, 0) ~~> (#vk.1, 0) )
        next
          case initiatereader
          by contradiction /* impossible chain */
        next
          case tag1
          solve( (#vl, 0) ~~> (#vk.1, 0) )
            case d_0_fst
            by contradiction /* impossible chain */
          next
            case d_0_snd
            by solve( (#vr.3, 0) ~~> (#vk.1, 0) )
          qed
        qed
      qed
    next
      case tag1_case_1
      solve( !KU( (x⊕~x.1) ) @ #vk.2 )
        case c_xor
        solve( !KU( ~x ) @ #vk.3 )
          case fresh
          by solve( splitEqs(3) )
        next
          case tag1_case_1
          by solve( splitEqs(3) )
        next
          case tag1_case_2
          by solve( splitEqs(3) )
        qed
      next
        case coerce
        solve( !KD( (x⊕~x.1) ) ▶₀ #vk.1 )
          case acceptreader
          by solve( (#vl.1, 0) ~~> (#vk.1, 0) )
        next
          case initiatereader
          by contradiction /* impossible chain */
        next
          case tag1
          solve( (#vl.1, 0) ~~> (#vk.1, 0) )
            case d_0_fst
            by contradiction /* impossible chain */
          next
            case d_0_snd
            by solve( (#vr.5, 0) ~~> (#vk.1, 0) )
          qed
        qed
      qed
    next
      case tag1_case_2
      solve( !KU( (~r1.1⊕h((~k⊕~r1))) ) @ #vk.2 )
        case c_xor
        by contradiction /* cyclic */
      next
        case coerce
        solve( !KD( (~r1.1⊕h((~k⊕~r1))) ) ▶₀ #vk.1 )
          case acceptreader
          by solve( (#vl.1, 0) ~~> (#vk.1, 0) )
        next
          case initiatereader
          by contradiction /* impossible chain */
        next
          case tag1
          solve( (#vl.1, 0) ~~> (#vk.1, 0) )
            case d_0_fst
            by contradiction /* impossible chain */
          next
            case d_0_snd
            by solve( (#vr.5, 0) ~~> (#vk.1, 0) )
          qed
        qed
      qed
    qed
  next
    case split_case_4
    solve( !KU( h((~r1⊕h(zero))) ) @ #vk )
      case c_h
      solve( !KU( (~k⊕~r1) ) @ #vk.1 )
        case c_xor
        by contradiction /* cyclic */
      next
        case coerce
        solve( !KD( (~k⊕~r1) ) ▶₀ #vk.1 )
          case acceptreader
          by solve( (#vl, 0) ~~> (#vk.1, 0) )
        next
          case initiatereader
          by contradiction /* impossible chain */
        next
          case tag1
          solve( (#vl, 0) ~~> (#vk.1, 0) )
            case d_0_fst
            by contradiction /* impossible chain */
          next
            case d_0_snd
            by solve( (#vr.3, 0) ~~> (#vk.1, 0) )
          qed
        qed
      qed
    next
      case tag1_case_1
      solve( !KU( (~k⊕~r1) ) @ #vk.1 )
        case c_xor
        by contradiction /* cyclic */
      next
        case coerce
        solve( !KD( (~k⊕~r1) ) ▶₀ #vk.1 )
          case acceptreader
          by solve( (#vl.1, 0) ~~> (#vk.1, 0) )
        next
          case initiatereader
          by contradiction /* impossible chain */
        next
          case tag1
          solve( (#vl.1, 0) ~~> (#vk.1, 0) )
            case d_0_fst
            by contradiction /* impossible chain */
          next
            case d_0_snd
            by solve( (#vr.5, 0) ~~> (#vk.1, 0) )
          qed
        qed
      qed
    next
      case tag1_case_2
      solve( splitEqs(3) )
        case split
        solve( !KU( (~k⊕~r1) ) @ #vk.1 )
          case c_xor
          by contradiction /* cyclic */
        next
          case coerce
          solve( !KD( (~k⊕~r1) ) ▶₀ #vk.1 )
            case acceptreader
            by solve( (#vl.1, 0) ~~> (#vk.1, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.1, 0) ~~> (#vk.1, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.5, 0) ~~> (#vk.1, 0) )
            qed
          qed
        qed
      qed
    qed
  next
    case split_case_5
    solve( !KU( h((~k⊕r0⊕h((~k⊕~r1⊕r0)))) ) @ #vk )
      case c_h
      solve( !KU( (~k⊕r0⊕h((~k⊕~r1⊕r0))) ) @ #vk.2 )
        case c_xor_case_1
        solve( !KU( (~k⊕h((~k⊕~r1⊕r0))) ) @ #vk.3 )
          case c_xor
          by solve( !KU( ~k ) @ #vk.5 )
        next
          case coerce
          solve( !KD( (~k⊕h((~k⊕~r1⊕r0))) ) ▶₀ #vk.2 )
            case acceptreader
            by solve( (#vl, 0) ~~> (#vk.2, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl, 0) ~~> (#vk.2, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.3, 0) ~~> (#vk.2, 0) )
            qed
          qed
        qed
      next
        case c_xor_case_2
        by solve( !KU( ~k ) @ #vk.4 )
      next
        case c_xor_case_3
        solve( !KU( (~k⊕r0) ) @ #vk.4 )
          case c_xor
          by solve( !KU( ~k ) @ #vk.5 )
        next
          case coerce
          solve( !KD( (~k⊕r0) ) ▶₀ #vk.2 )
            case acceptreader
            by solve( (#vl, 0) ~~> (#vk.2, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl, 0) ~~> (#vk.2, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.3, 0) ~~> (#vk.2, 0) )
            qed
          qed
        qed
      next
        case coerce
        solve( !KD( (~k⊕r0⊕h((~k⊕~r1⊕r0))) ) ▶₀ #vk.1 )
          case acceptreader
          by solve( (#vl, 0) ~~> (#vk.1, 0) )
        next
          case initiatereader
          by contradiction /* impossible chain */
        next
          case tag1
          solve( (#vl, 0) ~~> (#vk.1, 0) )
            case d_0_fst
            by contradiction /* impossible chain */
          next
            case d_0_snd
            by solve( (#vr.3, 0) ~~> (#vk.1, 0) )
          qed
        qed
      qed
    next
      case tag1_case_1
      solve( splitEqs(3) )
        case split_case_1
        by solve( !KU( ~k2 ) @ #vk.1 )
      next
        case split_case_2
        solve( !KU( (~k⊕~k2⊕r0⊕~r1.1⊕h((~k⊕~r1⊕r0))) ) @ #vk.2 )
          case c_xor_case_01
          by contradiction /* cyclic */
        next
          case c_xor_case_02
          solve( !KU( (~k⊕~k2⊕~r1.1⊕h((~k⊕~r1⊕r0))) ) @ #vk.3 )
            case c_xor_case_1
            by contradiction /* cyclic */
          next
            case c_xor_case_2
            by solve( !KU( ~k2 ) @ #vk.5 )
          next
            case c_xor_case_3
            solve( !KU( (~k⊕h((~k⊕~r1⊕r0))) ) @ #vk.4 )
              case c_xor
              by solve( !KU( ~k ) @ #vk.7 )
            next
              case coerce
              solve( !KD( (~k⊕h((~k⊕~r1⊕r0))) ) ▶₀ #vk.3 )
                case acceptreader
                by solve( (#vl.1, 0) ~~> (#vk.3, 0) )
              next
                case initiatereader
                by contradiction /* impossible chain */
              next
                case tag1
                solve( (#vl.1, 0) ~~> (#vk.3, 0) )
                  case d_0_fst
                  by contradiction /* impossible chain */
                next
                  case d_0_snd
                  by solve( (#vr.5, 0) ~~> (#vk.3, 0) )
                qed
              qed
            qed
          next
            case c_xor_case_4
            by solve( !KU( ~k ) @ #vk.5 )
          next
            case c_xor_case_5
            solve( !KU( (~k2⊕h((~k⊕~r1⊕r0))) ) @ #vk.4 )
              case c_xor
              by solve( !KU( ~k2 ) @ #vk.7 )
            next
              case coerce
              solve( !KD( (~k2⊕h((~k⊕~r1⊕r0))) ) ▶₀ #vk.3 )
                case acceptreader
                by solve( (#vl.1, 0) ~~> (#vk.3, 0) )
              next
                case initiatereader
                by contradiction /* impossible chain */
              next
                case tag1
                solve( (#vl.1, 0) ~~> (#vk.3, 0) )
                  case d_0_fst
                  by contradiction /* impossible chain */
                next
                  case d_0_snd
                  by solve( (#vr.5, 0) ~~> (#vk.3, 0) )
                qed
              qed
            qed
          next
            case c_xor_case_6
            solve( !KU( (~r1.1⊕h((~k⊕~r1⊕r0))) ) @ #vk.4 )
              case c_xor
              by contradiction /* cyclic */
            next
              case coerce
              solve( !KD( (~r1.1⊕h((~k⊕~r1⊕r0))) ) ▶₀ #vk.3 )
                case acceptreader
                by solve( (#vl.1, 0) ~~> (#vk.3, 0) )
              next
                case initiatereader
                by contradiction /* impossible chain */
              next
                case tag1
                solve( (#vl.1, 0) ~~> (#vk.3, 0) )
                  case d_0_fst
                  by contradiction /* impossible chain */
                next
                  case d_0_snd
                  by solve( (#vr.5, 0) ~~> (#vk.3, 0) )
                qed
              qed
            qed
          next
            case c_xor_case_7
            solve( !KU( (~k⊕~k2⊕~r1.1) ) @ #vk.5 )
              case c_xor_case_1
              by solve( !KU( ~k2 ) @ #vk.7 )
            next
              case c_xor_case_2
              by solve( !KU( ~k ) @ #vk.7 )
            next
              case c_xor_case_3
              by contradiction /* cyclic */
            next
              case coerce
              solve( !KD( (~k⊕~k2⊕~r1.1) ) ▶₀ #vk.3 )
                case acceptreader
                by solve( (#vl.1, 0) ~~> (#vk.3, 0) )
              next
                case initiatereader
                by contradiction /* impossible chain */
              next
                case tag1
                solve( (#vl.1, 0) ~~> (#vk.3, 0) )
                  case d_0_fst
                  by contradiction /* impossible chain */
                next
                  case d_0_snd
                  by solve( (#vr.5, 0) ~~> (#vk.3, 0) )
                qed
              qed
            qed
          next
            case coerce
            solve( !KD( (~k⊕~k2⊕~r1.1⊕h((~k⊕~r1⊕r0))) ) ▶₀ #vk.2 )
              case acceptreader
              by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
            next
              case initiatereader
              by contradiction /* impossible chain */
            next
              case tag1
              solve( (#vl.1, 0) ~~> (#vk.2, 0) )
                case d_0_fst
                by contradiction /* impossible chain */
              next
                case d_0_snd
                by solve( (#vr.5, 0) ~~> (#vk.2, 0) )
              qed
            qed
          qed
        next
          case c_xor_case_03
          solve( !KU( (~k⊕~k2⊕h((~k⊕~r1⊕r0))) ) @ #vk.3 )
            case c_xor_case_1
            by solve( !KU( ~k2 ) @ #vk.6 )
          next
            case c_xor_case_2
            by solve( !KU( ~k ) @ #vk.6 )
          next
            case c_xor_case_3
            solve( !KU( (r0⊕~r1.1) ) @ #vk.4 )
              case c_xor
              by contradiction /* cyclic */
            next
              case coerce
              solve( !KD( (r0⊕~r1.1) ) ▶₀ #vk.3 )
                case acceptreader
                by solve( (#vl.1, 0) ~~> (#vk.3, 0) )
              next
                case initiatereader
                by contradiction /* impossible chain */
              next
                case tag1
                solve( (#vl.1, 0) ~~> (#vk.3, 0) )
                  case d_0_fst
                  by contradiction /* impossible chain */
                next
                  case d_0_snd
                  by solve( (#vr.5, 0) ~~> (#vk.3, 0) )
                qed
              qed
            qed
          next
            case coerce
            solve( !KD( (~k⊕~k2⊕h((~k⊕~r1⊕r0))) ) ▶₀ #vk.2 )
              case acceptreader
              by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
            next
              case initiatereader
              by contradiction /* impossible chain */
            next
              case tag1
              solve( (#vl.1, 0) ~~> (#vk.2, 0) )
                case d_0_fst
                by contradiction /* impossible chain */
              next
                case d_0_snd
                by solve( (#vr.5, 0) ~~> (#vk.2, 0) )
              qed
            qed
          qed
        next
          case c_xor_case_04
          by solve( !KU( ~k2 ) @ #vk.4 )
        next
          case c_xor_case_05
          solve( !KU( (~k⊕r0⊕h((~k⊕~r1⊕r0))) ) @ #vk.3 )
            case c_xor_case_1
            solve( !KU( (~k2⊕~r1.1) ) @ #vk.4 )
              case c_xor
              by contradiction /* cyclic */
            next
              case coerce
              solve( !KD( (~k2⊕~r1.1) ) ▶₀ #vk.3 )
                case acceptreader
                by solve( (#vl.1, 0) ~~> (#vk.3, 0) )
              next
                case initiatereader
                by contradiction /* impossible chain */
              next
                case tag1
                solve( (#vl.1, 0) ~~> (#vk.3, 0) )
                  case d_0_fst
                  by contradiction /* impossible chain */
                next
                  case d_0_snd
                  by solve( (#vr.5, 0) ~~> (#vk.3, 0) )
                qed
              qed
            qed
          next
            case c_xor_case_2
            by solve( !KU( ~k ) @ #vk.6 )
          next
            case c_xor_case_3
            solve( !KU( (~k2⊕~r1.1) ) @ #vk.4 )
              case c_xor
              by contradiction /* cyclic */
            next
              case coerce
              solve( !KD( (~k2⊕~r1.1) ) ▶₀ #vk.3 )
                case acceptreader
                by solve( (#vl.1, 0) ~~> (#vk.3, 0) )
              next
                case initiatereader
                by contradiction /* impossible chain */
              next
                case tag1
                solve( (#vl.1, 0) ~~> (#vk.3, 0) )
                  case d_0_fst
                  by contradiction /* impossible chain */
                next
                  case d_0_snd
                  by solve( (#vr.5, 0) ~~> (#vk.3, 0) )
                qed
              qed
            qed
          next
            case coerce
            solve( !KD( (~k⊕r0⊕h((~k⊕~r1⊕r0))) ) ▶₀ #vk.2 )
              case acceptreader
              by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
            next
              case initiatereader
              by contradiction /* impossible chain */
            next
              case tag1
              solve( (#vl.1, 0) ~~> (#vk.2, 0) )
                case d_0_fst
                by contradiction /* impossible chain */
              next
                case d_0_snd
                by solve( (#vr.5, 0) ~~> (#vk.2, 0) )
              qed
            qed
          qed
        next
          case c_xor_case_06
          solve( !KU( (~k⊕~r1.1⊕h((~k⊕~r1⊕r0))) ) @ #vk.3 )
            case c_xor_case_1
            by contradiction /* cyclic */
          next
            case c_xor_case_2
            by solve( !KU( ~k ) @ #vk.6 )
          next
            case c_xor_case_3
            solve( !KU( (~k2⊕r0) ) @ #vk.4 )
              case c_xor
              by solve( !KU( ~k2 ) @ #vk.7 )
            next
              case coerce
              solve( !KD( (~k2⊕r0) ) ▶₀ #vk.3 )
                case acceptreader
                by solve( (#vl.1, 0) ~~> (#vk.3, 0) )
              next
                case initiatereader
                by contradiction /* impossible chain */
              next
                case tag1
                solve( (#vl.1, 0) ~~> (#vk.3, 0) )
                  case d_0_fst
                  by contradiction /* impossible chain */
                next
                  case d_0_snd
                  by solve( (#vr.5, 0) ~~> (#vk.3, 0) )
                qed
              qed
            qed
          next
            case coerce
            solve( !KD( (~k⊕~r1.1⊕h((~k⊕~r1⊕r0))) ) ▶₀ #vk.2 )
              case acceptreader
              by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
            next
              case initiatereader
              by contradiction /* impossible chain */
            next
              case tag1
              solve( (#vl.1, 0) ~~> (#vk.2, 0) )
                case d_0_fst
                by contradiction /* impossible chain */
              next
                case d_0_snd
                by solve( (#vr.5, 0) ~~> (#vk.2, 0) )
              qed
            qed
          qed
        next
          case c_xor_case_07
          solve( !KU( (~k⊕h((~k⊕~r1⊕r0))) ) @ #vk.3 )
            case c_xor
            by solve( !KU( ~k ) @ #vk.6 )
          next
            case coerce
            solve( !KD( (~k⊕h((~k⊕~r1⊕r0))) ) ▶₀ #vk.2 )
              case acceptreader
              by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
            next
              case initiatereader
              by contradiction /* impossible chain */
            next
              case tag1
              solve( (#vl.1, 0) ~~> (#vk.2, 0) )
                case d_0_fst
                by contradiction /* impossible chain */
              next
                case d_0_snd
                by solve( (#vr.5, 0) ~~> (#vk.2, 0) )
              qed
            qed
          qed
        next
          case c_xor_case_08
          by solve( !KU( ~k ) @ #vk.4 )
        next
          case c_xor_case_09
          solve( !KU( (~k2⊕r0⊕h((~k⊕~r1⊕r0))) ) @ #vk.3 )
            case c_xor_case_1
            solve( !KU( (~k⊕~r1.1) ) @ #vk.4 )
              case c_xor
              by contradiction /* cyclic */
            next
              case coerce
              solve( !KD( (~k⊕~r1.1) ) ▶₀ #vk.3 )
                case acceptreader
                by solve( (#vl.1, 0) ~~> (#vk.3, 0) )
              next
                case initiatereader
                by contradiction /* impossible chain */
              next
                case tag1
                solve( (#vl.1, 0) ~~> (#vk.3, 0) )
                  case d_0_fst
                  by contradiction /* impossible chain */
                next
                  case d_0_snd
                  by solve( (#vr.5, 0) ~~> (#vk.3, 0) )
                qed
              qed
            qed
          next
            case c_xor_case_2
            by solve( !KU( ~k2 ) @ #vk.6 )
          next
            case c_xor_case_3
            solve( !KU( (~k⊕~r1.1) ) @ #vk.4 )
              case c_xor
              by contradiction /* cyclic */
            next
              case coerce
              solve( !KD( (~k⊕~r1.1) ) ▶₀ #vk.3 )
                case acceptreader
                by solve( (#vl.1, 0) ~~> (#vk.3, 0) )
              next
                case initiatereader
                by contradiction /* impossible chain */
              next
                case tag1
                solve( (#vl.1, 0) ~~> (#vk.3, 0) )
                  case d_0_fst
                  by contradiction /* impossible chain */
                next
                  case d_0_snd
                  by solve( (#vr.5, 0) ~~> (#vk.3, 0) )
                qed
              qed
            qed
          next
            case coerce
            solve( !KD( (~k2⊕r0⊕h((~k⊕~r1⊕r0))) ) ▶₀ #vk.2 )
              case acceptreader
              by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
            next
              case initiatereader
              by contradiction /* impossible chain */
            next
              case tag1
              solve( (#vl.1, 0) ~~> (#vk.2, 0) )
                case d_0_fst
                by contradiction /* impossible chain */
              next
                case d_0_snd
                by solve( (#vr.5, 0) ~~> (#vk.2, 0) )
              qed
            qed
          qed
        next
          case c_xor_case_10
          solve( !KU( (~k2⊕~r1.1⊕h((~k⊕~r1⊕r0))) ) @ #vk.3 )
            case c_xor_case_1
            by contradiction /* cyclic */
          next
            case c_xor_case_2
            by solve( !KU( ~k2 ) @ #vk.6 )
          next
            case c_xor_case_3
            solve( !KU( (~k⊕r0) ) @ #vk.4 )
              case c_xor
              by solve( !KU( ~k ) @ #vk.7 )
            next
              case coerce
              solve( !KD( (~k⊕r0) ) ▶₀ #vk.3 )
                case acceptreader
                by solve( (#vl.1, 0) ~~> (#vk.3, 0) )
              next
                case initiatereader
                by contradiction /* impossible chain */
              next
                case tag1
                solve( (#vl.1, 0) ~~> (#vk.3, 0) )
                  case d_0_fst
                  by contradiction /* impossible chain */
                next
                  case d_0_snd
                  by solve( (#vr.5, 0) ~~> (#vk.3, 0) )
                qed
              qed
            qed
          next
            case coerce
            solve( !KD( (~k2⊕~r1.1⊕h((~k⊕~r1⊕r0))) ) ▶₀ #vk.2 )
              case acceptreader
              by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
            next
              case initiatereader
              by contradiction /* impossible chain */
            next
              case tag1
              solve( (#vl.1, 0) ~~> (#vk.2, 0) )
                case d_0_fst
                by contradiction /* impossible chain */
              next
                case d_0_snd
                by solve( (#vr.5, 0) ~~> (#vk.2, 0) )
              qed
            qed
          qed
        next
          case c_xor_case_11
          solve( !KU( (~k2⊕h((~k⊕~r1⊕r0))) ) @ #vk.3 )
            case c_xor
            by solve( !KU( ~k2 ) @ #vk.6 )
          next
            case coerce
            solve( !KD( (~k2⊕h((~k⊕~r1⊕r0))) ) ▶₀ #vk.2 )
              case acceptreader
              by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
            next
              case initiatereader
              by contradiction /* impossible chain */
            next
              case tag1
              solve( (#vl.1, 0) ~~> (#vk.2, 0) )
                case d_0_fst
                by contradiction /* impossible chain */
              next
                case d_0_snd
                by solve( (#vr.5, 0) ~~> (#vk.2, 0) )
              qed
            qed
          qed
        next
          case c_xor_case_12
          solve( !KU( (r0⊕~r1.1⊕h((~k⊕~r1⊕r0))) ) @ #vk.3 )
            case c_xor_case_1
            by contradiction /* cyclic */
          next
            case c_xor_case_2
            solve( !KU( (~k⊕~k2) ) @ #vk.4 )
              case c_xor
              by solve( !KU( ~k2 ) @ #vk.6 )
            next
              case coerce
              solve( !KD( (~k⊕~k2) ) ▶₀ #vk.3 )
                case acceptreader
                by solve( (#vl.1, 0) ~~> (#vk.3, 0) )
              next
                case initiatereader
                by contradiction /* impossible chain */
              next
                case tag1
                solve( (#vl.1, 0) ~~> (#vk.3, 0) )
                  case d_0_fst
                  by contradiction /* impossible chain */
                next
                  case d_0_snd
                  by solve( (#vr.5, 0) ~~> (#vk.3, 0) )
                qed
              qed
            qed
          next
            case c_xor_case_3
            solve( !KU( (~k⊕~k2) ) @ #vk.4 )
              case c_xor
              by solve( !KU( ~k2 ) @ #vk.7 )
            next
              case coerce
              solve( !KD( (~k⊕~k2) ) ▶₀ #vk.3 )
                case acceptreader
                by solve( (#vl.1, 0) ~~> (#vk.3, 0) )
              next
                case initiatereader
                by contradiction /* impossible chain */
              next
                case tag1
                solve( (#vl.1, 0) ~~> (#vk.3, 0) )
                  case d_0_fst
                  by contradiction /* impossible chain */
                next
                  case d_0_snd
                  by solve( (#vr.5, 0) ~~> (#vk.3, 0) )
                qed
              qed
            qed
          next
            case coerce
            solve( !KD( (r0⊕~r1.1⊕h((~k⊕~r1⊕r0))) ) ▶₀ #vk.2 )
              case acceptreader
              by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
            next
              case initiatereader
              by contradiction /* impossible chain */
            next
              case tag1
              solve( (#vl.1, 0) ~~> (#vk.2, 0) )
                case d_0_fst
                by contradiction /* impossible chain */
              next
                case d_0_snd
                by solve( (#vr.5, 0) ~~> (#vk.2, 0) )
              qed
            qed
          qed
        next
          case c_xor_case_13
          solve( !KU( (r0⊕h((~k⊕~r1⊕r0))) ) @ #vk.3 )
            case c_xor
            solve( !KU( (~k⊕~k2⊕~r1.1) ) @ #vk.4 )
              case c_xor_case_1
              by solve( !KU( ~k2 ) @ #vk.7 )
            next
              case c_xor_case_2
              by solve( !KU( ~k ) @ #vk.7 )
            next
              case c_xor_case_3
              by contradiction /* cyclic */
            next
              case coerce
              solve( !KD( (~k⊕~k2⊕~r1.1) ) ▶₀ #vk.3 )
                case acceptreader
                by solve( (#vl.1, 0) ~~> (#vk.3, 0) )
              next
                case initiatereader
                by contradiction /* impossible chain */
              next
                case tag1
                solve( (#vl.1, 0) ~~> (#vk.3, 0) )
                  case d_0_fst
                  by contradiction /* impossible chain */
                next
                  case d_0_snd
                  by solve( (#vr.5, 0) ~~> (#vk.3, 0) )
                qed
              qed
            qed
          next
            case coerce
            solve( !KD( (r0⊕h((~k⊕~r1⊕r0))) ) ▶₀ #vk.2 )
              case acceptreader
              by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
            next
              case initiatereader
              by contradiction /* impossible chain */
            next
              case tag1
              solve( (#vl.1, 0) ~~> (#vk.2, 0) )
                case d_0_fst
                by contradiction /* impossible chain */
              next
                case d_0_snd
                by solve( (#vr.5, 0) ~~> (#vk.2, 0) )
              qed
            qed
          qed
        next
          case c_xor_case_14
          solve( !KU( (~r1.1⊕h((~k⊕~r1⊕r0))) ) @ #vk.3 )
            case c_xor
            by contradiction /* cyclic */
          next
            case coerce
            solve( !KD( (~r1.1⊕h((~k⊕~r1⊕r0))) ) ▶₀ #vk.2 )
              case acceptreader
              by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
            next
              case initiatereader
              by contradiction /* impossible chain */
            next
              case tag1
              solve( (#vl.1, 0) ~~> (#vk.2, 0) )
                case d_0_fst
                by contradiction /* impossible chain */
              next
                case d_0_snd
                by solve( (#vr.5, 0) ~~> (#vk.2, 0) )
              qed
            qed
          qed
        next
          case c_xor_case_15
          solve( !KU( (~k⊕~k2⊕r0⊕~r1.1) ) @ #vk.4 )
            case c_xor_case_1
            solve( !KU( (~k⊕~k2⊕~r1.1) ) @ #vk.5 )
              case c_xor_case_1
              by solve( !KU( ~k2 ) @ #vk.7 )
            next
              case c_xor_case_2
              by solve( !KU( ~k ) @ #vk.7 )
            next
              case c_xor_case_3
              by contradiction /* cyclic */
            next
              case coerce
              solve( !KD( (~k⊕~k2⊕~r1.1) ) ▶₀ #vk.3 )
                case acceptreader
                by solve( (#vl.1, 0) ~~> (#vk.3, 0) )
              next
                case initiatereader
                by contradiction /* impossible chain */
              next
                case tag1
                solve( (#vl.1, 0) ~~> (#vk.3, 0) )
                  case d_0_fst
                  by contradiction /* impossible chain */
                next
                  case d_0_snd
                  by solve( (#vr.5, 0) ~~> (#vk.3, 0) )
                qed
              qed
            qed
          next
            case c_xor_case_2
            by solve( !KU( ~k2 ) @ #vk.6 )
          next
            case c_xor_case_3
            solve( !KU( (~k⊕~r1.1) ) @ #vk.5 )
              case c_xor
              by contradiction /* cyclic */
            next
              case coerce
              solve( !KD( (~k⊕~r1.1) ) ▶₀ #vk.3 )
                case acceptreader
                by solve( (#vl.1, 0) ~~> (#vk.3, 0) )
              next
                case initiatereader
                by contradiction /* impossible chain */
              next
                case tag1
                solve( (#vl.1, 0) ~~> (#vk.3, 0) )
                  case d_0_fst
                  by contradiction /* impossible chain */
                next
                  case d_0_snd
                  by solve( (#vr.5, 0) ~~> (#vk.3, 0) )
                qed
              qed
            qed
          next
            case c_xor_case_4
            by solve( !KU( ~k ) @ #vk.6 )
          next
            case c_xor_case_5
            solve( !KU( (~k2⊕~r1.1) ) @ #vk.5 )
              case c_xor
              by contradiction /* cyclic */
            next
              case coerce
              solve( !KD( (~k2⊕~r1.1) ) ▶₀ #vk.3 )
                case acceptreader
                by solve( (#vl.1, 0) ~~> (#vk.3, 0) )
              next
                case initiatereader
                by contradiction /* impossible chain */
              next
                case tag1
                solve( (#vl.1, 0) ~~> (#vk.3, 0) )
                  case d_0_fst
                  by contradiction /* impossible chain */
                next
                  case d_0_snd
                  by solve( (#vr.5, 0) ~~> (#vk.3, 0) )
                qed
              qed
            qed
          next
            case c_xor_case_6
            solve( !KU( (r0⊕~r1.1) ) @ #vk.5 )
              case c_xor
              by contradiction /* cyclic */
            next
              case coerce
              solve( !KD( (r0⊕~r1.1) ) ▶₀ #vk.3 )
                case acceptreader
                by solve( (#vl.1, 0) ~~> (#vk.3, 0) )
              next
                case initiatereader
                by contradiction /* impossible chain */
              next
                case tag1
                solve( (#vl.1, 0) ~~> (#vk.3, 0) )
                  case d_0_fst
                  by contradiction /* impossible chain */
                next
                  case d_0_snd
                  by solve( (#vr.5, 0) ~~> (#vk.3, 0) )
                qed
              qed
            qed
          next
            case c_xor_case_7
            by contradiction /* cyclic */
          next
            case coerce
            solve( !KD( (~k⊕~k2⊕r0⊕~r1.1) ) ▶₀ #vk.2 )
              case acceptreader
              by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
            next
              case initiatereader
              by contradiction /* impossible chain */
            next
              case tag1
              solve( (#vl.1, 0) ~~> (#vk.2, 0) )
                case d_0_fst
                by contradiction /* impossible chain */
              next
                case d_0_snd
                by solve( (#vr.5, 0) ~~> (#vk.2, 0) )
              qed
            qed
          qed
        next
          case coerce
          solve( !KD( (~k⊕~k2⊕r0⊕~r1.1⊕h((~k⊕~r1⊕r0))) ) ▶₀ #vk.1 )
            case acceptreader
            by solve( (#vl.1, 0) ~~> (#vk.1, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.1, 0) ~~> (#vk.1, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.5, 0) ~~> (#vk.1, 0) )
            qed
          qed
        qed
      next
        case split_case_3
        solve( !KU( (~k⊕~k2⊕h((~k⊕~r0⊕~r1))) ) @ #vk.2 )
          case c_xor_case_1
          by solve( !KU( ~k2 ) @ #vk.4 )
        next
          case c_xor_case_2
          by solve( !KU( ~k ) @ #vk.4 )
        next
          case c_xor_case_3
          solve( !KU( h((~k⊕~r0⊕~r1)) ) @ #vk.3 )
            case c_h
            solve( !KU( (~k⊕~k2) ) @ #vk.4 )
              case c_xor
              by solve( !KU( ~k2 ) @ #vk.6 )
            next
              case coerce
              solve( !KD( (~k⊕~k2) ) ▶₀ #vk.3 )
                case acceptreader
                by solve( (#vl.1, 0) ~~> (#vk.3, 0) )
              next
                case initiatereader
                by contradiction /* impossible chain */
              next
                case tag1
                solve( (#vl.1, 0) ~~> (#vk.3, 0) )
                  case d_0_fst
                  by contradiction /* impossible chain */
                next
                  case d_0_snd
                  by solve( (#vr.5, 0) ~~> (#vk.3, 0) )
                qed
              qed
            qed
          next
            case tag1_case_1
            by contradiction /* cyclic */
          next
            case tag1_case_2
            solve( !KU( (~k⊕~k2) ) @ #vk.4 )
              case c_xor
              by solve( !KU( ~k2 ) @ #vk.6 )
            next
              case coerce
              solve( !KD( (~k⊕~k2) ) ▶₀ #vk.3 )
                case acceptreader
                by solve( (#vl.2, 0) ~~> (#vk.3, 0) )
              next
                case initiatereader
                by contradiction /* impossible chain */
              next
                case tag1
                solve( (#vl.2, 0) ~~> (#vk.3, 0) )
                  case d_0_fst
                  by contradiction /* impossible chain */
                next
                  case d_0_snd
                  by solve( (#vr.7, 0) ~~> (#vk.3, 0) )
                qed
              qed
            qed
          qed
        next
          case coerce
          solve( !KD( (~k⊕~k2⊕h((~k⊕~r0⊕~r1))) ) ▶₀ #vk.1 )
            case acceptreader
            by solve( (#vl.1, 0) ~~> (#vk.1, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.1, 0) ~~> (#vk.1, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.5, 0) ~~> (#vk.1, 0) )
            qed
          qed
        qed
      next
        case split_case_4
        solve( !KU( (~k2⊕~r1.1) ) @ #vk.1 )
          case c_xor
          by solve( !KU( ~k2 ) @ #vk.4 )
        next
          case coerce
          solve( !KD( (~k2⊕~r1.1) ) ▶₀ #vk.1 )
            case acceptreader
            by solve( (#vl.1, 0) ~~> (#vk.1, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.1, 0) ~~> (#vk.1, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.5, 0) ~~> (#vk.1, 0) )
            qed
          qed
        qed
      next
        case split_case_5
        solve( !KU( (~k2⊕x⊕~r1.1) ) @ #vk.1 )
          case c_xor_case_1
          solve( !KU( (~k⊕x⊕h((~k⊕~k2⊕~r1⊕x⊕~r1.1))) ) @ #vk.2 )
            case c_xor_case_1
            solve( !KU( (~k2⊕~r1.1) ) @ #vk.3 )
              case c_xor
              by solve( !KU( ~k2 ) @ #vk.7 )
            next
              case coerce
              solve( !KD( (~k2⊕~r1.1) ) ▶₀ #vk.3 )
                case acceptreader
                by solve( (#vl.1, 0) ~~> (#vk.3, 0) )
              next
                case initiatereader
                by contradiction /* impossible chain */
              next
                case tag1
                solve( (#vl.1, 0) ~~> (#vk.3, 0) )
                  case d_0_fst
                  by contradiction /* impossible chain */
                next
                  case d_0_snd
                  by solve( (#vr.5, 0) ~~> (#vk.3, 0) )
                qed
              qed
            qed
          next
            case c_xor_case_2
            by solve( !KU( ~k ) @ #vk.6 )
          next
            case c_xor_case_3
            solve( !KU( (~k2⊕~r1.1) ) @ #vk.3 )
              case c_xor
              by solve( !KU( ~k2 ) @ #vk.8 )
            next
              case coerce
              solve( !KD( (~k2⊕~r1.1) ) ▶₀ #vk.3 )
                case acceptreader
                by solve( (#vl.1, 0) ~~> (#vk.3, 0) )
              next
                case initiatereader
                by contradiction /* impossible chain */
              next
                case tag1
                solve( (#vl.1, 0) ~~> (#vk.3, 0) )
                  case d_0_fst
                  by contradiction /* impossible chain */
                next
                  case d_0_snd
                  by solve( (#vr.5, 0) ~~> (#vk.3, 0) )
                qed
              qed
            qed
          next
            case coerce
            solve( !KD( (~k⊕x⊕h((~k⊕~k2⊕~r1⊕x⊕~r1.1))) ) ▶₀ #vk.2 )
              case acceptreader
              by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
            next
              case initiatereader
              by contradiction /* impossible chain */
            next
              case tag1
              solve( (#vl.1, 0) ~~> (#vk.2, 0) )
                case d_0_fst
                by contradiction /* impossible chain */
              next
                case d_0_snd
                by solve( (#vr.5, 0) ~~> (#vk.2, 0) )
              qed
            qed
          qed
        next
          case c_xor_case_2
          by solve( !KU( ~k2 ) @ #vk.4 )
        next
          case c_xor_case_3
          solve( !KU( (~k⊕x⊕h((~k⊕~k2⊕~r1⊕x⊕~r1.1))) ) @ #vk.2 )
            case c_xor_case_1
            solve( !KU( (~k2⊕x) ) @ #vk.4 )
              case c_xor
              by solve( !KU( ~k2 ) @ #vk.7 )
            next
              case coerce
              solve( !KD( (~k2⊕x) ) ▶₀ #vk.3 )
                case acceptreader
                by solve( (#vl.1, 0) ~~> (#vk.3, 0) )
              next
                case initiatereader
                by contradiction /* impossible chain */
              next
                case tag1
                solve( (#vl.1, 0) ~~> (#vk.3, 0) )
                  case d_0_fst
                  by contradiction /* impossible chain */
                next
                  case d_0_snd
                  by solve( (#vr.5, 0) ~~> (#vk.3, 0) )
                qed
              qed
            qed
          next
            case c_xor_case_2
            by solve( !KU( ~k ) @ #vk.6 )
          next
            case c_xor_case_3
            solve( !KU( (~k2⊕x) ) @ #vk.4 )
              case c_xor
              by solve( !KU( ~k2 ) @ #vk.8 )
            next
              case coerce
              solve( !KD( (~k2⊕x) ) ▶₀ #vk.3 )
                case acceptreader
                by solve( (#vl.1, 0) ~~> (#vk.3, 0) )
              next
                case initiatereader
                by contradiction /* impossible chain */
              next
                case tag1
                solve( (#vl.1, 0) ~~> (#vk.3, 0) )
                  case d_0_fst
                  by contradiction /* impossible chain */
                next
                  case d_0_snd
                  by solve( (#vr.5, 0) ~~> (#vk.3, 0) )
                qed
              qed
            qed
          next
            case coerce
            solve( !KD( (~k⊕x⊕h((~k⊕~k2⊕~r1⊕x⊕~r1.1))) ) ▶₀ #vk.2 )
              case acceptreader
              by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
            next
              case initiatereader
              by contradiction /* impossible chain */
            next
              case tag1
              solve( (#vl.1, 0) ~~> (#vk.2, 0) )
                case d_0_fst
                by contradiction /* impossible chain */
              next
                case d_0_snd
                by solve( (#vr.5, 0) ~~> (#vk.2, 0) )
              qed
            qed
          qed
        next
          case coerce
          solve( !KD( (~k2⊕x⊕~r1.1) ) ▶₀ #vk.1 )
            case acceptreader
            by solve( (#vl.1, 0) ~~> (#vk.1, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.1, 0) ~~> (#vk.1, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.5, 0) ~~> (#vk.1, 0) )
            qed
          qed
        qed
      next
        case split_case_6
        solve( !KU( (~k2⊕x) ) @ #vk.1 )
          case c_xor
          by solve( !KU( ~k2 ) @ #vk.4 )
        next
          case coerce
          solve( !KD( (~k2⊕x) ) ▶₀ #vk.1 )
            case acceptreader
            by solve( (#vl.1, 0) ~~> (#vk.1, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.1, 0) ~~> (#vk.1, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.5, 0) ~~> (#vk.1, 0) )
            qed
          qed
        qed
      next
        case split_case_7
        solve( !KU( (x⊕~r1.1) ) @ #vk.1 )
          case c_xor
          solve( !KU( (~k⊕~k2⊕x⊕h((~k⊕~r1⊕x⊕~r1.1))) ) @ #vk.2 )
            case c_xor_case_1
            solve( !KU( (~k⊕~k2⊕h((~k⊕~r1⊕x⊕~r1.1))) ) @ #vk.5 )
              case c_xor_case_1
              by solve( !KU( ~k2 ) @ #vk.7 )
            next
              case c_xor_case_2
              by solve( !KU( ~k ) @ #vk.7 )
            next
              case c_xor_case_3
              solve( !KU( h((~k⊕~r1⊕x⊕~r1.1)) ) @ #vk.6 )
                case c_h
                solve( !KU( (~k⊕~k2) ) @ #vk.7 )
                  case c_xor
                  by solve( !KU( ~k2 ) @ #vk.9 )
                next
                  case coerce
                  solve( !KD( (~k⊕~k2) ) ▶₀ #vk.5 )
                    case acceptreader
                    by solve( (#vl.1, 0) ~~> (#vk.5, 0) )
                  next
                    case initiatereader
                    by contradiction /* impossible chain */
                  next
                    case tag1
                    solve( (#vl.1, 0) ~~> (#vk.5, 0) )
                      case d_0_fst
                      by contradiction /* impossible chain */
                    next
                      case d_0_snd
                      by solve( (#vr.5, 0) ~~> (#vk.5, 0) )
                    qed
                  qed
                qed
              next
                case tag1_case_1
                by contradiction /* cyclic */
              next
                case tag1_case_2
                solve( !KU( (~k⊕~k2) ) @ #vk.7 )
                  case c_xor
                  by solve( !KU( ~k2 ) @ #vk.9 )
                next
                  case coerce
                  solve( !KD( (~k⊕~k2) ) ▶₀ #vk.5 )
                    case acceptreader
                    by solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                  next
                    case initiatereader
                    by contradiction /* impossible chain */
                  next
                    case tag1
                    solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                      case d_0_fst
                      by contradiction /* impossible chain */
                    next
                      case d_0_snd
                      by solve( (#vr.7, 0) ~~> (#vk.5, 0) )
                    qed
                  qed
                qed
              qed
            next
              case coerce
              solve( !KD( (~k⊕~k2⊕h((~k⊕~r1⊕x⊕~r1.1))) ) ▶₀ #vk.3 )
                case acceptreader
                by solve( (#vl.1, 0) ~~> (#vk.3, 0) )
              next
                case initiatereader
                by contradiction /* impossible chain */
              next
                case tag1
                solve( (#vl.1, 0) ~~> (#vk.3, 0) )
                  case d_0_fst
                  by contradiction /* impossible chain */
                next
                  case d_0_snd
                  by solve( (#vr.5, 0) ~~> (#vk.3, 0) )
                qed
              qed
            qed
          next
            case c_xor_case_2
            by solve( !KU( ~k2 ) @ #vk.6 )
          next
            case c_xor_case_3
            solve( !KU( (~k⊕h((~k⊕~r1⊕x⊕~r1.1))) ) @ #vk.5 )
              case c_xor
              by solve( !KU( ~k ) @ #vk.8 )
            next
              case coerce
              solve( !KD( (~k⊕h((~k⊕~r1⊕x⊕~r1.1))) ) ▶₀ #vk.3 )
                case acceptreader
                by solve( (#vl.1, 0) ~~> (#vk.3, 0) )
              next
                case initiatereader
                by contradiction /* impossible chain */
              next
                case tag1
                solve( (#vl.1, 0) ~~> (#vk.3, 0) )
                  case d_0_fst
                  by contradiction /* impossible chain */
                next
                  case d_0_snd
                  by solve( (#vr.5, 0) ~~> (#vk.3, 0) )
                qed
              qed
            qed
          next
            case c_xor_case_4
            by solve( !KU( ~k ) @ #vk.6 )
          next
            case c_xor_case_5
            solve( !KU( (~k2⊕h((~k⊕~r1⊕x⊕~r1.1))) ) @ #vk.5 )
              case c_xor
              by solve( !KU( ~k2 ) @ #vk.8 )
            next
              case coerce
              solve( !KD( (~k2⊕h((~k⊕~r1⊕x⊕~r1.1))) ) ▶₀ #vk.3 )
                case acceptreader
                by solve( (#vl.1, 0) ~~> (#vk.3, 0) )
              next
                case initiatereader
                by contradiction /* impossible chain */
              next
                case tag1
                solve( (#vl.1, 0) ~~> (#vk.3, 0) )
                  case d_0_fst
                  by contradiction /* impossible chain */
                next
                  case d_0_snd
                  by solve( (#vr.5, 0) ~~> (#vk.3, 0) )
                qed
              qed
            qed
          next
            case c_xor_case_6
            solve( !KU( (x⊕h((~k⊕~r1⊕x⊕~r1.1))) ) @ #vk.5 )
              case c_xor
              solve( !KU( (~k⊕~k2) ) @ #vk.6 )
                case c_xor
                by solve( !KU( ~k2 ) @ #vk.8 )
              next
                case coerce
                solve( !KD( (~k⊕~k2) ) ▶₀ #vk.4 )
                  case acceptreader
                  by solve( (#vl.1, 0) ~~> (#vk.4, 0) )
                next
                  case initiatereader
                  by contradiction /* impossible chain */
                next
                  case tag1
                  solve( (#vl.1, 0) ~~> (#vk.4, 0) )
                    case d_0_fst
                    by contradiction /* impossible chain */
                  next
                    case d_0_snd
                    by solve( (#vr.5, 0) ~~> (#vk.4, 0) )
                  qed
                qed
              qed
            next
              case coerce
              solve( !KD( (x⊕h((~k⊕~r1⊕x⊕~r1.1))) ) ▶₀ #vk.3 )
                case acceptreader
                by solve( (#vl.1, 0) ~~> (#vk.3, 0) )
              next
                case initiatereader
                by contradiction /* impossible chain */
              next
                case tag1
                solve( (#vl.1, 0) ~~> (#vk.3, 0) )
                  case d_0_fst
                  by contradiction /* impossible chain */
                next
                  case d_0_snd
                  by solve( (#vr.5, 0) ~~> (#vk.3, 0) )
                qed
              qed
            qed
          next
            case c_xor_case_7
            solve( !KU( h((~k⊕~r1⊕x⊕~r1.1)) ) @ #vk.5 )
              case c_h
              solve( !KU( (~k⊕~k2⊕x) ) @ #vk.6 )
                case c_xor_case_1
                by solve( !KU( ~k2 ) @ #vk.9 )
              next
                case c_xor_case_2
                by solve( !KU( ~k ) @ #vk.9 )
              next
                case c_xor_case_3
                solve( !KU( (~k⊕~r1⊕x⊕~r1.1) ) @ #vk.7 )
                  case c_xor_case_1
                  solve( !KU( (~k⊕~k2) ) @ #vk.8 )
                    case c_xor
                    by solve( !KU( ~k2 ) @ #vk.10 )
                  next
                    case coerce
                    solve( !KD( (~k⊕~k2) ) ▶₀ #vk.6 )
                      case acceptreader
                      by solve( (#vl.1, 0) ~~> (#vk.6, 0) )
                    next
                      case initiatereader
                      by contradiction /* impossible chain */
                    next
                      case tag1
                      solve( (#vl.1, 0) ~~> (#vk.6, 0) )
                        case d_0_fst
                        by contradiction /* impossible chain */
                      next
                        case d_0_snd
                        by solve( (#vr.5, 0) ~~> (#vk.6, 0) )
                      qed
                    qed
                  qed
                next
                  case c_xor_case_2
                  by contradiction /* cyclic */
                next
                  case c_xor_case_3
                  solve( !KU( (~k⊕~k2) ) @ #vk.8 )
                    case c_xor
                    by solve( !KU( ~k2 ) @ #vk.11 )
                  next
                    case coerce
                    solve( !KD( (~k⊕~k2) ) ▶₀ #vk.6 )
                      case acceptreader
                      by solve( (#vl.1, 0) ~~> (#vk.6, 0) )
                    next
                      case initiatereader
                      by contradiction /* impossible chain */
                    next
                      case tag1
                      solve( (#vl.1, 0) ~~> (#vk.6, 0) )
                        case d_0_fst
                        by contradiction /* impossible chain */
                      next
                        case d_0_snd
                        by solve( (#vr.5, 0) ~~> (#vk.6, 0) )
                      qed
                    qed
                  qed
                next
                  case c_xor_case_4
                  by solve( !KU( ~k ) @ #vk.10 )
                next
                  case c_xor_case_5
                  solve( !KU( (~k⊕~k2) ) @ #vk.8 )
                    case c_xor
                    by solve( !KU( ~k2 ) @ #vk.11 )
                  next
                    case coerce
                    solve( !KD( (~k⊕~k2) ) ▶₀ #vk.6 )
                      case acceptreader
                      by solve( (#vl.1, 0) ~~> (#vk.6, 0) )
                    next
                      case initiatereader
                      by contradiction /* impossible chain */
                    next
                      case tag1
                      solve( (#vl.1, 0) ~~> (#vk.6, 0) )
                        case d_0_fst
                        by contradiction /* impossible chain */
                      next
                        case d_0_snd
                        by solve( (#vr.5, 0) ~~> (#vk.6, 0) )
                      qed
                    qed
                  qed
                next
                  case c_xor_case_6
                  by contradiction /* cyclic */
                next
                  case c_xor_case_7
                  by contradiction /* cyclic */
                next
                  case coerce
                  solve( !KD( (~k⊕~r1⊕x⊕~r1.1) ) ▶₀ #vk.5 )
                    case acceptreader
                    by solve( (#vl.1, 0) ~~> (#vk.5, 0) )
                  next
                    case initiatereader
                    by contradiction /* impossible chain */
                  next
                    case tag1
                    solve( (#vl.1, 0) ~~> (#vk.5, 0) )
                      case d_0_fst
                      by contradiction /* impossible chain */
                    next
                      case d_0_snd
                      by solve( (#vr.5, 0) ~~> (#vk.5, 0) )
                    qed
                  qed
                qed
              next
                case coerce
                solve( !KD( (~k⊕~k2⊕x) ) ▶₀ #vk.4 )
                  case acceptreader
                  by solve( (#vl.1, 0) ~~> (#vk.4, 0) )
                next
                  case initiatereader
                  by contradiction /* impossible chain */
                next
                  case tag1
                  solve( (#vl.1, 0) ~~> (#vk.4, 0) )
                    case d_0_fst
                    by contradiction /* impossible chain */
                  next
                    case d_0_snd
                    by solve( (#vr.5, 0) ~~> (#vk.4, 0) )
                  qed
                qed
              qed
            next
              case tag1_case_1
              by contradiction /* cyclic */
            next
              case tag1_case_2
              solve( !KU( (~k⊕~k2⊕x) ) @ #vk.6 )
                case c_xor_case_1
                by solve( !KU( ~k2 ) @ #vk.9 )
              next
                case c_xor_case_2
                by solve( !KU( ~k ) @ #vk.9 )
              next
                case c_xor_case_3
                solve( !KU( (~k⊕~k2) ) @ #vk.8 )
                  case c_xor
                  by solve( !KU( ~k2 ) @ #vk.9 )
                next
                  case coerce
                  solve( !KD( (~k⊕~k2) ) ▶₀ #vk.5 )
                    case acceptreader
                    by solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                  next
                    case initiatereader
                    by contradiction /* impossible chain */
                  next
                    case tag1
                    solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                      case d_0_fst
                      by contradiction /* impossible chain */
                    next
                      case d_0_snd
                      by solve( (#vr.7, 0) ~~> (#vk.5, 0) )
                    qed
                  qed
                qed
              next
                case coerce
                solve( !KD( (~k⊕~k2⊕x) ) ▶₀ #vk.4 )
                  case acceptreader
                  by solve( (#vl.2, 0) ~~> (#vk.4, 0) )
                next
                  case initiatereader
                  by contradiction /* impossible chain */
                next
                  case tag1
                  solve( (#vl.2, 0) ~~> (#vk.4, 0) )
                    case d_0_fst
                    by contradiction /* impossible chain */
                  next
                    case d_0_snd
                    by solve( (#vr.7, 0) ~~> (#vk.4, 0) )
                  qed
                qed
              qed
            qed
          next
            case coerce
            solve( !KD( (~k⊕~k2⊕x⊕h((~k⊕~r1⊕x⊕~r1.1))) ) ▶₀ #vk.2 )
              case acceptreader
              by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
            next
              case initiatereader
              by contradiction /* impossible chain */
            next
              case tag1
              solve( (#vl.1, 0) ~~> (#vk.2, 0) )
                case d_0_fst
                by contradiction /* impossible chain */
              next
                case d_0_snd
                by solve( (#vr.5, 0) ~~> (#vk.2, 0) )
              qed
            qed
          qed
        next
          case coerce
          solve( !KD( (x⊕~r1.1) ) ▶₀ #vk.1 )
            case acceptreader
            by solve( (#vl.1, 0) ~~> (#vk.1, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.1, 0) ~~> (#vk.1, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.5, 0) ~~> (#vk.1, 0) )
            qed
          qed
        qed
      qed
    next
      case tag1_case_2
      solve( splitEqs(3) )
        case split_case_1
        solve( !KU( (r0⊕~r1.1⊕h((~k⊕~r1⊕r0))) ) @ #vk.2 )
          case c_xor_case_1
          by contradiction /* cyclic */
        next
          case c_xor_case_2
          solve( !KU( (~r1.1⊕h((~k⊕~r1⊕r0))) ) @ #vk.3 )
            case c_xor
            by contradiction /* cyclic */
          next
            case coerce
            solve( !KD( (~r1.1⊕h((~k⊕~r1⊕r0))) ) ▶₀ #vk.2 )
              case acceptreader
              by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
            next
              case initiatereader
              by contradiction /* impossible chain */
            next
              case tag1
              solve( (#vl.1, 0) ~~> (#vk.2, 0) )
                case d_0_fst
                by contradiction /* impossible chain */
              next
                case d_0_snd
                by solve( (#vr.5, 0) ~~> (#vk.2, 0) )
              qed
            qed
          qed
        next
          case c_xor_case_3
          solve( !KU( (r0⊕~r1.1) ) @ #vk.4 )
            case c_xor
            by contradiction /* cyclic */
          next
            case coerce
            solve( !KD( (r0⊕~r1.1) ) ▶₀ #vk.2 )
              case acceptreader
              by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
            next
              case initiatereader
              by contradiction /* impossible chain */
            next
              case tag1
              solve( (#vl.1, 0) ~~> (#vk.2, 0) )
                case d_0_fst
                by contradiction /* impossible chain */
              next
                case d_0_snd
                by solve( (#vr.5, 0) ~~> (#vk.2, 0) )
              qed
            qed
          qed
        next
          case coerce
          solve( !KD( (r0⊕~r1.1⊕h((~k⊕~r1⊕r0))) ) ▶₀ #vk.1 )
            case acceptreader
            by solve( (#vl.1, 0) ~~> (#vk.1, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.1, 0) ~~> (#vk.1, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.5, 0) ~~> (#vk.1, 0) )
            qed
          qed
        qed
      next
        case split_case_2
        solve( !KU( h((~k⊕~r0⊕~r1)) ) @ #vk.2 )
          case c_h
          solve( !KU( (~k⊕~r0⊕~r1) ) @ #vk.3 )
            case c_xor_case_1
            by contradiction /* cyclic */
          next
            case c_xor_case_2
            by solve( !KU( ~k ) @ #vk.5 )
          next
            case c_xor_case_3
            by contradiction /* cyclic */
          next
            case coerce
            solve( !KD( (~k⊕~r0⊕~r1) ) ▶₀ #vk.2 )
              case acceptreader
              by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
            next
              case initiatereader
              by contradiction /* impossible chain */
            next
              case tag1
              solve( (#vl.1, 0) ~~> (#vk.2, 0) )
                case d_0_fst
                by contradiction /* impossible chain */
              next
                case d_0_snd
                by solve( (#vr.5, 0) ~~> (#vk.2, 0) )
              qed
            qed
          qed
        next
          case tag1_case_1
          by contradiction /* cyclic */
        next
          case tag1_case_2
          solve( splitEqs(5) )
            case split
            solve( !KU( (~k⊕~k2⊕~r0⊕~r1⊕~r1.1) ) @ #vk.3 )
              case c_xor_case_01
              by contradiction /* cyclic */
            next
              case c_xor_case_02
              by contradiction /* cyclic */
            next
              case c_xor_case_03
              solve( !KU( (~k⊕~k2⊕~r1.1) ) @ #vk.4 )
                case c_xor_case_1
                by solve( !KU( ~k2 ) @ #vk.7 )
              next
                case c_xor_case_2
                by solve( !KU( ~k ) @ #vk.7 )
              next
                case c_xor_case_3
                by contradiction /* cyclic */
              next
                case coerce
                solve( !KD( (~k⊕~k2⊕~r1.1) ) ▶₀ #vk.3 )
                  case acceptreader
                  by solve( (#vl.2, 0) ~~> (#vk.3, 0) )
                next
                  case initiatereader
                  by contradiction /* impossible chain */
                next
                  case tag1
                  solve( (#vl.2, 0) ~~> (#vk.3, 0) )
                    case d_0_fst
                    by contradiction /* impossible chain */
                  next
                    case d_0_snd
                    by solve( (#vr.7, 0) ~~> (#vk.3, 0) )
                  qed
                qed
              qed
            next
              case c_xor_case_04
              by solve( !KU( ~k2 ) @ #vk.5 )
            next
              case c_xor_case_05
              solve( !KU( (~k⊕~r0⊕~r1.1) ) @ #vk.4 )
                case c_xor_case_1
                by contradiction /* cyclic */
              next
                case c_xor_case_2
                by solve( !KU( ~k ) @ #vk.7 )
              next
                case c_xor_case_3
                by contradiction /* cyclic */
              next
                case coerce
                solve( !KD( (~k⊕~r0⊕~r1.1) ) ▶₀ #vk.3 )
                  case acceptreader
                  by solve( (#vl.2, 0) ~~> (#vk.3, 0) )
                next
                  case initiatereader
                  by contradiction /* impossible chain */
                next
                  case tag1
                  solve( (#vl.2, 0) ~~> (#vk.3, 0) )
                    case d_0_fst
                    by contradiction /* impossible chain */
                  next
                    case d_0_snd
                    by solve( (#vr.7, 0) ~~> (#vk.3, 0) )
                  qed
                qed
              qed
            next
              case c_xor_case_06
              solve( !KU( (~k⊕~r1⊕~r1.1) ) @ #vk.4 )
                case c_xor_case_1
                by contradiction /* cyclic */
              next
                case c_xor_case_2
                by solve( !KU( ~k ) @ #vk.7 )
              next
                case c_xor_case_3
                by contradiction /* cyclic */
              next
                case coerce
                solve( !KD( (~k⊕~r1⊕~r1.1) ) ▶₀ #vk.3 )
                  case acceptreader
                  by solve( (#vl.2, 0) ~~> (#vk.3, 0) )
                next
                  case initiatereader
                  by contradiction /* impossible chain */
                next
                  case tag1
                  solve( (#vl.2, 0) ~~> (#vk.3, 0) )
                    case d_0_fst
                    by contradiction /* impossible chain */
                  next
                    case d_0_snd
                    by solve( (#vr.7, 0) ~~> (#vk.3, 0) )
                  qed
                qed
              qed
            next
              case c_xor_case_07
              solve( !KU( (~k⊕~r1.1) ) @ #vk.4 )
                case c_xor
                by contradiction /* cyclic */
              next
                case coerce
                solve( !KD( (~k⊕~r1.1) ) ▶₀ #vk.3 )
                  case acceptreader
                  by solve( (#vl.2, 0) ~~> (#vk.3, 0) )
                next
                  case initiatereader
                  by contradiction /* impossible chain */
                next
                  case tag1
                  solve( (#vl.2, 0) ~~> (#vk.3, 0) )
                    case d_0_fst
                    by contradiction /* impossible chain */
                  next
                    case d_0_snd
                    by solve( (#vr.7, 0) ~~> (#vk.3, 0) )
                  qed
                qed
              qed
            next
              case c_xor_case_08
              by solve( !KU( ~k ) @ #vk.5 )
            next
              case c_xor_case_09
              solve( !KU( (~k2⊕~r0⊕~r1.1) ) @ #vk.4 )
                case c_xor_case_1
                by contradiction /* cyclic */
              next
                case c_xor_case_2
                by solve( !KU( ~k2 ) @ #vk.7 )
              next
                case c_xor_case_3
                by contradiction /* cyclic */
              next
                case coerce
                solve( !KD( (~k2⊕~r0⊕~r1.1) ) ▶₀ #vk.3 )
                  case acceptreader
                  by solve( (#vl.2, 0) ~~> (#vk.3, 0) )
                next
                  case initiatereader
                  by contradiction /* impossible chain */
                next
                  case tag1
                  solve( (#vl.2, 0) ~~> (#vk.3, 0) )
                    case d_0_fst
                    by contradiction /* impossible chain */
                  next
                    case d_0_snd
                    by solve( (#vr.7, 0) ~~> (#vk.3, 0) )
                  qed
                qed
              qed
            next
              case c_xor_case_10
              solve( !KU( (~k2⊕~r1⊕~r1.1) ) @ #vk.4 )
                case c_xor_case_1
                by contradiction /* cyclic */
              next
                case c_xor_case_2
                by solve( !KU( ~k2 ) @ #vk.7 )
              next
                case c_xor_case_3
                by contradiction /* cyclic */
              next
                case coerce
                solve( !KD( (~k2⊕~r1⊕~r1.1) ) ▶₀ #vk.3 )
                  case acceptreader
                  by solve( (#vl.2, 0) ~~> (#vk.3, 0) )
                next
                  case initiatereader
                  by contradiction /* impossible chain */
                next
                  case tag1
                  solve( (#vl.2, 0) ~~> (#vk.3, 0) )
                    case d_0_fst
                    by contradiction /* impossible chain */
                  next
                    case d_0_snd
                    by solve( (#vr.7, 0) ~~> (#vk.3, 0) )
                  qed
                qed
              qed
            next
              case c_xor_case_11
              solve( !KU( (~k2⊕~r1.1) ) @ #vk.4 )
                case c_xor
                by contradiction /* cyclic */
              next
                case coerce
                solve( !KD( (~k2⊕~r1.1) ) ▶₀ #vk.3 )
                  case acceptreader
                  by solve( (#vl.2, 0) ~~> (#vk.3, 0) )
                next
                  case initiatereader
                  by contradiction /* impossible chain */
                next
                  case tag1
                  solve( (#vl.2, 0) ~~> (#vk.3, 0) )
                    case d_0_fst
                    by contradiction /* impossible chain */
                  next
                    case d_0_snd
                    by solve( (#vr.7, 0) ~~> (#vk.3, 0) )
                  qed
                qed
              qed
            next
              case c_xor_case_12
              solve( !KU( (~r0⊕~r1⊕~r1.1) ) @ #vk.4 )
                case c_xor_case_1
                by contradiction /* cyclic */
              next
                case c_xor_case_2
                by contradiction /* cyclic */
              next
                case c_xor_case_3
                by contradiction /* cyclic */
              next
                case coerce
                solve( !KD( (~r0⊕~r1⊕~r1.1) ) ▶₀ #vk.3 )
                  case acceptreader
                  by solve( (#vl.2, 0) ~~> (#vk.3, 0) )
                next
                  case initiatereader
                  by contradiction /* impossible chain */
                next
                  case tag1
                  solve( (#vl.2, 0) ~~> (#vk.3, 0) )
                    case d_0_fst
                    by contradiction /* impossible chain */
                  next
                    case d_0_snd
                    by solve( (#vr.7, 0) ~~> (#vk.3, 0) )
                  qed
                qed
              qed
            next
              case c_xor_case_13
              solve( !KU( (~r0⊕~r1.1) ) @ #vk.4 )
                case c_xor
                by contradiction /* cyclic */
              next
                case coerce
                solve( !KD( (~r0⊕~r1.1) ) ▶₀ #vk.3 )
                  case acceptreader
                  by solve( (#vl.2, 0) ~~> (#vk.3, 0) )
                next
                  case initiatereader
                  by contradiction /* impossible chain */
                next
                  case tag1
                  solve( (#vl.2, 0) ~~> (#vk.3, 0) )
                    case d_0_fst
                    by contradiction /* impossible chain */
                  next
                    case d_0_snd
                    by solve( (#vr.7, 0) ~~> (#vk.3, 0) )
                  qed
                qed
              qed
            next
              case c_xor_case_14
              solve( !KU( (~r1⊕~r1.1) ) @ #vk.4 )
                case c_xor
                by contradiction /* cyclic */
              next
                case coerce
                solve( !KD( (~r1⊕~r1.1) ) ▶₀ #vk.3 )
                  case acceptreader
                  by solve( (#vl.2, 0) ~~> (#vk.3, 0) )
                next
                  case initiatereader
                  by contradiction /* impossible chain */
                next
                  case tag1
                  solve( (#vl.2, 0) ~~> (#vk.3, 0) )
                    case d_0_fst
                    by contradiction /* impossible chain */
                  next
                    case d_0_snd
                    by solve( (#vr.7, 0) ~~> (#vk.3, 0) )
                  qed
                qed
              qed
            next
              case c_xor_case_15
              by contradiction /* cyclic */
            next
              case coerce
              solve( !KD( (~k⊕~k2⊕~r0⊕~r1⊕~r1.1) ) ▶₀ #vk.2 )
                case acceptreader
                by solve( (#vl.2, 0) ~~> (#vk.2, 0) )
              next
                case initiatereader
                by contradiction /* impossible chain */
              next
                case tag1
                solve( (#vl.2, 0) ~~> (#vk.2, 0) )
                  case d_0_fst
                  by contradiction /* impossible chain */
                next
                  case d_0_snd
                  by solve( (#vr.7, 0) ~~> (#vk.2, 0) )
                qed
              qed
            qed
          qed
        qed
      next
        case split_case_3
        solve( !KU( (x⊕~r1.1) ) @ #vk.1 )
          case c_xor
          solve( !KU( (x⊕h((~k⊕~r1⊕x⊕~r1.1))) ) @ #vk.2 )
            case c_xor
            solve( !KU( h((~k⊕~r1⊕x⊕~r1.1)) ) @ #vk.5 )
              case c_h
              solve( !KU( (~k⊕~r1⊕x⊕~r1.1) ) @ #vk.6 )
                case c_xor_case_1
                solve( !KU( (~k⊕~r1⊕~r1.1) ) @ #vk.7 )
                  case c_xor_case_1
                  by contradiction /* cyclic */
                next
                  case c_xor_case_2
                  by solve( !KU( ~k ) @ #vk.9 )
                next
                  case c_xor_case_3
                  by contradiction /* cyclic */
                next
                  case coerce
                  solve( !KD( (~k⊕~r1⊕~r1.1) ) ▶₀ #vk.5 )
                    case acceptreader
                    by solve( (#vl.1, 0) ~~> (#vk.5, 0) )
                  next
                    case initiatereader
                    by contradiction /* impossible chain */
                  next
                    case tag1
                    solve( (#vl.1, 0) ~~> (#vk.5, 0) )
                      case d_0_fst
                      by contradiction /* impossible chain */
                    next
                      case d_0_snd
                      by solve( (#vr.5, 0) ~~> (#vk.5, 0) )
                    qed
                  qed
                qed
              next
                case c_xor_case_2
                by contradiction /* cyclic */
              next
                case c_xor_case_3
                solve( !KU( (~k⊕~r1.1) ) @ #vk.7 )
                  case c_xor
                  by contradiction /* cyclic */
                next
                  case coerce
                  solve( !KD( (~k⊕~r1.1) ) ▶₀ #vk.5 )
                    case acceptreader
                    by solve( (#vl.1, 0) ~~> (#vk.5, 0) )
                  next
                    case initiatereader
                    by contradiction /* impossible chain */
                  next
                    case tag1
                    solve( (#vl.1, 0) ~~> (#vk.5, 0) )
                      case d_0_fst
                      by contradiction /* impossible chain */
                    next
                      case d_0_snd
                      by solve( (#vr.5, 0) ~~> (#vk.5, 0) )
                    qed
                  qed
                qed
              next
                case c_xor_case_4
                by solve( !KU( ~k ) @ #vk.8 )
              next
                case c_xor_case_5
                solve( !KU( (~r1⊕~r1.1) ) @ #vk.7 )
                  case c_xor
                  by contradiction /* cyclic */
                next
                  case coerce
                  solve( !KD( (~r1⊕~r1.1) ) ▶₀ #vk.5 )
                    case acceptreader
                    by solve( (#vl.1, 0) ~~> (#vk.5, 0) )
                  next
                    case initiatereader
                    by contradiction /* impossible chain */
                  next
                    case tag1
                    solve( (#vl.1, 0) ~~> (#vk.5, 0) )
                      case d_0_fst
                      by contradiction /* impossible chain */
                    next
                      case d_0_snd
                      by solve( (#vr.5, 0) ~~> (#vk.5, 0) )
                    qed
                  qed
                qed
              next
                case c_xor_case_6
                by contradiction /* cyclic */
              next
                case c_xor_case_7
                by contradiction /* cyclic */
              next
                case coerce
                solve( !KD( (~k⊕~r1⊕x⊕~r1.1) ) ▶₀ #vk.4 )
                  case acceptreader
                  by solve( (#vl.1, 0) ~~> (#vk.4, 0) )
                next
                  case initiatereader
                  by contradiction /* impossible chain */
                next
                  case tag1
                  solve( (#vl.1, 0) ~~> (#vk.4, 0) )
                    case d_0_fst
                    by contradiction /* impossible chain */
                  next
                    case d_0_snd
                    by solve( (#vr.5, 0) ~~> (#vk.4, 0) )
                  qed
                qed
              qed
            next
              case tag1_case_1
              by contradiction /* cyclic */
            next
              case tag1_case_2
              solve( splitEqs(5) )
                case split_case_1
                by solve( !KU( ~k2 ) @ #vk.5 )
              next
                case split_case_2
                solve( !KU( (~k⊕~k2⊕~r1⊕x⊕~r1.1⊕~r1.2) ) @ #vk.6 )
                  case c_xor_case_01
                  by contradiction /* cyclic */
                next
                  case c_xor_case_02
                  solve( !KU( (~k⊕~k2⊕~r1⊕~r1.1⊕~r1.2) ) @ #vk.7 )
                    case c_xor_case_01
                    by contradiction /* cyclic */
                  next
                    case c_xor_case_02
                    by contradiction /* cyclic */
                  next
                    case c_xor_case_03
                    solve( !KU( (~k⊕~k2⊕~r1.2) ) @ #vk.8 )
                      case c_xor_case_1
                      by solve( !KU( ~k2 ) @ #vk.11 )
                    next
                      case c_xor_case_2
                      by solve( !KU( ~k ) @ #vk.11 )
                    next
                      case c_xor_case_3
                      by contradiction /* cyclic */
                    next
                      case coerce
                      solve( !KD( (~k⊕~k2⊕~r1.2) ) ▶₀ #vk.6 )
                        case acceptreader
                        by solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                      next
                        case initiatereader
                        by contradiction /* impossible chain */
                      next
                        case tag1
                        solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                          case d_0_fst
                          by contradiction /* impossible chain */
                        next
                          case d_0_snd
                          by solve( (#vr.7, 0) ~~> (#vk.6, 0) )
                        qed
                      qed
                    qed
                  next
                    case c_xor_case_04
                    by solve( !KU( ~k2 ) @ #vk.9 )
                  next
                    case c_xor_case_05
                    solve( !KU( (~k⊕~r1⊕~r1.2) ) @ #vk.8 )
                      case c_xor_case_1
                      by contradiction /* cyclic */
                    next
                      case c_xor_case_2
                      by solve( !KU( ~k ) @ #vk.11 )
                    next
                      case c_xor_case_3
                      by contradiction /* cyclic */
                    next
                      case coerce
                      solve( !KD( (~k⊕~r1⊕~r1.2) ) ▶₀ #vk.6 )
                        case acceptreader
                        by solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                      next
                        case initiatereader
                        by contradiction /* impossible chain */
                      next
                        case tag1
                        solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                          case d_0_fst
                          by contradiction /* impossible chain */
                        next
                          case d_0_snd
                          by solve( (#vr.7, 0) ~~> (#vk.6, 0) )
                        qed
                      qed
                    qed
                  next
                    case c_xor_case_06
                    solve( !KU( (~k⊕~r1.1⊕~r1.2) ) @ #vk.8 )
                      case c_xor_case_1
                      by contradiction /* cyclic */
                    next
                      case c_xor_case_2
                      by solve( !KU( ~k ) @ #vk.11 )
                    next
                      case c_xor_case_3
                      by contradiction /* cyclic */
                    next
                      case coerce
                      solve( !KD( (~k⊕~r1.1⊕~r1.2) ) ▶₀ #vk.6 )
                        case acceptreader
                        by solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                      next
                        case initiatereader
                        by contradiction /* impossible chain */
                      next
                        case tag1
                        solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                          case d_0_fst
                          by contradiction /* impossible chain */
                        next
                          case d_0_snd
                          by solve( (#vr.7, 0) ~~> (#vk.6, 0) )
                        qed
                      qed
                    qed
                  next
                    case c_xor_case_07
                    solve( !KU( (~k⊕~r1.2) ) @ #vk.8 )
                      case c_xor
                      by contradiction /* cyclic */
                    next
                      case coerce
                      solve( !KD( (~k⊕~r1.2) ) ▶₀ #vk.6 )
                        case acceptreader
                        by solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                      next
                        case initiatereader
                        by contradiction /* impossible chain */
                      next
                        case tag1
                        solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                          case d_0_fst
                          by contradiction /* impossible chain */
                        next
                          case d_0_snd
                          by solve( (#vr.7, 0) ~~> (#vk.6, 0) )
                        qed
                      qed
                    qed
                  next
                    case c_xor_case_08
                    by solve( !KU( ~k ) @ #vk.9 )
                  next
                    case c_xor_case_09
                    solve( !KU( (~k2⊕~r1⊕~r1.2) ) @ #vk.8 )
                      case c_xor_case_1
                      by contradiction /* cyclic */
                    next
                      case c_xor_case_2
                      by solve( !KU( ~k2 ) @ #vk.11 )
                    next
                      case c_xor_case_3
                      by contradiction /* cyclic */
                    next
                      case coerce
                      solve( !KD( (~k2⊕~r1⊕~r1.2) ) ▶₀ #vk.6 )
                        case acceptreader
                        by solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                      next
                        case initiatereader
                        by contradiction /* impossible chain */
                      next
                        case tag1
                        solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                          case d_0_fst
                          by contradiction /* impossible chain */
                        next
                          case d_0_snd
                          by solve( (#vr.7, 0) ~~> (#vk.6, 0) )
                        qed
                      qed
                    qed
                  next
                    case c_xor_case_10
                    solve( !KU( (~k2⊕~r1.1⊕~r1.2) ) @ #vk.8 )
                      case c_xor_case_1
                      by contradiction /* cyclic */
                    next
                      case c_xor_case_2
                      by solve( !KU( ~k2 ) @ #vk.11 )
                    next
                      case c_xor_case_3
                      by contradiction /* cyclic */
                    next
                      case coerce
                      solve( !KD( (~k2⊕~r1.1⊕~r1.2) ) ▶₀ #vk.6 )
                        case acceptreader
                        by solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                      next
                        case initiatereader
                        by contradiction /* impossible chain */
                      next
                        case tag1
                        solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                          case d_0_fst
                          by contradiction /* impossible chain */
                        next
                          case d_0_snd
                          by solve( (#vr.7, 0) ~~> (#vk.6, 0) )
                        qed
                      qed
                    qed
                  next
                    case c_xor_case_11
                    solve( !KU( (~k2⊕~r1.2) ) @ #vk.8 )
                      case c_xor
                      by contradiction /* cyclic */
                    next
                      case coerce
                      solve( !KD( (~k2⊕~r1.2) ) ▶₀ #vk.6 )
                        case acceptreader
                        by solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                      next
                        case initiatereader
                        by contradiction /* impossible chain */
                      next
                        case tag1
                        solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                          case d_0_fst
                          by contradiction /* impossible chain */
                        next
                          case d_0_snd
                          by solve( (#vr.7, 0) ~~> (#vk.6, 0) )
                        qed
                      qed
                    qed
                  next
                    case c_xor_case_12
                    solve( !KU( (~r1⊕~r1.1⊕~r1.2) ) @ #vk.8 )
                      case c_xor_case_1
                      by contradiction /* cyclic */
                    next
                      case c_xor_case_2
                      by contradiction /* cyclic */
                    next
                      case c_xor_case_3
                      by contradiction /* cyclic */
                    next
                      case coerce
                      solve( !KD( (~r1⊕~r1.1⊕~r1.2) ) ▶₀ #vk.6 )
                        case acceptreader
                        by solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                      next
                        case initiatereader
                        by contradiction /* impossible chain */
                      next
                        case tag1
                        solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                          case d_0_fst
                          by contradiction /* impossible chain */
                        next
                          case d_0_snd
                          by solve( (#vr.7, 0) ~~> (#vk.6, 0) )
                        qed
                      qed
                    qed
                  next
                    case c_xor_case_13
                    solve( !KU( (~r1⊕~r1.2) ) @ #vk.8 )
                      case c_xor
                      by contradiction /* cyclic */
                    next
                      case coerce
                      solve( !KD( (~r1⊕~r1.2) ) ▶₀ #vk.6 )
                        case acceptreader
                        by solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                      next
                        case initiatereader
                        by contradiction /* impossible chain */
                      next
                        case tag1
                        solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                          case d_0_fst
                          by contradiction /* impossible chain */
                        next
                          case d_0_snd
                          by solve( (#vr.7, 0) ~~> (#vk.6, 0) )
                        qed
                      qed
                    qed
                  next
                    case c_xor_case_14
                    solve( !KU( (~r1.1⊕~r1.2) ) @ #vk.8 )
                      case c_xor
                      by contradiction /* cyclic */
                    next
                      case coerce
                      solve( !KD( (~r1.1⊕~r1.2) ) ▶₀ #vk.6 )
                        case acceptreader
                        by solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                      next
                        case initiatereader
                        by contradiction /* impossible chain */
                      next
                        case tag1
                        solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                          case d_0_fst
                          by contradiction /* impossible chain */
                        next
                          case d_0_snd
                          by solve( (#vr.7, 0) ~~> (#vk.6, 0) )
                        qed
                      qed
                    qed
                  next
                    case c_xor_case_15
                    by contradiction /* cyclic */
                  next
                    case coerce
                    solve( !KD( (~k⊕~k2⊕~r1⊕~r1.1⊕~r1.2) ) ▶₀ #vk.5 )
                      case acceptreader
                      by solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                    next
                      case initiatereader
                      by contradiction /* impossible chain */
                    next
                      case tag1
                      solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                        case d_0_fst
                        by contradiction /* impossible chain */
                      next
                        case d_0_snd
                        by solve( (#vr.7, 0) ~~> (#vk.5, 0) )
                      qed
                    qed
                  qed
                next
                  case c_xor_case_03
                  by contradiction /* cyclic */
                next
                  case c_xor_case_04
                  by contradiction /* cyclic */
                next
                  case c_xor_case_05
                  solve( !KU( (~k⊕~k2⊕x⊕~r1.2) ) @ #vk.7 )
                    case c_xor_case_1
                    solve( !KU( (~r1⊕~r1.1) ) @ #vk.8 )
                      case c_xor
                      by contradiction /* cyclic */
                    next
                      case coerce
                      solve( !KD( (~r1⊕~r1.1) ) ▶₀ #vk.6 )
                        case acceptreader
                        by solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                      next
                        case initiatereader
                        by contradiction /* impossible chain */
                      next
                        case tag1
                        solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                          case d_0_fst
                          by contradiction /* impossible chain */
                        next
                          case d_0_snd
                          by solve( (#vr.7, 0) ~~> (#vk.6, 0) )
                        qed
                      qed
                    qed
                  next
                    case c_xor_case_2
                    by solve( !KU( ~k2 ) @ #vk.10 )
                  next
                    case c_xor_case_3
                    solve( !KU( (~r1⊕~r1.1) ) @ #vk.8 )
                      case c_xor
                      by contradiction /* cyclic */
                    next
                      case coerce
                      solve( !KD( (~r1⊕~r1.1) ) ▶₀ #vk.6 )
                        case acceptreader
                        by solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                      next
                        case initiatereader
                        by contradiction /* impossible chain */
                      next
                        case tag1
                        solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                          case d_0_fst
                          by contradiction /* impossible chain */
                        next
                          case d_0_snd
                          by solve( (#vr.7, 0) ~~> (#vk.6, 0) )
                        qed
                      qed
                    qed
                  next
                    case c_xor_case_4
                    by solve( !KU( ~k ) @ #vk.10 )
                  next
                    case c_xor_case_5
                    solve( !KU( (~r1⊕~r1.1) ) @ #vk.8 )
                      case c_xor
                      by contradiction /* cyclic */
                    next
                      case coerce
                      solve( !KD( (~r1⊕~r1.1) ) ▶₀ #vk.6 )
                        case acceptreader
                        by solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                      next
                        case initiatereader
                        by contradiction /* impossible chain */
                      next
                        case tag1
                        solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                          case d_0_fst
                          by contradiction /* impossible chain */
                        next
                          case d_0_snd
                          by solve( (#vr.7, 0) ~~> (#vk.6, 0) )
                        qed
                      qed
                    qed
                  next
                    case c_xor_case_6
                    solve( !KU( (~r1⊕~r1.1) ) @ #vk.8 )
                      case c_xor
                      by contradiction /* cyclic */
                    next
                      case coerce
                      solve( !KD( (~r1⊕~r1.1) ) ▶₀ #vk.6 )
                        case acceptreader
                        by solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                      next
                        case initiatereader
                        by contradiction /* impossible chain */
                      next
                        case tag1
                        solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                          case d_0_fst
                          by contradiction /* impossible chain */
                        next
                          case d_0_snd
                          by solve( (#vr.7, 0) ~~> (#vk.6, 0) )
                        qed
                      qed
                    qed
                  next
                    case c_xor_case_7
                    by contradiction /* cyclic */
                  next
                    case coerce
                    solve( !KD( (~k⊕~k2⊕x⊕~r1.2) ) ▶₀ #vk.5 )
                      case acceptreader
                      by solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                    next
                      case initiatereader
                      by contradiction /* impossible chain */
                    next
                      case tag1
                      solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                        case d_0_fst
                        by contradiction /* impossible chain */
                      next
                        case d_0_snd
                        by solve( (#vr.7, 0) ~~> (#vk.5, 0) )
                      qed
                    qed
                  qed
                next
                  case c_xor_case_06
                  solve( !KU( (~k⊕~k2⊕~r1.1⊕~r1.2) ) @ #vk.7 )
                    case c_xor_case_1
                    by contradiction /* cyclic */
                  next
                    case c_xor_case_2
                    by solve( !KU( ~k2 ) @ #vk.10 )
                  next
                    case c_xor_case_3
                    solve( !KU( (~r1⊕x) ) @ #vk.8 )
                      case c_xor
                      by contradiction /* cyclic */
                    next
                      case coerce
                      solve( !KD( (~r1⊕x) ) ▶₀ #vk.6 )
                        case acceptreader
                        by solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                      next
                        case initiatereader
                        by contradiction /* impossible chain */
                      next
                        case tag1
                        solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                          case d_0_fst
                          by contradiction /* impossible chain */
                        next
                          case d_0_snd
                          by solve( (#vr.7, 0) ~~> (#vk.6, 0) )
                        qed
                      qed
                    qed
                  next
                    case c_xor_case_4
                    by solve( !KU( ~k ) @ #vk.10 )
                  next
                    case c_xor_case_5
                    solve( !KU( (~r1⊕x) ) @ #vk.8 )
                      case c_xor
                      by contradiction /* cyclic */
                    next
                      case coerce
                      solve( !KD( (~r1⊕x) ) ▶₀ #vk.6 )
                        case acceptreader
                        by solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                      next
                        case initiatereader
                        by contradiction /* impossible chain */
                      next
                        case tag1
                        solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                          case d_0_fst
                          by contradiction /* impossible chain */
                        next
                          case d_0_snd
                          by solve( (#vr.7, 0) ~~> (#vk.6, 0) )
                        qed
                      qed
                    qed
                  next
                    case c_xor_case_6
                    solve( !KU( (~r1⊕x) ) @ #vk.8 )
                      case c_xor
                      by contradiction /* cyclic */
                    next
                      case coerce
                      solve( !KD( (~r1⊕x) ) ▶₀ #vk.6 )
                        case acceptreader
                        by solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                      next
                        case initiatereader
                        by contradiction /* impossible chain */
                      next
                        case tag1
                        solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                          case d_0_fst
                          by contradiction /* impossible chain */
                        next
                          case d_0_snd
                          by solve( (#vr.7, 0) ~~> (#vk.6, 0) )
                        qed
                      qed
                    qed
                  next
                    case c_xor_case_7
                    by contradiction /* cyclic */
                  next
                    case coerce
                    solve( !KD( (~k⊕~k2⊕~r1.1⊕~r1.2) ) ▶₀ #vk.5 )
                      case acceptreader
                      by solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                    next
                      case initiatereader
                      by contradiction /* impossible chain */
                    next
                      case tag1
                      solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                        case d_0_fst
                        by contradiction /* impossible chain */
                      next
                        case d_0_snd
                        by solve( (#vr.7, 0) ~~> (#vk.5, 0) )
                      qed
                    qed
                  qed
                next
                  case c_xor_case_07
                  solve( !KU( (~k⊕~k2⊕~r1.2) ) @ #vk.7 )
                    case c_xor_case_1
                    by solve( !KU( ~k2 ) @ #vk.10 )
                  next
                    case c_xor_case_2
                    by solve( !KU( ~k ) @ #vk.10 )
                  next
                    case c_xor_case_3
                    by contradiction /* cyclic */
                  next
                    case coerce
                    solve( !KD( (~k⊕~k2⊕~r1.2) ) ▶₀ #vk.5 )
                      case acceptreader
                      by solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                    next
                      case initiatereader
                      by contradiction /* impossible chain */
                    next
                      case tag1
                      solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                        case d_0_fst
                        by contradiction /* impossible chain */
                      next
                        case d_0_snd
                        by solve( (#vr.7, 0) ~~> (#vk.5, 0) )
                      qed
                    qed
                  qed
                next
                  case c_xor_case_08
                  by solve( !KU( ~k2 ) @ #vk.8 )
                next
                  case c_xor_case_09
                  solve( !KU( (~k⊕~r1⊕x⊕~r1.2) ) @ #vk.7 )
                    case c_xor_case_1
                    solve( !KU( (~k2⊕~r1.1) ) @ #vk.8 )
                      case c_xor
                      by contradiction /* cyclic */
                    next
                      case coerce
                      solve( !KD( (~k2⊕~r1.1) ) ▶₀ #vk.6 )
                        case acceptreader
                        by solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                      next
                        case initiatereader
                        by contradiction /* impossible chain */
                      next
                        case tag1
                        solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                          case d_0_fst
                          by contradiction /* impossible chain */
                        next
                          case d_0_snd
                          by solve( (#vr.7, 0) ~~> (#vk.6, 0) )
                        qed
                      qed
                    qed
                  next
                    case c_xor_case_2
                    by contradiction /* cyclic */
                  next
                    case c_xor_case_3
                    solve( !KU( (~k2⊕~r1.1) ) @ #vk.8 )
                      case c_xor
                      by contradiction /* cyclic */
                    next
                      case coerce
                      solve( !KD( (~k2⊕~r1.1) ) ▶₀ #vk.6 )
                        case acceptreader
                        by solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                      next
                        case initiatereader
                        by contradiction /* impossible chain */
                      next
                        case tag1
                        solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                          case d_0_fst
                          by contradiction /* impossible chain */
                        next
                          case d_0_snd
                          by solve( (#vr.7, 0) ~~> (#vk.6, 0) )
                        qed
                      qed
                    qed
                  next
                    case c_xor_case_4
                    by solve( !KU( ~k ) @ #vk.10 )
                  next
                    case c_xor_case_5
                    solve( !KU( (~k2⊕~r1.1) ) @ #vk.8 )
                      case c_xor
                      by contradiction /* cyclic */
                    next
                      case coerce
                      solve( !KD( (~k2⊕~r1.1) ) ▶₀ #vk.6 )
                        case acceptreader
                        by solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                      next
                        case initiatereader
                        by contradiction /* impossible chain */
                      next
                        case tag1
                        solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                          case d_0_fst
                          by contradiction /* impossible chain */
                        next
                          case d_0_snd
                          by solve( (#vr.7, 0) ~~> (#vk.6, 0) )
                        qed
                      qed
                    qed
                  next
                    case c_xor_case_6
                    solve( !KU( (~k2⊕~r1.1) ) @ #vk.8 )
                      case c_xor
                      by contradiction /* cyclic */
                    next
                      case coerce
                      solve( !KD( (~k2⊕~r1.1) ) ▶₀ #vk.6 )
                        case acceptreader
                        by solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                      next
                        case initiatereader
                        by contradiction /* impossible chain */
                      next
                        case tag1
                        solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                          case d_0_fst
                          by contradiction /* impossible chain */
                        next
                          case d_0_snd
                          by solve( (#vr.7, 0) ~~> (#vk.6, 0) )
                        qed
                      qed
                    qed
                  next
                    case c_xor_case_7
                    by contradiction /* cyclic */
                  next
                    case coerce
                    solve( !KD( (~k⊕~r1⊕x⊕~r1.2) ) ▶₀ #vk.5 )
                      case acceptreader
                      by solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                    next
                      case initiatereader
                      by contradiction /* impossible chain */
                    next
                      case tag1
                      solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                        case d_0_fst
                        by contradiction /* impossible chain */
                      next
                        case d_0_snd
                        by solve( (#vr.7, 0) ~~> (#vk.5, 0) )
                      qed
                    qed
                  qed
                next
                  case c_xor_case_10
                  solve( !KU( (~k⊕~r1⊕~r1.1⊕~r1.2) ) @ #vk.7 )
                    case c_xor_case_1
                    by contradiction /* cyclic */
                  next
                    case c_xor_case_2
                    by contradiction /* cyclic */
                  next
                    case c_xor_case_3
                    solve( !KU( (~k2⊕x) ) @ #vk.8 )
                      case c_xor
                      by solve( !KU( ~k2 ) @ #vk.11 )
                    next
                      case coerce
                      solve( !KD( (~k2⊕x) ) ▶₀ #vk.6 )
                        case acceptreader
                        by solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                      next
                        case initiatereader
                        by contradiction /* impossible chain */
                      next
                        case tag1
                        solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                          case d_0_fst
                          by contradiction /* impossible chain */
                        next
                          case d_0_snd
                          by solve( (#vr.7, 0) ~~> (#vk.6, 0) )
                        qed
                      qed
                    qed
                  next
                    case c_xor_case_4
                    by solve( !KU( ~k ) @ #vk.10 )
                  next
                    case c_xor_case_5
                    solve( !KU( (~k2⊕x) ) @ #vk.8 )
                      case c_xor
                      by solve( !KU( ~k2 ) @ #vk.11 )
                    next
                      case coerce
                      solve( !KD( (~k2⊕x) ) ▶₀ #vk.6 )
                        case acceptreader
                        by solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                      next
                        case initiatereader
                        by contradiction /* impossible chain */
                      next
                        case tag1
                        solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                          case d_0_fst
                          by contradiction /* impossible chain */
                        next
                          case d_0_snd
                          by solve( (#vr.7, 0) ~~> (#vk.6, 0) )
                        qed
                      qed
                    qed
                  next
                    case c_xor_case_6
                    solve( !KU( (~k2⊕x) ) @ #vk.8 )
                      case c_xor
                      by solve( !KU( ~k2 ) @ #vk.11 )
                    next
                      case coerce
                      solve( !KD( (~k2⊕x) ) ▶₀ #vk.6 )
                        case acceptreader
                        by solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                      next
                        case initiatereader
                        by contradiction /* impossible chain */
                      next
                        case tag1
                        solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                          case d_0_fst
                          by contradiction /* impossible chain */
                        next
                          case d_0_snd
                          by solve( (#vr.7, 0) ~~> (#vk.6, 0) )
                        qed
                      qed
                    qed
                  next
                    case c_xor_case_7
                    by contradiction /* cyclic */
                  next
                    case coerce
                    solve( !KD( (~k⊕~r1⊕~r1.1⊕~r1.2) ) ▶₀ #vk.5 )
                      case acceptreader
                      by solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                    next
                      case initiatereader
                      by contradiction /* impossible chain */
                    next
                      case tag1
                      solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                        case d_0_fst
                        by contradiction /* impossible chain */
                      next
                        case d_0_snd
                        by solve( (#vr.7, 0) ~~> (#vk.5, 0) )
                      qed
                    qed
                  qed
                next
                  case c_xor_case_11
                  solve( !KU( (~k⊕~r1⊕~r1.2) ) @ #vk.7 )
                    case c_xor_case_1
                    by contradiction /* cyclic */
                  next
                    case c_xor_case_2
                    by solve( !KU( ~k ) @ #vk.10 )
                  next
                    case c_xor_case_3
                    by contradiction /* cyclic */
                  next
                    case coerce
                    solve( !KD( (~k⊕~r1⊕~r1.2) ) ▶₀ #vk.5 )
                      case acceptreader
                      by solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                    next
                      case initiatereader
                      by contradiction /* impossible chain */
                    next
                      case tag1
                      solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                        case d_0_fst
                        by contradiction /* impossible chain */
                      next
                        case d_0_snd
                        by solve( (#vr.7, 0) ~~> (#vk.5, 0) )
                      qed
                    qed
                  qed
                next
                  case c_xor_case_12
                  solve( !KU( (~k⊕x⊕~r1.1⊕~r1.2) ) @ #vk.7 )
                    case c_xor_case_1
                    by contradiction /* cyclic */
                  next
                    case c_xor_case_2
                    solve( !KU( (~k2⊕~r1) ) @ #vk.8 )
                      case c_xor
                      by contradiction /* cyclic */
                    next
                      case coerce
                      solve( !KD( (~k2⊕~r1) ) ▶₀ #vk.6 )
                        case acceptreader
                        by solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                      next
                        case initiatereader
                        by contradiction /* impossible chain */
                      next
                        case tag1
                        solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                          case d_0_fst
                          by contradiction /* impossible chain */
                        next
                          case d_0_snd
                          by solve( (#vr.7, 0) ~~> (#vk.6, 0) )
                        qed
                      qed
                    qed
                  next
                    case c_xor_case_3
                    by contradiction /* cyclic */
                  next
                    case c_xor_case_4
                    by solve( !KU( ~k ) @ #vk.10 )
                  next
                    case c_xor_case_5
                    solve( !KU( (~k2⊕~r1) ) @ #vk.8 )
                      case c_xor
                      by contradiction /* cyclic */
                    next
                      case coerce
                      solve( !KD( (~k2⊕~r1) ) ▶₀ #vk.6 )
                        case acceptreader
                        by solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                      next
                        case initiatereader
                        by contradiction /* impossible chain */
                      next
                        case tag1
                        solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                          case d_0_fst
                          by contradiction /* impossible chain */
                        next
                          case d_0_snd
                          by solve( (#vr.7, 0) ~~> (#vk.6, 0) )
                        qed
                      qed
                    qed
                  next
                    case c_xor_case_6
                    solve( !KU( (~k2⊕~r1) ) @ #vk.8 )
                      case c_xor
                      by contradiction /* cyclic */
                    next
                      case coerce
                      solve( !KD( (~k2⊕~r1) ) ▶₀ #vk.6 )
                        case acceptreader
                        by solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                      next
                        case initiatereader
                        by contradiction /* impossible chain */
                      next
                        case tag1
                        solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                          case d_0_fst
                          by contradiction /* impossible chain */
                        next
                          case d_0_snd
                          by solve( (#vr.7, 0) ~~> (#vk.6, 0) )
                        qed
                      qed
                    qed
                  next
                    case c_xor_case_7
                    by contradiction /* cyclic */
                  next
                    case coerce
                    solve( !KD( (~k⊕x⊕~r1.1⊕~r1.2) ) ▶₀ #vk.5 )
                      case acceptreader
                      by solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                    next
                      case initiatereader
                      by contradiction /* impossible chain */
                    next
                      case tag1
                      solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                        case d_0_fst
                        by contradiction /* impossible chain */
                      next
                        case d_0_snd
                        by solve( (#vr.7, 0) ~~> (#vk.5, 0) )
                      qed
                    qed
                  qed
                next
                  case c_xor_case_13
                  solve( !KU( (~k⊕x⊕~r1.2) ) @ #vk.7 )
                    case c_xor_case_1
                    solve( !KU( (~k2⊕~r1⊕~r1.1) ) @ #vk.8 )
                      case c_xor_case_1
                      by contradiction /* cyclic */
                    next
                      case c_xor_case_2
                      by solve( !KU( ~k2 ) @ #vk.11 )
                    next
                      case c_xor_case_3
                      by contradiction /* cyclic */
                    next
                      case coerce
                      solve( !KD( (~k2⊕~r1⊕~r1.1) ) ▶₀ #vk.6 )
                        case acceptreader
                        by solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                      next
                        case initiatereader
                        by contradiction /* impossible chain */
                      next
                        case tag1
                        solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                          case d_0_fst
                          by contradiction /* impossible chain */
                        next
                          case d_0_snd
                          by solve( (#vr.7, 0) ~~> (#vk.6, 0) )
                        qed
                      qed
                    qed
                  next
                    case c_xor_case_2
                    by solve( !KU( ~k ) @ #vk.10 )
                  next
                    case c_xor_case_3
                    by contradiction /* cyclic */
                  next
                    case coerce
                    solve( !KD( (~k⊕x⊕~r1.2) ) ▶₀ #vk.5 )
                      case acceptreader
                      by solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                    next
                      case initiatereader
                      by contradiction /* impossible chain */
                    next
                      case tag1
                      solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                        case d_0_fst
                        by contradiction /* impossible chain */
                      next
                        case d_0_snd
                        by solve( (#vr.7, 0) ~~> (#vk.5, 0) )
                      qed
                    qed
                  qed
                next
                  case c_xor_case_14
                  solve( !KU( (~k⊕~r1.1⊕~r1.2) ) @ #vk.7 )
                    case c_xor_case_1
                    by contradiction /* cyclic */
                  next
                    case c_xor_case_2
                    by solve( !KU( ~k ) @ #vk.10 )
                  next
                    case c_xor_case_3
                    by contradiction /* cyclic */
                  next
                    case coerce
                    solve( !KD( (~k⊕~r1.1⊕~r1.2) ) ▶₀ #vk.5 )
                      case acceptreader
                      by solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                    next
                      case initiatereader
                      by contradiction /* impossible chain */
                    next
                      case tag1
                      solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                        case d_0_fst
                        by contradiction /* impossible chain */
                      next
                        case d_0_snd
                        by solve( (#vr.7, 0) ~~> (#vk.5, 0) )
                      qed
                    qed
                  qed
                next
                  case c_xor_case_15
                  solve( !KU( (~k⊕~r1.2) ) @ #vk.7 )
                    case c_xor
                    by contradiction /* cyclic */
                  next
                    case coerce
                    solve( !KD( (~k⊕~r1.2) ) ▶₀ #vk.5 )
                      case acceptreader
                      by solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                    next
                      case initiatereader
                      by contradiction /* impossible chain */
                    next
                      case tag1
                      solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                        case d_0_fst
                        by contradiction /* impossible chain */
                      next
                        case d_0_snd
                        by solve( (#vr.7, 0) ~~> (#vk.5, 0) )
                      qed
                    qed
                  qed
                next
                  case c_xor_case_16
                  by solve( !KU( ~k ) @ #vk.8 )
                next
                  case c_xor_case_17
                  solve( !KU( (~k2⊕~r1⊕x⊕~r1.2) ) @ #vk.7 )
                    case c_xor_case_1
                    solve( !KU( (~k⊕~r1.1) ) @ #vk.8 )
                      case c_xor
                      by contradiction /* cyclic */
                    next
                      case coerce
                      solve( !KD( (~k⊕~r1.1) ) ▶₀ #vk.6 )
                        case acceptreader
                        by solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                      next
                        case initiatereader
                        by contradiction /* impossible chain */
                      next
                        case tag1
                        solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                          case d_0_fst
                          by contradiction /* impossible chain */
                        next
                          case d_0_snd
                          by solve( (#vr.7, 0) ~~> (#vk.6, 0) )
                        qed
                      qed
                    qed
                  next
                    case c_xor_case_2
                    by contradiction /* cyclic */
                  next
                    case c_xor_case_3
                    solve( !KU( (~k⊕~r1.1) ) @ #vk.8 )
                      case c_xor
                      by contradiction /* cyclic */
                    next
                      case coerce
                      solve( !KD( (~k⊕~r1.1) ) ▶₀ #vk.6 )
                        case acceptreader
                        by solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                      next
                        case initiatereader
                        by contradiction /* impossible chain */
                      next
                        case tag1
                        solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                          case d_0_fst
                          by contradiction /* impossible chain */
                        next
                          case d_0_snd
                          by solve( (#vr.7, 0) ~~> (#vk.6, 0) )
                        qed
                      qed
                    qed
                  next
                    case c_xor_case_4
                    by solve( !KU( ~k2 ) @ #vk.10 )
                  next
                    case c_xor_case_5
                    solve( !KU( (~k⊕~r1.1) ) @ #vk.8 )
                      case c_xor
                      by contradiction /* cyclic */
                    next
                      case coerce
                      solve( !KD( (~k⊕~r1.1) ) ▶₀ #vk.6 )
                        case acceptreader
                        by solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                      next
                        case initiatereader
                        by contradiction /* impossible chain */
                      next
                        case tag1
                        solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                          case d_0_fst
                          by contradiction /* impossible chain */
                        next
                          case d_0_snd
                          by solve( (#vr.7, 0) ~~> (#vk.6, 0) )
                        qed
                      qed
                    qed
                  next
                    case c_xor_case_6
                    solve( !KU( (~k⊕~r1.1) ) @ #vk.8 )
                      case c_xor
                      by contradiction /* cyclic */
                    next
                      case coerce
                      solve( !KD( (~k⊕~r1.1) ) ▶₀ #vk.6 )
                        case acceptreader
                        by solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                      next
                        case initiatereader
                        by contradiction /* impossible chain */
                      next
                        case tag1
                        solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                          case d_0_fst
                          by contradiction /* impossible chain */
                        next
                          case d_0_snd
                          by solve( (#vr.7, 0) ~~> (#vk.6, 0) )
                        qed
                      qed
                    qed
                  next
                    case c_xor_case_7
                    by contradiction /* cyclic */
                  next
                    case coerce
                    solve( !KD( (~k2⊕~r1⊕x⊕~r1.2) ) ▶₀ #vk.5 )
                      case acceptreader
                      by solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                    next
                      case initiatereader
                      by contradiction /* impossible chain */
                    next
                      case tag1
                      solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                        case d_0_fst
                        by contradiction /* impossible chain */
                      next
                        case d_0_snd
                        by solve( (#vr.7, 0) ~~> (#vk.5, 0) )
                      qed
                    qed
                  qed
                next
                  case c_xor_case_18
                  solve( !KU( (~k2⊕~r1⊕~r1.1⊕~r1.2) ) @ #vk.7 )
                    case c_xor_case_1
                    by contradiction /* cyclic */
                  next
                    case c_xor_case_2
                    by contradiction /* cyclic */
                  next
                    case c_xor_case_3
                    solve( !KU( (~k⊕x) ) @ #vk.8 )
                      case c_xor
                      by solve( !KU( ~k ) @ #vk.11 )
                    next
                      case coerce
                      solve( !KD( (~k⊕x) ) ▶₀ #vk.6 )
                        case acceptreader
                        by solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                      next
                        case initiatereader
                        by contradiction /* impossible chain */
                      next
                        case tag1
                        solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                          case d_0_fst
                          by contradiction /* impossible chain */
                        next
                          case d_0_snd
                          by solve( (#vr.7, 0) ~~> (#vk.6, 0) )
                        qed
                      qed
                    qed
                  next
                    case c_xor_case_4
                    by solve( !KU( ~k2 ) @ #vk.10 )
                  next
                    case c_xor_case_5
                    solve( !KU( (~k⊕x) ) @ #vk.8 )
                      case c_xor
                      by solve( !KU( ~k ) @ #vk.11 )
                    next
                      case coerce
                      solve( !KD( (~k⊕x) ) ▶₀ #vk.6 )
                        case acceptreader
                        by solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                      next
                        case initiatereader
                        by contradiction /* impossible chain */
                      next
                        case tag1
                        solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                          case d_0_fst
                          by contradiction /* impossible chain */
                        next
                          case d_0_snd
                          by solve( (#vr.7, 0) ~~> (#vk.6, 0) )
                        qed
                      qed
                    qed
                  next
                    case c_xor_case_6
                    solve( !KU( (~k⊕x) ) @ #vk.8 )
                      case c_xor
                      by solve( !KU( ~k ) @ #vk.11 )
                    next
                      case coerce
                      solve( !KD( (~k⊕x) ) ▶₀ #vk.6 )
                        case acceptreader
                        by solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                      next
                        case initiatereader
                        by contradiction /* impossible chain */
                      next
                        case tag1
                        solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                          case d_0_fst
                          by contradiction /* impossible chain */
                        next
                          case d_0_snd
                          by solve( (#vr.7, 0) ~~> (#vk.6, 0) )
                        qed
                      qed
                    qed
                  next
                    case c_xor_case_7
                    by contradiction /* cyclic */
                  next
                    case coerce
                    solve( !KD( (~k2⊕~r1⊕~r1.1⊕~r1.2) ) ▶₀ #vk.5 )
                      case acceptreader
                      by solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                    next
                      case initiatereader
                      by contradiction /* impossible chain */
                    next
                      case tag1
                      solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                        case d_0_fst
                        by contradiction /* impossible chain */
                      next
                        case d_0_snd
                        by solve( (#vr.7, 0) ~~> (#vk.5, 0) )
                      qed
                    qed
                  qed
                next
                  case c_xor_case_19
                  solve( !KU( (~k2⊕~r1⊕~r1.2) ) @ #vk.7 )
                    case c_xor_case_1
                    by contradiction /* cyclic */
                  next
                    case c_xor_case_2
                    by solve( !KU( ~k2 ) @ #vk.10 )
                  next
                    case c_xor_case_3
                    by contradiction /* cyclic */
                  next
                    case coerce
                    solve( !KD( (~k2⊕~r1⊕~r1.2) ) ▶₀ #vk.5 )
                      case acceptreader
                      by solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                    next
                      case initiatereader
                      by contradiction /* impossible chain */
                    next
                      case tag1
                      solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                        case d_0_fst
                        by contradiction /* impossible chain */
                      next
                        case d_0_snd
                        by solve( (#vr.7, 0) ~~> (#vk.5, 0) )
                      qed
                    qed
                  qed
                next
                  case c_xor_case_20
                  solve( !KU( (~k2⊕x⊕~r1.1⊕~r1.2) ) @ #vk.7 )
                    case c_xor_case_1
                    by contradiction /* cyclic */
                  next
                    case c_xor_case_2
                    solve( !KU( (~k⊕~r1) ) @ #vk.8 )
                      case c_xor
                      by contradiction /* cyclic */
                    next
                      case coerce
                      solve( !KD( (~k⊕~r1) ) ▶₀ #vk.6 )
                        case acceptreader
                        by solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                      next
                        case initiatereader
                        by contradiction /* impossible chain */
                      next
                        case tag1
                        solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                          case d_0_fst
                          by contradiction /* impossible chain */
                        next
                          case d_0_snd
                          by solve( (#vr.7, 0) ~~> (#vk.6, 0) )
                        qed
                      qed
                    qed
                  next
                    case c_xor_case_3
                    by contradiction /* cyclic */
                  next
                    case c_xor_case_4
                    by solve( !KU( ~k2 ) @ #vk.10 )
                  next
                    case c_xor_case_5
                    solve( !KU( (~k⊕~r1) ) @ #vk.8 )
                      case c_xor
                      by contradiction /* cyclic */
                    next
                      case coerce
                      solve( !KD( (~k⊕~r1) ) ▶₀ #vk.6 )
                        case acceptreader
                        by solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                      next
                        case initiatereader
                        by contradiction /* impossible chain */
                      next
                        case tag1
                        solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                          case d_0_fst
                          by contradiction /* impossible chain */
                        next
                          case d_0_snd
                          by solve( (#vr.7, 0) ~~> (#vk.6, 0) )
                        qed
                      qed
                    qed
                  next
                    case c_xor_case_6
                    solve( !KU( (~k⊕~r1) ) @ #vk.8 )
                      case c_xor
                      by contradiction /* cyclic */
                    next
                      case coerce
                      solve( !KD( (~k⊕~r1) ) ▶₀ #vk.6 )
                        case acceptreader
                        by solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                      next
                        case initiatereader
                        by contradiction /* impossible chain */
                      next
                        case tag1
                        solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                          case d_0_fst
                          by contradiction /* impossible chain */
                        next
                          case d_0_snd
                          by solve( (#vr.7, 0) ~~> (#vk.6, 0) )
                        qed
                      qed
                    qed
                  next
                    case c_xor_case_7
                    by contradiction /* cyclic */
                  next
                    case coerce
                    solve( !KD( (~k2⊕x⊕~r1.1⊕~r1.2) ) ▶₀ #vk.5 )
                      case acceptreader
                      by solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                    next
                      case initiatereader
                      by contradiction /* impossible chain */
                    next
                      case tag1
                      solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                        case d_0_fst
                        by contradiction /* impossible chain */
                      next
                        case d_0_snd
                        by solve( (#vr.7, 0) ~~> (#vk.5, 0) )
                      qed
                    qed
                  qed
                next
                  case c_xor_case_21
                  solve( !KU( (~k2⊕x⊕~r1.2) ) @ #vk.7 )
                    case c_xor_case_1
                    solve( !KU( (~k⊕~r1⊕~r1.1) ) @ #vk.8 )
                      case c_xor_case_1
                      by contradiction /* cyclic */
                    next
                      case c_xor_case_2
                      by solve( !KU( ~k ) @ #vk.11 )
                    next
                      case c_xor_case_3
                      by contradiction /* cyclic */
                    next
                      case coerce
                      solve( !KD( (~k⊕~r1⊕~r1.1) ) ▶₀ #vk.6 )
                        case acceptreader
                        by solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                      next
                        case initiatereader
                        by contradiction /* impossible chain */
                      next
                        case tag1
                        solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                          case d_0_fst
                          by contradiction /* impossible chain */
                        next
                          case d_0_snd
                          by solve( (#vr.7, 0) ~~> (#vk.6, 0) )
                        qed
                      qed
                    qed
                  next
                    case c_xor_case_2
                    by solve( !KU( ~k2 ) @ #vk.10 )
                  next
                    case c_xor_case_3
                    by contradiction /* cyclic */
                  next
                    case coerce
                    solve( !KD( (~k2⊕x⊕~r1.2) ) ▶₀ #vk.5 )
                      case acceptreader
                      by solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                    next
                      case initiatereader
                      by contradiction /* impossible chain */
                    next
                      case tag1
                      solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                        case d_0_fst
                        by contradiction /* impossible chain */
                      next
                        case d_0_snd
                        by solve( (#vr.7, 0) ~~> (#vk.5, 0) )
                      qed
                    qed
                  qed
                next
                  case c_xor_case_22
                  solve( !KU( (~k2⊕~r1.1⊕~r1.2) ) @ #vk.7 )
                    case c_xor_case_1
                    by contradiction /* cyclic */
                  next
                    case c_xor_case_2
                    by solve( !KU( ~k2 ) @ #vk.10 )
                  next
                    case c_xor_case_3
                    by contradiction /* cyclic */
                  next
                    case coerce
                    solve( !KD( (~k2⊕~r1.1⊕~r1.2) ) ▶₀ #vk.5 )
                      case acceptreader
                      by solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                    next
                      case initiatereader
                      by contradiction /* impossible chain */
                    next
                      case tag1
                      solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                        case d_0_fst
                        by contradiction /* impossible chain */
                      next
                        case d_0_snd
                        by solve( (#vr.7, 0) ~~> (#vk.5, 0) )
                      qed
                    qed
                  qed
                next
                  case c_xor_case_23
                  solve( !KU( (~k2⊕~r1.2) ) @ #vk.7 )
                    case c_xor
                    by contradiction /* cyclic */
                  next
                    case coerce
                    solve( !KD( (~k2⊕~r1.2) ) ▶₀ #vk.5 )
                      case acceptreader
                      by solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                    next
                      case initiatereader
                      by contradiction /* impossible chain */
                    next
                      case tag1
                      solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                        case d_0_fst
                        by contradiction /* impossible chain */
                      next
                        case d_0_snd
                        by solve( (#vr.7, 0) ~~> (#vk.5, 0) )
                      qed
                    qed
                  qed
                next
                  case c_xor_case_24
                  solve( !KU( (~r1⊕x⊕~r1.1⊕~r1.2) ) @ #vk.7 )
                    case c_xor_case_1
                    by contradiction /* cyclic */
                  next
                    case c_xor_case_2
                    solve( !KU( (~k⊕~k2) ) @ #vk.8 )
                      case c_xor
                      by solve( !KU( ~k2 ) @ #vk.10 )
                    next
                      case coerce
                      solve( !KD( (~k⊕~k2) ) ▶₀ #vk.6 )
                        case acceptreader
                        by solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                      next
                        case initiatereader
                        by contradiction /* impossible chain */
                      next
                        case tag1
                        solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                          case d_0_fst
                          by contradiction /* impossible chain */
                        next
                          case d_0_snd
                          by solve( (#vr.7, 0) ~~> (#vk.6, 0) )
                        qed
                      qed
                    qed
                  next
                    case c_xor_case_3
                    by contradiction /* cyclic */
                  next
                    case c_xor_case_4
                    by contradiction /* cyclic */
                  next
                    case c_xor_case_5
                    solve( !KU( (~k⊕~k2) ) @ #vk.8 )
                      case c_xor
                      by solve( !KU( ~k2 ) @ #vk.11 )
                    next
                      case coerce
                      solve( !KD( (~k⊕~k2) ) ▶₀ #vk.6 )
                        case acceptreader
                        by solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                      next
                        case initiatereader
                        by contradiction /* impossible chain */
                      next
                        case tag1
                        solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                          case d_0_fst
                          by contradiction /* impossible chain */
                        next
                          case d_0_snd
                          by solve( (#vr.7, 0) ~~> (#vk.6, 0) )
                        qed
                      qed
                    qed
                  next
                    case c_xor_case_6
                    solve( !KU( (~k⊕~k2) ) @ #vk.8 )
                      case c_xor
                      by solve( !KU( ~k2 ) @ #vk.11 )
                    next
                      case coerce
                      solve( !KD( (~k⊕~k2) ) ▶₀ #vk.6 )
                        case acceptreader
                        by solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                      next
                        case initiatereader
                        by contradiction /* impossible chain */
                      next
                        case tag1
                        solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                          case d_0_fst
                          by contradiction /* impossible chain */
                        next
                          case d_0_snd
                          by solve( (#vr.7, 0) ~~> (#vk.6, 0) )
                        qed
                      qed
                    qed
                  next
                    case c_xor_case_7
                    by contradiction /* cyclic */
                  next
                    case coerce
                    solve( !KD( (~r1⊕x⊕~r1.1⊕~r1.2) ) ▶₀ #vk.5 )
                      case acceptreader
                      by solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                    next
                      case initiatereader
                      by contradiction /* impossible chain */
                    next
                      case tag1
                      solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                        case d_0_fst
                        by contradiction /* impossible chain */
                      next
                        case d_0_snd
                        by solve( (#vr.7, 0) ~~> (#vk.5, 0) )
                      qed
                    qed
                  qed
                next
                  case c_xor_case_25
                  solve( !KU( (~r1⊕x⊕~r1.2) ) @ #vk.7 )
                    case c_xor_case_1
                    solve( !KU( (~k⊕~k2⊕~r1.1) ) @ #vk.8 )
                      case c_xor_case_1
                      by solve( !KU( ~k2 ) @ #vk.11 )
                    next
                      case c_xor_case_2
                      by solve( !KU( ~k ) @ #vk.11 )
                    next
                      case c_xor_case_3
                      by contradiction /* cyclic */
                    next
                      case coerce
                      solve( !KD( (~k⊕~k2⊕~r1.1) ) ▶₀ #vk.6 )
                        case acceptreader
                        by solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                      next
                        case initiatereader
                        by contradiction /* impossible chain */
                      next
                        case tag1
                        solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                          case d_0_fst
                          by contradiction /* impossible chain */
                        next
                          case d_0_snd
                          by solve( (#vr.7, 0) ~~> (#vk.6, 0) )
                        qed
                      qed
                    qed
                  next
                    case c_xor_case_2
                    by contradiction /* cyclic */
                  next
                    case c_xor_case_3
                    by contradiction /* cyclic */
                  next
                    case coerce
                    solve( !KD( (~r1⊕x⊕~r1.2) ) ▶₀ #vk.5 )
                      case acceptreader
                      by solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                    next
                      case initiatereader
                      by contradiction /* impossible chain */
                    next
                      case tag1
                      solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                        case d_0_fst
                        by contradiction /* impossible chain */
                      next
                        case d_0_snd
                        by solve( (#vr.7, 0) ~~> (#vk.5, 0) )
                      qed
                    qed
                  qed
                next
                  case c_xor_case_26
                  solve( !KU( (~r1⊕~r1.1⊕~r1.2) ) @ #vk.7 )
                    case c_xor_case_1
                    by contradiction /* cyclic */
                  next
                    case c_xor_case_2
                    by contradiction /* cyclic */
                  next
                    case c_xor_case_3
                    by contradiction /* cyclic */
                  next
                    case coerce
                    solve( !KD( (~r1⊕~r1.1⊕~r1.2) ) ▶₀ #vk.5 )
                      case acceptreader
                      by solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                    next
                      case initiatereader
                      by contradiction /* impossible chain */
                    next
                      case tag1
                      solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                        case d_0_fst
                        by contradiction /* impossible chain */
                      next
                        case d_0_snd
                        by solve( (#vr.7, 0) ~~> (#vk.5, 0) )
                      qed
                    qed
                  qed
                next
                  case c_xor_case_27
                  solve( !KU( (~r1⊕~r1.2) ) @ #vk.7 )
                    case c_xor
                    by contradiction /* cyclic */
                  next
                    case coerce
                    solve( !KD( (~r1⊕~r1.2) ) ▶₀ #vk.5 )
                      case acceptreader
                      by solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                    next
                      case initiatereader
                      by contradiction /* impossible chain */
                    next
                      case tag1
                      solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                        case d_0_fst
                        by contradiction /* impossible chain */
                      next
                        case d_0_snd
                        by solve( (#vr.7, 0) ~~> (#vk.5, 0) )
                      qed
                    qed
                  qed
                next
                  case c_xor_case_28
                  solve( !KU( (x⊕~r1.1⊕~r1.2) ) @ #vk.7 )
                    case c_xor_case_1
                    by contradiction /* cyclic */
                  next
                    case c_xor_case_2
                    solve( !KU( (~k⊕~k2⊕~r1) ) @ #vk.8 )
                      case c_xor_case_1
                      by solve( !KU( ~k2 ) @ #vk.11 )
                    next
                      case c_xor_case_2
                      by solve( !KU( ~k ) @ #vk.11 )
                    next
                      case c_xor_case_3
                      by contradiction /* cyclic */
                    next
                      case coerce
                      solve( !KD( (~k⊕~k2⊕~r1) ) ▶₀ #vk.6 )
                        case acceptreader
                        by solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                      next
                        case initiatereader
                        by contradiction /* impossible chain */
                      next
                        case tag1
                        solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                          case d_0_fst
                          by contradiction /* impossible chain */
                        next
                          case d_0_snd
                          by solve( (#vr.7, 0) ~~> (#vk.6, 0) )
                        qed
                      qed
                    qed
                  next
                    case c_xor_case_3
                    by contradiction /* cyclic */
                  next
                    case coerce
                    solve( !KD( (x⊕~r1.1⊕~r1.2) ) ▶₀ #vk.5 )
                      case acceptreader
                      by solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                    next
                      case initiatereader
                      by contradiction /* impossible chain */
                    next
                      case tag1
                      solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                        case d_0_fst
                        by contradiction /* impossible chain */
                      next
                        case d_0_snd
                        by solve( (#vr.7, 0) ~~> (#vk.5, 0) )
                      qed
                    qed
                  qed
                next
                  case c_xor_case_29
                  solve( !KU( (x⊕~r1.2) ) @ #vk.7 )
                    case c_xor
                    by contradiction /* cyclic */
                  next
                    case coerce
                    solve( !KD( (x⊕~r1.2) ) ▶₀ #vk.5 )
                      case acceptreader
                      by solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                    next
                      case initiatereader
                      by contradiction /* impossible chain */
                    next
                      case tag1
                      solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                        case d_0_fst
                        by contradiction /* impossible chain */
                      next
                        case d_0_snd
                        by solve( (#vr.7, 0) ~~> (#vk.5, 0) )
                      qed
                    qed
                  qed
                next
                  case c_xor_case_30
                  solve( !KU( (~r1.1⊕~r1.2) ) @ #vk.7 )
                    case c_xor
                    by contradiction /* cyclic */
                  next
                    case coerce
                    solve( !KD( (~r1.1⊕~r1.2) ) ▶₀ #vk.5 )
                      case acceptreader
                      by solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                    next
                      case initiatereader
                      by contradiction /* impossible chain */
                    next
                      case tag1
                      solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                        case d_0_fst
                        by contradiction /* impossible chain */
                      next
                        case d_0_snd
                        by solve( (#vr.7, 0) ~~> (#vk.5, 0) )
                      qed
                    qed
                  qed
                next
                  case c_xor_case_31
                  by contradiction /* cyclic */
                next
                  case coerce
                  solve( !KD( (~k⊕~k2⊕~r1⊕x⊕~r1.1⊕~r1.2) ) ▶₀ #vk.4 )
                    case acceptreader
                    by solve( (#vl.2, 0) ~~> (#vk.4, 0) )
                  next
                    case initiatereader
                    by contradiction /* impossible chain */
                  next
                    case tag1
                    solve( (#vl.2, 0) ~~> (#vk.4, 0) )
                      case d_0_fst
                      by contradiction /* impossible chain */
                    next
                      case d_0_snd
                      by solve( (#vr.7, 0) ~~> (#vk.4, 0) )
                    qed
                  qed
                qed
              next
                case split_case_3
                solve( !KU( (~k⊕~k2⊕~r1⊕~r1.1) ) @ #vk.6 )
                  case c_xor_case_1
                  by contradiction /* cyclic */
                next
                  case c_xor_case_2
                  by solve( !KU( ~k2 ) @ #vk.8 )
                next
                  case c_xor_case_3
                  solve( !KU( (~k⊕~r1.1) ) @ #vk.7 )
                    case c_xor
                    by contradiction /* cyclic */
                  next
                    case coerce
                    solve( !KD( (~k⊕~r1.1) ) ▶₀ #vk.5 )
                      case acceptreader
                      by solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                    next
                      case initiatereader
                      by contradiction /* impossible chain */
                    next
                      case tag1
                      solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                        case d_0_fst
                        by contradiction /* impossible chain */
                      next
                        case d_0_snd
                        by solve( (#vr.7, 0) ~~> (#vk.5, 0) )
                      qed
                    qed
                  qed
                next
                  case c_xor_case_4
                  by solve( !KU( ~k ) @ #vk.8 )
                next
                  case c_xor_case_5
                  solve( !KU( (~k2⊕~r1.1) ) @ #vk.7 )
                    case c_xor
                    by contradiction /* cyclic */
                  next
                    case coerce
                    solve( !KD( (~k2⊕~r1.1) ) ▶₀ #vk.5 )
                      case acceptreader
                      by solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                    next
                      case initiatereader
                      by contradiction /* impossible chain */
                    next
                      case tag1
                      solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                        case d_0_fst
                        by contradiction /* impossible chain */
                      next
                        case d_0_snd
                        by solve( (#vr.7, 0) ~~> (#vk.5, 0) )
                      qed
                    qed
                  qed
                next
                  case c_xor_case_6
                  solve( !KU( (~r1⊕~r1.1) ) @ #vk.7 )
                    case c_xor
                    by contradiction /* cyclic */
                  next
                    case coerce
                    solve( !KD( (~r1⊕~r1.1) ) ▶₀ #vk.5 )
                      case acceptreader
                      by solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                    next
                      case initiatereader
                      by contradiction /* impossible chain */
                    next
                      case tag1
                      solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                        case d_0_fst
                        by contradiction /* impossible chain */
                      next
                        case d_0_snd
                        by solve( (#vr.7, 0) ~~> (#vk.5, 0) )
                      qed
                    qed
                  qed
                next
                  case c_xor_case_7
                  by contradiction /* cyclic */
                next
                  case coerce
                  solve( !KD( (~k⊕~k2⊕~r1⊕~r1.1) ) ▶₀ #vk.4 )
                    case acceptreader
                    by solve( (#vl.2, 0) ~~> (#vk.4, 0) )
                  next
                    case initiatereader
                    by contradiction /* impossible chain */
                  next
                    case tag1
                    solve( (#vl.2, 0) ~~> (#vk.4, 0) )
                      case d_0_fst
                      by contradiction /* impossible chain */
                    next
                      case d_0_snd
                      by solve( (#vr.7, 0) ~~> (#vk.4, 0) )
                    qed
                  qed
                qed
              next
                case split_case_4
                solve( !KU( (~k⊕~r1⊕~r1.1) ) @ #vk.6 )
                  case c_xor_case_1
                  by contradiction /* cyclic */
                next
                  case c_xor_case_2
                  by solve( !KU( ~k ) @ #vk.8 )
                next
                  case c_xor_case_3
                  by contradiction /* cyclic */
                next
                  case coerce
                  solve( !KD( (~k⊕~r1⊕~r1.1) ) ▶₀ #vk.4 )
                    case acceptreader
                    by solve( (#vl.2, 0) ~~> (#vk.4, 0) )
                  next
                    case initiatereader
                    by contradiction /* impossible chain */
                  next
                    case tag1
                    solve( (#vl.2, 0) ~~> (#vk.4, 0) )
                      case d_0_fst
                      by contradiction /* impossible chain */
                    next
                      case d_0_snd
                      by solve( (#vr.7, 0) ~~> (#vk.4, 0) )
                    qed
                  qed
                qed
              next
                case split_case_5
                solve( !KU( (~k⊕~r1⊕x⊕~r1.1) ) @ #vk.6 )
                  case c_xor_case_1
                  solve( !KU( (~k2⊕x⊕~r1.2) ) @ #vk.6 )
                    case c_xor_case_1
                    solve( !KU( (~k⊕~r1⊕~r1.1) ) @ #vk.7 )
                      case c_xor_case_1
                      by contradiction /* cyclic */
                    next
                      case c_xor_case_2
                      by solve( !KU( ~k ) @ #vk.11 )
                    next
                      case c_xor_case_3
                      by contradiction /* cyclic */
                    next
                      case coerce
                      solve( !KD( (~k⊕~r1⊕~r1.1) ) ▶₀ #vk.6 )
                        case acceptreader
                        by solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                      next
                        case initiatereader
                        by contradiction /* impossible chain */
                      next
                        case tag1
                        solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                          case d_0_fst
                          by contradiction /* impossible chain */
                        next
                          case d_0_snd
                          by solve( (#vr.7, 0) ~~> (#vk.6, 0) )
                        qed
                      qed
                    qed
                  next
                    case c_xor_case_2
                    by solve( !KU( ~k2 ) @ #vk.10 )
                  next
                    case c_xor_case_3
                    solve( !KU( (~k⊕~r1⊕~r1.1) ) @ #vk.7 )
                      case c_xor_case_1
                      by contradiction /* cyclic */
                    next
                      case c_xor_case_2
                      by solve( !KU( ~k ) @ #vk.12 )
                    next
                      case c_xor_case_3
                      by contradiction /* cyclic */
                    next
                      case coerce
                      solve( !KD( (~k⊕~r1⊕~r1.1) ) ▶₀ #vk.6 )
                        case acceptreader
                        by solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                      next
                        case initiatereader
                        by contradiction /* impossible chain */
                      next
                        case tag1
                        solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                          case d_0_fst
                          by contradiction /* impossible chain */
                        next
                          case d_0_snd
                          by solve( (#vr.7, 0) ~~> (#vk.6, 0) )
                        qed
                      qed
                    qed
                  next
                    case coerce
                    solve( !KD( (~k2⊕x⊕~r1.2) ) ▶₀ #vk.5 )
                      case acceptreader
                      by solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                    next
                      case initiatereader
                      by contradiction /* impossible chain */
                    next
                      case tag1
                      solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                        case d_0_fst
                        by contradiction /* impossible chain */
                      next
                        case d_0_snd
                        by solve( (#vr.7, 0) ~~> (#vk.5, 0) )
                      qed
                    qed
                  qed
                next
                  case c_xor_case_2
                  by contradiction /* cyclic */
                next
                  case c_xor_case_3
                  solve( !KU( (~k2⊕x⊕~r1.2) ) @ #vk.6 )
                    case c_xor_case_1
                    solve( !KU( (~k⊕~r1.1) ) @ #vk.7 )
                      case c_xor
                      by contradiction /* cyclic */
                    next
                      case coerce
                      solve( !KD( (~k⊕~r1.1) ) ▶₀ #vk.6 )
                        case acceptreader
                        by solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                      next
                        case initiatereader
                        by contradiction /* impossible chain */
                      next
                        case tag1
                        solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                          case d_0_fst
                          by contradiction /* impossible chain */
                        next
                          case d_0_snd
                          by solve( (#vr.7, 0) ~~> (#vk.6, 0) )
                        qed
                      qed
                    qed
                  next
                    case c_xor_case_2
                    by solve( !KU( ~k2 ) @ #vk.10 )
                  next
                    case c_xor_case_3
                    solve( !KU( (~k⊕~r1.1) ) @ #vk.7 )
                      case c_xor
                      by contradiction /* cyclic */
                    next
                      case coerce
                      solve( !KD( (~k⊕~r1.1) ) ▶₀ #vk.6 )
                        case acceptreader
                        by solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                      next
                        case initiatereader
                        by contradiction /* impossible chain */
                      next
                        case tag1
                        solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                          case d_0_fst
                          by contradiction /* impossible chain */
                        next
                          case d_0_snd
                          by solve( (#vr.7, 0) ~~> (#vk.6, 0) )
                        qed
                      qed
                    qed
                  next
                    case coerce
                    solve( !KD( (~k2⊕x⊕~r1.2) ) ▶₀ #vk.5 )
                      case acceptreader
                      by solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                    next
                      case initiatereader
                      by contradiction /* impossible chain */
                    next
                      case tag1
                      solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                        case d_0_fst
                        by contradiction /* impossible chain */
                      next
                        case d_0_snd
                        by solve( (#vr.7, 0) ~~> (#vk.5, 0) )
                      qed
                    qed
                  qed
                next
                  case c_xor_case_4
                  by solve( !KU( ~k ) @ #vk.8 )
                next
                  case c_xor_case_5
                  solve( !KU( (~k2⊕x⊕~r1.2) ) @ #vk.6 )
                    case c_xor_case_1
                    solve( !KU( (~r1⊕~r1.1) ) @ #vk.7 )
                      case c_xor
                      by contradiction /* cyclic */
                    next
                      case coerce
                      solve( !KD( (~r1⊕~r1.1) ) ▶₀ #vk.6 )
                        case acceptreader
                        by solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                      next
                        case initiatereader
                        by contradiction /* impossible chain */
                      next
                        case tag1
                        solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                          case d_0_fst
                          by contradiction /* impossible chain */
                        next
                          case d_0_snd
                          by solve( (#vr.7, 0) ~~> (#vk.6, 0) )
                        qed
                      qed
                    qed
                  next
                    case c_xor_case_2
                    by solve( !KU( ~k2 ) @ #vk.10 )
                  next
                    case c_xor_case_3
                    solve( !KU( (~r1⊕~r1.1) ) @ #vk.7 )
                      case c_xor
                      by contradiction /* cyclic */
                    next
                      case coerce
                      solve( !KD( (~r1⊕~r1.1) ) ▶₀ #vk.6 )
                        case acceptreader
                        by solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                      next
                        case initiatereader
                        by contradiction /* impossible chain */
                      next
                        case tag1
                        solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                          case d_0_fst
                          by contradiction /* impossible chain */
                        next
                          case d_0_snd
                          by solve( (#vr.7, 0) ~~> (#vk.6, 0) )
                        qed
                      qed
                    qed
                  next
                    case coerce
                    solve( !KD( (~k2⊕x⊕~r1.2) ) ▶₀ #vk.5 )
                      case acceptreader
                      by solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                    next
                      case initiatereader
                      by contradiction /* impossible chain */
                    next
                      case tag1
                      solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                        case d_0_fst
                        by contradiction /* impossible chain */
                      next
                        case d_0_snd
                        by solve( (#vr.7, 0) ~~> (#vk.5, 0) )
                      qed
                    qed
                  qed
                next
                  case c_xor_case_6
                  solve( !KU( (~k2⊕x⊕~r1.2) ) @ #vk.6 )
                    case c_xor_case_1
                    solve( !KU( (x⊕~r1.1) ) @ #vk.7 )
                      case c_xor
                      by contradiction /* cyclic */
                    next
                      case coerce
                      solve( !KD( (x⊕~r1.1) ) ▶₀ #vk.6 )
                        case acceptreader
                        by solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                      next
                        case initiatereader
                        by contradiction /* impossible chain */
                      next
                        case tag1
                        solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                          case d_0_fst
                          by contradiction /* impossible chain */
                        next
                          case d_0_snd
                          by solve( (#vr.7, 0) ~~> (#vk.6, 0) )
                        qed
                      qed
                    qed
                  next
                    case c_xor_case_2
                    by solve( !KU( ~k2 ) @ #vk.10 )
                  next
                    case c_xor_case_3
                    solve( !KU( (x⊕~r1.1) ) @ #vk.7 )
                      case c_xor
                      by contradiction /* cyclic */
                    next
                      case coerce
                      solve( !KD( (x⊕~r1.1) ) ▶₀ #vk.6 )
                        case acceptreader
                        by solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                      next
                        case initiatereader
                        by contradiction /* impossible chain */
                      next
                        case tag1
                        solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                          case d_0_fst
                          by contradiction /* impossible chain */
                        next
                          case d_0_snd
                          by solve( (#vr.7, 0) ~~> (#vk.6, 0) )
                        qed
                      qed
                    qed
                  next
                    case coerce
                    solve( !KD( (~k2⊕x⊕~r1.2) ) ▶₀ #vk.5 )
                      case acceptreader
                      by solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                    next
                      case initiatereader
                      by contradiction /* impossible chain */
                    next
                      case tag1
                      solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                        case d_0_fst
                        by contradiction /* impossible chain */
                      next
                        case d_0_snd
                        by solve( (#vr.7, 0) ~~> (#vk.5, 0) )
                      qed
                    qed
                  qed
                next
                  case c_xor_case_7
                  by contradiction /* cyclic */
                next
                  case coerce
                  solve( !KD( (~k⊕~r1⊕x⊕~r1.1) ) ▶₀ #vk.4 )
                    case acceptreader
                    by solve( (#vl.2, 0) ~~> (#vk.4, 0) )
                  next
                    case initiatereader
                    by contradiction /* impossible chain */
                  next
                    case tag1
                    solve( (#vl.2, 0) ~~> (#vk.4, 0) )
                      case d_0_fst
                      by contradiction /* impossible chain */
                    next
                      case d_0_snd
                      by solve( (#vr.7, 0) ~~> (#vk.4, 0) )
                    qed
                  qed
                qed
              next
                case split_case_6
                solve( !KU( (~k⊕~r1⊕x⊕~r1.1⊕~r1.2) ) @ #vk.6 )
                  case c_xor_case_01
                  by contradiction /* cyclic */
                next
                  case c_xor_case_02
                  solve( !KU( (~k2⊕x) ) @ #vk.6 )
                    case c_xor
                    by solve( !KU( ~k2 ) @ #vk.9 )
                  next
                    case coerce
                    solve( !KD( (~k2⊕x) ) ▶₀ #vk.5 )
                      case acceptreader
                      by solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                    next
                      case initiatereader
                      by contradiction /* impossible chain */
                    next
                      case tag1
                      solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                        case d_0_fst
                        by contradiction /* impossible chain */
                      next
                        case d_0_snd
                        by solve( (#vr.7, 0) ~~> (#vk.5, 0) )
                      qed
                    qed
                  qed
                next
                  case c_xor_case_03
                  solve( !KU( (~k2⊕x) ) @ #vk.6 )
                    case c_xor
                    by solve( !KU( ~k2 ) @ #vk.10 )
                  next
                    case coerce
                    solve( !KD( (~k2⊕x) ) ▶₀ #vk.5 )
                      case acceptreader
                      by solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                    next
                      case initiatereader
                      by contradiction /* impossible chain */
                    next
                      case tag1
                      solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                        case d_0_fst
                        by contradiction /* impossible chain */
                      next
                        case d_0_snd
                        by solve( (#vr.7, 0) ~~> (#vk.5, 0) )
                      qed
                    qed
                  qed
                next
                  case c_xor_case_04
                  by contradiction /* cyclic */
                next
                  case c_xor_case_05
                  solve( !KU( (~k2⊕x) ) @ #vk.6 )
                    case c_xor
                    by solve( !KU( ~k2 ) @ #vk.10 )
                  next
                    case coerce
                    solve( !KD( (~k2⊕x) ) ▶₀ #vk.5 )
                      case acceptreader
                      by solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                    next
                      case initiatereader
                      by contradiction /* impossible chain */
                    next
                      case tag1
                      solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                        case d_0_fst
                        by contradiction /* impossible chain */
                      next
                        case d_0_snd
                        by solve( (#vr.7, 0) ~~> (#vk.5, 0) )
                      qed
                    qed
                  qed
                next
                  case c_xor_case_06
                  solve( !KU( (~k2⊕x) ) @ #vk.6 )
                    case c_xor
                    by solve( !KU( ~k2 ) @ #vk.10 )
                  next
                    case coerce
                    solve( !KD( (~k2⊕x) ) ▶₀ #vk.5 )
                      case acceptreader
                      by solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                    next
                      case initiatereader
                      by contradiction /* impossible chain */
                    next
                      case tag1
                      solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                        case d_0_fst
                        by contradiction /* impossible chain */
                      next
                        case d_0_snd
                        by solve( (#vr.7, 0) ~~> (#vk.5, 0) )
                      qed
                    qed
                  qed
                next
                  case c_xor_case_07
                  solve( !KU( (~k2⊕x) ) @ #vk.6 )
                    case c_xor
                    by solve( !KU( ~k2 ) @ #vk.10 )
                  next
                    case coerce
                    solve( !KD( (~k2⊕x) ) ▶₀ #vk.5 )
                      case acceptreader
                      by solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                    next
                      case initiatereader
                      by contradiction /* impossible chain */
                    next
                      case tag1
                      solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                        case d_0_fst
                        by contradiction /* impossible chain */
                      next
                        case d_0_snd
                        by solve( (#vr.7, 0) ~~> (#vk.5, 0) )
                      qed
                    qed
                  qed
                next
                  case c_xor_case_08
                  by solve( !KU( ~k ) @ #vk.8 )
                next
                  case c_xor_case_09
                  solve( !KU( (~k2⊕x) ) @ #vk.6 )
                    case c_xor
                    by solve( !KU( ~k2 ) @ #vk.10 )
                  next
                    case coerce
                    solve( !KD( (~k2⊕x) ) ▶₀ #vk.5 )
                      case acceptreader
                      by solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                    next
                      case initiatereader
                      by contradiction /* impossible chain */
                    next
                      case tag1
                      solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                        case d_0_fst
                        by contradiction /* impossible chain */
                      next
                        case d_0_snd
                        by solve( (#vr.7, 0) ~~> (#vk.5, 0) )
                      qed
                    qed
                  qed
                next
                  case c_xor_case_10
                  solve( !KU( (~k2⊕x) ) @ #vk.6 )
                    case c_xor
                    by solve( !KU( ~k2 ) @ #vk.10 )
                  next
                    case coerce
                    solve( !KD( (~k2⊕x) ) ▶₀ #vk.5 )
                      case acceptreader
                      by solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                    next
                      case initiatereader
                      by contradiction /* impossible chain */
                    next
                      case tag1
                      solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                        case d_0_fst
                        by contradiction /* impossible chain */
                      next
                        case d_0_snd
                        by solve( (#vr.7, 0) ~~> (#vk.5, 0) )
                      qed
                    qed
                  qed
                next
                  case c_xor_case_11
                  solve( !KU( (~k2⊕x) ) @ #vk.6 )
                    case c_xor
                    by solve( !KU( ~k2 ) @ #vk.10 )
                  next
                    case coerce
                    solve( !KD( (~k2⊕x) ) ▶₀ #vk.5 )
                      case acceptreader
                      by solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                    next
                      case initiatereader
                      by contradiction /* impossible chain */
                    next
                      case tag1
                      solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                        case d_0_fst
                        by contradiction /* impossible chain */
                      next
                        case d_0_snd
                        by solve( (#vr.7, 0) ~~> (#vk.5, 0) )
                      qed
                    qed
                  qed
                next
                  case c_xor_case_12
                  solve( !KU( (~k2⊕x) ) @ #vk.6 )
                    case c_xor
                    by solve( !KU( ~k2 ) @ #vk.10 )
                  next
                    case coerce
                    solve( !KD( (~k2⊕x) ) ▶₀ #vk.5 )
                      case acceptreader
                      by solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                    next
                      case initiatereader
                      by contradiction /* impossible chain */
                    next
                      case tag1
                      solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                        case d_0_fst
                        by contradiction /* impossible chain */
                      next
                        case d_0_snd
                        by solve( (#vr.7, 0) ~~> (#vk.5, 0) )
                      qed
                    qed
                  qed
                next
                  case c_xor_case_13
                  solve( !KU( (~k2⊕x) ) @ #vk.6 )
                    case c_xor
                    by solve( !KU( ~k2 ) @ #vk.10 )
                  next
                    case coerce
                    solve( !KD( (~k2⊕x) ) ▶₀ #vk.5 )
                      case acceptreader
                      by solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                    next
                      case initiatereader
                      by contradiction /* impossible chain */
                    next
                      case tag1
                      solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                        case d_0_fst
                        by contradiction /* impossible chain */
                      next
                        case d_0_snd
                        by solve( (#vr.7, 0) ~~> (#vk.5, 0) )
                      qed
                    qed
                  qed
                next
                  case c_xor_case_14
                  solve( !KU( (~k2⊕x) ) @ #vk.6 )
                    case c_xor
                    by solve( !KU( ~k2 ) @ #vk.10 )
                  next
                    case coerce
                    solve( !KD( (~k2⊕x) ) ▶₀ #vk.5 )
                      case acceptreader
                      by solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                    next
                      case initiatereader
                      by contradiction /* impossible chain */
                    next
                      case tag1
                      solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                        case d_0_fst
                        by contradiction /* impossible chain */
                      next
                        case d_0_snd
                        by solve( (#vr.7, 0) ~~> (#vk.5, 0) )
                      qed
                    qed
                  qed
                next
                  case c_xor_case_15
                  by contradiction /* cyclic */
                next
                  case coerce
                  solve( !KD( (~k⊕~r1⊕x⊕~r1.1⊕~r1.2) ) ▶₀ #vk.4 )
                    case acceptreader
                    by solve( (#vl.2, 0) ~~> (#vk.4, 0) )
                  next
                    case initiatereader
                    by contradiction /* impossible chain */
                  next
                    case tag1
                    solve( (#vl.2, 0) ~~> (#vk.4, 0) )
                      case d_0_fst
                      by contradiction /* impossible chain */
                    next
                      case d_0_snd
                      by solve( (#vr.7, 0) ~~> (#vk.4, 0) )
                    qed
                  qed
                qed
              next
                case split_case_7
                solve( !KU( (~k⊕~k2⊕~r1⊕x⊕~r1.1) ) @ #vk.6 )
                  case c_xor_case_01
                  solve( !KU( (x⊕~r1.2) ) @ #vk.6 )
                    case c_xor
                    solve( !KU( (~k⊕~k2⊕~r1⊕~r1.1) ) @ #vk.7 )
                      case c_xor_case_1
                      by contradiction /* cyclic */
                    next
                      case c_xor_case_2
                      by solve( !KU( ~k2 ) @ #vk.11 )
                    next
                      case c_xor_case_3
                      solve( !KU( (~k⊕~r1.1) ) @ #vk.10 )
                        case c_xor
                        by contradiction /* cyclic */
                      next
                        case coerce
                        solve( !KD( (~k⊕~r1.1) ) ▶₀ #vk.7 )
                          case acceptreader
                          by solve( (#vl.2, 0) ~~> (#vk.7, 0) )
                        next
                          case initiatereader
                          by contradiction /* impossible chain */
                        next
                          case tag1
                          solve( (#vl.2, 0) ~~> (#vk.7, 0) )
                            case d_0_fst
                            by contradiction /* impossible chain */
                          next
                            case d_0_snd
                            by solve( (#vr.7, 0) ~~> (#vk.7, 0) )
                          qed
                        qed
                      qed
                    next
                      case c_xor_case_4
                      by solve( !KU( ~k ) @ #vk.11 )
                    next
                      case c_xor_case_5
                      solve( !KU( (~k2⊕~r1.1) ) @ #vk.10 )
                        case c_xor
                        by contradiction /* cyclic */
                      next
                        case coerce
                        solve( !KD( (~k2⊕~r1.1) ) ▶₀ #vk.7 )
                          case acceptreader
                          by solve( (#vl.2, 0) ~~> (#vk.7, 0) )
                        next
                          case initiatereader
                          by contradiction /* impossible chain */
                        next
                          case tag1
                          solve( (#vl.2, 0) ~~> (#vk.7, 0) )
                            case d_0_fst
                            by contradiction /* impossible chain */
                          next
                            case d_0_snd
                            by solve( (#vr.7, 0) ~~> (#vk.7, 0) )
                          qed
                        qed
                      qed
                    next
                      case c_xor_case_6
                      solve( !KU( (~r1⊕~r1.1) ) @ #vk.10 )
                        case c_xor
                        by contradiction /* cyclic */
                      next
                        case coerce
                        solve( !KD( (~r1⊕~r1.1) ) ▶₀ #vk.7 )
                          case acceptreader
                          by solve( (#vl.2, 0) ~~> (#vk.7, 0) )
                        next
                          case initiatereader
                          by contradiction /* impossible chain */
                        next
                          case tag1
                          solve( (#vl.2, 0) ~~> (#vk.7, 0) )
                            case d_0_fst
                            by contradiction /* impossible chain */
                          next
                            case d_0_snd
                            by solve( (#vr.7, 0) ~~> (#vk.7, 0) )
                          qed
                        qed
                      qed
                    next
                      case c_xor_case_7
                      by contradiction /* cyclic */
                    next
                      case coerce
                      solve( !KD( (~k⊕~k2⊕~r1⊕~r1.1) ) ▶₀ #vk.6 )
                        case acceptreader
                        by solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                      next
                        case initiatereader
                        by contradiction /* impossible chain */
                      next
                        case tag1
                        solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                          case d_0_fst
                          by contradiction /* impossible chain */
                        next
                          case d_0_snd
                          by solve( (#vr.7, 0) ~~> (#vk.6, 0) )
                        qed
                      qed
                    qed
                  next
                    case coerce
                    solve( !KD( (x⊕~r1.2) ) ▶₀ #vk.5 )
                      case acceptreader
                      by solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                    next
                      case initiatereader
                      by contradiction /* impossible chain */
                    next
                      case tag1
                      solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                        case d_0_fst
                        by contradiction /* impossible chain */
                      next
                        case d_0_snd
                        by solve( (#vr.7, 0) ~~> (#vk.5, 0) )
                      qed
                    qed
                  qed
                next
                  case c_xor_case_02
                  by contradiction /* cyclic */
                next
                  case c_xor_case_03
                  solve( !KU( (x⊕~r1.2) ) @ #vk.6 )
                    case c_xor
                    solve( !KU( (~k⊕~k2⊕~r1.1) ) @ #vk.7 )
                      case c_xor_case_1
                      by solve( !KU( ~k2 ) @ #vk.12 )
                    next
                      case c_xor_case_2
                      by solve( !KU( ~k ) @ #vk.12 )
                    next
                      case c_xor_case_3
                      by contradiction /* cyclic */
                    next
                      case coerce
                      solve( !KD( (~k⊕~k2⊕~r1.1) ) ▶₀ #vk.6 )
                        case acceptreader
                        by solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                      next
                        case initiatereader
                        by contradiction /* impossible chain */
                      next
                        case tag1
                        solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                          case d_0_fst
                          by contradiction /* impossible chain */
                        next
                          case d_0_snd
                          by solve( (#vr.7, 0) ~~> (#vk.6, 0) )
                        qed
                      qed
                    qed
                  next
                    case coerce
                    solve( !KD( (x⊕~r1.2) ) ▶₀ #vk.5 )
                      case acceptreader
                      by solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                    next
                      case initiatereader
                      by contradiction /* impossible chain */
                    next
                      case tag1
                      solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                        case d_0_fst
                        by contradiction /* impossible chain */
                      next
                        case d_0_snd
                        by solve( (#vr.7, 0) ~~> (#vk.5, 0) )
                      qed
                    qed
                  qed
                next
                  case c_xor_case_04
                  by solve( !KU( ~k2 ) @ #vk.8 )
                next
                  case c_xor_case_05
                  solve( !KU( (x⊕~r1.2) ) @ #vk.6 )
                    case c_xor
                    solve( !KU( (~k⊕~r1⊕~r1.1) ) @ #vk.7 )
                      case c_xor_case_1
                      by contradiction /* cyclic */
                    next
                      case c_xor_case_2
                      by solve( !KU( ~k ) @ #vk.12 )
                    next
                      case c_xor_case_3
                      by contradiction /* cyclic */
                    next
                      case coerce
                      solve( !KD( (~k⊕~r1⊕~r1.1) ) ▶₀ #vk.6 )
                        case acceptreader
                        by solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                      next
                        case initiatereader
                        by contradiction /* impossible chain */
                      next
                        case tag1
                        solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                          case d_0_fst
                          by contradiction /* impossible chain */
                        next
                          case d_0_snd
                          by solve( (#vr.7, 0) ~~> (#vk.6, 0) )
                        qed
                      qed
                    qed
                  next
                    case coerce
                    solve( !KD( (x⊕~r1.2) ) ▶₀ #vk.5 )
                      case acceptreader
                      by solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                    next
                      case initiatereader
                      by contradiction /* impossible chain */
                    next
                      case tag1
                      solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                        case d_0_fst
                        by contradiction /* impossible chain */
                      next
                        case d_0_snd
                        by solve( (#vr.7, 0) ~~> (#vk.5, 0) )
                      qed
                    qed
                  qed
                next
                  case c_xor_case_06
                  solve( !KU( (x⊕~r1.2) ) @ #vk.6 )
                    case c_xor
                    solve( !KU( (~k⊕x⊕~r1.1) ) @ #vk.7 )
                      case c_xor_case_1
                      solve( !KU( (~k2⊕~r1) ) @ #vk.8 )
                        case c_xor
                        by contradiction /* cyclic */
                      next
                        case coerce
                        solve( !KD( (~k2⊕~r1) ) ▶₀ #vk.7 )
                          case acceptreader
                          by solve( (#vl.2, 0) ~~> (#vk.7, 0) )
                        next
                          case initiatereader
                          by contradiction /* impossible chain */
                        next
                          case tag1
                          solve( (#vl.2, 0) ~~> (#vk.7, 0) )
                            case d_0_fst
                            by contradiction /* impossible chain */
                          next
                            case d_0_snd
                            by solve( (#vr.7, 0) ~~> (#vk.7, 0) )
                          qed
                        qed
                      qed
                    next
                      case c_xor_case_2
                      by solve( !KU( ~k ) @ #vk.12 )
                    next
                      case c_xor_case_3
                      by contradiction /* cyclic */
                    next
                      case coerce
                      solve( !KD( (~k⊕x⊕~r1.1) ) ▶₀ #vk.6 )
                        case acceptreader
                        by solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                      next
                        case initiatereader
                        by contradiction /* impossible chain */
                      next
                        case tag1
                        solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                          case d_0_fst
                          by contradiction /* impossible chain */
                        next
                          case d_0_snd
                          by solve( (#vr.7, 0) ~~> (#vk.6, 0) )
                        qed
                      qed
                    qed
                  next
                    case coerce
                    solve( !KD( (x⊕~r1.2) ) ▶₀ #vk.5 )
                      case acceptreader
                      by solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                    next
                      case initiatereader
                      by contradiction /* impossible chain */
                    next
                      case tag1
                      solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                        case d_0_fst
                        by contradiction /* impossible chain */
                      next
                        case d_0_snd
                        by solve( (#vr.7, 0) ~~> (#vk.5, 0) )
                      qed
                    qed
                  qed
                next
                  case c_xor_case_07
                  solve( !KU( (x⊕~r1.2) ) @ #vk.6 )
                    case c_xor
                    solve( !KU( (~k⊕~r1.1) ) @ #vk.7 )
                      case c_xor
                      by contradiction /* cyclic */
                    next
                      case coerce
                      solve( !KD( (~k⊕~r1.1) ) ▶₀ #vk.6 )
                        case acceptreader
                        by solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                      next
                        case initiatereader
                        by contradiction /* impossible chain */
                      next
                        case tag1
                        solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                          case d_0_fst
                          by contradiction /* impossible chain */
                        next
                          case d_0_snd
                          by solve( (#vr.7, 0) ~~> (#vk.6, 0) )
                        qed
                      qed
                    qed
                  next
                    case coerce
                    solve( !KD( (x⊕~r1.2) ) ▶₀ #vk.5 )
                      case acceptreader
                      by solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                    next
                      case initiatereader
                      by contradiction /* impossible chain */
                    next
                      case tag1
                      solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                        case d_0_fst
                        by contradiction /* impossible chain */
                      next
                        case d_0_snd
                        by solve( (#vr.7, 0) ~~> (#vk.5, 0) )
                      qed
                    qed
                  qed
                next
                  case c_xor_case_08
                  by solve( !KU( ~k ) @ #vk.8 )
                next
                  case c_xor_case_09
                  solve( !KU( (x⊕~r1.2) ) @ #vk.6 )
                    case c_xor
                    solve( !KU( (~k2⊕~r1⊕~r1.1) ) @ #vk.7 )
                      case c_xor_case_1
                      by contradiction /* cyclic */
                    next
                      case c_xor_case_2
                      by solve( !KU( ~k2 ) @ #vk.12 )
                    next
                      case c_xor_case_3
                      by contradiction /* cyclic */
                    next
                      case coerce
                      solve( !KD( (~k2⊕~r1⊕~r1.1) ) ▶₀ #vk.6 )
                        case acceptreader
                        by solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                      next
                        case initiatereader
                        by contradiction /* impossible chain */
                      next
                        case tag1
                        solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                          case d_0_fst
                          by contradiction /* impossible chain */
                        next
                          case d_0_snd
                          by solve( (#vr.7, 0) ~~> (#vk.6, 0) )
                        qed
                      qed
                    qed
                  next
                    case coerce
                    solve( !KD( (x⊕~r1.2) ) ▶₀ #vk.5 )
                      case acceptreader
                      by solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                    next
                      case initiatereader
                      by contradiction /* impossible chain */
                    next
                      case tag1
                      solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                        case d_0_fst
                        by contradiction /* impossible chain */
                      next
                        case d_0_snd
                        by solve( (#vr.7, 0) ~~> (#vk.5, 0) )
                      qed
                    qed
                  qed
                next
                  case c_xor_case_10
                  solve( !KU( (x⊕~r1.2) ) @ #vk.6 )
                    case c_xor
                    solve( !KU( (~k2⊕x⊕~r1.1) ) @ #vk.7 )
                      case c_xor_case_1
                      solve( !KU( (~k⊕~r1) ) @ #vk.8 )
                        case c_xor
                        by contradiction /* cyclic */
                      next
                        case coerce
                        solve( !KD( (~k⊕~r1) ) ▶₀ #vk.7 )
                          case acceptreader
                          by solve( (#vl.2, 0) ~~> (#vk.7, 0) )
                        next
                          case initiatereader
                          by contradiction /* impossible chain */
                        next
                          case tag1
                          solve( (#vl.2, 0) ~~> (#vk.7, 0) )
                            case d_0_fst
                            by contradiction /* impossible chain */
                          next
                            case d_0_snd
                            by solve( (#vr.7, 0) ~~> (#vk.7, 0) )
                          qed
                        qed
                      qed
                    next
                      case c_xor_case_2
                      by solve( !KU( ~k2 ) @ #vk.12 )
                    next
                      case c_xor_case_3
                      by contradiction /* cyclic */
                    next
                      case coerce
                      solve( !KD( (~k2⊕x⊕~r1.1) ) ▶₀ #vk.6 )
                        case acceptreader
                        by solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                      next
                        case initiatereader
                        by contradiction /* impossible chain */
                      next
                        case tag1
                        solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                          case d_0_fst
                          by contradiction /* impossible chain */
                        next
                          case d_0_snd
                          by solve( (#vr.7, 0) ~~> (#vk.6, 0) )
                        qed
                      qed
                    qed
                  next
                    case coerce
                    solve( !KD( (x⊕~r1.2) ) ▶₀ #vk.5 )
                      case acceptreader
                      by solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                    next
                      case initiatereader
                      by contradiction /* impossible chain */
                    next
                      case tag1
                      solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                        case d_0_fst
                        by contradiction /* impossible chain */
                      next
                        case d_0_snd
                        by solve( (#vr.7, 0) ~~> (#vk.5, 0) )
                      qed
                    qed
                  qed
                next
                  case c_xor_case_11
                  solve( !KU( (x⊕~r1.2) ) @ #vk.6 )
                    case c_xor
                    solve( !KU( (~k2⊕~r1.1) ) @ #vk.7 )
                      case c_xor
                      by contradiction /* cyclic */
                    next
                      case coerce
                      solve( !KD( (~k2⊕~r1.1) ) ▶₀ #vk.6 )
                        case acceptreader
                        by solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                      next
                        case initiatereader
                        by contradiction /* impossible chain */
                      next
                        case tag1
                        solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                          case d_0_fst
                          by contradiction /* impossible chain */
                        next
                          case d_0_snd
                          by solve( (#vr.7, 0) ~~> (#vk.6, 0) )
                        qed
                      qed
                    qed
                  next
                    case coerce
                    solve( !KD( (x⊕~r1.2) ) ▶₀ #vk.5 )
                      case acceptreader
                      by solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                    next
                      case initiatereader
                      by contradiction /* impossible chain */
                    next
                      case tag1
                      solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                        case d_0_fst
                        by contradiction /* impossible chain */
                      next
                        case d_0_snd
                        by solve( (#vr.7, 0) ~~> (#vk.5, 0) )
                      qed
                    qed
                  qed
                next
                  case c_xor_case_12
                  solve( !KU( (x⊕~r1.2) ) @ #vk.6 )
                    case c_xor
                    solve( !KU( (~r1⊕x⊕~r1.1) ) @ #vk.7 )
                      case c_xor_case_1
                      solve( !KU( (~k⊕~k2) ) @ #vk.8 )
                        case c_xor
                        by solve( !KU( ~k2 ) @ #vk.12 )
                      next
                        case coerce
                        solve( !KD( (~k⊕~k2) ) ▶₀ #vk.7 )
                          case acceptreader
                          by solve( (#vl.2, 0) ~~> (#vk.7, 0) )
                        next
                          case initiatereader
                          by contradiction /* impossible chain */
                        next
                          case tag1
                          solve( (#vl.2, 0) ~~> (#vk.7, 0) )
                            case d_0_fst
                            by contradiction /* impossible chain */
                          next
                            case d_0_snd
                            by solve( (#vr.7, 0) ~~> (#vk.7, 0) )
                          qed
                        qed
                      qed
                    next
                      case c_xor_case_2
                      by contradiction /* cyclic */
                    next
                      case c_xor_case_3
                      by contradiction /* cyclic */
                    next
                      case coerce
                      solve( !KD( (~r1⊕x⊕~r1.1) ) ▶₀ #vk.6 )
                        case acceptreader
                        by solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                      next
                        case initiatereader
                        by contradiction /* impossible chain */
                      next
                        case tag1
                        solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                          case d_0_fst
                          by contradiction /* impossible chain */
                        next
                          case d_0_snd
                          by solve( (#vr.7, 0) ~~> (#vk.6, 0) )
                        qed
                      qed
                    qed
                  next
                    case coerce
                    solve( !KD( (x⊕~r1.2) ) ▶₀ #vk.5 )
                      case acceptreader
                      by solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                    next
                      case initiatereader
                      by contradiction /* impossible chain */
                    next
                      case tag1
                      solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                        case d_0_fst
                        by contradiction /* impossible chain */
                      next
                        case d_0_snd
                        by solve( (#vr.7, 0) ~~> (#vk.5, 0) )
                      qed
                    qed
                  qed
                next
                  case c_xor_case_13
                  solve( !KU( (x⊕~r1.2) ) @ #vk.6 )
                    case c_xor
                    solve( !KU( (~r1⊕~r1.1) ) @ #vk.7 )
                      case c_xor
                      by contradiction /* cyclic */
                    next
                      case coerce
                      solve( !KD( (~r1⊕~r1.1) ) ▶₀ #vk.6 )
                        case acceptreader
                        by solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                      next
                        case initiatereader
                        by contradiction /* impossible chain */
                      next
                        case tag1
                        solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                          case d_0_fst
                          by contradiction /* impossible chain */
                        next
                          case d_0_snd
                          by solve( (#vr.7, 0) ~~> (#vk.6, 0) )
                        qed
                      qed
                    qed
                  next
                    case coerce
                    solve( !KD( (x⊕~r1.2) ) ▶₀ #vk.5 )
                      case acceptreader
                      by solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                    next
                      case initiatereader
                      by contradiction /* impossible chain */
                    next
                      case tag1
                      solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                        case d_0_fst
                        by contradiction /* impossible chain */
                      next
                        case d_0_snd
                        by solve( (#vr.7, 0) ~~> (#vk.5, 0) )
                      qed
                    qed
                  qed
                next
                  case c_xor_case_14
                  solve( !KU( (x⊕~r1.2) ) @ #vk.6 )
                    case c_xor
                    solve( !KU( (x⊕~r1.1) ) @ #vk.7 )
                      case c_xor
                      by contradiction /* cyclic */
                    next
                      case coerce
                      solve( !KD( (x⊕~r1.1) ) ▶₀ #vk.6 )
                        case acceptreader
                        by solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                      next
                        case initiatereader
                        by contradiction /* impossible chain */
                      next
                        case tag1
                        solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                          case d_0_fst
                          by contradiction /* impossible chain */
                        next
                          case d_0_snd
                          by solve( (#vr.7, 0) ~~> (#vk.6, 0) )
                        qed
                      qed
                    qed
                  next
                    case coerce
                    solve( !KD( (x⊕~r1.2) ) ▶₀ #vk.5 )
                      case acceptreader
                      by solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                    next
                      case initiatereader
                      by contradiction /* impossible chain */
                    next
                      case tag1
                      solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                        case d_0_fst
                        by contradiction /* impossible chain */
                      next
                        case d_0_snd
                        by solve( (#vr.7, 0) ~~> (#vk.5, 0) )
                      qed
                    qed
                  qed
                next
                  case c_xor_case_15
                  by contradiction /* cyclic */
                next
                  case coerce
                  solve( !KD( (~k⊕~k2⊕~r1⊕x⊕~r1.1) ) ▶₀ #vk.4 )
                    case acceptreader
                    by solve( (#vl.2, 0) ~~> (#vk.4, 0) )
                  next
                    case initiatereader
                    by contradiction /* impossible chain */
                  next
                    case tag1
                    solve( (#vl.2, 0) ~~> (#vk.4, 0) )
                      case d_0_fst
                      by contradiction /* impossible chain */
                    next
                      case d_0_snd
                      by solve( (#vr.7, 0) ~~> (#vk.4, 0) )
                    qed
                  qed
                qed
              qed
            qed
          next
            case coerce
            solve( !KD( (x⊕h((~k⊕~r1⊕x⊕~r1.1))) ) ▶₀ #vk.2 )
              case acceptreader
              by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
            next
              case initiatereader
              by contradiction /* impossible chain */
            next
              case tag1
              solve( (#vl.1, 0) ~~> (#vk.2, 0) )
                case d_0_fst
                by contradiction /* impossible chain */
              next
                case d_0_snd
                by solve( (#vr.5, 0) ~~> (#vk.2, 0) )
              qed
            qed
          qed
        next
          case coerce
          solve( !KD( (x⊕~r1.1) ) ▶₀ #vk.1 )
            case acceptreader
            by solve( (#vl.1, 0) ~~> (#vk.1, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.1, 0) ~~> (#vk.1, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.5, 0) ~~> (#vk.1, 0) )
            qed
          qed
        qed
      qed
    qed
  next
    case split_case_6
    solve( !KU( h((~k⊕~r1⊕x⊕h((~k⊕x)))) ) @ #vk )
      case c_h
      solve( !KU( (~r1⊕x) ) @ #vk.1 )
        case c_xor
        by contradiction /* cyclic */
      next
        case coerce
        solve( !KD( (~r1⊕x) ) ▶₀ #vk.1 )
          case acceptreader
          by solve( (#vl, 0) ~~> (#vk.1, 0) )
        next
          case initiatereader
          by contradiction /* impossible chain */
        next
          case tag1
          solve( (#vl, 0) ~~> (#vk.1, 0) )
            case d_0_fst
            by contradiction /* impossible chain */
          next
            case d_0_snd
            by solve( (#vr.3, 0) ~~> (#vk.1, 0) )
          qed
        qed
      qed
    next
      case tag1_case_1
      solve( !KU( (~r1⊕x) ) @ #vk.1 )
        case c_xor
        by contradiction /* cyclic */
      next
        case coerce
        solve( !KD( (~r1⊕x) ) ▶₀ #vk.1 )
          case acceptreader
          by solve( (#vl.1, 0) ~~> (#vk.1, 0) )
        next
          case initiatereader
          by contradiction /* impossible chain */
        next
          case tag1
          solve( (#vl.1, 0) ~~> (#vk.1, 0) )
            case d_0_fst
            by contradiction /* impossible chain */
          next
            case d_0_snd
            by solve( (#vr.5, 0) ~~> (#vk.1, 0) )
          qed
        qed
      qed
    next
      case tag1_case_2
      solve( !KU( (~r1⊕x) ) @ #vk.1 )
        case c_xor
        by contradiction /* cyclic */
      next
        case coerce
        solve( !KD( (~r1⊕x) ) ▶₀ #vk.1 )
          case acceptreader
          by solve( (#vl.1, 0) ~~> (#vk.1, 0) )
        next
          case initiatereader
          by contradiction /* impossible chain */
        next
          case tag1
          solve( (#vl.1, 0) ~~> (#vk.1, 0) )
            case d_0_fst
            by contradiction /* impossible chain */
          next
            case d_0_snd
            by solve( (#vr.5, 0) ~~> (#vk.1, 0) )
          qed
        qed
      qed
    qed
  next
    case split_case_7
    solve( !KU( h((~r1⊕z⊕h(z))) ) @ #vk )
      case c_h
      solve( !KU( (~k⊕~r1⊕z) ) @ #vk.1 )
        case c_xor_case_1
        by contradiction /* cyclic */
      next
        case c_xor_case_2
        by solve( !KU( ~k ) @ #vk.4 )
      next
        case c_xor_case_3
        solve( !KU( (~r1⊕z⊕h(z)) ) @ #vk.2 )
          case c_xor_case_1
          solve( !KU( (~k⊕~r1) ) @ #vk.4 )
            case c_xor
            by contradiction /* cyclic */
          next
            case coerce
            solve( !KD( (~k⊕~r1) ) ▶₀ #vk.3 )
              case acceptreader
              by solve( (#vl, 0) ~~> (#vk.3, 0) )
            next
              case initiatereader
              by contradiction /* impossible chain */
            next
              case tag1
              solve( (#vl, 0) ~~> (#vk.3, 0) )
                case d_0_fst
                by contradiction /* impossible chain */
              next
                case d_0_snd
                by solve( (#vr.3, 0) ~~> (#vk.3, 0) )
              qed
            qed
          qed
        next
          case c_xor_case_2
          solve( !KU( (~k⊕~r1) ) @ #vk.4 )
            case c_xor
            by contradiction /* cyclic */
          next
            case coerce
            solve( !KD( (~k⊕~r1) ) ▶₀ #vk.3 )
              case acceptreader
              by solve( (#vl, 0) ~~> (#vk.3, 0) )
            next
              case initiatereader
              by contradiction /* impossible chain */
            next
              case tag1
              solve( (#vl, 0) ~~> (#vk.3, 0) )
                case d_0_fst
                by contradiction /* impossible chain */
              next
                case d_0_snd
                by solve( (#vr.3, 0) ~~> (#vk.3, 0) )
              qed
            qed
          qed
        next
          case c_xor_case_3
          solve( !KU( (~k⊕~r1) ) @ #vk.4 )
            case c_xor
            by contradiction /* cyclic */
          next
            case coerce
            solve( !KD( (~k⊕~r1) ) ▶₀ #vk.3 )
              case acceptreader
              by solve( (#vl, 0) ~~> (#vk.3, 0) )
            next
              case initiatereader
              by contradiction /* impossible chain */
            next
              case tag1
              solve( (#vl, 0) ~~> (#vk.3, 0) )
                case d_0_fst
                by contradiction /* impossible chain */
              next
                case d_0_snd
                by solve( (#vr.3, 0) ~~> (#vk.3, 0) )
              qed
            qed
          qed
        next
          case coerce
          solve( !KD( (~r1⊕z⊕h(z)) ) ▶₀ #vk.2 )
            case acceptreader
            by solve( (#vl, 0) ~~> (#vk.2, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl, 0) ~~> (#vk.2, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.3, 0) ~~> (#vk.2, 0) )
            qed
          qed
        qed
      next
        case coerce
        solve( !KD( (~k⊕~r1⊕z) ) ▶₀ #vk.1 )
          case acceptreader
          by solve( (#vl, 0) ~~> (#vk.1, 0) )
        next
          case initiatereader
          by contradiction /* impossible chain */
        next
          case tag1
          solve( (#vl, 0) ~~> (#vk.1, 0) )
            case d_0_fst
            by contradiction /* impossible chain */
          next
            case d_0_snd
            by solve( (#vr.3, 0) ~~> (#vk.1, 0) )
          qed
        qed
      qed
    next
      case tag1_case_1
      solve( !KU( (~k⊕~r1⊕z) ) @ #vk.1 )
        case c_xor_case_1
        by contradiction /* cyclic */
      next
        case c_xor_case_2
        by solve( !KU( ~k ) @ #vk.4 )
      next
        case c_xor_case_3
        solve( !KU( (~k⊕~r1) ) @ #vk.4 )
          case c_xor
          by contradiction /* cyclic */
        next
          case coerce
          solve( !KD( (~k⊕~r1) ) ▶₀ #vk.2 )
            case acceptreader
            by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.1, 0) ~~> (#vk.2, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.5, 0) ~~> (#vk.2, 0) )
            qed
          qed
        qed
      next
        case coerce
        solve( !KD( (~k⊕~r1⊕z) ) ▶₀ #vk.1 )
          case acceptreader
          by solve( (#vl.1, 0) ~~> (#vk.1, 0) )
        next
          case initiatereader
          by contradiction /* impossible chain */
        next
          case tag1
          solve( (#vl.1, 0) ~~> (#vk.1, 0) )
            case d_0_fst
            by contradiction /* impossible chain */
          next
            case d_0_snd
            by solve( (#vr.5, 0) ~~> (#vk.1, 0) )
          qed
        qed
      qed
    next
      case tag1_case_2
      solve( !KU( (~k⊕~r1⊕z) ) @ #vk.1 )
        case c_xor_case_1
        by contradiction /* cyclic */
      next
        case c_xor_case_2
        by solve( !KU( ~k ) @ #vk.4 )
      next
        case c_xor_case_3
        solve( !KU( (~x⊕x.1⊕x.2) ) @ #vk.2 )
          case c_xor_case_1
          solve( !KU( (~k⊕~r1) ) @ #vk.4 )
            case c_xor
            by contradiction /* cyclic */
          next
            case coerce
            solve( !KD( (~k⊕~r1) ) ▶₀ #vk.3 )
              case acceptreader
              by solve( (#vl.1, 0) ~~> (#vk.3, 0) )
            next
              case initiatereader
              by contradiction /* impossible chain */
            next
              case tag1
              solve( (#vl.1, 0) ~~> (#vk.3, 0) )
                case d_0_fst
                by contradiction /* impossible chain */
              next
                case d_0_snd
                by solve( (#vr.5, 0) ~~> (#vk.3, 0) )
              qed
            qed
          qed
        next
          case c_xor_case_2
          solve( !KU( ~x.2 ) @ #vk.6 )
            case fresh
            solve( !KU( (~k⊕~r1) ) @ #vk.5 )
              case c_xor
              by contradiction /* cyclic */
            next
              case coerce
              solve( !KD( (~k⊕~r1) ) ▶₀ #vk.4 )
                case acceptreader
                by solve( (#vl.1, 0) ~~> (#vk.4, 0) )
              next
                case initiatereader
                by contradiction /* impossible chain */
              next
                case tag1
                solve( (#vl.1, 0) ~~> (#vk.4, 0) )
                  case d_0_fst
                  by contradiction /* impossible chain */
                next
                  case d_0_snd
                  by solve( (#vr.5, 0) ~~> (#vk.4, 0) )
                qed
              qed
            qed
          next
            case tag1
            solve( !KU( (~k⊕~r1) ) @ #vk.5 )
              case c_xor
              by contradiction /* cyclic */
            next
              case coerce
              solve( !KD( (~k⊕~r1) ) ▶₀ #vk.4 )
                case acceptreader
                by solve( (#vl.2, 0) ~~> (#vk.4, 0) )
              next
                case initiatereader
                by contradiction /* impossible chain */
              next
                case tag1
                solve( (#vl.2, 0) ~~> (#vk.4, 0) )
                  case d_0_fst
                  by contradiction /* impossible chain */
                next
                  case d_0_snd
                  by solve( (#vr.7, 0) ~~> (#vk.4, 0) )
                qed
              qed
            qed
          qed
        next
          case c_xor_case_3
          solve( !KU( (~k⊕~r1) ) @ #vk.4 )
            case c_xor
            by contradiction /* cyclic */
          next
            case coerce
            solve( !KD( (~k⊕~r1) ) ▶₀ #vk.3 )
              case acceptreader
              by solve( (#vl.1, 0) ~~> (#vk.3, 0) )
            next
              case initiatereader
              by contradiction /* impossible chain */
            next
              case tag1
              solve( (#vl.1, 0) ~~> (#vk.3, 0) )
                case d_0_fst
                by contradiction /* impossible chain */
              next
                case d_0_snd
                by solve( (#vr.5, 0) ~~> (#vk.3, 0) )
              qed
            qed
          qed
        next
          case coerce
          solve( !KD( (~x⊕x.1⊕x.2) ) ▶₀ #vk.2 )
            case acceptreader
            by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.1, 0) ~~> (#vk.2, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.5, 0) ~~> (#vk.2, 0) )
            qed
          qed
        qed
      next
        case coerce
        solve( !KD( (~k⊕~r1⊕z) ) ▶₀ #vk.1 )
          case acceptreader
          by solve( (#vl.1, 0) ~~> (#vk.1, 0) )
        next
          case initiatereader
          by contradiction /* impossible chain */
        next
          case tag1
          solve( (#vl.1, 0) ~~> (#vk.1, 0) )
            case d_0_fst
            by contradiction /* impossible chain */
          next
            case d_0_snd
            by solve( (#vr.5, 0) ~~> (#vk.1, 0) )
          qed
        qed
      qed
    qed
  next
    case split_case_8
    solve( splitEqs(1) )
      case split
      solve( !KU( h((x⊕h((~r1⊕x)))) ) @ #vk )
        case c_h
        solve( !KU( (~k⊕x) ) @ #vk.1 )
          case c_xor
          by solve( !KU( ~k ) @ #vk.4 )
        next
          case coerce
          solve( !KD( (~k⊕x) ) ▶₀ #vk.1 )
            case acceptreader
            by solve( (#vl, 0) ~~> (#vk.1, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl, 0) ~~> (#vk.1, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.3, 0) ~~> (#vk.1, 0) )
            qed
          qed
        qed
      next
        case tag1_case_1
        solve( !KU( (~k⊕x) ) @ #vk.1 )
          case c_xor
          by solve( !KU( ~k ) @ #vk.4 )
        next
          case coerce
          solve( !KD( (~k⊕x) ) ▶₀ #vk.1 )
            case acceptreader
            by solve( (#vl.1, 0) ~~> (#vk.1, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.1, 0) ~~> (#vk.1, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.5, 0) ~~> (#vk.1, 0) )
            qed
          qed
        qed
      next
        case tag1_case_2
        solve( !KU( (~k⊕x) ) @ #vk.1 )
          case c_xor
          by solve( !KU( ~k ) @ #vk.4 )
        next
          case coerce
          solve( !KD( (~k⊕x) ) ▶₀ #vk.1 )
            case acceptreader
            by solve( (#vl.1, 0) ~~> (#vk.1, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.1, 0) ~~> (#vk.1, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.5, 0) ~~> (#vk.1, 0) )
            qed
          qed
        qed
      qed
    qed
  qed
next
  case tag1_case_2
  solve( splitEqs(0) )
    case split_case_1
    by solve( !KU( ~k ) @ #vk.1 )
  next
    case split_case_2
    by contradiction /* cyclic */
  next
    case split_case_3
    solve( !KU( h((~k⊕h((~k⊕~r1)))) ) @ #vk )
      case c_h
      solve( !KU( (~k⊕h((~k⊕~r1))) ) @ #vk.2 )
        case c_xor
        by solve( !KU( ~k ) @ #vk.4 )
      next
        case coerce
        solve( !KD( (~k⊕h((~k⊕~r1))) ) ▶₀ #vk.1 )
          case acceptreader
          by solve( (#vl, 0) ~~> (#vk.1, 0) )
        next
          case initiatereader
          by contradiction /* impossible chain */
        next
          case tag1
          solve( (#vl, 0) ~~> (#vk.1, 0) )
            case d_0_fst
            by contradiction /* impossible chain */
          next
            case d_0_snd
            by solve( (#vr.3, 0) ~~> (#vk.1, 0) )
          qed
        qed
      qed
    next
      case tag1_case_1
      solve( !KU( (x⊕~x.1) ) @ #vk.2 )
        case c_xor
        solve( !KU( ~x ) @ #vk.3 )
          case fresh
          by solve( splitEqs(3) )
        next
          case tag1_case_1
          by solve( splitEqs(3) )
        next
          case tag1_case_2
          by solve( splitEqs(3) )
        qed
      next
        case coerce
        solve( !KD( (x⊕~x.1) ) ▶₀ #vk.1 )
          case acceptreader
          by solve( (#vl.1, 0) ~~> (#vk.1, 0) )
        next
          case initiatereader
          by contradiction /* impossible chain */
        next
          case tag1
          solve( (#vl.1, 0) ~~> (#vk.1, 0) )
            case d_0_fst
            by contradiction /* impossible chain */
          next
            case d_0_snd
            by solve( (#vr.5, 0) ~~> (#vk.1, 0) )
          qed
        qed
      qed
    next
      case tag1_case_2
      solve( !KU( (x⊕~x.1) ) @ #vk.2 )
        case c_xor
        solve( !KU( ~x ) @ #vk.3 )
          case fresh
          by solve( splitEqs(3) )
        next
          case tag1_case_1
          by solve( splitEqs(3) )
        next
          case tag1_case_2
          by solve( splitEqs(3) )
        qed
      next
        case coerce
        solve( !KD( (x⊕~x.1) ) ▶₀ #vk.1 )
          case acceptreader
          by solve( (#vl.1, 0) ~~> (#vk.1, 0) )
        next
          case initiatereader
          by contradiction /* impossible chain */
        next
          case tag1
          solve( (#vl.1, 0) ~~> (#vk.1, 0) )
            case d_0_fst
            by contradiction /* impossible chain */
          next
            case d_0_snd
            by solve( (#vr.5, 0) ~~> (#vk.1, 0) )
          qed
        qed
      qed
    qed
  next
    case split_case_4
    solve( !KU( h((~r1⊕h(zero))) ) @ #vk )
      case c_h
      solve( !KU( (~k⊕~r1) ) @ #vk.1 )
        case c_xor
        by contradiction /* cyclic */
      next
        case coerce
        solve( !KD( (~k⊕~r1) ) ▶₀ #vk.1 )
          case acceptreader
          by solve( (#vl, 0) ~~> (#vk.1, 0) )
        next
          case initiatereader
          by contradiction /* impossible chain */
        next
          case tag1
          solve( (#vl, 0) ~~> (#vk.1, 0) )
            case d_0_fst
            by contradiction /* impossible chain */
          next
            case d_0_snd
            by solve( (#vr.3, 0) ~~> (#vk.1, 0) )
          qed
        qed
      qed
    next
      case tag1_case_1
      solve( !KU( (~k⊕~r1) ) @ #vk.1 )
        case c_xor
        by contradiction /* cyclic */
      next
        case coerce
        solve( !KD( (~k⊕~r1) ) ▶₀ #vk.1 )
          case acceptreader
          by solve( (#vl.1, 0) ~~> (#vk.1, 0) )
        next
          case initiatereader
          by contradiction /* impossible chain */
        next
          case tag1
          solve( (#vl.1, 0) ~~> (#vk.1, 0) )
            case d_0_fst
            by contradiction /* impossible chain */
          next
            case d_0_snd
            by solve( (#vr.5, 0) ~~> (#vk.1, 0) )
          qed
        qed
      qed
    next
      case tag1_case_2
      solve( !KU( (~k⊕~r1) ) @ #vk.1 )
        case c_xor
        by contradiction /* cyclic */
      next
        case coerce
        solve( !KD( (~k⊕~r1) ) ▶₀ #vk.1 )
          case acceptreader
          by solve( (#vl.1, 0) ~~> (#vk.1, 0) )
        next
          case initiatereader
          by contradiction /* impossible chain */
        next
          case tag1
          solve( (#vl.1, 0) ~~> (#vk.1, 0) )
            case d_0_fst
            by contradiction /* impossible chain */
          next
            case d_0_snd
            by solve( (#vr.5, 0) ~~> (#vk.1, 0) )
          qed
        qed
      qed
    qed
  next
    case split_case_5
    solve( !KU( h((~k⊕r0⊕h((~k⊕~r1⊕r0)))) ) @ #vk )
      case c_h
      solve( !KU( (~k⊕r0⊕h((~k⊕~r1⊕r0))) ) @ #vk.2 )
        case c_xor_case_1
        solve( !KU( (~k⊕h((~k⊕~r1⊕r0))) ) @ #vk.3 )
          case c_xor
          by solve( !KU( ~k ) @ #vk.5 )
        next
          case coerce
          solve( !KD( (~k⊕h((~k⊕~r1⊕r0))) ) ▶₀ #vk.2 )
            case acceptreader
            by solve( (#vl, 0) ~~> (#vk.2, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl, 0) ~~> (#vk.2, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.3, 0) ~~> (#vk.2, 0) )
            qed
          qed
        qed
      next
        case c_xor_case_2
        by solve( !KU( ~k ) @ #vk.4 )
      next
        case c_xor_case_3
        solve( !KU( (~k⊕r0) ) @ #vk.4 )
          case c_xor
          by solve( !KU( ~k ) @ #vk.5 )
        next
          case coerce
          solve( !KD( (~k⊕r0) ) ▶₀ #vk.2 )
            case acceptreader
            by solve( (#vl, 0) ~~> (#vk.2, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl, 0) ~~> (#vk.2, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.3, 0) ~~> (#vk.2, 0) )
            qed
          qed
        qed
      next
        case coerce
        solve( !KD( (~k⊕r0⊕h((~k⊕~r1⊕r0))) ) ▶₀ #vk.1 )
          case acceptreader
          by solve( (#vl, 0) ~~> (#vk.1, 0) )
        next
          case initiatereader
          by contradiction /* impossible chain */
        next
          case tag1
          solve( (#vl, 0) ~~> (#vk.1, 0) )
            case d_0_fst
            by contradiction /* impossible chain */
          next
            case d_0_snd
            by solve( (#vr.3, 0) ~~> (#vk.1, 0) )
          qed
        qed
      qed
    next
      case tag1_case_1
      solve( splitEqs(3) )
        case split_case_1
        by solve( !KU( ~k1 ) @ #vk.1 )
      next
        case split_case_2
        solve( !KU( (~k⊕~k1⊕r0⊕~r1.1⊕h((~k⊕~r1⊕r0))) ) @ #vk.2 )
          case c_xor_case_01
          by contradiction /* cyclic */
        next
          case c_xor_case_02
          solve( !KU( (~k⊕~k1⊕~r1.1⊕h((~k⊕~r1⊕r0))) ) @ #vk.3 )
            case c_xor_case_1
            by contradiction /* cyclic */
          next
            case c_xor_case_2
            by solve( !KU( ~k1 ) @ #vk.5 )
          next
            case c_xor_case_3
            solve( !KU( (~k⊕h((~k⊕~r1⊕r0))) ) @ #vk.4 )
              case c_xor
              by solve( !KU( ~k ) @ #vk.7 )
            next
              case coerce
              solve( !KD( (~k⊕h((~k⊕~r1⊕r0))) ) ▶₀ #vk.3 )
                case acceptreader
                by solve( (#vl.1, 0) ~~> (#vk.3, 0) )
              next
                case initiatereader
                by contradiction /* impossible chain */
              next
                case tag1
                solve( (#vl.1, 0) ~~> (#vk.3, 0) )
                  case d_0_fst
                  by contradiction /* impossible chain */
                next
                  case d_0_snd
                  by solve( (#vr.5, 0) ~~> (#vk.3, 0) )
                qed
              qed
            qed
          next
            case c_xor_case_4
            by solve( !KU( ~k ) @ #vk.5 )
          next
            case c_xor_case_5
            solve( !KU( (~k1⊕h((~k⊕~r1⊕r0))) ) @ #vk.4 )
              case c_xor
              by solve( !KU( ~k1 ) @ #vk.7 )
            next
              case coerce
              solve( !KD( (~k1⊕h((~k⊕~r1⊕r0))) ) ▶₀ #vk.3 )
                case acceptreader
                by solve( (#vl.1, 0) ~~> (#vk.3, 0) )
              next
                case initiatereader
                by contradiction /* impossible chain */
              next
                case tag1
                solve( (#vl.1, 0) ~~> (#vk.3, 0) )
                  case d_0_fst
                  by contradiction /* impossible chain */
                next
                  case d_0_snd
                  by solve( (#vr.5, 0) ~~> (#vk.3, 0) )
                qed
              qed
            qed
          next
            case c_xor_case_6
            solve( !KU( (~r1.1⊕h((~k⊕~r1⊕r0))) ) @ #vk.4 )
              case c_xor
              by contradiction /* cyclic */
            next
              case coerce
              solve( !KD( (~r1.1⊕h((~k⊕~r1⊕r0))) ) ▶₀ #vk.3 )
                case acceptreader
                by solve( (#vl.1, 0) ~~> (#vk.3, 0) )
              next
                case initiatereader
                by contradiction /* impossible chain */
              next
                case tag1
                solve( (#vl.1, 0) ~~> (#vk.3, 0) )
                  case d_0_fst
                  by contradiction /* impossible chain */
                next
                  case d_0_snd
                  by solve( (#vr.5, 0) ~~> (#vk.3, 0) )
                qed
              qed
            qed
          next
            case c_xor_case_7
            solve( !KU( (~k⊕~k1⊕~r1.1) ) @ #vk.5 )
              case c_xor_case_1
              by solve( !KU( ~k1 ) @ #vk.7 )
            next
              case c_xor_case_2
              by solve( !KU( ~k ) @ #vk.7 )
            next
              case c_xor_case_3
              by contradiction /* cyclic */
            next
              case coerce
              solve( !KD( (~k⊕~k1⊕~r1.1) ) ▶₀ #vk.3 )
                case acceptreader
                by solve( (#vl.1, 0) ~~> (#vk.3, 0) )
              next
                case initiatereader
                by contradiction /* impossible chain */
              next
                case tag1
                solve( (#vl.1, 0) ~~> (#vk.3, 0) )
                  case d_0_fst
                  by contradiction /* impossible chain */
                next
                  case d_0_snd
                  by solve( (#vr.5, 0) ~~> (#vk.3, 0) )
                qed
              qed
            qed
          next
            case coerce
            solve( !KD( (~k⊕~k1⊕~r1.1⊕h((~k⊕~r1⊕r0))) ) ▶₀ #vk.2 )
              case acceptreader
              by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
            next
              case initiatereader
              by contradiction /* impossible chain */
            next
              case tag1
              solve( (#vl.1, 0) ~~> (#vk.2, 0) )
                case d_0_fst
                by contradiction /* impossible chain */
              next
                case d_0_snd
                by solve( (#vr.5, 0) ~~> (#vk.2, 0) )
              qed
            qed
          qed
        next
          case c_xor_case_03
          solve( !KU( (~k⊕~k1⊕h((~k⊕~r1⊕r0))) ) @ #vk.3 )
            case c_xor_case_1
            by solve( !KU( ~k1 ) @ #vk.6 )
          next
            case c_xor_case_2
            by solve( !KU( ~k ) @ #vk.6 )
          next
            case c_xor_case_3
            solve( !KU( (r0⊕~r1.1) ) @ #vk.4 )
              case c_xor
              by contradiction /* cyclic */
            next
              case coerce
              solve( !KD( (r0⊕~r1.1) ) ▶₀ #vk.3 )
                case acceptreader
                by solve( (#vl.1, 0) ~~> (#vk.3, 0) )
              next
                case initiatereader
                by contradiction /* impossible chain */
              next
                case tag1
                solve( (#vl.1, 0) ~~> (#vk.3, 0) )
                  case d_0_fst
                  by contradiction /* impossible chain */
                next
                  case d_0_snd
                  by solve( (#vr.5, 0) ~~> (#vk.3, 0) )
                qed
              qed
            qed
          next
            case coerce
            solve( !KD( (~k⊕~k1⊕h((~k⊕~r1⊕r0))) ) ▶₀ #vk.2 )
              case acceptreader
              by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
            next
              case initiatereader
              by contradiction /* impossible chain */
            next
              case tag1
              solve( (#vl.1, 0) ~~> (#vk.2, 0) )
                case d_0_fst
                by contradiction /* impossible chain */
              next
                case d_0_snd
                by solve( (#vr.5, 0) ~~> (#vk.2, 0) )
              qed
            qed
          qed
        next
          case c_xor_case_04
          by solve( !KU( ~k1 ) @ #vk.4 )
        next
          case c_xor_case_05
          solve( !KU( (~k⊕r0⊕h((~k⊕~r1⊕r0))) ) @ #vk.3 )
            case c_xor_case_1
            solve( !KU( (~k1⊕~r1.1) ) @ #vk.4 )
              case c_xor
              by contradiction /* cyclic */
            next
              case coerce
              solve( !KD( (~k1⊕~r1.1) ) ▶₀ #vk.3 )
                case acceptreader
                by solve( (#vl.1, 0) ~~> (#vk.3, 0) )
              next
                case initiatereader
                by contradiction /* impossible chain */
              next
                case tag1
                solve( (#vl.1, 0) ~~> (#vk.3, 0) )
                  case d_0_fst
                  by contradiction /* impossible chain */
                next
                  case d_0_snd
                  by solve( (#vr.5, 0) ~~> (#vk.3, 0) )
                qed
              qed
            qed
          next
            case c_xor_case_2
            by solve( !KU( ~k ) @ #vk.6 )
          next
            case c_xor_case_3
            solve( !KU( (~k1⊕~r1.1) ) @ #vk.4 )
              case c_xor
              by contradiction /* cyclic */
            next
              case coerce
              solve( !KD( (~k1⊕~r1.1) ) ▶₀ #vk.3 )
                case acceptreader
                by solve( (#vl.1, 0) ~~> (#vk.3, 0) )
              next
                case initiatereader
                by contradiction /* impossible chain */
              next
                case tag1
                solve( (#vl.1, 0) ~~> (#vk.3, 0) )
                  case d_0_fst
                  by contradiction /* impossible chain */
                next
                  case d_0_snd
                  by solve( (#vr.5, 0) ~~> (#vk.3, 0) )
                qed
              qed
            qed
          next
            case coerce
            solve( !KD( (~k⊕r0⊕h((~k⊕~r1⊕r0))) ) ▶₀ #vk.2 )
              case acceptreader
              by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
            next
              case initiatereader
              by contradiction /* impossible chain */
            next
              case tag1
              solve( (#vl.1, 0) ~~> (#vk.2, 0) )
                case d_0_fst
                by contradiction /* impossible chain */
              next
                case d_0_snd
                by solve( (#vr.5, 0) ~~> (#vk.2, 0) )
              qed
            qed
          qed
        next
          case c_xor_case_06
          solve( !KU( (~k⊕~r1.1⊕h((~k⊕~r1⊕r0))) ) @ #vk.3 )
            case c_xor_case_1
            by contradiction /* cyclic */
          next
            case c_xor_case_2
            by solve( !KU( ~k ) @ #vk.6 )
          next
            case c_xor_case_3
            solve( !KU( (~k1⊕r0) ) @ #vk.4 )
              case c_xor
              by solve( !KU( ~k1 ) @ #vk.7 )
            next
              case coerce
              solve( !KD( (~k1⊕r0) ) ▶₀ #vk.3 )
                case acceptreader
                by solve( (#vl.1, 0) ~~> (#vk.3, 0) )
              next
                case initiatereader
                by contradiction /* impossible chain */
              next
                case tag1
                solve( (#vl.1, 0) ~~> (#vk.3, 0) )
                  case d_0_fst
                  by contradiction /* impossible chain */
                next
                  case d_0_snd
                  by solve( (#vr.5, 0) ~~> (#vk.3, 0) )
                qed
              qed
            qed
          next
            case coerce
            solve( !KD( (~k⊕~r1.1⊕h((~k⊕~r1⊕r0))) ) ▶₀ #vk.2 )
              case acceptreader
              by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
            next
              case initiatereader
              by contradiction /* impossible chain */
            next
              case tag1
              solve( (#vl.1, 0) ~~> (#vk.2, 0) )
                case d_0_fst
                by contradiction /* impossible chain */
              next
                case d_0_snd
                by solve( (#vr.5, 0) ~~> (#vk.2, 0) )
              qed
            qed
          qed
        next
          case c_xor_case_07
          solve( !KU( (~k⊕h((~k⊕~r1⊕r0))) ) @ #vk.3 )
            case c_xor
            by solve( !KU( ~k ) @ #vk.6 )
          next
            case coerce
            solve( !KD( (~k⊕h((~k⊕~r1⊕r0))) ) ▶₀ #vk.2 )
              case acceptreader
              by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
            next
              case initiatereader
              by contradiction /* impossible chain */
            next
              case tag1
              solve( (#vl.1, 0) ~~> (#vk.2, 0) )
                case d_0_fst
                by contradiction /* impossible chain */
              next
                case d_0_snd
                by solve( (#vr.5, 0) ~~> (#vk.2, 0) )
              qed
            qed
          qed
        next
          case c_xor_case_08
          by solve( !KU( ~k ) @ #vk.4 )
        next
          case c_xor_case_09
          solve( !KU( (~k1⊕r0⊕h((~k⊕~r1⊕r0))) ) @ #vk.3 )
            case c_xor_case_1
            solve( !KU( (~k⊕~r1.1) ) @ #vk.4 )
              case c_xor
              by contradiction /* cyclic */
            next
              case coerce
              solve( !KD( (~k⊕~r1.1) ) ▶₀ #vk.3 )
                case acceptreader
                by solve( (#vl.1, 0) ~~> (#vk.3, 0) )
              next
                case initiatereader
                by contradiction /* impossible chain */
              next
                case tag1
                solve( (#vl.1, 0) ~~> (#vk.3, 0) )
                  case d_0_fst
                  by contradiction /* impossible chain */
                next
                  case d_0_snd
                  by solve( (#vr.5, 0) ~~> (#vk.3, 0) )
                qed
              qed
            qed
          next
            case c_xor_case_2
            by solve( !KU( ~k1 ) @ #vk.6 )
          next
            case c_xor_case_3
            solve( !KU( (~k⊕~r1.1) ) @ #vk.4 )
              case c_xor
              by contradiction /* cyclic */
            next
              case coerce
              solve( !KD( (~k⊕~r1.1) ) ▶₀ #vk.3 )
                case acceptreader
                by solve( (#vl.1, 0) ~~> (#vk.3, 0) )
              next
                case initiatereader
                by contradiction /* impossible chain */
              next
                case tag1
                solve( (#vl.1, 0) ~~> (#vk.3, 0) )
                  case d_0_fst
                  by contradiction /* impossible chain */
                next
                  case d_0_snd
                  by solve( (#vr.5, 0) ~~> (#vk.3, 0) )
                qed
              qed
            qed
          next
            case coerce
            solve( !KD( (~k1⊕r0⊕h((~k⊕~r1⊕r0))) ) ▶₀ #vk.2 )
              case acceptreader
              by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
            next
              case initiatereader
              by contradiction /* impossible chain */
            next
              case tag1
              solve( (#vl.1, 0) ~~> (#vk.2, 0) )
                case d_0_fst
                by contradiction /* impossible chain */
              next
                case d_0_snd
                by solve( (#vr.5, 0) ~~> (#vk.2, 0) )
              qed
            qed
          qed
        next
          case c_xor_case_10
          solve( !KU( (~k1⊕~r1.1⊕h((~k⊕~r1⊕r0))) ) @ #vk.3 )
            case c_xor_case_1
            by contradiction /* cyclic */
          next
            case c_xor_case_2
            by solve( !KU( ~k1 ) @ #vk.6 )
          next
            case c_xor_case_3
            solve( !KU( (~k⊕r0) ) @ #vk.4 )
              case c_xor
              by solve( !KU( ~k ) @ #vk.7 )
            next
              case coerce
              solve( !KD( (~k⊕r0) ) ▶₀ #vk.3 )
                case acceptreader
                by solve( (#vl.1, 0) ~~> (#vk.3, 0) )
              next
                case initiatereader
                by contradiction /* impossible chain */
              next
                case tag1
                solve( (#vl.1, 0) ~~> (#vk.3, 0) )
                  case d_0_fst
                  by contradiction /* impossible chain */
                next
                  case d_0_snd
                  by solve( (#vr.5, 0) ~~> (#vk.3, 0) )
                qed
              qed
            qed
          next
            case coerce
            solve( !KD( (~k1⊕~r1.1⊕h((~k⊕~r1⊕r0))) ) ▶₀ #vk.2 )
              case acceptreader
              by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
            next
              case initiatereader
              by contradiction /* impossible chain */
            next
              case tag1
              solve( (#vl.1, 0) ~~> (#vk.2, 0) )
                case d_0_fst
                by contradiction /* impossible chain */
              next
                case d_0_snd
                by solve( (#vr.5, 0) ~~> (#vk.2, 0) )
              qed
            qed
          qed
        next
          case c_xor_case_11
          solve( !KU( (~k1⊕h((~k⊕~r1⊕r0))) ) @ #vk.3 )
            case c_xor
            by solve( !KU( ~k1 ) @ #vk.6 )
          next
            case coerce
            solve( !KD( (~k1⊕h((~k⊕~r1⊕r0))) ) ▶₀ #vk.2 )
              case acceptreader
              by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
            next
              case initiatereader
              by contradiction /* impossible chain */
            next
              case tag1
              solve( (#vl.1, 0) ~~> (#vk.2, 0) )
                case d_0_fst
                by contradiction /* impossible chain */
              next
                case d_0_snd
                by solve( (#vr.5, 0) ~~> (#vk.2, 0) )
              qed
            qed
          qed
        next
          case c_xor_case_12
          solve( !KU( (r0⊕~r1.1⊕h((~k⊕~r1⊕r0))) ) @ #vk.3 )
            case c_xor_case_1
            by contradiction /* cyclic */
          next
            case c_xor_case_2
            solve( !KU( (~k⊕~k1) ) @ #vk.4 )
              case c_xor
              by solve( !KU( ~k1 ) @ #vk.6 )
            next
              case coerce
              solve( !KD( (~k⊕~k1) ) ▶₀ #vk.3 )
                case acceptreader
                by solve( (#vl.1, 0) ~~> (#vk.3, 0) )
              next
                case initiatereader
                by contradiction /* impossible chain */
              next
                case tag1
                solve( (#vl.1, 0) ~~> (#vk.3, 0) )
                  case d_0_fst
                  by contradiction /* impossible chain */
                next
                  case d_0_snd
                  by solve( (#vr.5, 0) ~~> (#vk.3, 0) )
                qed
              qed
            qed
          next
            case c_xor_case_3
            solve( !KU( (~k⊕~k1) ) @ #vk.4 )
              case c_xor
              by solve( !KU( ~k1 ) @ #vk.7 )
            next
              case coerce
              solve( !KD( (~k⊕~k1) ) ▶₀ #vk.3 )
                case acceptreader
                by solve( (#vl.1, 0) ~~> (#vk.3, 0) )
              next
                case initiatereader
                by contradiction /* impossible chain */
              next
                case tag1
                solve( (#vl.1, 0) ~~> (#vk.3, 0) )
                  case d_0_fst
                  by contradiction /* impossible chain */
                next
                  case d_0_snd
                  by solve( (#vr.5, 0) ~~> (#vk.3, 0) )
                qed
              qed
            qed
          next
            case coerce
            solve( !KD( (r0⊕~r1.1⊕h((~k⊕~r1⊕r0))) ) ▶₀ #vk.2 )
              case acceptreader
              by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
            next
              case initiatereader
              by contradiction /* impossible chain */
            next
              case tag1
              solve( (#vl.1, 0) ~~> (#vk.2, 0) )
                case d_0_fst
                by contradiction /* impossible chain */
              next
                case d_0_snd
                by solve( (#vr.5, 0) ~~> (#vk.2, 0) )
              qed
            qed
          qed
        next
          case c_xor_case_13
          solve( !KU( (r0⊕h((~k⊕~r1⊕r0))) ) @ #vk.3 )
            case c_xor
            solve( !KU( (~k⊕~k1⊕~r1.1) ) @ #vk.4 )
              case c_xor_case_1
              by solve( !KU( ~k1 ) @ #vk.7 )
            next
              case c_xor_case_2
              by solve( !KU( ~k ) @ #vk.7 )
            next
              case c_xor_case_3
              by contradiction /* cyclic */
            next
              case coerce
              solve( !KD( (~k⊕~k1⊕~r1.1) ) ▶₀ #vk.3 )
                case acceptreader
                by solve( (#vl.1, 0) ~~> (#vk.3, 0) )
              next
                case initiatereader
                by contradiction /* impossible chain */
              next
                case tag1
                solve( (#vl.1, 0) ~~> (#vk.3, 0) )
                  case d_0_fst
                  by contradiction /* impossible chain */
                next
                  case d_0_snd
                  by solve( (#vr.5, 0) ~~> (#vk.3, 0) )
                qed
              qed
            qed
          next
            case coerce
            solve( !KD( (r0⊕h((~k⊕~r1⊕r0))) ) ▶₀ #vk.2 )
              case acceptreader
              by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
            next
              case initiatereader
              by contradiction /* impossible chain */
            next
              case tag1
              solve( (#vl.1, 0) ~~> (#vk.2, 0) )
                case d_0_fst
                by contradiction /* impossible chain */
              next
                case d_0_snd
                by solve( (#vr.5, 0) ~~> (#vk.2, 0) )
              qed
            qed
          qed
        next
          case c_xor_case_14
          solve( !KU( (~r1.1⊕h((~k⊕~r1⊕r0))) ) @ #vk.3 )
            case c_xor
            by contradiction /* cyclic */
          next
            case coerce
            solve( !KD( (~r1.1⊕h((~k⊕~r1⊕r0))) ) ▶₀ #vk.2 )
              case acceptreader
              by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
            next
              case initiatereader
              by contradiction /* impossible chain */
            next
              case tag1
              solve( (#vl.1, 0) ~~> (#vk.2, 0) )
                case d_0_fst
                by contradiction /* impossible chain */
              next
                case d_0_snd
                by solve( (#vr.5, 0) ~~> (#vk.2, 0) )
              qed
            qed
          qed
        next
          case c_xor_case_15
          solve( !KU( (~k⊕~k1⊕r0⊕~r1.1) ) @ #vk.4 )
            case c_xor_case_1
            solve( !KU( (~k⊕~k1⊕~r1.1) ) @ #vk.5 )
              case c_xor_case_1
              by solve( !KU( ~k1 ) @ #vk.7 )
            next
              case c_xor_case_2
              by solve( !KU( ~k ) @ #vk.7 )
            next
              case c_xor_case_3
              by contradiction /* cyclic */
            next
              case coerce
              solve( !KD( (~k⊕~k1⊕~r1.1) ) ▶₀ #vk.3 )
                case acceptreader
                by solve( (#vl.1, 0) ~~> (#vk.3, 0) )
              next
                case initiatereader
                by contradiction /* impossible chain */
              next
                case tag1
                solve( (#vl.1, 0) ~~> (#vk.3, 0) )
                  case d_0_fst
                  by contradiction /* impossible chain */
                next
                  case d_0_snd
                  by solve( (#vr.5, 0) ~~> (#vk.3, 0) )
                qed
              qed
            qed
          next
            case c_xor_case_2
            by solve( !KU( ~k1 ) @ #vk.6 )
          next
            case c_xor_case_3
            solve( !KU( (~k⊕~r1.1) ) @ #vk.5 )
              case c_xor
              by contradiction /* cyclic */
            next
              case coerce
              solve( !KD( (~k⊕~r1.1) ) ▶₀ #vk.3 )
                case acceptreader
                by solve( (#vl.1, 0) ~~> (#vk.3, 0) )
              next
                case initiatereader
                by contradiction /* impossible chain */
              next
                case tag1
                solve( (#vl.1, 0) ~~> (#vk.3, 0) )
                  case d_0_fst
                  by contradiction /* impossible chain */
                next
                  case d_0_snd
                  by solve( (#vr.5, 0) ~~> (#vk.3, 0) )
                qed
              qed
            qed
          next
            case c_xor_case_4
            by solve( !KU( ~k ) @ #vk.6 )
          next
            case c_xor_case_5
            solve( !KU( (~k1⊕~r1.1) ) @ #vk.5 )
              case c_xor
              by contradiction /* cyclic */
            next
              case coerce
              solve( !KD( (~k1⊕~r1.1) ) ▶₀ #vk.3 )
                case acceptreader
                by solve( (#vl.1, 0) ~~> (#vk.3, 0) )
              next
                case initiatereader
                by contradiction /* impossible chain */
              next
                case tag1
                solve( (#vl.1, 0) ~~> (#vk.3, 0) )
                  case d_0_fst
                  by contradiction /* impossible chain */
                next
                  case d_0_snd
                  by solve( (#vr.5, 0) ~~> (#vk.3, 0) )
                qed
              qed
            qed
          next
            case c_xor_case_6
            solve( !KU( (r0⊕~r1.1) ) @ #vk.5 )
              case c_xor
              by contradiction /* cyclic */
            next
              case coerce
              solve( !KD( (r0⊕~r1.1) ) ▶₀ #vk.3 )
                case acceptreader
                by solve( (#vl.1, 0) ~~> (#vk.3, 0) )
              next
                case initiatereader
                by contradiction /* impossible chain */
              next
                case tag1
                solve( (#vl.1, 0) ~~> (#vk.3, 0) )
                  case d_0_fst
                  by contradiction /* impossible chain */
                next
                  case d_0_snd
                  by solve( (#vr.5, 0) ~~> (#vk.3, 0) )
                qed
              qed
            qed
          next
            case c_xor_case_7
            by contradiction /* cyclic */
          next
            case coerce
            solve( !KD( (~k⊕~k1⊕r0⊕~r1.1) ) ▶₀ #vk.2 )
              case acceptreader
              by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
            next
              case initiatereader
              by contradiction /* impossible chain */
            next
              case tag1
              solve( (#vl.1, 0) ~~> (#vk.2, 0) )
                case d_0_fst
                by contradiction /* impossible chain */
              next
                case d_0_snd
                by solve( (#vr.5, 0) ~~> (#vk.2, 0) )
              qed
            qed
          qed
        next
          case coerce
          solve( !KD( (~k⊕~k1⊕r0⊕~r1.1⊕h((~k⊕~r1⊕r0))) ) ▶₀ #vk.1 )
            case acceptreader
            by solve( (#vl.1, 0) ~~> (#vk.1, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.1, 0) ~~> (#vk.1, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.5, 0) ~~> (#vk.1, 0) )
            qed
          qed
        qed
      next
        case split_case_3
        solve( !KU( (~k⊕~k1⊕h((~k⊕~r0⊕~r1))) ) @ #vk.2 )
          case c_xor_case_1
          by solve( !KU( ~k1 ) @ #vk.4 )
        next
          case c_xor_case_2
          by solve( !KU( ~k ) @ #vk.4 )
        next
          case c_xor_case_3
          solve( !KU( h((~k⊕~r0⊕~r1)) ) @ #vk.3 )
            case c_h
            solve( !KU( (~k⊕~k1) ) @ #vk.4 )
              case c_xor
              by solve( !KU( ~k1 ) @ #vk.6 )
            next
              case coerce
              solve( !KD( (~k⊕~k1) ) ▶₀ #vk.3 )
                case acceptreader
                by solve( (#vl.1, 0) ~~> (#vk.3, 0) )
              next
                case initiatereader
                by contradiction /* impossible chain */
              next
                case tag1
                solve( (#vl.1, 0) ~~> (#vk.3, 0) )
                  case d_0_fst
                  by contradiction /* impossible chain */
                next
                  case d_0_snd
                  by solve( (#vr.5, 0) ~~> (#vk.3, 0) )
                qed
              qed
            qed
          next
            case tag1_case_1
            by contradiction /* cyclic */
          next
            case tag1_case_2
            solve( !KU( (~k⊕~k1) ) @ #vk.4 )
              case c_xor
              by solve( !KU( ~k1 ) @ #vk.6 )
            next
              case coerce
              solve( !KD( (~k⊕~k1) ) ▶₀ #vk.3 )
                case acceptreader
                by solve( (#vl.2, 0) ~~> (#vk.3, 0) )
              next
                case initiatereader
                by contradiction /* impossible chain */
              next
                case tag1
                solve( (#vl.2, 0) ~~> (#vk.3, 0) )
                  case d_0_fst
                  by contradiction /* impossible chain */
                next
                  case d_0_snd
                  by solve( (#vr.7, 0) ~~> (#vk.3, 0) )
                qed
              qed
            qed
          qed
        next
          case coerce
          solve( !KD( (~k⊕~k1⊕h((~k⊕~r0⊕~r1))) ) ▶₀ #vk.1 )
            case acceptreader
            by solve( (#vl.1, 0) ~~> (#vk.1, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.1, 0) ~~> (#vk.1, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.5, 0) ~~> (#vk.1, 0) )
            qed
          qed
        qed
      next
        case split_case_4
        solve( !KU( (~k1⊕~r1.1) ) @ #vk.1 )
          case c_xor
          by solve( !KU( ~k1 ) @ #vk.4 )
        next
          case coerce
          solve( !KD( (~k1⊕~r1.1) ) ▶₀ #vk.1 )
            case acceptreader
            by solve( (#vl.1, 0) ~~> (#vk.1, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.1, 0) ~~> (#vk.1, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.5, 0) ~~> (#vk.1, 0) )
            qed
          qed
        qed
      next
        case split_case_5
        solve( !KU( (~k1⊕x⊕~r1.1) ) @ #vk.1 )
          case c_xor_case_1
          solve( !KU( (~k⊕x⊕h((~k⊕~k1⊕~r1⊕x⊕~r1.1))) ) @ #vk.2 )
            case c_xor_case_1
            solve( !KU( (~k1⊕~r1.1) ) @ #vk.3 )
              case c_xor
              by solve( !KU( ~k1 ) @ #vk.7 )
            next
              case coerce
              solve( !KD( (~k1⊕~r1.1) ) ▶₀ #vk.3 )
                case acceptreader
                by solve( (#vl.1, 0) ~~> (#vk.3, 0) )
              next
                case initiatereader
                by contradiction /* impossible chain */
              next
                case tag1
                solve( (#vl.1, 0) ~~> (#vk.3, 0) )
                  case d_0_fst
                  by contradiction /* impossible chain */
                next
                  case d_0_snd
                  by solve( (#vr.5, 0) ~~> (#vk.3, 0) )
                qed
              qed
            qed
          next
            case c_xor_case_2
            by solve( !KU( ~k ) @ #vk.6 )
          next
            case c_xor_case_3
            solve( !KU( (~k1⊕~r1.1) ) @ #vk.3 )
              case c_xor
              by solve( !KU( ~k1 ) @ #vk.8 )
            next
              case coerce
              solve( !KD( (~k1⊕~r1.1) ) ▶₀ #vk.3 )
                case acceptreader
                by solve( (#vl.1, 0) ~~> (#vk.3, 0) )
              next
                case initiatereader
                by contradiction /* impossible chain */
              next
                case tag1
                solve( (#vl.1, 0) ~~> (#vk.3, 0) )
                  case d_0_fst
                  by contradiction /* impossible chain */
                next
                  case d_0_snd
                  by solve( (#vr.5, 0) ~~> (#vk.3, 0) )
                qed
              qed
            qed
          next
            case coerce
            solve( !KD( (~k⊕x⊕h((~k⊕~k1⊕~r1⊕x⊕~r1.1))) ) ▶₀ #vk.2 )
              case acceptreader
              by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
            next
              case initiatereader
              by contradiction /* impossible chain */
            next
              case tag1
              solve( (#vl.1, 0) ~~> (#vk.2, 0) )
                case d_0_fst
                by contradiction /* impossible chain */
              next
                case d_0_snd
                by solve( (#vr.5, 0) ~~> (#vk.2, 0) )
              qed
            qed
          qed
        next
          case c_xor_case_2
          by solve( !KU( ~k1 ) @ #vk.4 )
        next
          case c_xor_case_3
          solve( !KU( (~k⊕x⊕h((~k⊕~k1⊕~r1⊕x⊕~r1.1))) ) @ #vk.2 )
            case c_xor_case_1
            solve( !KU( (~k1⊕x) ) @ #vk.4 )
              case c_xor
              by solve( !KU( ~k1 ) @ #vk.7 )
            next
              case coerce
              solve( !KD( (~k1⊕x) ) ▶₀ #vk.3 )
                case acceptreader
                by solve( (#vl.1, 0) ~~> (#vk.3, 0) )
              next
                case initiatereader
                by contradiction /* impossible chain */
              next
                case tag1
                solve( (#vl.1, 0) ~~> (#vk.3, 0) )
                  case d_0_fst
                  by contradiction /* impossible chain */
                next
                  case d_0_snd
                  by solve( (#vr.5, 0) ~~> (#vk.3, 0) )
                qed
              qed
            qed
          next
            case c_xor_case_2
            by solve( !KU( ~k ) @ #vk.6 )
          next
            case c_xor_case_3
            solve( !KU( (~k1⊕x) ) @ #vk.4 )
              case c_xor
              by solve( !KU( ~k1 ) @ #vk.8 )
            next
              case coerce
              solve( !KD( (~k1⊕x) ) ▶₀ #vk.3 )
                case acceptreader
                by solve( (#vl.1, 0) ~~> (#vk.3, 0) )
              next
                case initiatereader
                by contradiction /* impossible chain */
              next
                case tag1
                solve( (#vl.1, 0) ~~> (#vk.3, 0) )
                  case d_0_fst
                  by contradiction /* impossible chain */
                next
                  case d_0_snd
                  by solve( (#vr.5, 0) ~~> (#vk.3, 0) )
                qed
              qed
            qed
          next
            case coerce
            solve( !KD( (~k⊕x⊕h((~k⊕~k1⊕~r1⊕x⊕~r1.1))) ) ▶₀ #vk.2 )
              case acceptreader
              by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
            next
              case initiatereader
              by contradiction /* impossible chain */
            next
              case tag1
              solve( (#vl.1, 0) ~~> (#vk.2, 0) )
                case d_0_fst
                by contradiction /* impossible chain */
              next
                case d_0_snd
                by solve( (#vr.5, 0) ~~> (#vk.2, 0) )
              qed
            qed
          qed
        next
          case coerce
          solve( !KD( (~k1⊕x⊕~r1.1) ) ▶₀ #vk.1 )
            case acceptreader
            by solve( (#vl.1, 0) ~~> (#vk.1, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.1, 0) ~~> (#vk.1, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.5, 0) ~~> (#vk.1, 0) )
            qed
          qed
        qed
      next
        case split_case_6
        solve( !KU( (~k1⊕x) ) @ #vk.1 )
          case c_xor
          by solve( !KU( ~k1 ) @ #vk.4 )
        next
          case coerce
          solve( !KD( (~k1⊕x) ) ▶₀ #vk.1 )
            case acceptreader
            by solve( (#vl.1, 0) ~~> (#vk.1, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.1, 0) ~~> (#vk.1, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.5, 0) ~~> (#vk.1, 0) )
            qed
          qed
        qed
      next
        case split_case_7
        solve( !KU( (x⊕~r1.1) ) @ #vk.1 )
          case c_xor
          solve( !KU( (~k⊕~k1⊕x⊕h((~k⊕~r1⊕x⊕~r1.1))) ) @ #vk.2 )
            case c_xor_case_1
            solve( !KU( (~k⊕~k1⊕h((~k⊕~r1⊕x⊕~r1.1))) ) @ #vk.5 )
              case c_xor_case_1
              by solve( !KU( ~k1 ) @ #vk.7 )
            next
              case c_xor_case_2
              by solve( !KU( ~k ) @ #vk.7 )
            next
              case c_xor_case_3
              solve( !KU( h((~k⊕~r1⊕x⊕~r1.1)) ) @ #vk.6 )
                case c_h
                solve( !KU( (~k⊕~k1) ) @ #vk.7 )
                  case c_xor
                  by solve( !KU( ~k1 ) @ #vk.9 )
                next
                  case coerce
                  solve( !KD( (~k⊕~k1) ) ▶₀ #vk.5 )
                    case acceptreader
                    by solve( (#vl.1, 0) ~~> (#vk.5, 0) )
                  next
                    case initiatereader
                    by contradiction /* impossible chain */
                  next
                    case tag1
                    solve( (#vl.1, 0) ~~> (#vk.5, 0) )
                      case d_0_fst
                      by contradiction /* impossible chain */
                    next
                      case d_0_snd
                      by solve( (#vr.5, 0) ~~> (#vk.5, 0) )
                    qed
                  qed
                qed
              next
                case tag1_case_1
                by contradiction /* cyclic */
              next
                case tag1_case_2
                solve( !KU( (~k⊕~k1) ) @ #vk.7 )
                  case c_xor
                  by solve( !KU( ~k1 ) @ #vk.9 )
                next
                  case coerce
                  solve( !KD( (~k⊕~k1) ) ▶₀ #vk.5 )
                    case acceptreader
                    by solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                  next
                    case initiatereader
                    by contradiction /* impossible chain */
                  next
                    case tag1
                    solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                      case d_0_fst
                      by contradiction /* impossible chain */
                    next
                      case d_0_snd
                      by solve( (#vr.7, 0) ~~> (#vk.5, 0) )
                    qed
                  qed
                qed
              qed
            next
              case coerce
              solve( !KD( (~k⊕~k1⊕h((~k⊕~r1⊕x⊕~r1.1))) ) ▶₀ #vk.3 )
                case acceptreader
                by solve( (#vl.1, 0) ~~> (#vk.3, 0) )
              next
                case initiatereader
                by contradiction /* impossible chain */
              next
                case tag1
                solve( (#vl.1, 0) ~~> (#vk.3, 0) )
                  case d_0_fst
                  by contradiction /* impossible chain */
                next
                  case d_0_snd
                  by solve( (#vr.5, 0) ~~> (#vk.3, 0) )
                qed
              qed
            qed
          next
            case c_xor_case_2
            by solve( !KU( ~k1 ) @ #vk.6 )
          next
            case c_xor_case_3
            solve( !KU( (~k⊕h((~k⊕~r1⊕x⊕~r1.1))) ) @ #vk.5 )
              case c_xor
              by solve( !KU( ~k ) @ #vk.8 )
            next
              case coerce
              solve( !KD( (~k⊕h((~k⊕~r1⊕x⊕~r1.1))) ) ▶₀ #vk.3 )
                case acceptreader
                by solve( (#vl.1, 0) ~~> (#vk.3, 0) )
              next
                case initiatereader
                by contradiction /* impossible chain */
              next
                case tag1
                solve( (#vl.1, 0) ~~> (#vk.3, 0) )
                  case d_0_fst
                  by contradiction /* impossible chain */
                next
                  case d_0_snd
                  by solve( (#vr.5, 0) ~~> (#vk.3, 0) )
                qed
              qed
            qed
          next
            case c_xor_case_4
            by solve( !KU( ~k ) @ #vk.6 )
          next
            case c_xor_case_5
            solve( !KU( (~k1⊕h((~k⊕~r1⊕x⊕~r1.1))) ) @ #vk.5 )
              case c_xor
              by solve( !KU( ~k1 ) @ #vk.8 )
            next
              case coerce
              solve( !KD( (~k1⊕h((~k⊕~r1⊕x⊕~r1.1))) ) ▶₀ #vk.3 )
                case acceptreader
                by solve( (#vl.1, 0) ~~> (#vk.3, 0) )
              next
                case initiatereader
                by contradiction /* impossible chain */
              next
                case tag1
                solve( (#vl.1, 0) ~~> (#vk.3, 0) )
                  case d_0_fst
                  by contradiction /* impossible chain */
                next
                  case d_0_snd
                  by solve( (#vr.5, 0) ~~> (#vk.3, 0) )
                qed
              qed
            qed
          next
            case c_xor_case_6
            solve( !KU( (x⊕h((~k⊕~r1⊕x⊕~r1.1))) ) @ #vk.5 )
              case c_xor
              solve( !KU( (~k⊕~k1) ) @ #vk.6 )
                case c_xor
                by solve( !KU( ~k1 ) @ #vk.8 )
              next
                case coerce
                solve( !KD( (~k⊕~k1) ) ▶₀ #vk.4 )
                  case acceptreader
                  by solve( (#vl.1, 0) ~~> (#vk.4, 0) )
                next
                  case initiatereader
                  by contradiction /* impossible chain */
                next
                  case tag1
                  solve( (#vl.1, 0) ~~> (#vk.4, 0) )
                    case d_0_fst
                    by contradiction /* impossible chain */
                  next
                    case d_0_snd
                    by solve( (#vr.5, 0) ~~> (#vk.4, 0) )
                  qed
                qed
              qed
            next
              case coerce
              solve( !KD( (x⊕h((~k⊕~r1⊕x⊕~r1.1))) ) ▶₀ #vk.3 )
                case acceptreader
                by solve( (#vl.1, 0) ~~> (#vk.3, 0) )
              next
                case initiatereader
                by contradiction /* impossible chain */
              next
                case tag1
                solve( (#vl.1, 0) ~~> (#vk.3, 0) )
                  case d_0_fst
                  by contradiction /* impossible chain */
                next
                  case d_0_snd
                  by solve( (#vr.5, 0) ~~> (#vk.3, 0) )
                qed
              qed
            qed
          next
            case c_xor_case_7
            solve( !KU( h((~k⊕~r1⊕x⊕~r1.1)) ) @ #vk.5 )
              case c_h
              solve( !KU( (~k⊕~k1⊕x) ) @ #vk.6 )
                case c_xor_case_1
                by solve( !KU( ~k1 ) @ #vk.9 )
              next
                case c_xor_case_2
                by solve( !KU( ~k ) @ #vk.9 )
              next
                case c_xor_case_3
                solve( !KU( (~k⊕~r1⊕x⊕~r1.1) ) @ #vk.7 )
                  case c_xor_case_1
                  solve( !KU( (~k⊕~k1) ) @ #vk.8 )
                    case c_xor
                    by solve( !KU( ~k1 ) @ #vk.10 )
                  next
                    case coerce
                    solve( !KD( (~k⊕~k1) ) ▶₀ #vk.6 )
                      case acceptreader
                      by solve( (#vl.1, 0) ~~> (#vk.6, 0) )
                    next
                      case initiatereader
                      by contradiction /* impossible chain */
                    next
                      case tag1
                      solve( (#vl.1, 0) ~~> (#vk.6, 0) )
                        case d_0_fst
                        by contradiction /* impossible chain */
                      next
                        case d_0_snd
                        by solve( (#vr.5, 0) ~~> (#vk.6, 0) )
                      qed
                    qed
                  qed
                next
                  case c_xor_case_2
                  by contradiction /* cyclic */
                next
                  case c_xor_case_3
                  solve( !KU( (~k⊕~k1) ) @ #vk.8 )
                    case c_xor
                    by solve( !KU( ~k1 ) @ #vk.11 )
                  next
                    case coerce
                    solve( !KD( (~k⊕~k1) ) ▶₀ #vk.6 )
                      case acceptreader
                      by solve( (#vl.1, 0) ~~> (#vk.6, 0) )
                    next
                      case initiatereader
                      by contradiction /* impossible chain */
                    next
                      case tag1
                      solve( (#vl.1, 0) ~~> (#vk.6, 0) )
                        case d_0_fst
                        by contradiction /* impossible chain */
                      next
                        case d_0_snd
                        by solve( (#vr.5, 0) ~~> (#vk.6, 0) )
                      qed
                    qed
                  qed
                next
                  case c_xor_case_4
                  by solve( !KU( ~k ) @ #vk.10 )
                next
                  case c_xor_case_5
                  solve( !KU( (~k⊕~k1) ) @ #vk.8 )
                    case c_xor
                    by solve( !KU( ~k1 ) @ #vk.11 )
                  next
                    case coerce
                    solve( !KD( (~k⊕~k1) ) ▶₀ #vk.6 )
                      case acceptreader
                      by solve( (#vl.1, 0) ~~> (#vk.6, 0) )
                    next
                      case initiatereader
                      by contradiction /* impossible chain */
                    next
                      case tag1
                      solve( (#vl.1, 0) ~~> (#vk.6, 0) )
                        case d_0_fst
                        by contradiction /* impossible chain */
                      next
                        case d_0_snd
                        by solve( (#vr.5, 0) ~~> (#vk.6, 0) )
                      qed
                    qed
                  qed
                next
                  case c_xor_case_6
                  by contradiction /* cyclic */
                next
                  case c_xor_case_7
                  by contradiction /* cyclic */
                next
                  case coerce
                  solve( !KD( (~k⊕~r1⊕x⊕~r1.1) ) ▶₀ #vk.5 )
                    case acceptreader
                    by solve( (#vl.1, 0) ~~> (#vk.5, 0) )
                  next
                    case initiatereader
                    by contradiction /* impossible chain */
                  next
                    case tag1
                    solve( (#vl.1, 0) ~~> (#vk.5, 0) )
                      case d_0_fst
                      by contradiction /* impossible chain */
                    next
                      case d_0_snd
                      by solve( (#vr.5, 0) ~~> (#vk.5, 0) )
                    qed
                  qed
                qed
              next
                case coerce
                solve( !KD( (~k⊕~k1⊕x) ) ▶₀ #vk.4 )
                  case acceptreader
                  by solve( (#vl.1, 0) ~~> (#vk.4, 0) )
                next
                  case initiatereader
                  by contradiction /* impossible chain */
                next
                  case tag1
                  solve( (#vl.1, 0) ~~> (#vk.4, 0) )
                    case d_0_fst
                    by contradiction /* impossible chain */
                  next
                    case d_0_snd
                    by solve( (#vr.5, 0) ~~> (#vk.4, 0) )
                  qed
                qed
              qed
            next
              case tag1_case_1
              by contradiction /* cyclic */
            next
              case tag1_case_2
              solve( !KU( (~k⊕~k1⊕x) ) @ #vk.6 )
                case c_xor_case_1
                by solve( !KU( ~k1 ) @ #vk.9 )
              next
                case c_xor_case_2
                by solve( !KU( ~k ) @ #vk.9 )
              next
                case c_xor_case_3
                solve( !KU( (~k⊕~k1) ) @ #vk.8 )
                  case c_xor
                  by solve( !KU( ~k1 ) @ #vk.9 )
                next
                  case coerce
                  solve( !KD( (~k⊕~k1) ) ▶₀ #vk.5 )
                    case acceptreader
                    by solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                  next
                    case initiatereader
                    by contradiction /* impossible chain */
                  next
                    case tag1
                    solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                      case d_0_fst
                      by contradiction /* impossible chain */
                    next
                      case d_0_snd
                      by solve( (#vr.7, 0) ~~> (#vk.5, 0) )
                    qed
                  qed
                qed
              next
                case coerce
                solve( !KD( (~k⊕~k1⊕x) ) ▶₀ #vk.4 )
                  case acceptreader
                  by solve( (#vl.2, 0) ~~> (#vk.4, 0) )
                next
                  case initiatereader
                  by contradiction /* impossible chain */
                next
                  case tag1
                  solve( (#vl.2, 0) ~~> (#vk.4, 0) )
                    case d_0_fst
                    by contradiction /* impossible chain */
                  next
                    case d_0_snd
                    by solve( (#vr.7, 0) ~~> (#vk.4, 0) )
                  qed
                qed
              qed
            qed
          next
            case coerce
            solve( !KD( (~k⊕~k1⊕x⊕h((~k⊕~r1⊕x⊕~r1.1))) ) ▶₀ #vk.2 )
              case acceptreader
              by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
            next
              case initiatereader
              by contradiction /* impossible chain */
            next
              case tag1
              solve( (#vl.1, 0) ~~> (#vk.2, 0) )
                case d_0_fst
                by contradiction /* impossible chain */
              next
                case d_0_snd
                by solve( (#vr.5, 0) ~~> (#vk.2, 0) )
              qed
            qed
          qed
        next
          case coerce
          solve( !KD( (x⊕~r1.1) ) ▶₀ #vk.1 )
            case acceptreader
            by solve( (#vl.1, 0) ~~> (#vk.1, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.1, 0) ~~> (#vk.1, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.5, 0) ~~> (#vk.1, 0) )
            qed
          qed
        qed
      qed
    next
      case tag1_case_2
      solve( splitEqs(3) )
        case split_case_1
        by solve( !KU( ~k1 ) @ #vk.1 )
      next
        case split_case_2
        solve( !KU( (~k⊕~k1⊕r0⊕~r1.1⊕h((~k⊕~r1⊕r0))) ) @ #vk.2 )
          case c_xor_case_01
          by contradiction /* cyclic */
        next
          case c_xor_case_02
          solve( !KU( (~k⊕~k1⊕~r1.1⊕h((~k⊕~r1⊕r0))) ) @ #vk.3 )
            case c_xor_case_1
            by contradiction /* cyclic */
          next
            case c_xor_case_2
            by solve( !KU( ~k1 ) @ #vk.5 )
          next
            case c_xor_case_3
            solve( !KU( (~k⊕h((~k⊕~r1⊕r0))) ) @ #vk.4 )
              case c_xor
              by solve( !KU( ~k ) @ #vk.7 )
            next
              case coerce
              solve( !KD( (~k⊕h((~k⊕~r1⊕r0))) ) ▶₀ #vk.3 )
                case acceptreader
                by solve( (#vl.1, 0) ~~> (#vk.3, 0) )
              next
                case initiatereader
                by contradiction /* impossible chain */
              next
                case tag1
                solve( (#vl.1, 0) ~~> (#vk.3, 0) )
                  case d_0_fst
                  by contradiction /* impossible chain */
                next
                  case d_0_snd
                  by solve( (#vr.5, 0) ~~> (#vk.3, 0) )
                qed
              qed
            qed
          next
            case c_xor_case_4
            by solve( !KU( ~k ) @ #vk.5 )
          next
            case c_xor_case_5
            solve( !KU( (~k1⊕h((~k⊕~r1⊕r0))) ) @ #vk.4 )
              case c_xor
              by solve( !KU( ~k1 ) @ #vk.7 )
            next
              case coerce
              solve( !KD( (~k1⊕h((~k⊕~r1⊕r0))) ) ▶₀ #vk.3 )
                case acceptreader
                by solve( (#vl.1, 0) ~~> (#vk.3, 0) )
              next
                case initiatereader
                by contradiction /* impossible chain */
              next
                case tag1
                solve( (#vl.1, 0) ~~> (#vk.3, 0) )
                  case d_0_fst
                  by contradiction /* impossible chain */
                next
                  case d_0_snd
                  by solve( (#vr.5, 0) ~~> (#vk.3, 0) )
                qed
              qed
            qed
          next
            case c_xor_case_6
            solve( !KU( (~r1.1⊕h((~k⊕~r1⊕r0))) ) @ #vk.4 )
              case c_xor
              by contradiction /* cyclic */
            next
              case coerce
              solve( !KD( (~r1.1⊕h((~k⊕~r1⊕r0))) ) ▶₀ #vk.3 )
                case acceptreader
                by solve( (#vl.1, 0) ~~> (#vk.3, 0) )
              next
                case initiatereader
                by contradiction /* impossible chain */
              next
                case tag1
                solve( (#vl.1, 0) ~~> (#vk.3, 0) )
                  case d_0_fst
                  by contradiction /* impossible chain */
                next
                  case d_0_snd
                  by solve( (#vr.5, 0) ~~> (#vk.3, 0) )
                qed
              qed
            qed
          next
            case c_xor_case_7
            solve( !KU( (~k⊕~k1⊕~r1.1) ) @ #vk.5 )
              case c_xor_case_1
              by solve( !KU( ~k1 ) @ #vk.7 )
            next
              case c_xor_case_2
              by solve( !KU( ~k ) @ #vk.7 )
            next
              case c_xor_case_3
              by contradiction /* cyclic */
            next
              case coerce
              solve( !KD( (~k⊕~k1⊕~r1.1) ) ▶₀ #vk.3 )
                case acceptreader
                by solve( (#vl.1, 0) ~~> (#vk.3, 0) )
              next
                case initiatereader
                by contradiction /* impossible chain */
              next
                case tag1
                solve( (#vl.1, 0) ~~> (#vk.3, 0) )
                  case d_0_fst
                  by contradiction /* impossible chain */
                next
                  case d_0_snd
                  by solve( (#vr.5, 0) ~~> (#vk.3, 0) )
                qed
              qed
            qed
          next
            case coerce
            solve( !KD( (~k⊕~k1⊕~r1.1⊕h((~k⊕~r1⊕r0))) ) ▶₀ #vk.2 )
              case acceptreader
              by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
            next
              case initiatereader
              by contradiction /* impossible chain */
            next
              case tag1
              solve( (#vl.1, 0) ~~> (#vk.2, 0) )
                case d_0_fst
                by contradiction /* impossible chain */
              next
                case d_0_snd
                by solve( (#vr.5, 0) ~~> (#vk.2, 0) )
              qed
            qed
          qed
        next
          case c_xor_case_03
          solve( !KU( (~k⊕~k1⊕h((~k⊕~r1⊕r0))) ) @ #vk.3 )
            case c_xor_case_1
            by solve( !KU( ~k1 ) @ #vk.6 )
          next
            case c_xor_case_2
            by solve( !KU( ~k ) @ #vk.6 )
          next
            case c_xor_case_3
            solve( !KU( (r0⊕~r1.1) ) @ #vk.4 )
              case c_xor
              by contradiction /* cyclic */
            next
              case coerce
              solve( !KD( (r0⊕~r1.1) ) ▶₀ #vk.3 )
                case acceptreader
                by solve( (#vl.1, 0) ~~> (#vk.3, 0) )
              next
                case initiatereader
                by contradiction /* impossible chain */
              next
                case tag1
                solve( (#vl.1, 0) ~~> (#vk.3, 0) )
                  case d_0_fst
                  by contradiction /* impossible chain */
                next
                  case d_0_snd
                  by solve( (#vr.5, 0) ~~> (#vk.3, 0) )
                qed
              qed
            qed
          next
            case coerce
            solve( !KD( (~k⊕~k1⊕h((~k⊕~r1⊕r0))) ) ▶₀ #vk.2 )
              case acceptreader
              by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
            next
              case initiatereader
              by contradiction /* impossible chain */
            next
              case tag1
              solve( (#vl.1, 0) ~~> (#vk.2, 0) )
                case d_0_fst
                by contradiction /* impossible chain */
              next
                case d_0_snd
                by solve( (#vr.5, 0) ~~> (#vk.2, 0) )
              qed
            qed
          qed
        next
          case c_xor_case_04
          by solve( !KU( ~k1 ) @ #vk.4 )
        next
          case c_xor_case_05
          solve( !KU( (~k⊕r0⊕h((~k⊕~r1⊕r0))) ) @ #vk.3 )
            case c_xor_case_1
            solve( !KU( (~k1⊕~r1.1) ) @ #vk.4 )
              case c_xor
              by contradiction /* cyclic */
            next
              case coerce
              solve( !KD( (~k1⊕~r1.1) ) ▶₀ #vk.3 )
                case acceptreader
                by solve( (#vl.1, 0) ~~> (#vk.3, 0) )
              next
                case initiatereader
                by contradiction /* impossible chain */
              next
                case tag1
                solve( (#vl.1, 0) ~~> (#vk.3, 0) )
                  case d_0_fst
                  by contradiction /* impossible chain */
                next
                  case d_0_snd
                  by solve( (#vr.5, 0) ~~> (#vk.3, 0) )
                qed
              qed
            qed
          next
            case c_xor_case_2
            by solve( !KU( ~k ) @ #vk.6 )
          next
            case c_xor_case_3
            solve( !KU( (~k1⊕~r1.1) ) @ #vk.4 )
              case c_xor
              by contradiction /* cyclic */
            next
              case coerce
              solve( !KD( (~k1⊕~r1.1) ) ▶₀ #vk.3 )
                case acceptreader
                by solve( (#vl.1, 0) ~~> (#vk.3, 0) )
              next
                case initiatereader
                by contradiction /* impossible chain */
              next
                case tag1
                solve( (#vl.1, 0) ~~> (#vk.3, 0) )
                  case d_0_fst
                  by contradiction /* impossible chain */
                next
                  case d_0_snd
                  by solve( (#vr.5, 0) ~~> (#vk.3, 0) )
                qed
              qed
            qed
          next
            case coerce
            solve( !KD( (~k⊕r0⊕h((~k⊕~r1⊕r0))) ) ▶₀ #vk.2 )
              case acceptreader
              by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
            next
              case initiatereader
              by contradiction /* impossible chain */
            next
              case tag1
              solve( (#vl.1, 0) ~~> (#vk.2, 0) )
                case d_0_fst
                by contradiction /* impossible chain */
              next
                case d_0_snd
                by solve( (#vr.5, 0) ~~> (#vk.2, 0) )
              qed
            qed
          qed
        next
          case c_xor_case_06
          solve( !KU( (~k⊕~r1.1⊕h((~k⊕~r1⊕r0))) ) @ #vk.3 )
            case c_xor_case_1
            by contradiction /* cyclic */
          next
            case c_xor_case_2
            by solve( !KU( ~k ) @ #vk.6 )
          next
            case c_xor_case_3
            solve( !KU( (~k1⊕r0) ) @ #vk.4 )
              case c_xor
              by solve( !KU( ~k1 ) @ #vk.7 )
            next
              case coerce
              solve( !KD( (~k1⊕r0) ) ▶₀ #vk.3 )
                case acceptreader
                by solve( (#vl.1, 0) ~~> (#vk.3, 0) )
              next
                case initiatereader
                by contradiction /* impossible chain */
              next
                case tag1
                solve( (#vl.1, 0) ~~> (#vk.3, 0) )
                  case d_0_fst
                  by contradiction /* impossible chain */
                next
                  case d_0_snd
                  by solve( (#vr.5, 0) ~~> (#vk.3, 0) )
                qed
              qed
            qed
          next
            case coerce
            solve( !KD( (~k⊕~r1.1⊕h((~k⊕~r1⊕r0))) ) ▶₀ #vk.2 )
              case acceptreader
              by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
            next
              case initiatereader
              by contradiction /* impossible chain */
            next
              case tag1
              solve( (#vl.1, 0) ~~> (#vk.2, 0) )
                case d_0_fst
                by contradiction /* impossible chain */
              next
                case d_0_snd
                by solve( (#vr.5, 0) ~~> (#vk.2, 0) )
              qed
            qed
          qed
        next
          case c_xor_case_07
          solve( !KU( (~k⊕h((~k⊕~r1⊕r0))) ) @ #vk.3 )
            case c_xor
            by solve( !KU( ~k ) @ #vk.6 )
          next
            case coerce
            solve( !KD( (~k⊕h((~k⊕~r1⊕r0))) ) ▶₀ #vk.2 )
              case acceptreader
              by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
            next
              case initiatereader
              by contradiction /* impossible chain */
            next
              case tag1
              solve( (#vl.1, 0) ~~> (#vk.2, 0) )
                case d_0_fst
                by contradiction /* impossible chain */
              next
                case d_0_snd
                by solve( (#vr.5, 0) ~~> (#vk.2, 0) )
              qed
            qed
          qed
        next
          case c_xor_case_08
          by solve( !KU( ~k ) @ #vk.4 )
        next
          case c_xor_case_09
          solve( !KU( (~k1⊕r0⊕h((~k⊕~r1⊕r0))) ) @ #vk.3 )
            case c_xor_case_1
            solve( !KU( (~k⊕~r1.1) ) @ #vk.4 )
              case c_xor
              by contradiction /* cyclic */
            next
              case coerce
              solve( !KD( (~k⊕~r1.1) ) ▶₀ #vk.3 )
                case acceptreader
                by solve( (#vl.1, 0) ~~> (#vk.3, 0) )
              next
                case initiatereader
                by contradiction /* impossible chain */
              next
                case tag1
                solve( (#vl.1, 0) ~~> (#vk.3, 0) )
                  case d_0_fst
                  by contradiction /* impossible chain */
                next
                  case d_0_snd
                  by solve( (#vr.5, 0) ~~> (#vk.3, 0) )
                qed
              qed
            qed
          next
            case c_xor_case_2
            by solve( !KU( ~k1 ) @ #vk.6 )
          next
            case c_xor_case_3
            solve( !KU( (~k⊕~r1.1) ) @ #vk.4 )
              case c_xor
              by contradiction /* cyclic */
            next
              case coerce
              solve( !KD( (~k⊕~r1.1) ) ▶₀ #vk.3 )
                case acceptreader
                by solve( (#vl.1, 0) ~~> (#vk.3, 0) )
              next
                case initiatereader
                by contradiction /* impossible chain */
              next
                case tag1
                solve( (#vl.1, 0) ~~> (#vk.3, 0) )
                  case d_0_fst
                  by contradiction /* impossible chain */
                next
                  case d_0_snd
                  by solve( (#vr.5, 0) ~~> (#vk.3, 0) )
                qed
              qed
            qed
          next
            case coerce
            solve( !KD( (~k1⊕r0⊕h((~k⊕~r1⊕r0))) ) ▶₀ #vk.2 )
              case acceptreader
              by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
            next
              case initiatereader
              by contradiction /* impossible chain */
            next
              case tag1
              solve( (#vl.1, 0) ~~> (#vk.2, 0) )
                case d_0_fst
                by contradiction /* impossible chain */
              next
                case d_0_snd
                by solve( (#vr.5, 0) ~~> (#vk.2, 0) )
              qed
            qed
          qed
        next
          case c_xor_case_10
          solve( !KU( (~k1⊕~r1.1⊕h((~k⊕~r1⊕r0))) ) @ #vk.3 )
            case c_xor_case_1
            by contradiction /* cyclic */
          next
            case c_xor_case_2
            by solve( !KU( ~k1 ) @ #vk.6 )
          next
            case c_xor_case_3
            solve( !KU( (~k⊕r0) ) @ #vk.4 )
              case c_xor
              by solve( !KU( ~k ) @ #vk.7 )
            next
              case coerce
              solve( !KD( (~k⊕r0) ) ▶₀ #vk.3 )
                case acceptreader
                by solve( (#vl.1, 0) ~~> (#vk.3, 0) )
              next
                case initiatereader
                by contradiction /* impossible chain */
              next
                case tag1
                solve( (#vl.1, 0) ~~> (#vk.3, 0) )
                  case d_0_fst
                  by contradiction /* impossible chain */
                next
                  case d_0_snd
                  by solve( (#vr.5, 0) ~~> (#vk.3, 0) )
                qed
              qed
            qed
          next
            case coerce
            solve( !KD( (~k1⊕~r1.1⊕h((~k⊕~r1⊕r0))) ) ▶₀ #vk.2 )
              case acceptreader
              by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
            next
              case initiatereader
              by contradiction /* impossible chain */
            next
              case tag1
              solve( (#vl.1, 0) ~~> (#vk.2, 0) )
                case d_0_fst
                by contradiction /* impossible chain */
              next
                case d_0_snd
                by solve( (#vr.5, 0) ~~> (#vk.2, 0) )
              qed
            qed
          qed
        next
          case c_xor_case_11
          solve( !KU( (~k1⊕h((~k⊕~r1⊕r0))) ) @ #vk.3 )
            case c_xor
            by solve( !KU( ~k1 ) @ #vk.6 )
          next
            case coerce
            solve( !KD( (~k1⊕h((~k⊕~r1⊕r0))) ) ▶₀ #vk.2 )
              case acceptreader
              by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
            next
              case initiatereader
              by contradiction /* impossible chain */
            next
              case tag1
              solve( (#vl.1, 0) ~~> (#vk.2, 0) )
                case d_0_fst
                by contradiction /* impossible chain */
              next
                case d_0_snd
                by solve( (#vr.5, 0) ~~> (#vk.2, 0) )
              qed
            qed
          qed
        next
          case c_xor_case_12
          solve( !KU( (r0⊕~r1.1⊕h((~k⊕~r1⊕r0))) ) @ #vk.3 )
            case c_xor_case_1
            by contradiction /* cyclic */
          next
            case c_xor_case_2
            solve( !KU( (~k⊕~k1) ) @ #vk.4 )
              case c_xor
              by solve( !KU( ~k1 ) @ #vk.6 )
            next
              case coerce
              solve( !KD( (~k⊕~k1) ) ▶₀ #vk.3 )
                case acceptreader
                by solve( (#vl.1, 0) ~~> (#vk.3, 0) )
              next
                case initiatereader
                by contradiction /* impossible chain */
              next
                case tag1
                solve( (#vl.1, 0) ~~> (#vk.3, 0) )
                  case d_0_fst
                  by contradiction /* impossible chain */
                next
                  case d_0_snd
                  by solve( (#vr.5, 0) ~~> (#vk.3, 0) )
                qed
              qed
            qed
          next
            case c_xor_case_3
            solve( !KU( (~k⊕~k1) ) @ #vk.4 )
              case c_xor
              by solve( !KU( ~k1 ) @ #vk.7 )
            next
              case coerce
              solve( !KD( (~k⊕~k1) ) ▶₀ #vk.3 )
                case acceptreader
                by solve( (#vl.1, 0) ~~> (#vk.3, 0) )
              next
                case initiatereader
                by contradiction /* impossible chain */
              next
                case tag1
                solve( (#vl.1, 0) ~~> (#vk.3, 0) )
                  case d_0_fst
                  by contradiction /* impossible chain */
                next
                  case d_0_snd
                  by solve( (#vr.5, 0) ~~> (#vk.3, 0) )
                qed
              qed
            qed
          next
            case coerce
            solve( !KD( (r0⊕~r1.1⊕h((~k⊕~r1⊕r0))) ) ▶₀ #vk.2 )
              case acceptreader
              by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
            next
              case initiatereader
              by contradiction /* impossible chain */
            next
              case tag1
              solve( (#vl.1, 0) ~~> (#vk.2, 0) )
                case d_0_fst
                by contradiction /* impossible chain */
              next
                case d_0_snd
                by solve( (#vr.5, 0) ~~> (#vk.2, 0) )
              qed
            qed
          qed
        next
          case c_xor_case_13
          solve( !KU( (r0⊕h((~k⊕~r1⊕r0))) ) @ #vk.3 )
            case c_xor
            solve( !KU( (~k⊕~k1⊕~r1.1) ) @ #vk.4 )
              case c_xor_case_1
              by solve( !KU( ~k1 ) @ #vk.7 )
            next
              case c_xor_case_2
              by solve( !KU( ~k ) @ #vk.7 )
            next
              case c_xor_case_3
              by contradiction /* cyclic */
            next
              case coerce
              solve( !KD( (~k⊕~k1⊕~r1.1) ) ▶₀ #vk.3 )
                case acceptreader
                by solve( (#vl.1, 0) ~~> (#vk.3, 0) )
              next
                case initiatereader
                by contradiction /* impossible chain */
              next
                case tag1
                solve( (#vl.1, 0) ~~> (#vk.3, 0) )
                  case d_0_fst
                  by contradiction /* impossible chain */
                next
                  case d_0_snd
                  by solve( (#vr.5, 0) ~~> (#vk.3, 0) )
                qed
              qed
            qed
          next
            case coerce
            solve( !KD( (r0⊕h((~k⊕~r1⊕r0))) ) ▶₀ #vk.2 )
              case acceptreader
              by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
            next
              case initiatereader
              by contradiction /* impossible chain */
            next
              case tag1
              solve( (#vl.1, 0) ~~> (#vk.2, 0) )
                case d_0_fst
                by contradiction /* impossible chain */
              next
                case d_0_snd
                by solve( (#vr.5, 0) ~~> (#vk.2, 0) )
              qed
            qed
          qed
        next
          case c_xor_case_14
          solve( !KU( (~r1.1⊕h((~k⊕~r1⊕r0))) ) @ #vk.3 )
            case c_xor
            by contradiction /* cyclic */
          next
            case coerce
            solve( !KD( (~r1.1⊕h((~k⊕~r1⊕r0))) ) ▶₀ #vk.2 )
              case acceptreader
              by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
            next
              case initiatereader
              by contradiction /* impossible chain */
            next
              case tag1
              solve( (#vl.1, 0) ~~> (#vk.2, 0) )
                case d_0_fst
                by contradiction /* impossible chain */
              next
                case d_0_snd
                by solve( (#vr.5, 0) ~~> (#vk.2, 0) )
              qed
            qed
          qed
        next
          case c_xor_case_15
          solve( !KU( (~k⊕~k1⊕r0⊕~r1.1) ) @ #vk.4 )
            case c_xor_case_1
            solve( !KU( (~k⊕~k1⊕~r1.1) ) @ #vk.5 )
              case c_xor_case_1
              by solve( !KU( ~k1 ) @ #vk.7 )
            next
              case c_xor_case_2
              by solve( !KU( ~k ) @ #vk.7 )
            next
              case c_xor_case_3
              by contradiction /* cyclic */
            next
              case coerce
              solve( !KD( (~k⊕~k1⊕~r1.1) ) ▶₀ #vk.3 )
                case acceptreader
                by solve( (#vl.1, 0) ~~> (#vk.3, 0) )
              next
                case initiatereader
                by contradiction /* impossible chain */
              next
                case tag1
                solve( (#vl.1, 0) ~~> (#vk.3, 0) )
                  case d_0_fst
                  by contradiction /* impossible chain */
                next
                  case d_0_snd
                  by solve( (#vr.5, 0) ~~> (#vk.3, 0) )
                qed
              qed
            qed
          next
            case c_xor_case_2
            by solve( !KU( ~k1 ) @ #vk.6 )
          next
            case c_xor_case_3
            solve( !KU( (~k⊕~r1.1) ) @ #vk.5 )
              case c_xor
              by contradiction /* cyclic */
            next
              case coerce
              solve( !KD( (~k⊕~r1.1) ) ▶₀ #vk.3 )
                case acceptreader
                by solve( (#vl.1, 0) ~~> (#vk.3, 0) )
              next
                case initiatereader
                by contradiction /* impossible chain */
              next
                case tag1
                solve( (#vl.1, 0) ~~> (#vk.3, 0) )
                  case d_0_fst
                  by contradiction /* impossible chain */
                next
                  case d_0_snd
                  by solve( (#vr.5, 0) ~~> (#vk.3, 0) )
                qed
              qed
            qed
          next
            case c_xor_case_4
            by solve( !KU( ~k ) @ #vk.6 )
          next
            case c_xor_case_5
            solve( !KU( (~k1⊕~r1.1) ) @ #vk.5 )
              case c_xor
              by contradiction /* cyclic */
            next
              case coerce
              solve( !KD( (~k1⊕~r1.1) ) ▶₀ #vk.3 )
                case acceptreader
                by solve( (#vl.1, 0) ~~> (#vk.3, 0) )
              next
                case initiatereader
                by contradiction /* impossible chain */
              next
                case tag1
                solve( (#vl.1, 0) ~~> (#vk.3, 0) )
                  case d_0_fst
                  by contradiction /* impossible chain */
                next
                  case d_0_snd
                  by solve( (#vr.5, 0) ~~> (#vk.3, 0) )
                qed
              qed
            qed
          next
            case c_xor_case_6
            solve( !KU( (r0⊕~r1.1) ) @ #vk.5 )
              case c_xor
              by contradiction /* cyclic */
            next
              case coerce
              solve( !KD( (r0⊕~r1.1) ) ▶₀ #vk.3 )
                case acceptreader
                by solve( (#vl.1, 0) ~~> (#vk.3, 0) )
              next
                case initiatereader
                by contradiction /* impossible chain */
              next
                case tag1
                solve( (#vl.1, 0) ~~> (#vk.3, 0) )
                  case d_0_fst
                  by contradiction /* impossible chain */
                next
                  case d_0_snd
                  by solve( (#vr.5, 0) ~~> (#vk.3, 0) )
                qed
              qed
            qed
          next
            case c_xor_case_7
            by contradiction /* cyclic */
          next
            case coerce
            solve( !KD( (~k⊕~k1⊕r0⊕~r1.1) ) ▶₀ #vk.2 )
              case acceptreader
              by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
            next
              case initiatereader
              by contradiction /* impossible chain */
            next
              case tag1
              solve( (#vl.1, 0) ~~> (#vk.2, 0) )
                case d_0_fst
                by contradiction /* impossible chain */
              next
                case d_0_snd
                by solve( (#vr.5, 0) ~~> (#vk.2, 0) )
              qed
            qed
          qed
        next
          case coerce
          solve( !KD( (~k⊕~k1⊕r0⊕~r1.1⊕h((~k⊕~r1⊕r0))) ) ▶₀ #vk.1 )
            case acceptreader
            by solve( (#vl.1, 0) ~~> (#vk.1, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.1, 0) ~~> (#vk.1, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.5, 0) ~~> (#vk.1, 0) )
            qed
          qed
        qed
      next
        case split_case_3
        solve( !KU( (~k⊕~k1⊕h((~k⊕~r0⊕~r1))) ) @ #vk.2 )
          case c_xor_case_1
          by solve( !KU( ~k1 ) @ #vk.4 )
        next
          case c_xor_case_2
          by solve( !KU( ~k ) @ #vk.4 )
        next
          case c_xor_case_3
          solve( !KU( h((~k⊕~r0⊕~r1)) ) @ #vk.3 )
            case c_h
            solve( !KU( (~k⊕~k1) ) @ #vk.4 )
              case c_xor
              by solve( !KU( ~k1 ) @ #vk.6 )
            next
              case coerce
              solve( !KD( (~k⊕~k1) ) ▶₀ #vk.3 )
                case acceptreader
                by solve( (#vl.1, 0) ~~> (#vk.3, 0) )
              next
                case initiatereader
                by contradiction /* impossible chain */
              next
                case tag1
                solve( (#vl.1, 0) ~~> (#vk.3, 0) )
                  case d_0_fst
                  by contradiction /* impossible chain */
                next
                  case d_0_snd
                  by solve( (#vr.5, 0) ~~> (#vk.3, 0) )
                qed
              qed
            qed
          next
            case tag1_case_1
            solve( !KU( (~k⊕~k1) ) @ #vk.4 )
              case c_xor
              by solve( !KU( ~k1 ) @ #vk.6 )
            next
              case coerce
              solve( !KD( (~k⊕~k1) ) ▶₀ #vk.3 )
                case acceptreader
                by solve( (#vl.2, 0) ~~> (#vk.3, 0) )
              next
                case initiatereader
                by contradiction /* impossible chain */
              next
                case tag1
                solve( (#vl.2, 0) ~~> (#vk.3, 0) )
                  case d_0_fst
                  by contradiction /* impossible chain */
                next
                  case d_0_snd
                  by solve( (#vr.7, 0) ~~> (#vk.3, 0) )
                qed
              qed
            qed
          next
            case tag1_case_2
            by contradiction /* cyclic */
          qed
        next
          case coerce
          solve( !KD( (~k⊕~k1⊕h((~k⊕~r0⊕~r1))) ) ▶₀ #vk.1 )
            case acceptreader
            by solve( (#vl.1, 0) ~~> (#vk.1, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.1, 0) ~~> (#vk.1, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.5, 0) ~~> (#vk.1, 0) )
            qed
          qed
        qed
      next
        case split_case_4
        solve( !KU( (~k1⊕~r1.1) ) @ #vk.1 )
          case c_xor
          by solve( !KU( ~k1 ) @ #vk.4 )
        next
          case coerce
          solve( !KD( (~k1⊕~r1.1) ) ▶₀ #vk.1 )
            case acceptreader
            by solve( (#vl.1, 0) ~~> (#vk.1, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.1, 0) ~~> (#vk.1, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.5, 0) ~~> (#vk.1, 0) )
            qed
          qed
        qed
      next
        case split_case_5
        solve( !KU( (~k1⊕x⊕~r1.1) ) @ #vk.1 )
          case c_xor_case_1
          solve( !KU( (~k⊕x⊕h((~k⊕~k1⊕~r1⊕x⊕~r1.1))) ) @ #vk.2 )
            case c_xor_case_1
            solve( !KU( (~k1⊕~r1.1) ) @ #vk.3 )
              case c_xor
              by solve( !KU( ~k1 ) @ #vk.7 )
            next
              case coerce
              solve( !KD( (~k1⊕~r1.1) ) ▶₀ #vk.3 )
                case acceptreader
                by solve( (#vl.1, 0) ~~> (#vk.3, 0) )
              next
                case initiatereader
                by contradiction /* impossible chain */
              next
                case tag1
                solve( (#vl.1, 0) ~~> (#vk.3, 0) )
                  case d_0_fst
                  by contradiction /* impossible chain */
                next
                  case d_0_snd
                  by solve( (#vr.5, 0) ~~> (#vk.3, 0) )
                qed
              qed
            qed
          next
            case c_xor_case_2
            by solve( !KU( ~k ) @ #vk.6 )
          next
            case c_xor_case_3
            solve( !KU( (~k1⊕~r1.1) ) @ #vk.3 )
              case c_xor
              by solve( !KU( ~k1 ) @ #vk.8 )
            next
              case coerce
              solve( !KD( (~k1⊕~r1.1) ) ▶₀ #vk.3 )
                case acceptreader
                by solve( (#vl.1, 0) ~~> (#vk.3, 0) )
              next
                case initiatereader
                by contradiction /* impossible chain */
              next
                case tag1
                solve( (#vl.1, 0) ~~> (#vk.3, 0) )
                  case d_0_fst
                  by contradiction /* impossible chain */
                next
                  case d_0_snd
                  by solve( (#vr.5, 0) ~~> (#vk.3, 0) )
                qed
              qed
            qed
          next
            case coerce
            solve( !KD( (~k⊕x⊕h((~k⊕~k1⊕~r1⊕x⊕~r1.1))) ) ▶₀ #vk.2 )
              case acceptreader
              by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
            next
              case initiatereader
              by contradiction /* impossible chain */
            next
              case tag1
              solve( (#vl.1, 0) ~~> (#vk.2, 0) )
                case d_0_fst
                by contradiction /* impossible chain */
              next
                case d_0_snd
                by solve( (#vr.5, 0) ~~> (#vk.2, 0) )
              qed
            qed
          qed
        next
          case c_xor_case_2
          by solve( !KU( ~k1 ) @ #vk.4 )
        next
          case c_xor_case_3
          solve( !KU( (~k⊕x⊕h((~k⊕~k1⊕~r1⊕x⊕~r1.1))) ) @ #vk.2 )
            case c_xor_case_1
            solve( !KU( (~k1⊕x) ) @ #vk.4 )
              case c_xor
              by solve( !KU( ~k1 ) @ #vk.7 )
            next
              case coerce
              solve( !KD( (~k1⊕x) ) ▶₀ #vk.3 )
                case acceptreader
                by solve( (#vl.1, 0) ~~> (#vk.3, 0) )
              next
                case initiatereader
                by contradiction /* impossible chain */
              next
                case tag1
                solve( (#vl.1, 0) ~~> (#vk.3, 0) )
                  case d_0_fst
                  by contradiction /* impossible chain */
                next
                  case d_0_snd
                  by solve( (#vr.5, 0) ~~> (#vk.3, 0) )
                qed
              qed
            qed
          next
            case c_xor_case_2
            by solve( !KU( ~k ) @ #vk.6 )
          next
            case c_xor_case_3
            solve( !KU( (~k1⊕x) ) @ #vk.4 )
              case c_xor
              by solve( !KU( ~k1 ) @ #vk.8 )
            next
              case coerce
              solve( !KD( (~k1⊕x) ) ▶₀ #vk.3 )
                case acceptreader
                by solve( (#vl.1, 0) ~~> (#vk.3, 0) )
              next
                case initiatereader
                by contradiction /* impossible chain */
              next
                case tag1
                solve( (#vl.1, 0) ~~> (#vk.3, 0) )
                  case d_0_fst
                  by contradiction /* impossible chain */
                next
                  case d_0_snd
                  by solve( (#vr.5, 0) ~~> (#vk.3, 0) )
                qed
              qed
            qed
          next
            case coerce
            solve( !KD( (~k⊕x⊕h((~k⊕~k1⊕~r1⊕x⊕~r1.1))) ) ▶₀ #vk.2 )
              case acceptreader
              by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
            next
              case initiatereader
              by contradiction /* impossible chain */
            next
              case tag1
              solve( (#vl.1, 0) ~~> (#vk.2, 0) )
                case d_0_fst
                by contradiction /* impossible chain */
              next
                case d_0_snd
                by solve( (#vr.5, 0) ~~> (#vk.2, 0) )
              qed
            qed
          qed
        next
          case coerce
          solve( !KD( (~k1⊕x⊕~r1.1) ) ▶₀ #vk.1 )
            case acceptreader
            by solve( (#vl.1, 0) ~~> (#vk.1, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.1, 0) ~~> (#vk.1, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.5, 0) ~~> (#vk.1, 0) )
            qed
          qed
        qed
      next
        case split_case_6
        solve( !KU( (~k1⊕x) ) @ #vk.1 )
          case c_xor
          by solve( !KU( ~k1 ) @ #vk.4 )
        next
          case coerce
          solve( !KD( (~k1⊕x) ) ▶₀ #vk.1 )
            case acceptreader
            by solve( (#vl.1, 0) ~~> (#vk.1, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.1, 0) ~~> (#vk.1, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.5, 0) ~~> (#vk.1, 0) )
            qed
          qed
        qed
      next
        case split_case_7
        solve( !KU( (x⊕~r1.1) ) @ #vk.1 )
          case c_xor
          solve( !KU( (~k⊕~k1⊕x⊕h((~k⊕~r1⊕x⊕~r1.1))) ) @ #vk.2 )
            case c_xor_case_1
            solve( !KU( (~k⊕~k1⊕h((~k⊕~r1⊕x⊕~r1.1))) ) @ #vk.5 )
              case c_xor_case_1
              by solve( !KU( ~k1 ) @ #vk.7 )
            next
              case c_xor_case_2
              by solve( !KU( ~k ) @ #vk.7 )
            next
              case c_xor_case_3
              solve( !KU( h((~k⊕~r1⊕x⊕~r1.1)) ) @ #vk.6 )
                case c_h
                solve( !KU( (~k⊕~k1) ) @ #vk.7 )
                  case c_xor
                  by solve( !KU( ~k1 ) @ #vk.9 )
                next
                  case coerce
                  solve( !KD( (~k⊕~k1) ) ▶₀ #vk.5 )
                    case acceptreader
                    by solve( (#vl.1, 0) ~~> (#vk.5, 0) )
                  next
                    case initiatereader
                    by contradiction /* impossible chain */
                  next
                    case tag1
                    solve( (#vl.1, 0) ~~> (#vk.5, 0) )
                      case d_0_fst
                      by contradiction /* impossible chain */
                    next
                      case d_0_snd
                      by solve( (#vr.5, 0) ~~> (#vk.5, 0) )
                    qed
                  qed
                qed
              next
                case tag1_case_1
                solve( !KU( (~k⊕~k1) ) @ #vk.7 )
                  case c_xor
                  by solve( !KU( ~k1 ) @ #vk.9 )
                next
                  case coerce
                  solve( !KD( (~k⊕~k1) ) ▶₀ #vk.5 )
                    case acceptreader
                    by solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                  next
                    case initiatereader
                    by contradiction /* impossible chain */
                  next
                    case tag1
                    solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                      case d_0_fst
                      by contradiction /* impossible chain */
                    next
                      case d_0_snd
                      by solve( (#vr.7, 0) ~~> (#vk.5, 0) )
                    qed
                  qed
                qed
              next
                case tag1_case_2
                by contradiction /* cyclic */
              qed
            next
              case coerce
              solve( !KD( (~k⊕~k1⊕h((~k⊕~r1⊕x⊕~r1.1))) ) ▶₀ #vk.3 )
                case acceptreader
                by solve( (#vl.1, 0) ~~> (#vk.3, 0) )
              next
                case initiatereader
                by contradiction /* impossible chain */
              next
                case tag1
                solve( (#vl.1, 0) ~~> (#vk.3, 0) )
                  case d_0_fst
                  by contradiction /* impossible chain */
                next
                  case d_0_snd
                  by solve( (#vr.5, 0) ~~> (#vk.3, 0) )
                qed
              qed
            qed
          next
            case c_xor_case_2
            by solve( !KU( ~k1 ) @ #vk.6 )
          next
            case c_xor_case_3
            solve( !KU( (~k⊕h((~k⊕~r1⊕x⊕~r1.1))) ) @ #vk.5 )
              case c_xor
              by solve( !KU( ~k ) @ #vk.8 )
            next
              case coerce
              solve( !KD( (~k⊕h((~k⊕~r1⊕x⊕~r1.1))) ) ▶₀ #vk.3 )
                case acceptreader
                by solve( (#vl.1, 0) ~~> (#vk.3, 0) )
              next
                case initiatereader
                by contradiction /* impossible chain */
              next
                case tag1
                solve( (#vl.1, 0) ~~> (#vk.3, 0) )
                  case d_0_fst
                  by contradiction /* impossible chain */
                next
                  case d_0_snd
                  by solve( (#vr.5, 0) ~~> (#vk.3, 0) )
                qed
              qed
            qed
          next
            case c_xor_case_4
            by solve( !KU( ~k ) @ #vk.6 )
          next
            case c_xor_case_5
            solve( !KU( (~k1⊕h((~k⊕~r1⊕x⊕~r1.1))) ) @ #vk.5 )
              case c_xor
              by solve( !KU( ~k1 ) @ #vk.8 )
            next
              case coerce
              solve( !KD( (~k1⊕h((~k⊕~r1⊕x⊕~r1.1))) ) ▶₀ #vk.3 )
                case acceptreader
                by solve( (#vl.1, 0) ~~> (#vk.3, 0) )
              next
                case initiatereader
                by contradiction /* impossible chain */
              next
                case tag1
                solve( (#vl.1, 0) ~~> (#vk.3, 0) )
                  case d_0_fst
                  by contradiction /* impossible chain */
                next
                  case d_0_snd
                  by solve( (#vr.5, 0) ~~> (#vk.3, 0) )
                qed
              qed
            qed
          next
            case c_xor_case_6
            solve( !KU( (x⊕h((~k⊕~r1⊕x⊕~r1.1))) ) @ #vk.5 )
              case c_xor
              solve( !KU( (~k⊕~k1) ) @ #vk.6 )
                case c_xor
                by solve( !KU( ~k1 ) @ #vk.8 )
              next
                case coerce
                solve( !KD( (~k⊕~k1) ) ▶₀ #vk.4 )
                  case acceptreader
                  by solve( (#vl.1, 0) ~~> (#vk.4, 0) )
                next
                  case initiatereader
                  by contradiction /* impossible chain */
                next
                  case tag1
                  solve( (#vl.1, 0) ~~> (#vk.4, 0) )
                    case d_0_fst
                    by contradiction /* impossible chain */
                  next
                    case d_0_snd
                    by solve( (#vr.5, 0) ~~> (#vk.4, 0) )
                  qed
                qed
              qed
            next
              case coerce
              solve( !KD( (x⊕h((~k⊕~r1⊕x⊕~r1.1))) ) ▶₀ #vk.3 )
                case acceptreader
                by solve( (#vl.1, 0) ~~> (#vk.3, 0) )
              next
                case initiatereader
                by contradiction /* impossible chain */
              next
                case tag1
                solve( (#vl.1, 0) ~~> (#vk.3, 0) )
                  case d_0_fst
                  by contradiction /* impossible chain */
                next
                  case d_0_snd
                  by solve( (#vr.5, 0) ~~> (#vk.3, 0) )
                qed
              qed
            qed
          next
            case c_xor_case_7
            solve( !KU( h((~k⊕~r1⊕x⊕~r1.1)) ) @ #vk.5 )
              case c_h
              solve( !KU( (~k⊕~k1⊕x) ) @ #vk.6 )
                case c_xor_case_1
                by solve( !KU( ~k1 ) @ #vk.9 )
              next
                case c_xor_case_2
                by solve( !KU( ~k ) @ #vk.9 )
              next
                case c_xor_case_3
                solve( !KU( (~k⊕~r1⊕x⊕~r1.1) ) @ #vk.7 )
                  case c_xor_case_1
                  solve( !KU( (~k⊕~k1) ) @ #vk.8 )
                    case c_xor
                    by solve( !KU( ~k1 ) @ #vk.10 )
                  next
                    case coerce
                    solve( !KD( (~k⊕~k1) ) ▶₀ #vk.6 )
                      case acceptreader
                      by solve( (#vl.1, 0) ~~> (#vk.6, 0) )
                    next
                      case initiatereader
                      by contradiction /* impossible chain */
                    next
                      case tag1
                      solve( (#vl.1, 0) ~~> (#vk.6, 0) )
                        case d_0_fst
                        by contradiction /* impossible chain */
                      next
                        case d_0_snd
                        by solve( (#vr.5, 0) ~~> (#vk.6, 0) )
                      qed
                    qed
                  qed
                next
                  case c_xor_case_2
                  by contradiction /* cyclic */
                next
                  case c_xor_case_3
                  solve( !KU( (~k⊕~k1) ) @ #vk.8 )
                    case c_xor
                    by solve( !KU( ~k1 ) @ #vk.11 )
                  next
                    case coerce
                    solve( !KD( (~k⊕~k1) ) ▶₀ #vk.6 )
                      case acceptreader
                      by solve( (#vl.1, 0) ~~> (#vk.6, 0) )
                    next
                      case initiatereader
                      by contradiction /* impossible chain */
                    next
                      case tag1
                      solve( (#vl.1, 0) ~~> (#vk.6, 0) )
                        case d_0_fst
                        by contradiction /* impossible chain */
                      next
                        case d_0_snd
                        by solve( (#vr.5, 0) ~~> (#vk.6, 0) )
                      qed
                    qed
                  qed
                next
                  case c_xor_case_4
                  by solve( !KU( ~k ) @ #vk.10 )
                next
                  case c_xor_case_5
                  solve( !KU( (~k⊕~k1) ) @ #vk.8 )
                    case c_xor
                    by solve( !KU( ~k1 ) @ #vk.11 )
                  next
                    case coerce
                    solve( !KD( (~k⊕~k1) ) ▶₀ #vk.6 )
                      case acceptreader
                      by solve( (#vl.1, 0) ~~> (#vk.6, 0) )
                    next
                      case initiatereader
                      by contradiction /* impossible chain */
                    next
                      case tag1
                      solve( (#vl.1, 0) ~~> (#vk.6, 0) )
                        case d_0_fst
                        by contradiction /* impossible chain */
                      next
                        case d_0_snd
                        by solve( (#vr.5, 0) ~~> (#vk.6, 0) )
                      qed
                    qed
                  qed
                next
                  case c_xor_case_6
                  by contradiction /* cyclic */
                next
                  case c_xor_case_7
                  by contradiction /* cyclic */
                next
                  case coerce
                  solve( !KD( (~k⊕~r1⊕x⊕~r1.1) ) ▶₀ #vk.5 )
                    case acceptreader
                    by solve( (#vl.1, 0) ~~> (#vk.5, 0) )
                  next
                    case initiatereader
                    by contradiction /* impossible chain */
                  next
                    case tag1
                    solve( (#vl.1, 0) ~~> (#vk.5, 0) )
                      case d_0_fst
                      by contradiction /* impossible chain */
                    next
                      case d_0_snd
                      by solve( (#vr.5, 0) ~~> (#vk.5, 0) )
                    qed
                  qed
                qed
              next
                case coerce
                solve( !KD( (~k⊕~k1⊕x) ) ▶₀ #vk.4 )
                  case acceptreader
                  by solve( (#vl.1, 0) ~~> (#vk.4, 0) )
                next
                  case initiatereader
                  by contradiction /* impossible chain */
                next
                  case tag1
                  solve( (#vl.1, 0) ~~> (#vk.4, 0) )
                    case d_0_fst
                    by contradiction /* impossible chain */
                  next
                    case d_0_snd
                    by solve( (#vr.5, 0) ~~> (#vk.4, 0) )
                  qed
                qed
              qed
            next
              case tag1_case_1
              solve( !KU( (~k⊕~k1⊕x) ) @ #vk.6 )
                case c_xor_case_1
                by solve( !KU( ~k1 ) @ #vk.9 )
              next
                case c_xor_case_2
                by solve( !KU( ~k ) @ #vk.9 )
              next
                case c_xor_case_3
                solve( !KU( (~k⊕~k1) ) @ #vk.8 )
                  case c_xor
                  by solve( !KU( ~k1 ) @ #vk.9 )
                next
                  case coerce
                  solve( !KD( (~k⊕~k1) ) ▶₀ #vk.5 )
                    case acceptreader
                    by solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                  next
                    case initiatereader
                    by contradiction /* impossible chain */
                  next
                    case tag1
                    solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                      case d_0_fst
                      by contradiction /* impossible chain */
                    next
                      case d_0_snd
                      by solve( (#vr.7, 0) ~~> (#vk.5, 0) )
                    qed
                  qed
                qed
              next
                case coerce
                solve( !KD( (~k⊕~k1⊕x) ) ▶₀ #vk.4 )
                  case acceptreader
                  by solve( (#vl.2, 0) ~~> (#vk.4, 0) )
                next
                  case initiatereader
                  by contradiction /* impossible chain */
                next
                  case tag1
                  solve( (#vl.2, 0) ~~> (#vk.4, 0) )
                    case d_0_fst
                    by contradiction /* impossible chain */
                  next
                    case d_0_snd
                    by solve( (#vr.7, 0) ~~> (#vk.4, 0) )
                  qed
                qed
              qed
            next
              case tag1_case_2
              by contradiction /* cyclic */
            qed
          next
            case coerce
            solve( !KD( (~k⊕~k1⊕x⊕h((~k⊕~r1⊕x⊕~r1.1))) ) ▶₀ #vk.2 )
              case acceptreader
              by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
            next
              case initiatereader
              by contradiction /* impossible chain */
            next
              case tag1
              solve( (#vl.1, 0) ~~> (#vk.2, 0) )
                case d_0_fst
                by contradiction /* impossible chain */
              next
                case d_0_snd
                by solve( (#vr.5, 0) ~~> (#vk.2, 0) )
              qed
            qed
          qed
        next
          case coerce
          solve( !KD( (x⊕~r1.1) ) ▶₀ #vk.1 )
            case acceptreader
            by solve( (#vl.1, 0) ~~> (#vk.1, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.1, 0) ~~> (#vk.1, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.5, 0) ~~> (#vk.1, 0) )
            qed
          qed
        qed
      qed
    qed
  next
    case split_case_6
    solve( !KU( h((~k⊕~r1⊕x⊕h((~k⊕x)))) ) @ #vk )
      case c_h
      solve( !KU( (~r1⊕x) ) @ #vk.1 )
        case c_xor
        by contradiction /* cyclic */
      next
        case coerce
        solve( !KD( (~r1⊕x) ) ▶₀ #vk.1 )
          case acceptreader
          by solve( (#vl, 0) ~~> (#vk.1, 0) )
        next
          case initiatereader
          by contradiction /* impossible chain */
        next
          case tag1
          solve( (#vl, 0) ~~> (#vk.1, 0) )
            case d_0_fst
            by contradiction /* impossible chain */
          next
            case d_0_snd
            by solve( (#vr.3, 0) ~~> (#vk.1, 0) )
          qed
        qed
      qed
    next
      case tag1_case_1
      solve( !KU( (~r1⊕x) ) @ #vk.1 )
        case c_xor
        by contradiction /* cyclic */
      next
        case coerce
        solve( !KD( (~r1⊕x) ) ▶₀ #vk.1 )
          case acceptreader
          by solve( (#vl.1, 0) ~~> (#vk.1, 0) )
        next
          case initiatereader
          by contradiction /* impossible chain */
        next
          case tag1
          solve( (#vl.1, 0) ~~> (#vk.1, 0) )
            case d_0_fst
            by contradiction /* impossible chain */
          next
            case d_0_snd
            by solve( (#vr.5, 0) ~~> (#vk.1, 0) )
          qed
        qed
      qed
    next
      case tag1_case_2
      solve( !KU( (~r1⊕x) ) @ #vk.1 )
        case c_xor
        by contradiction /* cyclic */
      next
        case coerce
        solve( !KD( (~r1⊕x) ) ▶₀ #vk.1 )
          case acceptreader
          by solve( (#vl.1, 0) ~~> (#vk.1, 0) )
        next
          case initiatereader
          by contradiction /* impossible chain */
        next
          case tag1
          solve( (#vl.1, 0) ~~> (#vk.1, 0) )
            case d_0_fst
            by contradiction /* impossible chain */
          next
            case d_0_snd
            by solve( (#vr.5, 0) ~~> (#vk.1, 0) )
          qed
        qed
      qed
    qed
  next
    case split_case_7
    solve( !KU( h((~r1⊕z⊕h(z))) ) @ #vk )
      case c_h
      solve( !KU( (~k⊕~r1⊕z) ) @ #vk.1 )
        case c_xor_case_1
        by contradiction /* cyclic */
      next
        case c_xor_case_2
        by solve( !KU( ~k ) @ #vk.4 )
      next
        case c_xor_case_3
        solve( !KU( (~r1⊕z⊕h(z)) ) @ #vk.2 )
          case c_xor_case_1
          solve( !KU( (~k⊕~r1) ) @ #vk.4 )
            case c_xor
            by contradiction /* cyclic */
          next
            case coerce
            solve( !KD( (~k⊕~r1) ) ▶₀ #vk.3 )
              case acceptreader
              by solve( (#vl, 0) ~~> (#vk.3, 0) )
            next
              case initiatereader
              by contradiction /* impossible chain */
            next
              case tag1
              solve( (#vl, 0) ~~> (#vk.3, 0) )
                case d_0_fst
                by contradiction /* impossible chain */
              next
                case d_0_snd
                by solve( (#vr.3, 0) ~~> (#vk.3, 0) )
              qed
            qed
          qed
        next
          case c_xor_case_2
          solve( !KU( (~k⊕~r1) ) @ #vk.4 )
            case c_xor
            by contradiction /* cyclic */
          next
            case coerce
            solve( !KD( (~k⊕~r1) ) ▶₀ #vk.3 )
              case acceptreader
              by solve( (#vl, 0) ~~> (#vk.3, 0) )
            next
              case initiatereader
              by contradiction /* impossible chain */
            next
              case tag1
              solve( (#vl, 0) ~~> (#vk.3, 0) )
                case d_0_fst
                by contradiction /* impossible chain */
              next
                case d_0_snd
                by solve( (#vr.3, 0) ~~> (#vk.3, 0) )
              qed
            qed
          qed
        next
          case c_xor_case_3
          solve( !KU( (~k⊕~r1) ) @ #vk.4 )
            case c_xor
            by contradiction /* cyclic */
          next
            case coerce
            solve( !KD( (~k⊕~r1) ) ▶₀ #vk.3 )
              case acceptreader
              by solve( (#vl, 0) ~~> (#vk.3, 0) )
            next
              case initiatereader
              by contradiction /* impossible chain */
            next
              case tag1
              solve( (#vl, 0) ~~> (#vk.3, 0) )
                case d_0_fst
                by contradiction /* impossible chain */
              next
                case d_0_snd
                by solve( (#vr.3, 0) ~~> (#vk.3, 0) )
              qed
            qed
          qed
        next
          case coerce
          solve( !KD( (~r1⊕z⊕h(z)) ) ▶₀ #vk.2 )
            case acceptreader
            by solve( (#vl, 0) ~~> (#vk.2, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl, 0) ~~> (#vk.2, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.3, 0) ~~> (#vk.2, 0) )
            qed
          qed
        qed
      next
        case coerce
        solve( !KD( (~k⊕~r1⊕z) ) ▶₀ #vk.1 )
          case acceptreader
          by solve( (#vl, 0) ~~> (#vk.1, 0) )
        next
          case initiatereader
          by contradiction /* impossible chain */
        next
          case tag1
          solve( (#vl, 0) ~~> (#vk.1, 0) )
            case d_0_fst
            by contradiction /* impossible chain */
          next
            case d_0_snd
            by solve( (#vr.3, 0) ~~> (#vk.1, 0) )
          qed
        qed
      qed
    next
      case tag1_case_1
      solve( !KU( (~k⊕~r1⊕z) ) @ #vk.1 )
        case c_xor_case_1
        by contradiction /* cyclic */
      next
        case c_xor_case_2
        by solve( !KU( ~k ) @ #vk.4 )
      next
        case c_xor_case_3
        solve( !KU( (~k⊕~r1) ) @ #vk.4 )
          case c_xor
          by contradiction /* cyclic */
        next
          case coerce
          solve( !KD( (~k⊕~r1) ) ▶₀ #vk.2 )
            case acceptreader
            by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.1, 0) ~~> (#vk.2, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.5, 0) ~~> (#vk.2, 0) )
            qed
          qed
        qed
      next
        case coerce
        solve( !KD( (~k⊕~r1⊕z) ) ▶₀ #vk.1 )
          case acceptreader
          by solve( (#vl.1, 0) ~~> (#vk.1, 0) )
        next
          case initiatereader
          by contradiction /* impossible chain */
        next
          case tag1
          solve( (#vl.1, 0) ~~> (#vk.1, 0) )
            case d_0_fst
            by contradiction /* impossible chain */
          next
            case d_0_snd
            by solve( (#vr.5, 0) ~~> (#vk.1, 0) )
          qed
        qed
      qed
    next
      case tag1_case_2
      solve( !KU( (~k⊕~r1⊕z) ) @ #vk.1 )
        case c_xor_case_1
        by contradiction /* cyclic */
      next
        case c_xor_case_2
        by solve( !KU( ~k ) @ #vk.4 )
      next
        case c_xor_case_3
        solve( !KU( (~k⊕~r1) ) @ #vk.4 )
          case c_xor
          by contradiction /* cyclic */
        next
          case coerce
          solve( !KD( (~k⊕~r1) ) ▶₀ #vk.2 )
            case acceptreader
            by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.1, 0) ~~> (#vk.2, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.5, 0) ~~> (#vk.2, 0) )
            qed
          qed
        qed
      next
        case coerce
        solve( !KD( (~k⊕~r1⊕z) ) ▶₀ #vk.1 )
          case acceptreader
          by solve( (#vl.1, 0) ~~> (#vk.1, 0) )
        next
          case initiatereader
          by contradiction /* impossible chain */
        next
          case tag1
          solve( (#vl.1, 0) ~~> (#vk.1, 0) )
            case d_0_fst
            by contradiction /* impossible chain */
          next
            case d_0_snd
            by solve( (#vr.5, 0) ~~> (#vk.1, 0) )
          qed
        qed
      qed
    qed
  next
    case split_case_8
    solve( splitEqs(1) )
      case split
      solve( !KU( h((x⊕h((~r1⊕x)))) ) @ #vk )
        case c_h
        solve( !KU( (~k⊕x) ) @ #vk.1 )
          case c_xor
          by solve( !KU( ~k ) @ #vk.4 )
        next
          case coerce
          solve( !KD( (~k⊕x) ) ▶₀ #vk.1 )
            case acceptreader
            by solve( (#vl, 0) ~~> (#vk.1, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl, 0) ~~> (#vk.1, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.3, 0) ~~> (#vk.1, 0) )
            qed
          qed
        qed
      next
        case tag1_case_1
        solve( !KU( (~k⊕x) ) @ #vk.1 )
          case c_xor
          by solve( !KU( ~k ) @ #vk.4 )
        next
          case coerce
          solve( !KD( (~k⊕x) ) ▶₀ #vk.1 )
            case acceptreader
            by solve( (#vl.1, 0) ~~> (#vk.1, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.1, 0) ~~> (#vk.1, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.5, 0) ~~> (#vk.1, 0) )
            qed
          qed
        qed
      next
        case tag1_case_2
        solve( !KU( (~k⊕x) ) @ #vk.1 )
          case c_xor
          by solve( !KU( ~k ) @ #vk.4 )
        next
          case coerce
          solve( !KD( (~k⊕x) ) ▶₀ #vk.1 )
            case acceptreader
            by solve( (#vl.1, 0) ~~> (#vk.1, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.1, 0) ~~> (#vk.1, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.5, 0) ~~> (#vk.1, 0) )
            qed
          qed
        qed
      qed
    qed
  qed
next
  case tag1_case_3
  solve( splitEqs(0) )
    case split_case_1
    by solve( !KU( ~k ) @ #vk.1 )
  next
    case split_case_2
    by contradiction /* cyclic */
  next
    case split_case_3
    solve( !KU( h((~k⊕h((~k⊕~r1)))) ) @ #vk )
      case c_h
      solve( !KU( (~k⊕h((~k⊕~r1))) ) @ #vk.2 )
        case c_xor
        by solve( !KU( ~k ) @ #vk.4 )
      next
        case coerce
        solve( !KD( (~k⊕h((~k⊕~r1))) ) ▶₀ #vk.1 )
          case acceptreader
          by solve( (#vl, 0) ~~> (#vk.1, 0) )
        next
          case initiatereader
          by contradiction /* impossible chain */
        next
          case tag1
          solve( (#vl, 0) ~~> (#vk.1, 0) )
            case d_0_fst
            by contradiction /* impossible chain */
          next
            case d_0_snd
            by solve( (#vr.3, 0) ~~> (#vk.1, 0) )
          qed
        qed
      qed
    next
      case tag1_case_1
      solve( !KU( (~r1.1⊕h((~k⊕~r1))) ) @ #vk.2 )
        case c_xor
        by contradiction /* cyclic */
      next
        case coerce
        solve( !KD( (~r1.1⊕h((~k⊕~r1))) ) ▶₀ #vk.1 )
          case acceptreader
          by solve( (#vl.1, 0) ~~> (#vk.1, 0) )
        next
          case initiatereader
          by contradiction /* impossible chain */
        next
          case tag1
          solve( (#vl.1, 0) ~~> (#vk.1, 0) )
            case d_0_fst
            by contradiction /* impossible chain */
          next
            case d_0_snd
            by solve( (#vr.5, 0) ~~> (#vk.1, 0) )
          qed
        qed
      qed
    next
      case tag1_case_2
      solve( !KU( (x⊕~x.1) ) @ #vk.2 )
        case c_xor
        solve( !KU( ~x ) @ #vk.3 )
          case fresh
          by solve( splitEqs(3) )
        next
          case tag1_case_1
          by solve( splitEqs(3) )
        next
          case tag1_case_2
          by solve( splitEqs(3) )
        qed
      next
        case coerce
        solve( !KD( (x⊕~x.1) ) ▶₀ #vk.1 )
          case acceptreader
          by solve( (#vl.1, 0) ~~> (#vk.1, 0) )
        next
          case initiatereader
          by contradiction /* impossible chain */
        next
          case tag1
          solve( (#vl.1, 0) ~~> (#vk.1, 0) )
            case d_0_fst
            by contradiction /* impossible chain */
          next
            case d_0_snd
            by solve( (#vr.5, 0) ~~> (#vk.1, 0) )
          qed
        qed
      qed
    qed
  next
    case split_case_4
    solve( !KU( h((~r1⊕h(zero))) ) @ #vk )
      case c_h
      solve( !KU( (~k⊕~r1) ) @ #vk.1 )
        case c_xor
        by contradiction /* cyclic */
      next
        case coerce
        solve( !KD( (~k⊕~r1) ) ▶₀ #vk.1 )
          case acceptreader
          by solve( (#vl, 0) ~~> (#vk.1, 0) )
        next
          case initiatereader
          by contradiction /* impossible chain */
        next
          case tag1
          solve( (#vl, 0) ~~> (#vk.1, 0) )
            case d_0_fst
            by contradiction /* impossible chain */
          next
            case d_0_snd
            by solve( (#vr.3, 0) ~~> (#vk.1, 0) )
          qed
        qed
      qed
    next
      case tag1_case_1
      solve( splitEqs(3) )
        case split
        solve( !KU( (~k⊕~r1) ) @ #vk.1 )
          case c_xor
          by contradiction /* cyclic */
        next
          case coerce
          solve( !KD( (~k⊕~r1) ) ▶₀ #vk.1 )
            case acceptreader
            by solve( (#vl.1, 0) ~~> (#vk.1, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.1, 0) ~~> (#vk.1, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.5, 0) ~~> (#vk.1, 0) )
            qed
          qed
        qed
      qed
    next
      case tag1_case_2
      solve( !KU( (~k⊕~r1) ) @ #vk.1 )
        case c_xor
        by contradiction /* cyclic */
      next
        case coerce
        solve( !KD( (~k⊕~r1) ) ▶₀ #vk.1 )
          case acceptreader
          by solve( (#vl.1, 0) ~~> (#vk.1, 0) )
        next
          case initiatereader
          by contradiction /* impossible chain */
        next
          case tag1
          solve( (#vl.1, 0) ~~> (#vk.1, 0) )
            case d_0_fst
            by contradiction /* impossible chain */
          next
            case d_0_snd
            by solve( (#vr.5, 0) ~~> (#vk.1, 0) )
          qed
        qed
      qed
    qed
  next
    case split_case_5
    solve( !KU( h((~k⊕r0⊕h((~k⊕~r1⊕r0)))) ) @ #vk )
      case c_h
      solve( !KU( (~k⊕r0⊕h((~k⊕~r1⊕r0))) ) @ #vk.2 )
        case c_xor_case_1
        solve( !KU( (~k⊕h((~k⊕~r1⊕r0))) ) @ #vk.3 )
          case c_xor
          by solve( !KU( ~k ) @ #vk.5 )
        next
          case coerce
          solve( !KD( (~k⊕h((~k⊕~r1⊕r0))) ) ▶₀ #vk.2 )
            case acceptreader
            by solve( (#vl, 0) ~~> (#vk.2, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl, 0) ~~> (#vk.2, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.3, 0) ~~> (#vk.2, 0) )
            qed
          qed
        qed
      next
        case c_xor_case_2
        by solve( !KU( ~k ) @ #vk.4 )
      next
        case c_xor_case_3
        solve( !KU( (~k⊕r0) ) @ #vk.4 )
          case c_xor
          by solve( !KU( ~k ) @ #vk.5 )
        next
          case coerce
          solve( !KD( (~k⊕r0) ) ▶₀ #vk.2 )
            case acceptreader
            by solve( (#vl, 0) ~~> (#vk.2, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl, 0) ~~> (#vk.2, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.3, 0) ~~> (#vk.2, 0) )
            qed
          qed
        qed
      next
        case coerce
        solve( !KD( (~k⊕r0⊕h((~k⊕~r1⊕r0))) ) ▶₀ #vk.1 )
          case acceptreader
          by solve( (#vl, 0) ~~> (#vk.1, 0) )
        next
          case initiatereader
          by contradiction /* impossible chain */
        next
          case tag1
          solve( (#vl, 0) ~~> (#vk.1, 0) )
            case d_0_fst
            by contradiction /* impossible chain */
          next
            case d_0_snd
            by solve( (#vr.3, 0) ~~> (#vk.1, 0) )
          qed
        qed
      qed
    next
      case tag1_case_1
      solve( splitEqs(3) )
        case split_case_1
        solve( !KU( (r0⊕~r1.1⊕h((~k⊕~r1⊕r0))) ) @ #vk.2 )
          case c_xor_case_1
          by contradiction /* cyclic */
        next
          case c_xor_case_2
          solve( !KU( (~r1.1⊕h((~k⊕~r1⊕r0))) ) @ #vk.3 )
            case c_xor
            by contradiction /* cyclic */
          next
            case coerce
            solve( !KD( (~r1.1⊕h((~k⊕~r1⊕r0))) ) ▶₀ #vk.2 )
              case acceptreader
              by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
            next
              case initiatereader
              by contradiction /* impossible chain */
            next
              case tag1
              solve( (#vl.1, 0) ~~> (#vk.2, 0) )
                case d_0_fst
                by contradiction /* impossible chain */
              next
                case d_0_snd
                by solve( (#vr.5, 0) ~~> (#vk.2, 0) )
              qed
            qed
          qed
        next
          case c_xor_case_3
          solve( !KU( (r0⊕~r1.1) ) @ #vk.4 )
            case c_xor
            by contradiction /* cyclic */
          next
            case coerce
            solve( !KD( (r0⊕~r1.1) ) ▶₀ #vk.2 )
              case acceptreader
              by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
            next
              case initiatereader
              by contradiction /* impossible chain */
            next
              case tag1
              solve( (#vl.1, 0) ~~> (#vk.2, 0) )
                case d_0_fst
                by contradiction /* impossible chain */
              next
                case d_0_snd
                by solve( (#vr.5, 0) ~~> (#vk.2, 0) )
              qed
            qed
          qed
        next
          case coerce
          solve( !KD( (r0⊕~r1.1⊕h((~k⊕~r1⊕r0))) ) ▶₀ #vk.1 )
            case acceptreader
            by solve( (#vl.1, 0) ~~> (#vk.1, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.1, 0) ~~> (#vk.1, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.5, 0) ~~> (#vk.1, 0) )
            qed
          qed
        qed
      next
        case split_case_2
        solve( !KU( h((~k⊕~r0⊕~r1)) ) @ #vk.2 )
          case c_h
          solve( !KU( (~k⊕~r0⊕~r1) ) @ #vk.3 )
            case c_xor_case_1
            by contradiction /* cyclic */
          next
            case c_xor_case_2
            by solve( !KU( ~k ) @ #vk.5 )
          next
            case c_xor_case_3
            by contradiction /* cyclic */
          next
            case coerce
            solve( !KD( (~k⊕~r0⊕~r1) ) ▶₀ #vk.2 )
              case acceptreader
              by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
            next
              case initiatereader
              by contradiction /* impossible chain */
            next
              case tag1
              solve( (#vl.1, 0) ~~> (#vk.2, 0) )
                case d_0_fst
                by contradiction /* impossible chain */
              next
                case d_0_snd
                by solve( (#vr.5, 0) ~~> (#vk.2, 0) )
              qed
            qed
          qed
        next
          case tag1_case_1
          solve( splitEqs(5) )
            case split
            solve( !KU( (~k⊕~k2⊕~r0⊕~r1⊕~r1.1) ) @ #vk.3 )
              case c_xor_case_01
              by contradiction /* cyclic */
            next
              case c_xor_case_02
              by contradiction /* cyclic */
            next
              case c_xor_case_03
              solve( !KU( (~k⊕~k2⊕~r1.1) ) @ #vk.4 )
                case c_xor_case_1
                by solve( !KU( ~k2 ) @ #vk.7 )
              next
                case c_xor_case_2
                by solve( !KU( ~k ) @ #vk.7 )
              next
                case c_xor_case_3
                by contradiction /* cyclic */
              next
                case coerce
                solve( !KD( (~k⊕~k2⊕~r1.1) ) ▶₀ #vk.3 )
                  case acceptreader
                  by solve( (#vl.2, 0) ~~> (#vk.3, 0) )
                next
                  case initiatereader
                  by contradiction /* impossible chain */
                next
                  case tag1
                  solve( (#vl.2, 0) ~~> (#vk.3, 0) )
                    case d_0_fst
                    by contradiction /* impossible chain */
                  next
                    case d_0_snd
                    by solve( (#vr.7, 0) ~~> (#vk.3, 0) )
                  qed
                qed
              qed
            next
              case c_xor_case_04
              by solve( !KU( ~k2 ) @ #vk.5 )
            next
              case c_xor_case_05
              solve( !KU( (~k⊕~r0⊕~r1.1) ) @ #vk.4 )
                case c_xor_case_1
                by contradiction /* cyclic */
              next
                case c_xor_case_2
                by solve( !KU( ~k ) @ #vk.7 )
              next
                case c_xor_case_3
                by contradiction /* cyclic */
              next
                case coerce
                solve( !KD( (~k⊕~r0⊕~r1.1) ) ▶₀ #vk.3 )
                  case acceptreader
                  by solve( (#vl.2, 0) ~~> (#vk.3, 0) )
                next
                  case initiatereader
                  by contradiction /* impossible chain */
                next
                  case tag1
                  solve( (#vl.2, 0) ~~> (#vk.3, 0) )
                    case d_0_fst
                    by contradiction /* impossible chain */
                  next
                    case d_0_snd
                    by solve( (#vr.7, 0) ~~> (#vk.3, 0) )
                  qed
                qed
              qed
            next
              case c_xor_case_06
              solve( !KU( (~k⊕~r1⊕~r1.1) ) @ #vk.4 )
                case c_xor_case_1
                by contradiction /* cyclic */
              next
                case c_xor_case_2
                by solve( !KU( ~k ) @ #vk.7 )
              next
                case c_xor_case_3
                by contradiction /* cyclic */
              next
                case coerce
                solve( !KD( (~k⊕~r1⊕~r1.1) ) ▶₀ #vk.3 )
                  case acceptreader
                  by solve( (#vl.2, 0) ~~> (#vk.3, 0) )
                next
                  case initiatereader
                  by contradiction /* impossible chain */
                next
                  case tag1
                  solve( (#vl.2, 0) ~~> (#vk.3, 0) )
                    case d_0_fst
                    by contradiction /* impossible chain */
                  next
                    case d_0_snd
                    by solve( (#vr.7, 0) ~~> (#vk.3, 0) )
                  qed
                qed
              qed
            next
              case c_xor_case_07
              solve( !KU( (~k⊕~r1.1) ) @ #vk.4 )
                case c_xor
                by contradiction /* cyclic */
              next
                case coerce
                solve( !KD( (~k⊕~r1.1) ) ▶₀ #vk.3 )
                  case acceptreader
                  by solve( (#vl.2, 0) ~~> (#vk.3, 0) )
                next
                  case initiatereader
                  by contradiction /* impossible chain */
                next
                  case tag1
                  solve( (#vl.2, 0) ~~> (#vk.3, 0) )
                    case d_0_fst
                    by contradiction /* impossible chain */
                  next
                    case d_0_snd
                    by solve( (#vr.7, 0) ~~> (#vk.3, 0) )
                  qed
                qed
              qed
            next
              case c_xor_case_08
              by solve( !KU( ~k ) @ #vk.5 )
            next
              case c_xor_case_09
              solve( !KU( (~k2⊕~r0⊕~r1.1) ) @ #vk.4 )
                case c_xor_case_1
                by contradiction /* cyclic */
              next
                case c_xor_case_2
                by solve( !KU( ~k2 ) @ #vk.7 )
              next
                case c_xor_case_3
                by contradiction /* cyclic */
              next
                case coerce
                solve( !KD( (~k2⊕~r0⊕~r1.1) ) ▶₀ #vk.3 )
                  case acceptreader
                  by solve( (#vl.2, 0) ~~> (#vk.3, 0) )
                next
                  case initiatereader
                  by contradiction /* impossible chain */
                next
                  case tag1
                  solve( (#vl.2, 0) ~~> (#vk.3, 0) )
                    case d_0_fst
                    by contradiction /* impossible chain */
                  next
                    case d_0_snd
                    by solve( (#vr.7, 0) ~~> (#vk.3, 0) )
                  qed
                qed
              qed
            next
              case c_xor_case_10
              solve( !KU( (~k2⊕~r1⊕~r1.1) ) @ #vk.4 )
                case c_xor_case_1
                by contradiction /* cyclic */
              next
                case c_xor_case_2
                by solve( !KU( ~k2 ) @ #vk.7 )
              next
                case c_xor_case_3
                by contradiction /* cyclic */
              next
                case coerce
                solve( !KD( (~k2⊕~r1⊕~r1.1) ) ▶₀ #vk.3 )
                  case acceptreader
                  by solve( (#vl.2, 0) ~~> (#vk.3, 0) )
                next
                  case initiatereader
                  by contradiction /* impossible chain */
                next
                  case tag1
                  solve( (#vl.2, 0) ~~> (#vk.3, 0) )
                    case d_0_fst
                    by contradiction /* impossible chain */
                  next
                    case d_0_snd
                    by solve( (#vr.7, 0) ~~> (#vk.3, 0) )
                  qed
                qed
              qed
            next
              case c_xor_case_11
              solve( !KU( (~k2⊕~r1.1) ) @ #vk.4 )
                case c_xor
                by contradiction /* cyclic */
              next
                case coerce
                solve( !KD( (~k2⊕~r1.1) ) ▶₀ #vk.3 )
                  case acceptreader
                  by solve( (#vl.2, 0) ~~> (#vk.3, 0) )
                next
                  case initiatereader
                  by contradiction /* impossible chain */
                next
                  case tag1
                  solve( (#vl.2, 0) ~~> (#vk.3, 0) )
                    case d_0_fst
                    by contradiction /* impossible chain */
                  next
                    case d_0_snd
                    by solve( (#vr.7, 0) ~~> (#vk.3, 0) )
                  qed
                qed
              qed
            next
              case c_xor_case_12
              solve( !KU( (~r0⊕~r1⊕~r1.1) ) @ #vk.4 )
                case c_xor_case_1
                by contradiction /* cyclic */
              next
                case c_xor_case_2
                by contradiction /* cyclic */
              next
                case c_xor_case_3
                by contradiction /* cyclic */
              next
                case coerce
                solve( !KD( (~r0⊕~r1⊕~r1.1) ) ▶₀ #vk.3 )
                  case acceptreader
                  by solve( (#vl.2, 0) ~~> (#vk.3, 0) )
                next
                  case initiatereader
                  by contradiction /* impossible chain */
                next
                  case tag1
                  solve( (#vl.2, 0) ~~> (#vk.3, 0) )
                    case d_0_fst
                    by contradiction /* impossible chain */
                  next
                    case d_0_snd
                    by solve( (#vr.7, 0) ~~> (#vk.3, 0) )
                  qed
                qed
              qed
            next
              case c_xor_case_13
              solve( !KU( (~r0⊕~r1.1) ) @ #vk.4 )
                case c_xor
                by contradiction /* cyclic */
              next
                case coerce
                solve( !KD( (~r0⊕~r1.1) ) ▶₀ #vk.3 )
                  case acceptreader
                  by solve( (#vl.2, 0) ~~> (#vk.3, 0) )
                next
                  case initiatereader
                  by contradiction /* impossible chain */
                next
                  case tag1
                  solve( (#vl.2, 0) ~~> (#vk.3, 0) )
                    case d_0_fst
                    by contradiction /* impossible chain */
                  next
                    case d_0_snd
                    by solve( (#vr.7, 0) ~~> (#vk.3, 0) )
                  qed
                qed
              qed
            next
              case c_xor_case_14
              solve( !KU( (~r1⊕~r1.1) ) @ #vk.4 )
                case c_xor
                by contradiction /* cyclic */
              next
                case coerce
                solve( !KD( (~r1⊕~r1.1) ) ▶₀ #vk.3 )
                  case acceptreader
                  by solve( (#vl.2, 0) ~~> (#vk.3, 0) )
                next
                  case initiatereader
                  by contradiction /* impossible chain */
                next
                  case tag1
                  solve( (#vl.2, 0) ~~> (#vk.3, 0) )
                    case d_0_fst
                    by contradiction /* impossible chain */
                  next
                    case d_0_snd
                    by solve( (#vr.7, 0) ~~> (#vk.3, 0) )
                  qed
                qed
              qed
            next
              case c_xor_case_15
              by contradiction /* cyclic */
            next
              case coerce
              solve( !KD( (~k⊕~k2⊕~r0⊕~r1⊕~r1.1) ) ▶₀ #vk.2 )
                case acceptreader
                by solve( (#vl.2, 0) ~~> (#vk.2, 0) )
              next
                case initiatereader
                by contradiction /* impossible chain */
              next
                case tag1
                solve( (#vl.2, 0) ~~> (#vk.2, 0) )
                  case d_0_fst
                  by contradiction /* impossible chain */
                next
                  case d_0_snd
                  by solve( (#vr.7, 0) ~~> (#vk.2, 0) )
                qed
              qed
            qed
          qed
        next
          case tag1_case_2
          by contradiction /* cyclic */
        qed
      next
        case split_case_3
        solve( !KU( (x⊕~r1.1) ) @ #vk.1 )
          case c_xor
          solve( !KU( (x⊕h((~k⊕~r1⊕x⊕~r1.1))) ) @ #vk.2 )
            case c_xor
            solve( !KU( h((~k⊕~r1⊕x⊕~r1.1)) ) @ #vk.5 )
              case c_h
              solve( !KU( (~k⊕~r1⊕x⊕~r1.1) ) @ #vk.6 )
                case c_xor_case_1
                solve( !KU( (~k⊕~r1⊕~r1.1) ) @ #vk.7 )
                  case c_xor_case_1
                  by contradiction /* cyclic */
                next
                  case c_xor_case_2
                  by solve( !KU( ~k ) @ #vk.9 )
                next
                  case c_xor_case_3
                  by contradiction /* cyclic */
                next
                  case coerce
                  solve( !KD( (~k⊕~r1⊕~r1.1) ) ▶₀ #vk.5 )
                    case acceptreader
                    by solve( (#vl.1, 0) ~~> (#vk.5, 0) )
                  next
                    case initiatereader
                    by contradiction /* impossible chain */
                  next
                    case tag1
                    solve( (#vl.1, 0) ~~> (#vk.5, 0) )
                      case d_0_fst
                      by contradiction /* impossible chain */
                    next
                      case d_0_snd
                      by solve( (#vr.5, 0) ~~> (#vk.5, 0) )
                    qed
                  qed
                qed
              next
                case c_xor_case_2
                by contradiction /* cyclic */
              next
                case c_xor_case_3
                solve( !KU( (~k⊕~r1.1) ) @ #vk.7 )
                  case c_xor
                  by contradiction /* cyclic */
                next
                  case coerce
                  solve( !KD( (~k⊕~r1.1) ) ▶₀ #vk.5 )
                    case acceptreader
                    by solve( (#vl.1, 0) ~~> (#vk.5, 0) )
                  next
                    case initiatereader
                    by contradiction /* impossible chain */
                  next
                    case tag1
                    solve( (#vl.1, 0) ~~> (#vk.5, 0) )
                      case d_0_fst
                      by contradiction /* impossible chain */
                    next
                      case d_0_snd
                      by solve( (#vr.5, 0) ~~> (#vk.5, 0) )
                    qed
                  qed
                qed
              next
                case c_xor_case_4
                by solve( !KU( ~k ) @ #vk.8 )
              next
                case c_xor_case_5
                solve( !KU( (~r1⊕~r1.1) ) @ #vk.7 )
                  case c_xor
                  by contradiction /* cyclic */
                next
                  case coerce
                  solve( !KD( (~r1⊕~r1.1) ) ▶₀ #vk.5 )
                    case acceptreader
                    by solve( (#vl.1, 0) ~~> (#vk.5, 0) )
                  next
                    case initiatereader
                    by contradiction /* impossible chain */
                  next
                    case tag1
                    solve( (#vl.1, 0) ~~> (#vk.5, 0) )
                      case d_0_fst
                      by contradiction /* impossible chain */
                    next
                      case d_0_snd
                      by solve( (#vr.5, 0) ~~> (#vk.5, 0) )
                    qed
                  qed
                qed
              next
                case c_xor_case_6
                by contradiction /* cyclic */
              next
                case c_xor_case_7
                by contradiction /* cyclic */
              next
                case coerce
                solve( !KD( (~k⊕~r1⊕x⊕~r1.1) ) ▶₀ #vk.4 )
                  case acceptreader
                  by solve( (#vl.1, 0) ~~> (#vk.4, 0) )
                next
                  case initiatereader
                  by contradiction /* impossible chain */
                next
                  case tag1
                  solve( (#vl.1, 0) ~~> (#vk.4, 0) )
                    case d_0_fst
                    by contradiction /* impossible chain */
                  next
                    case d_0_snd
                    by solve( (#vr.5, 0) ~~> (#vk.4, 0) )
                  qed
                qed
              qed
            next
              case tag1_case_1
              solve( splitEqs(5) )
                case split_case_1
                by solve( !KU( ~k2 ) @ #vk.5 )
              next
                case split_case_2
                solve( !KU( (~k⊕~k2⊕~r1⊕x⊕~r1.1⊕~r1.2) ) @ #vk.6 )
                  case c_xor_case_01
                  by contradiction /* cyclic */
                next
                  case c_xor_case_02
                  solve( !KU( (~k⊕~k2⊕~r1⊕~r1.1⊕~r1.2) ) @ #vk.7 )
                    case c_xor_case_01
                    by contradiction /* cyclic */
                  next
                    case c_xor_case_02
                    by contradiction /* cyclic */
                  next
                    case c_xor_case_03
                    solve( !KU( (~k⊕~k2⊕~r1.2) ) @ #vk.8 )
                      case c_xor_case_1
                      by solve( !KU( ~k2 ) @ #vk.11 )
                    next
                      case c_xor_case_2
                      by solve( !KU( ~k ) @ #vk.11 )
                    next
                      case c_xor_case_3
                      by contradiction /* cyclic */
                    next
                      case coerce
                      solve( !KD( (~k⊕~k2⊕~r1.2) ) ▶₀ #vk.6 )
                        case acceptreader
                        by solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                      next
                        case initiatereader
                        by contradiction /* impossible chain */
                      next
                        case tag1
                        solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                          case d_0_fst
                          by contradiction /* impossible chain */
                        next
                          case d_0_snd
                          by solve( (#vr.7, 0) ~~> (#vk.6, 0) )
                        qed
                      qed
                    qed
                  next
                    case c_xor_case_04
                    by solve( !KU( ~k2 ) @ #vk.9 )
                  next
                    case c_xor_case_05
                    solve( !KU( (~k⊕~r1⊕~r1.2) ) @ #vk.8 )
                      case c_xor_case_1
                      by contradiction /* cyclic */
                    next
                      case c_xor_case_2
                      by solve( !KU( ~k ) @ #vk.11 )
                    next
                      case c_xor_case_3
                      by contradiction /* cyclic */
                    next
                      case coerce
                      solve( !KD( (~k⊕~r1⊕~r1.2) ) ▶₀ #vk.6 )
                        case acceptreader
                        by solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                      next
                        case initiatereader
                        by contradiction /* impossible chain */
                      next
                        case tag1
                        solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                          case d_0_fst
                          by contradiction /* impossible chain */
                        next
                          case d_0_snd
                          by solve( (#vr.7, 0) ~~> (#vk.6, 0) )
                        qed
                      qed
                    qed
                  next
                    case c_xor_case_06
                    solve( !KU( (~k⊕~r1.1⊕~r1.2) ) @ #vk.8 )
                      case c_xor_case_1
                      by contradiction /* cyclic */
                    next
                      case c_xor_case_2
                      by solve( !KU( ~k ) @ #vk.11 )
                    next
                      case c_xor_case_3
                      by contradiction /* cyclic */
                    next
                      case coerce
                      solve( !KD( (~k⊕~r1.1⊕~r1.2) ) ▶₀ #vk.6 )
                        case acceptreader
                        by solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                      next
                        case initiatereader
                        by contradiction /* impossible chain */
                      next
                        case tag1
                        solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                          case d_0_fst
                          by contradiction /* impossible chain */
                        next
                          case d_0_snd
                          by solve( (#vr.7, 0) ~~> (#vk.6, 0) )
                        qed
                      qed
                    qed
                  next
                    case c_xor_case_07
                    solve( !KU( (~k⊕~r1.2) ) @ #vk.8 )
                      case c_xor
                      by contradiction /* cyclic */
                    next
                      case coerce
                      solve( !KD( (~k⊕~r1.2) ) ▶₀ #vk.6 )
                        case acceptreader
                        by solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                      next
                        case initiatereader
                        by contradiction /* impossible chain */
                      next
                        case tag1
                        solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                          case d_0_fst
                          by contradiction /* impossible chain */
                        next
                          case d_0_snd
                          by solve( (#vr.7, 0) ~~> (#vk.6, 0) )
                        qed
                      qed
                    qed
                  next
                    case c_xor_case_08
                    by solve( !KU( ~k ) @ #vk.9 )
                  next
                    case c_xor_case_09
                    solve( !KU( (~k2⊕~r1⊕~r1.2) ) @ #vk.8 )
                      case c_xor_case_1
                      by contradiction /* cyclic */
                    next
                      case c_xor_case_2
                      by solve( !KU( ~k2 ) @ #vk.11 )
                    next
                      case c_xor_case_3
                      by contradiction /* cyclic */
                    next
                      case coerce
                      solve( !KD( (~k2⊕~r1⊕~r1.2) ) ▶₀ #vk.6 )
                        case acceptreader
                        by solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                      next
                        case initiatereader
                        by contradiction /* impossible chain */
                      next
                        case tag1
                        solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                          case d_0_fst
                          by contradiction /* impossible chain */
                        next
                          case d_0_snd
                          by solve( (#vr.7, 0) ~~> (#vk.6, 0) )
                        qed
                      qed
                    qed
                  next
                    case c_xor_case_10
                    solve( !KU( (~k2⊕~r1.1⊕~r1.2) ) @ #vk.8 )
                      case c_xor_case_1
                      by contradiction /* cyclic */
                    next
                      case c_xor_case_2
                      by solve( !KU( ~k2 ) @ #vk.11 )
                    next
                      case c_xor_case_3
                      by contradiction /* cyclic */
                    next
                      case coerce
                      solve( !KD( (~k2⊕~r1.1⊕~r1.2) ) ▶₀ #vk.6 )
                        case acceptreader
                        by solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                      next
                        case initiatereader
                        by contradiction /* impossible chain */
                      next
                        case tag1
                        solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                          case d_0_fst
                          by contradiction /* impossible chain */
                        next
                          case d_0_snd
                          by solve( (#vr.7, 0) ~~> (#vk.6, 0) )
                        qed
                      qed
                    qed
                  next
                    case c_xor_case_11
                    solve( !KU( (~k2⊕~r1.2) ) @ #vk.8 )
                      case c_xor
                      by contradiction /* cyclic */
                    next
                      case coerce
                      solve( !KD( (~k2⊕~r1.2) ) ▶₀ #vk.6 )
                        case acceptreader
                        by solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                      next
                        case initiatereader
                        by contradiction /* impossible chain */
                      next
                        case tag1
                        solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                          case d_0_fst
                          by contradiction /* impossible chain */
                        next
                          case d_0_snd
                          by solve( (#vr.7, 0) ~~> (#vk.6, 0) )
                        qed
                      qed
                    qed
                  next
                    case c_xor_case_12
                    solve( !KU( (~r1⊕~r1.1⊕~r1.2) ) @ #vk.8 )
                      case c_xor_case_1
                      by contradiction /* cyclic */
                    next
                      case c_xor_case_2
                      by contradiction /* cyclic */
                    next
                      case c_xor_case_3
                      by contradiction /* cyclic */
                    next
                      case coerce
                      solve( !KD( (~r1⊕~r1.1⊕~r1.2) ) ▶₀ #vk.6 )
                        case acceptreader
                        by solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                      next
                        case initiatereader
                        by contradiction /* impossible chain */
                      next
                        case tag1
                        solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                          case d_0_fst
                          by contradiction /* impossible chain */
                        next
                          case d_0_snd
                          by solve( (#vr.7, 0) ~~> (#vk.6, 0) )
                        qed
                      qed
                    qed
                  next
                    case c_xor_case_13
                    solve( !KU( (~r1⊕~r1.2) ) @ #vk.8 )
                      case c_xor
                      by contradiction /* cyclic */
                    next
                      case coerce
                      solve( !KD( (~r1⊕~r1.2) ) ▶₀ #vk.6 )
                        case acceptreader
                        by solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                      next
                        case initiatereader
                        by contradiction /* impossible chain */
                      next
                        case tag1
                        solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                          case d_0_fst
                          by contradiction /* impossible chain */
                        next
                          case d_0_snd
                          by solve( (#vr.7, 0) ~~> (#vk.6, 0) )
                        qed
                      qed
                    qed
                  next
                    case c_xor_case_14
                    solve( !KU( (~r1.1⊕~r1.2) ) @ #vk.8 )
                      case c_xor
                      by contradiction /* cyclic */
                    next
                      case coerce
                      solve( !KD( (~r1.1⊕~r1.2) ) ▶₀ #vk.6 )
                        case acceptreader
                        by solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                      next
                        case initiatereader
                        by contradiction /* impossible chain */
                      next
                        case tag1
                        solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                          case d_0_fst
                          by contradiction /* impossible chain */
                        next
                          case d_0_snd
                          by solve( (#vr.7, 0) ~~> (#vk.6, 0) )
                        qed
                      qed
                    qed
                  next
                    case c_xor_case_15
                    by contradiction /* cyclic */
                  next
                    case coerce
                    solve( !KD( (~k⊕~k2⊕~r1⊕~r1.1⊕~r1.2) ) ▶₀ #vk.5 )
                      case acceptreader
                      by solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                    next
                      case initiatereader
                      by contradiction /* impossible chain */
                    next
                      case tag1
                      solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                        case d_0_fst
                        by contradiction /* impossible chain */
                      next
                        case d_0_snd
                        by solve( (#vr.7, 0) ~~> (#vk.5, 0) )
                      qed
                    qed
                  qed
                next
                  case c_xor_case_03
                  by contradiction /* cyclic */
                next
                  case c_xor_case_04
                  by contradiction /* cyclic */
                next
                  case c_xor_case_05
                  solve( !KU( (~k⊕~k2⊕x⊕~r1.2) ) @ #vk.7 )
                    case c_xor_case_1
                    solve( !KU( (~r1⊕~r1.1) ) @ #vk.8 )
                      case c_xor
                      by contradiction /* cyclic */
                    next
                      case coerce
                      solve( !KD( (~r1⊕~r1.1) ) ▶₀ #vk.6 )
                        case acceptreader
                        by solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                      next
                        case initiatereader
                        by contradiction /* impossible chain */
                      next
                        case tag1
                        solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                          case d_0_fst
                          by contradiction /* impossible chain */
                        next
                          case d_0_snd
                          by solve( (#vr.7, 0) ~~> (#vk.6, 0) )
                        qed
                      qed
                    qed
                  next
                    case c_xor_case_2
                    by solve( !KU( ~k2 ) @ #vk.10 )
                  next
                    case c_xor_case_3
                    solve( !KU( (~r1⊕~r1.1) ) @ #vk.8 )
                      case c_xor
                      by contradiction /* cyclic */
                    next
                      case coerce
                      solve( !KD( (~r1⊕~r1.1) ) ▶₀ #vk.6 )
                        case acceptreader
                        by solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                      next
                        case initiatereader
                        by contradiction /* impossible chain */
                      next
                        case tag1
                        solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                          case d_0_fst
                          by contradiction /* impossible chain */
                        next
                          case d_0_snd
                          by solve( (#vr.7, 0) ~~> (#vk.6, 0) )
                        qed
                      qed
                    qed
                  next
                    case c_xor_case_4
                    by solve( !KU( ~k ) @ #vk.10 )
                  next
                    case c_xor_case_5
                    solve( !KU( (~r1⊕~r1.1) ) @ #vk.8 )
                      case c_xor
                      by contradiction /* cyclic */
                    next
                      case coerce
                      solve( !KD( (~r1⊕~r1.1) ) ▶₀ #vk.6 )
                        case acceptreader
                        by solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                      next
                        case initiatereader
                        by contradiction /* impossible chain */
                      next
                        case tag1
                        solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                          case d_0_fst
                          by contradiction /* impossible chain */
                        next
                          case d_0_snd
                          by solve( (#vr.7, 0) ~~> (#vk.6, 0) )
                        qed
                      qed
                    qed
                  next
                    case c_xor_case_6
                    solve( !KU( (~r1⊕~r1.1) ) @ #vk.8 )
                      case c_xor
                      by contradiction /* cyclic */
                    next
                      case coerce
                      solve( !KD( (~r1⊕~r1.1) ) ▶₀ #vk.6 )
                        case acceptreader
                        by solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                      next
                        case initiatereader
                        by contradiction /* impossible chain */
                      next
                        case tag1
                        solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                          case d_0_fst
                          by contradiction /* impossible chain */
                        next
                          case d_0_snd
                          by solve( (#vr.7, 0) ~~> (#vk.6, 0) )
                        qed
                      qed
                    qed
                  next
                    case c_xor_case_7
                    by contradiction /* cyclic */
                  next
                    case coerce
                    solve( !KD( (~k⊕~k2⊕x⊕~r1.2) ) ▶₀ #vk.5 )
                      case acceptreader
                      by solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                    next
                      case initiatereader
                      by contradiction /* impossible chain */
                    next
                      case tag1
                      solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                        case d_0_fst
                        by contradiction /* impossible chain */
                      next
                        case d_0_snd
                        by solve( (#vr.7, 0) ~~> (#vk.5, 0) )
                      qed
                    qed
                  qed
                next
                  case c_xor_case_06
                  solve( !KU( (~k⊕~k2⊕~r1.1⊕~r1.2) ) @ #vk.7 )
                    case c_xor_case_1
                    by contradiction /* cyclic */
                  next
                    case c_xor_case_2
                    by solve( !KU( ~k2 ) @ #vk.10 )
                  next
                    case c_xor_case_3
                    solve( !KU( (~r1⊕x) ) @ #vk.8 )
                      case c_xor
                      by contradiction /* cyclic */
                    next
                      case coerce
                      solve( !KD( (~r1⊕x) ) ▶₀ #vk.6 )
                        case acceptreader
                        by solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                      next
                        case initiatereader
                        by contradiction /* impossible chain */
                      next
                        case tag1
                        solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                          case d_0_fst
                          by contradiction /* impossible chain */
                        next
                          case d_0_snd
                          by solve( (#vr.7, 0) ~~> (#vk.6, 0) )
                        qed
                      qed
                    qed
                  next
                    case c_xor_case_4
                    by solve( !KU( ~k ) @ #vk.10 )
                  next
                    case c_xor_case_5
                    solve( !KU( (~r1⊕x) ) @ #vk.8 )
                      case c_xor
                      by contradiction /* cyclic */
                    next
                      case coerce
                      solve( !KD( (~r1⊕x) ) ▶₀ #vk.6 )
                        case acceptreader
                        by solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                      next
                        case initiatereader
                        by contradiction /* impossible chain */
                      next
                        case tag1
                        solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                          case d_0_fst
                          by contradiction /* impossible chain */
                        next
                          case d_0_snd
                          by solve( (#vr.7, 0) ~~> (#vk.6, 0) )
                        qed
                      qed
                    qed
                  next
                    case c_xor_case_6
                    solve( !KU( (~r1⊕x) ) @ #vk.8 )
                      case c_xor
                      by contradiction /* cyclic */
                    next
                      case coerce
                      solve( !KD( (~r1⊕x) ) ▶₀ #vk.6 )
                        case acceptreader
                        by solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                      next
                        case initiatereader
                        by contradiction /* impossible chain */
                      next
                        case tag1
                        solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                          case d_0_fst
                          by contradiction /* impossible chain */
                        next
                          case d_0_snd
                          by solve( (#vr.7, 0) ~~> (#vk.6, 0) )
                        qed
                      qed
                    qed
                  next
                    case c_xor_case_7
                    by contradiction /* cyclic */
                  next
                    case coerce
                    solve( !KD( (~k⊕~k2⊕~r1.1⊕~r1.2) ) ▶₀ #vk.5 )
                      case acceptreader
                      by solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                    next
                      case initiatereader
                      by contradiction /* impossible chain */
                    next
                      case tag1
                      solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                        case d_0_fst
                        by contradiction /* impossible chain */
                      next
                        case d_0_snd
                        by solve( (#vr.7, 0) ~~> (#vk.5, 0) )
                      qed
                    qed
                  qed
                next
                  case c_xor_case_07
                  solve( !KU( (~k⊕~k2⊕~r1.2) ) @ #vk.7 )
                    case c_xor_case_1
                    by solve( !KU( ~k2 ) @ #vk.10 )
                  next
                    case c_xor_case_2
                    by solve( !KU( ~k ) @ #vk.10 )
                  next
                    case c_xor_case_3
                    by contradiction /* cyclic */
                  next
                    case coerce
                    solve( !KD( (~k⊕~k2⊕~r1.2) ) ▶₀ #vk.5 )
                      case acceptreader
                      by solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                    next
                      case initiatereader
                      by contradiction /* impossible chain */
                    next
                      case tag1
                      solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                        case d_0_fst
                        by contradiction /* impossible chain */
                      next
                        case d_0_snd
                        by solve( (#vr.7, 0) ~~> (#vk.5, 0) )
                      qed
                    qed
                  qed
                next
                  case c_xor_case_08
                  by solve( !KU( ~k2 ) @ #vk.8 )
                next
                  case c_xor_case_09
                  solve( !KU( (~k⊕~r1⊕x⊕~r1.2) ) @ #vk.7 )
                    case c_xor_case_1
                    solve( !KU( (~k2⊕~r1.1) ) @ #vk.8 )
                      case c_xor
                      by contradiction /* cyclic */
                    next
                      case coerce
                      solve( !KD( (~k2⊕~r1.1) ) ▶₀ #vk.6 )
                        case acceptreader
                        by solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                      next
                        case initiatereader
                        by contradiction /* impossible chain */
                      next
                        case tag1
                        solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                          case d_0_fst
                          by contradiction /* impossible chain */
                        next
                          case d_0_snd
                          by solve( (#vr.7, 0) ~~> (#vk.6, 0) )
                        qed
                      qed
                    qed
                  next
                    case c_xor_case_2
                    by contradiction /* cyclic */
                  next
                    case c_xor_case_3
                    solve( !KU( (~k2⊕~r1.1) ) @ #vk.8 )
                      case c_xor
                      by contradiction /* cyclic */
                    next
                      case coerce
                      solve( !KD( (~k2⊕~r1.1) ) ▶₀ #vk.6 )
                        case acceptreader
                        by solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                      next
                        case initiatereader
                        by contradiction /* impossible chain */
                      next
                        case tag1
                        solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                          case d_0_fst
                          by contradiction /* impossible chain */
                        next
                          case d_0_snd
                          by solve( (#vr.7, 0) ~~> (#vk.6, 0) )
                        qed
                      qed
                    qed
                  next
                    case c_xor_case_4
                    by solve( !KU( ~k ) @ #vk.10 )
                  next
                    case c_xor_case_5
                    solve( !KU( (~k2⊕~r1.1) ) @ #vk.8 )
                      case c_xor
                      by contradiction /* cyclic */
                    next
                      case coerce
                      solve( !KD( (~k2⊕~r1.1) ) ▶₀ #vk.6 )
                        case acceptreader
                        by solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                      next
                        case initiatereader
                        by contradiction /* impossible chain */
                      next
                        case tag1
                        solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                          case d_0_fst
                          by contradiction /* impossible chain */
                        next
                          case d_0_snd
                          by solve( (#vr.7, 0) ~~> (#vk.6, 0) )
                        qed
                      qed
                    qed
                  next
                    case c_xor_case_6
                    solve( !KU( (~k2⊕~r1.1) ) @ #vk.8 )
                      case c_xor
                      by contradiction /* cyclic */
                    next
                      case coerce
                      solve( !KD( (~k2⊕~r1.1) ) ▶₀ #vk.6 )
                        case acceptreader
                        by solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                      next
                        case initiatereader
                        by contradiction /* impossible chain */
                      next
                        case tag1
                        solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                          case d_0_fst
                          by contradiction /* impossible chain */
                        next
                          case d_0_snd
                          by solve( (#vr.7, 0) ~~> (#vk.6, 0) )
                        qed
                      qed
                    qed
                  next
                    case c_xor_case_7
                    by contradiction /* cyclic */
                  next
                    case coerce
                    solve( !KD( (~k⊕~r1⊕x⊕~r1.2) ) ▶₀ #vk.5 )
                      case acceptreader
                      by solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                    next
                      case initiatereader
                      by contradiction /* impossible chain */
                    next
                      case tag1
                      solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                        case d_0_fst
                        by contradiction /* impossible chain */
                      next
                        case d_0_snd
                        by solve( (#vr.7, 0) ~~> (#vk.5, 0) )
                      qed
                    qed
                  qed
                next
                  case c_xor_case_10
                  solve( !KU( (~k⊕~r1⊕~r1.1⊕~r1.2) ) @ #vk.7 )
                    case c_xor_case_1
                    by contradiction /* cyclic */
                  next
                    case c_xor_case_2
                    by contradiction /* cyclic */
                  next
                    case c_xor_case_3
                    solve( !KU( (~k2⊕x) ) @ #vk.8 )
                      case c_xor
                      by solve( !KU( ~k2 ) @ #vk.11 )
                    next
                      case coerce
                      solve( !KD( (~k2⊕x) ) ▶₀ #vk.6 )
                        case acceptreader
                        by solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                      next
                        case initiatereader
                        by contradiction /* impossible chain */
                      next
                        case tag1
                        solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                          case d_0_fst
                          by contradiction /* impossible chain */
                        next
                          case d_0_snd
                          by solve( (#vr.7, 0) ~~> (#vk.6, 0) )
                        qed
                      qed
                    qed
                  next
                    case c_xor_case_4
                    by solve( !KU( ~k ) @ #vk.10 )
                  next
                    case c_xor_case_5
                    solve( !KU( (~k2⊕x) ) @ #vk.8 )
                      case c_xor
                      by solve( !KU( ~k2 ) @ #vk.11 )
                    next
                      case coerce
                      solve( !KD( (~k2⊕x) ) ▶₀ #vk.6 )
                        case acceptreader
                        by solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                      next
                        case initiatereader
                        by contradiction /* impossible chain */
                      next
                        case tag1
                        solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                          case d_0_fst
                          by contradiction /* impossible chain */
                        next
                          case d_0_snd
                          by solve( (#vr.7, 0) ~~> (#vk.6, 0) )
                        qed
                      qed
                    qed
                  next
                    case c_xor_case_6
                    solve( !KU( (~k2⊕x) ) @ #vk.8 )
                      case c_xor
                      by solve( !KU( ~k2 ) @ #vk.11 )
                    next
                      case coerce
                      solve( !KD( (~k2⊕x) ) ▶₀ #vk.6 )
                        case acceptreader
                        by solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                      next
                        case initiatereader
                        by contradiction /* impossible chain */
                      next
                        case tag1
                        solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                          case d_0_fst
                          by contradiction /* impossible chain */
                        next
                          case d_0_snd
                          by solve( (#vr.7, 0) ~~> (#vk.6, 0) )
                        qed
                      qed
                    qed
                  next
                    case c_xor_case_7
                    by contradiction /* cyclic */
                  next
                    case coerce
                    solve( !KD( (~k⊕~r1⊕~r1.1⊕~r1.2) ) ▶₀ #vk.5 )
                      case acceptreader
                      by solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                    next
                      case initiatereader
                      by contradiction /* impossible chain */
                    next
                      case tag1
                      solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                        case d_0_fst
                        by contradiction /* impossible chain */
                      next
                        case d_0_snd
                        by solve( (#vr.7, 0) ~~> (#vk.5, 0) )
                      qed
                    qed
                  qed
                next
                  case c_xor_case_11
                  solve( !KU( (~k⊕~r1⊕~r1.2) ) @ #vk.7 )
                    case c_xor_case_1
                    by contradiction /* cyclic */
                  next
                    case c_xor_case_2
                    by solve( !KU( ~k ) @ #vk.10 )
                  next
                    case c_xor_case_3
                    by contradiction /* cyclic */
                  next
                    case coerce
                    solve( !KD( (~k⊕~r1⊕~r1.2) ) ▶₀ #vk.5 )
                      case acceptreader
                      by solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                    next
                      case initiatereader
                      by contradiction /* impossible chain */
                    next
                      case tag1
                      solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                        case d_0_fst
                        by contradiction /* impossible chain */
                      next
                        case d_0_snd
                        by solve( (#vr.7, 0) ~~> (#vk.5, 0) )
                      qed
                    qed
                  qed
                next
                  case c_xor_case_12
                  solve( !KU( (~k⊕x⊕~r1.1⊕~r1.2) ) @ #vk.7 )
                    case c_xor_case_1
                    by contradiction /* cyclic */
                  next
                    case c_xor_case_2
                    solve( !KU( (~k2⊕~r1) ) @ #vk.8 )
                      case c_xor
                      by contradiction /* cyclic */
                    next
                      case coerce
                      solve( !KD( (~k2⊕~r1) ) ▶₀ #vk.6 )
                        case acceptreader
                        by solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                      next
                        case initiatereader
                        by contradiction /* impossible chain */
                      next
                        case tag1
                        solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                          case d_0_fst
                          by contradiction /* impossible chain */
                        next
                          case d_0_snd
                          by solve( (#vr.7, 0) ~~> (#vk.6, 0) )
                        qed
                      qed
                    qed
                  next
                    case c_xor_case_3
                    by contradiction /* cyclic */
                  next
                    case c_xor_case_4
                    by solve( !KU( ~k ) @ #vk.10 )
                  next
                    case c_xor_case_5
                    solve( !KU( (~k2⊕~r1) ) @ #vk.8 )
                      case c_xor
                      by contradiction /* cyclic */
                    next
                      case coerce
                      solve( !KD( (~k2⊕~r1) ) ▶₀ #vk.6 )
                        case acceptreader
                        by solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                      next
                        case initiatereader
                        by contradiction /* impossible chain */
                      next
                        case tag1
                        solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                          case d_0_fst
                          by contradiction /* impossible chain */
                        next
                          case d_0_snd
                          by solve( (#vr.7, 0) ~~> (#vk.6, 0) )
                        qed
                      qed
                    qed
                  next
                    case c_xor_case_6
                    solve( !KU( (~k2⊕~r1) ) @ #vk.8 )
                      case c_xor
                      by contradiction /* cyclic */
                    next
                      case coerce
                      solve( !KD( (~k2⊕~r1) ) ▶₀ #vk.6 )
                        case acceptreader
                        by solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                      next
                        case initiatereader
                        by contradiction /* impossible chain */
                      next
                        case tag1
                        solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                          case d_0_fst
                          by contradiction /* impossible chain */
                        next
                          case d_0_snd
                          by solve( (#vr.7, 0) ~~> (#vk.6, 0) )
                        qed
                      qed
                    qed
                  next
                    case c_xor_case_7
                    by contradiction /* cyclic */
                  next
                    case coerce
                    solve( !KD( (~k⊕x⊕~r1.1⊕~r1.2) ) ▶₀ #vk.5 )
                      case acceptreader
                      by solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                    next
                      case initiatereader
                      by contradiction /* impossible chain */
                    next
                      case tag1
                      solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                        case d_0_fst
                        by contradiction /* impossible chain */
                      next
                        case d_0_snd
                        by solve( (#vr.7, 0) ~~> (#vk.5, 0) )
                      qed
                    qed
                  qed
                next
                  case c_xor_case_13
                  solve( !KU( (~k⊕x⊕~r1.2) ) @ #vk.7 )
                    case c_xor_case_1
                    solve( !KU( (~k2⊕~r1⊕~r1.1) ) @ #vk.8 )
                      case c_xor_case_1
                      by contradiction /* cyclic */
                    next
                      case c_xor_case_2
                      by solve( !KU( ~k2 ) @ #vk.11 )
                    next
                      case c_xor_case_3
                      by contradiction /* cyclic */
                    next
                      case coerce
                      solve( !KD( (~k2⊕~r1⊕~r1.1) ) ▶₀ #vk.6 )
                        case acceptreader
                        by solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                      next
                        case initiatereader
                        by contradiction /* impossible chain */
                      next
                        case tag1
                        solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                          case d_0_fst
                          by contradiction /* impossible chain */
                        next
                          case d_0_snd
                          by solve( (#vr.7, 0) ~~> (#vk.6, 0) )
                        qed
                      qed
                    qed
                  next
                    case c_xor_case_2
                    by solve( !KU( ~k ) @ #vk.10 )
                  next
                    case c_xor_case_3
                    by contradiction /* cyclic */
                  next
                    case coerce
                    solve( !KD( (~k⊕x⊕~r1.2) ) ▶₀ #vk.5 )
                      case acceptreader
                      by solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                    next
                      case initiatereader
                      by contradiction /* impossible chain */
                    next
                      case tag1
                      solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                        case d_0_fst
                        by contradiction /* impossible chain */
                      next
                        case d_0_snd
                        by solve( (#vr.7, 0) ~~> (#vk.5, 0) )
                      qed
                    qed
                  qed
                next
                  case c_xor_case_14
                  solve( !KU( (~k⊕~r1.1⊕~r1.2) ) @ #vk.7 )
                    case c_xor_case_1
                    by contradiction /* cyclic */
                  next
                    case c_xor_case_2
                    by solve( !KU( ~k ) @ #vk.10 )
                  next
                    case c_xor_case_3
                    by contradiction /* cyclic */
                  next
                    case coerce
                    solve( !KD( (~k⊕~r1.1⊕~r1.2) ) ▶₀ #vk.5 )
                      case acceptreader
                      by solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                    next
                      case initiatereader
                      by contradiction /* impossible chain */
                    next
                      case tag1
                      solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                        case d_0_fst
                        by contradiction /* impossible chain */
                      next
                        case d_0_snd
                        by solve( (#vr.7, 0) ~~> (#vk.5, 0) )
                      qed
                    qed
                  qed
                next
                  case c_xor_case_15
                  solve( !KU( (~k⊕~r1.2) ) @ #vk.7 )
                    case c_xor
                    by contradiction /* cyclic */
                  next
                    case coerce
                    solve( !KD( (~k⊕~r1.2) ) ▶₀ #vk.5 )
                      case acceptreader
                      by solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                    next
                      case initiatereader
                      by contradiction /* impossible chain */
                    next
                      case tag1
                      solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                        case d_0_fst
                        by contradiction /* impossible chain */
                      next
                        case d_0_snd
                        by solve( (#vr.7, 0) ~~> (#vk.5, 0) )
                      qed
                    qed
                  qed
                next
                  case c_xor_case_16
                  by solve( !KU( ~k ) @ #vk.8 )
                next
                  case c_xor_case_17
                  solve( !KU( (~k2⊕~r1⊕x⊕~r1.2) ) @ #vk.7 )
                    case c_xor_case_1
                    solve( !KU( (~k⊕~r1.1) ) @ #vk.8 )
                      case c_xor
                      by contradiction /* cyclic */
                    next
                      case coerce
                      solve( !KD( (~k⊕~r1.1) ) ▶₀ #vk.6 )
                        case acceptreader
                        by solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                      next
                        case initiatereader
                        by contradiction /* impossible chain */
                      next
                        case tag1
                        solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                          case d_0_fst
                          by contradiction /* impossible chain */
                        next
                          case d_0_snd
                          by solve( (#vr.7, 0) ~~> (#vk.6, 0) )
                        qed
                      qed
                    qed
                  next
                    case c_xor_case_2
                    by contradiction /* cyclic */
                  next
                    case c_xor_case_3
                    solve( !KU( (~k⊕~r1.1) ) @ #vk.8 )
                      case c_xor
                      by contradiction /* cyclic */
                    next
                      case coerce
                      solve( !KD( (~k⊕~r1.1) ) ▶₀ #vk.6 )
                        case acceptreader
                        by solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                      next
                        case initiatereader
                        by contradiction /* impossible chain */
                      next
                        case tag1
                        solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                          case d_0_fst
                          by contradiction /* impossible chain */
                        next
                          case d_0_snd
                          by solve( (#vr.7, 0) ~~> (#vk.6, 0) )
                        qed
                      qed
                    qed
                  next
                    case c_xor_case_4
                    by solve( !KU( ~k2 ) @ #vk.10 )
                  next
                    case c_xor_case_5
                    solve( !KU( (~k⊕~r1.1) ) @ #vk.8 )
                      case c_xor
                      by contradiction /* cyclic */
                    next
                      case coerce
                      solve( !KD( (~k⊕~r1.1) ) ▶₀ #vk.6 )
                        case acceptreader
                        by solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                      next
                        case initiatereader
                        by contradiction /* impossible chain */
                      next
                        case tag1
                        solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                          case d_0_fst
                          by contradiction /* impossible chain */
                        next
                          case d_0_snd
                          by solve( (#vr.7, 0) ~~> (#vk.6, 0) )
                        qed
                      qed
                    qed
                  next
                    case c_xor_case_6
                    solve( !KU( (~k⊕~r1.1) ) @ #vk.8 )
                      case c_xor
                      by contradiction /* cyclic */
                    next
                      case coerce
                      solve( !KD( (~k⊕~r1.1) ) ▶₀ #vk.6 )
                        case acceptreader
                        by solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                      next
                        case initiatereader
                        by contradiction /* impossible chain */
                      next
                        case tag1
                        solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                          case d_0_fst
                          by contradiction /* impossible chain */
                        next
                          case d_0_snd
                          by solve( (#vr.7, 0) ~~> (#vk.6, 0) )
                        qed
                      qed
                    qed
                  next
                    case c_xor_case_7
                    by contradiction /* cyclic */
                  next
                    case coerce
                    solve( !KD( (~k2⊕~r1⊕x⊕~r1.2) ) ▶₀ #vk.5 )
                      case acceptreader
                      by solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                    next
                      case initiatereader
                      by contradiction /* impossible chain */
                    next
                      case tag1
                      solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                        case d_0_fst
                        by contradiction /* impossible chain */
                      next
                        case d_0_snd
                        by solve( (#vr.7, 0) ~~> (#vk.5, 0) )
                      qed
                    qed
                  qed
                next
                  case c_xor_case_18
                  solve( !KU( (~k2⊕~r1⊕~r1.1⊕~r1.2) ) @ #vk.7 )
                    case c_xor_case_1
                    by contradiction /* cyclic */
                  next
                    case c_xor_case_2
                    by contradiction /* cyclic */
                  next
                    case c_xor_case_3
                    solve( !KU( (~k⊕x) ) @ #vk.8 )
                      case c_xor
                      by solve( !KU( ~k ) @ #vk.11 )
                    next
                      case coerce
                      solve( !KD( (~k⊕x) ) ▶₀ #vk.6 )
                        case acceptreader
                        by solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                      next
                        case initiatereader
                        by contradiction /* impossible chain */
                      next
                        case tag1
                        solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                          case d_0_fst
                          by contradiction /* impossible chain */
                        next
                          case d_0_snd
                          by solve( (#vr.7, 0) ~~> (#vk.6, 0) )
                        qed
                      qed
                    qed
                  next
                    case c_xor_case_4
                    by solve( !KU( ~k2 ) @ #vk.10 )
                  next
                    case c_xor_case_5
                    solve( !KU( (~k⊕x) ) @ #vk.8 )
                      case c_xor
                      by solve( !KU( ~k ) @ #vk.11 )
                    next
                      case coerce
                      solve( !KD( (~k⊕x) ) ▶₀ #vk.6 )
                        case acceptreader
                        by solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                      next
                        case initiatereader
                        by contradiction /* impossible chain */
                      next
                        case tag1
                        solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                          case d_0_fst
                          by contradiction /* impossible chain */
                        next
                          case d_0_snd
                          by solve( (#vr.7, 0) ~~> (#vk.6, 0) )
                        qed
                      qed
                    qed
                  next
                    case c_xor_case_6
                    solve( !KU( (~k⊕x) ) @ #vk.8 )
                      case c_xor
                      by solve( !KU( ~k ) @ #vk.11 )
                    next
                      case coerce
                      solve( !KD( (~k⊕x) ) ▶₀ #vk.6 )
                        case acceptreader
                        by solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                      next
                        case initiatereader
                        by contradiction /* impossible chain */
                      next
                        case tag1
                        solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                          case d_0_fst
                          by contradiction /* impossible chain */
                        next
                          case d_0_snd
                          by solve( (#vr.7, 0) ~~> (#vk.6, 0) )
                        qed
                      qed
                    qed
                  next
                    case c_xor_case_7
                    by contradiction /* cyclic */
                  next
                    case coerce
                    solve( !KD( (~k2⊕~r1⊕~r1.1⊕~r1.2) ) ▶₀ #vk.5 )
                      case acceptreader
                      by solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                    next
                      case initiatereader
                      by contradiction /* impossible chain */
                    next
                      case tag1
                      solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                        case d_0_fst
                        by contradiction /* impossible chain */
                      next
                        case d_0_snd
                        by solve( (#vr.7, 0) ~~> (#vk.5, 0) )
                      qed
                    qed
                  qed
                next
                  case c_xor_case_19
                  solve( !KU( (~k2⊕~r1⊕~r1.2) ) @ #vk.7 )
                    case c_xor_case_1
                    by contradiction /* cyclic */
                  next
                    case c_xor_case_2
                    by solve( !KU( ~k2 ) @ #vk.10 )
                  next
                    case c_xor_case_3
                    by contradiction /* cyclic */
                  next
                    case coerce
                    solve( !KD( (~k2⊕~r1⊕~r1.2) ) ▶₀ #vk.5 )
                      case acceptreader
                      by solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                    next
                      case initiatereader
                      by contradiction /* impossible chain */
                    next
                      case tag1
                      solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                        case d_0_fst
                        by contradiction /* impossible chain */
                      next
                        case d_0_snd
                        by solve( (#vr.7, 0) ~~> (#vk.5, 0) )
                      qed
                    qed
                  qed
                next
                  case c_xor_case_20
                  solve( !KU( (~k2⊕x⊕~r1.1⊕~r1.2) ) @ #vk.7 )
                    case c_xor_case_1
                    by contradiction /* cyclic */
                  next
                    case c_xor_case_2
                    solve( !KU( (~k⊕~r1) ) @ #vk.8 )
                      case c_xor
                      by contradiction /* cyclic */
                    next
                      case coerce
                      solve( !KD( (~k⊕~r1) ) ▶₀ #vk.6 )
                        case acceptreader
                        by solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                      next
                        case initiatereader
                        by contradiction /* impossible chain */
                      next
                        case tag1
                        solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                          case d_0_fst
                          by contradiction /* impossible chain */
                        next
                          case d_0_snd
                          by solve( (#vr.7, 0) ~~> (#vk.6, 0) )
                        qed
                      qed
                    qed
                  next
                    case c_xor_case_3
                    by contradiction /* cyclic */
                  next
                    case c_xor_case_4
                    by solve( !KU( ~k2 ) @ #vk.10 )
                  next
                    case c_xor_case_5
                    solve( !KU( (~k⊕~r1) ) @ #vk.8 )
                      case c_xor
                      by contradiction /* cyclic */
                    next
                      case coerce
                      solve( !KD( (~k⊕~r1) ) ▶₀ #vk.6 )
                        case acceptreader
                        by solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                      next
                        case initiatereader
                        by contradiction /* impossible chain */
                      next
                        case tag1
                        solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                          case d_0_fst
                          by contradiction /* impossible chain */
                        next
                          case d_0_snd
                          by solve( (#vr.7, 0) ~~> (#vk.6, 0) )
                        qed
                      qed
                    qed
                  next
                    case c_xor_case_6
                    solve( !KU( (~k⊕~r1) ) @ #vk.8 )
                      case c_xor
                      by contradiction /* cyclic */
                    next
                      case coerce
                      solve( !KD( (~k⊕~r1) ) ▶₀ #vk.6 )
                        case acceptreader
                        by solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                      next
                        case initiatereader
                        by contradiction /* impossible chain */
                      next
                        case tag1
                        solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                          case d_0_fst
                          by contradiction /* impossible chain */
                        next
                          case d_0_snd
                          by solve( (#vr.7, 0) ~~> (#vk.6, 0) )
                        qed
                      qed
                    qed
                  next
                    case c_xor_case_7
                    by contradiction /* cyclic */
                  next
                    case coerce
                    solve( !KD( (~k2⊕x⊕~r1.1⊕~r1.2) ) ▶₀ #vk.5 )
                      case acceptreader
                      by solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                    next
                      case initiatereader
                      by contradiction /* impossible chain */
                    next
                      case tag1
                      solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                        case d_0_fst
                        by contradiction /* impossible chain */
                      next
                        case d_0_snd
                        by solve( (#vr.7, 0) ~~> (#vk.5, 0) )
                      qed
                    qed
                  qed
                next
                  case c_xor_case_21
                  solve( !KU( (~k2⊕x⊕~r1.2) ) @ #vk.7 )
                    case c_xor_case_1
                    solve( !KU( (~k⊕~r1⊕~r1.1) ) @ #vk.8 )
                      case c_xor_case_1
                      by contradiction /* cyclic */
                    next
                      case c_xor_case_2
                      by solve( !KU( ~k ) @ #vk.11 )
                    next
                      case c_xor_case_3
                      by contradiction /* cyclic */
                    next
                      case coerce
                      solve( !KD( (~k⊕~r1⊕~r1.1) ) ▶₀ #vk.6 )
                        case acceptreader
                        by solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                      next
                        case initiatereader
                        by contradiction /* impossible chain */
                      next
                        case tag1
                        solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                          case d_0_fst
                          by contradiction /* impossible chain */
                        next
                          case d_0_snd
                          by solve( (#vr.7, 0) ~~> (#vk.6, 0) )
                        qed
                      qed
                    qed
                  next
                    case c_xor_case_2
                    by solve( !KU( ~k2 ) @ #vk.10 )
                  next
                    case c_xor_case_3
                    by contradiction /* cyclic */
                  next
                    case coerce
                    solve( !KD( (~k2⊕x⊕~r1.2) ) ▶₀ #vk.5 )
                      case acceptreader
                      by solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                    next
                      case initiatereader
                      by contradiction /* impossible chain */
                    next
                      case tag1
                      solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                        case d_0_fst
                        by contradiction /* impossible chain */
                      next
                        case d_0_snd
                        by solve( (#vr.7, 0) ~~> (#vk.5, 0) )
                      qed
                    qed
                  qed
                next
                  case c_xor_case_22
                  solve( !KU( (~k2⊕~r1.1⊕~r1.2) ) @ #vk.7 )
                    case c_xor_case_1
                    by contradiction /* cyclic */
                  next
                    case c_xor_case_2
                    by solve( !KU( ~k2 ) @ #vk.10 )
                  next
                    case c_xor_case_3
                    by contradiction /* cyclic */
                  next
                    case coerce
                    solve( !KD( (~k2⊕~r1.1⊕~r1.2) ) ▶₀ #vk.5 )
                      case acceptreader
                      by solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                    next
                      case initiatereader
                      by contradiction /* impossible chain */
                    next
                      case tag1
                      solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                        case d_0_fst
                        by contradiction /* impossible chain */
                      next
                        case d_0_snd
                        by solve( (#vr.7, 0) ~~> (#vk.5, 0) )
                      qed
                    qed
                  qed
                next
                  case c_xor_case_23
                  solve( !KU( (~k2⊕~r1.2) ) @ #vk.7 )
                    case c_xor
                    by contradiction /* cyclic */
                  next
                    case coerce
                    solve( !KD( (~k2⊕~r1.2) ) ▶₀ #vk.5 )
                      case acceptreader
                      by solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                    next
                      case initiatereader
                      by contradiction /* impossible chain */
                    next
                      case tag1
                      solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                        case d_0_fst
                        by contradiction /* impossible chain */
                      next
                        case d_0_snd
                        by solve( (#vr.7, 0) ~~> (#vk.5, 0) )
                      qed
                    qed
                  qed
                next
                  case c_xor_case_24
                  solve( !KU( (~r1⊕x⊕~r1.1⊕~r1.2) ) @ #vk.7 )
                    case c_xor_case_1
                    by contradiction /* cyclic */
                  next
                    case c_xor_case_2
                    solve( !KU( (~k⊕~k2) ) @ #vk.8 )
                      case c_xor
                      by solve( !KU( ~k2 ) @ #vk.10 )
                    next
                      case coerce
                      solve( !KD( (~k⊕~k2) ) ▶₀ #vk.6 )
                        case acceptreader
                        by solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                      next
                        case initiatereader
                        by contradiction /* impossible chain */
                      next
                        case tag1
                        solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                          case d_0_fst
                          by contradiction /* impossible chain */
                        next
                          case d_0_snd
                          by solve( (#vr.7, 0) ~~> (#vk.6, 0) )
                        qed
                      qed
                    qed
                  next
                    case c_xor_case_3
                    by contradiction /* cyclic */
                  next
                    case c_xor_case_4
                    by contradiction /* cyclic */
                  next
                    case c_xor_case_5
                    solve( !KU( (~k⊕~k2) ) @ #vk.8 )
                      case c_xor
                      by solve( !KU( ~k2 ) @ #vk.11 )
                    next
                      case coerce
                      solve( !KD( (~k⊕~k2) ) ▶₀ #vk.6 )
                        case acceptreader
                        by solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                      next
                        case initiatereader
                        by contradiction /* impossible chain */
                      next
                        case tag1
                        solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                          case d_0_fst
                          by contradiction /* impossible chain */
                        next
                          case d_0_snd
                          by solve( (#vr.7, 0) ~~> (#vk.6, 0) )
                        qed
                      qed
                    qed
                  next
                    case c_xor_case_6
                    solve( !KU( (~k⊕~k2) ) @ #vk.8 )
                      case c_xor
                      by solve( !KU( ~k2 ) @ #vk.11 )
                    next
                      case coerce
                      solve( !KD( (~k⊕~k2) ) ▶₀ #vk.6 )
                        case acceptreader
                        by solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                      next
                        case initiatereader
                        by contradiction /* impossible chain */
                      next
                        case tag1
                        solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                          case d_0_fst
                          by contradiction /* impossible chain */
                        next
                          case d_0_snd
                          by solve( (#vr.7, 0) ~~> (#vk.6, 0) )
                        qed
                      qed
                    qed
                  next
                    case c_xor_case_7
                    by contradiction /* cyclic */
                  next
                    case coerce
                    solve( !KD( (~r1⊕x⊕~r1.1⊕~r1.2) ) ▶₀ #vk.5 )
                      case acceptreader
                      by solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                    next
                      case initiatereader
                      by contradiction /* impossible chain */
                    next
                      case tag1
                      solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                        case d_0_fst
                        by contradiction /* impossible chain */
                      next
                        case d_0_snd
                        by solve( (#vr.7, 0) ~~> (#vk.5, 0) )
                      qed
                    qed
                  qed
                next
                  case c_xor_case_25
                  solve( !KU( (~r1⊕x⊕~r1.2) ) @ #vk.7 )
                    case c_xor_case_1
                    solve( !KU( (~k⊕~k2⊕~r1.1) ) @ #vk.8 )
                      case c_xor_case_1
                      by solve( !KU( ~k2 ) @ #vk.11 )
                    next
                      case c_xor_case_2
                      by solve( !KU( ~k ) @ #vk.11 )
                    next
                      case c_xor_case_3
                      by contradiction /* cyclic */
                    next
                      case coerce
                      solve( !KD( (~k⊕~k2⊕~r1.1) ) ▶₀ #vk.6 )
                        case acceptreader
                        by solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                      next
                        case initiatereader
                        by contradiction /* impossible chain */
                      next
                        case tag1
                        solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                          case d_0_fst
                          by contradiction /* impossible chain */
                        next
                          case d_0_snd
                          by solve( (#vr.7, 0) ~~> (#vk.6, 0) )
                        qed
                      qed
                    qed
                  next
                    case c_xor_case_2
                    by contradiction /* cyclic */
                  next
                    case c_xor_case_3
                    by contradiction /* cyclic */
                  next
                    case coerce
                    solve( !KD( (~r1⊕x⊕~r1.2) ) ▶₀ #vk.5 )
                      case acceptreader
                      by solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                    next
                      case initiatereader
                      by contradiction /* impossible chain */
                    next
                      case tag1
                      solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                        case d_0_fst
                        by contradiction /* impossible chain */
                      next
                        case d_0_snd
                        by solve( (#vr.7, 0) ~~> (#vk.5, 0) )
                      qed
                    qed
                  qed
                next
                  case c_xor_case_26
                  solve( !KU( (~r1⊕~r1.1⊕~r1.2) ) @ #vk.7 )
                    case c_xor_case_1
                    by contradiction /* cyclic */
                  next
                    case c_xor_case_2
                    by contradiction /* cyclic */
                  next
                    case c_xor_case_3
                    by contradiction /* cyclic */
                  next
                    case coerce
                    solve( !KD( (~r1⊕~r1.1⊕~r1.2) ) ▶₀ #vk.5 )
                      case acceptreader
                      by solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                    next
                      case initiatereader
                      by contradiction /* impossible chain */
                    next
                      case tag1
                      solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                        case d_0_fst
                        by contradiction /* impossible chain */
                      next
                        case d_0_snd
                        by solve( (#vr.7, 0) ~~> (#vk.5, 0) )
                      qed
                    qed
                  qed
                next
                  case c_xor_case_27
                  solve( !KU( (~r1⊕~r1.2) ) @ #vk.7 )
                    case c_xor
                    by contradiction /* cyclic */
                  next
                    case coerce
                    solve( !KD( (~r1⊕~r1.2) ) ▶₀ #vk.5 )
                      case acceptreader
                      by solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                    next
                      case initiatereader
                      by contradiction /* impossible chain */
                    next
                      case tag1
                      solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                        case d_0_fst
                        by contradiction /* impossible chain */
                      next
                        case d_0_snd
                        by solve( (#vr.7, 0) ~~> (#vk.5, 0) )
                      qed
                    qed
                  qed
                next
                  case c_xor_case_28
                  solve( !KU( (x⊕~r1.1⊕~r1.2) ) @ #vk.7 )
                    case c_xor_case_1
                    by contradiction /* cyclic */
                  next
                    case c_xor_case_2
                    solve( !KU( (~k⊕~k2⊕~r1) ) @ #vk.8 )
                      case c_xor_case_1
                      by solve( !KU( ~k2 ) @ #vk.11 )
                    next
                      case c_xor_case_2
                      by solve( !KU( ~k ) @ #vk.11 )
                    next
                      case c_xor_case_3
                      by contradiction /* cyclic */
                    next
                      case coerce
                      solve( !KD( (~k⊕~k2⊕~r1) ) ▶₀ #vk.6 )
                        case acceptreader
                        by solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                      next
                        case initiatereader
                        by contradiction /* impossible chain */
                      next
                        case tag1
                        solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                          case d_0_fst
                          by contradiction /* impossible chain */
                        next
                          case d_0_snd
                          by solve( (#vr.7, 0) ~~> (#vk.6, 0) )
                        qed
                      qed
                    qed
                  next
                    case c_xor_case_3
                    by contradiction /* cyclic */
                  next
                    case coerce
                    solve( !KD( (x⊕~r1.1⊕~r1.2) ) ▶₀ #vk.5 )
                      case acceptreader
                      by solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                    next
                      case initiatereader
                      by contradiction /* impossible chain */
                    next
                      case tag1
                      solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                        case d_0_fst
                        by contradiction /* impossible chain */
                      next
                        case d_0_snd
                        by solve( (#vr.7, 0) ~~> (#vk.5, 0) )
                      qed
                    qed
                  qed
                next
                  case c_xor_case_29
                  solve( !KU( (x⊕~r1.2) ) @ #vk.7 )
                    case c_xor
                    by contradiction /* cyclic */
                  next
                    case coerce
                    solve( !KD( (x⊕~r1.2) ) ▶₀ #vk.5 )
                      case acceptreader
                      by solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                    next
                      case initiatereader
                      by contradiction /* impossible chain */
                    next
                      case tag1
                      solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                        case d_0_fst
                        by contradiction /* impossible chain */
                      next
                        case d_0_snd
                        by solve( (#vr.7, 0) ~~> (#vk.5, 0) )
                      qed
                    qed
                  qed
                next
                  case c_xor_case_30
                  solve( !KU( (~r1.1⊕~r1.2) ) @ #vk.7 )
                    case c_xor
                    by contradiction /* cyclic */
                  next
                    case coerce
                    solve( !KD( (~r1.1⊕~r1.2) ) ▶₀ #vk.5 )
                      case acceptreader
                      by solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                    next
                      case initiatereader
                      by contradiction /* impossible chain */
                    next
                      case tag1
                      solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                        case d_0_fst
                        by contradiction /* impossible chain */
                      next
                        case d_0_snd
                        by solve( (#vr.7, 0) ~~> (#vk.5, 0) )
                      qed
                    qed
                  qed
                next
                  case c_xor_case_31
                  by contradiction /* cyclic */
                next
                  case coerce
                  solve( !KD( (~k⊕~k2⊕~r1⊕x⊕~r1.1⊕~r1.2) ) ▶₀ #vk.4 )
                    case acceptreader
                    by solve( (#vl.2, 0) ~~> (#vk.4, 0) )
                  next
                    case initiatereader
                    by contradiction /* impossible chain */
                  next
                    case tag1
                    solve( (#vl.2, 0) ~~> (#vk.4, 0) )
                      case d_0_fst
                      by contradiction /* impossible chain */
                    next
                      case d_0_snd
                      by solve( (#vr.7, 0) ~~> (#vk.4, 0) )
                    qed
                  qed
                qed
              next
                case split_case_3
                solve( !KU( (~k⊕~k2⊕~r1⊕~r1.1) ) @ #vk.6 )
                  case c_xor_case_1
                  by contradiction /* cyclic */
                next
                  case c_xor_case_2
                  by solve( !KU( ~k2 ) @ #vk.8 )
                next
                  case c_xor_case_3
                  solve( !KU( (~k⊕~r1.1) ) @ #vk.7 )
                    case c_xor
                    by contradiction /* cyclic */
                  next
                    case coerce
                    solve( !KD( (~k⊕~r1.1) ) ▶₀ #vk.5 )
                      case acceptreader
                      by solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                    next
                      case initiatereader
                      by contradiction /* impossible chain */
                    next
                      case tag1
                      solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                        case d_0_fst
                        by contradiction /* impossible chain */
                      next
                        case d_0_snd
                        by solve( (#vr.7, 0) ~~> (#vk.5, 0) )
                      qed
                    qed
                  qed
                next
                  case c_xor_case_4
                  by solve( !KU( ~k ) @ #vk.8 )
                next
                  case c_xor_case_5
                  solve( !KU( (~k2⊕~r1.1) ) @ #vk.7 )
                    case c_xor
                    by contradiction /* cyclic */
                  next
                    case coerce
                    solve( !KD( (~k2⊕~r1.1) ) ▶₀ #vk.5 )
                      case acceptreader
                      by solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                    next
                      case initiatereader
                      by contradiction /* impossible chain */
                    next
                      case tag1
                      solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                        case d_0_fst
                        by contradiction /* impossible chain */
                      next
                        case d_0_snd
                        by solve( (#vr.7, 0) ~~> (#vk.5, 0) )
                      qed
                    qed
                  qed
                next
                  case c_xor_case_6
                  solve( !KU( (~r1⊕~r1.1) ) @ #vk.7 )
                    case c_xor
                    by contradiction /* cyclic */
                  next
                    case coerce
                    solve( !KD( (~r1⊕~r1.1) ) ▶₀ #vk.5 )
                      case acceptreader
                      by solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                    next
                      case initiatereader
                      by contradiction /* impossible chain */
                    next
                      case tag1
                      solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                        case d_0_fst
                        by contradiction /* impossible chain */
                      next
                        case d_0_snd
                        by solve( (#vr.7, 0) ~~> (#vk.5, 0) )
                      qed
                    qed
                  qed
                next
                  case c_xor_case_7
                  by contradiction /* cyclic */
                next
                  case coerce
                  solve( !KD( (~k⊕~k2⊕~r1⊕~r1.1) ) ▶₀ #vk.4 )
                    case acceptreader
                    by solve( (#vl.2, 0) ~~> (#vk.4, 0) )
                  next
                    case initiatereader
                    by contradiction /* impossible chain */
                  next
                    case tag1
                    solve( (#vl.2, 0) ~~> (#vk.4, 0) )
                      case d_0_fst
                      by contradiction /* impossible chain */
                    next
                      case d_0_snd
                      by solve( (#vr.7, 0) ~~> (#vk.4, 0) )
                    qed
                  qed
                qed
              next
                case split_case_4
                solve( !KU( (~k⊕~r1⊕~r1.1) ) @ #vk.6 )
                  case c_xor_case_1
                  by contradiction /* cyclic */
                next
                  case c_xor_case_2
                  by solve( !KU( ~k ) @ #vk.8 )
                next
                  case c_xor_case_3
                  by contradiction /* cyclic */
                next
                  case coerce
                  solve( !KD( (~k⊕~r1⊕~r1.1) ) ▶₀ #vk.4 )
                    case acceptreader
                    by solve( (#vl.2, 0) ~~> (#vk.4, 0) )
                  next
                    case initiatereader
                    by contradiction /* impossible chain */
                  next
                    case tag1
                    solve( (#vl.2, 0) ~~> (#vk.4, 0) )
                      case d_0_fst
                      by contradiction /* impossible chain */
                    next
                      case d_0_snd
                      by solve( (#vr.7, 0) ~~> (#vk.4, 0) )
                    qed
                  qed
                qed
              next
                case split_case_5
                solve( !KU( (~k⊕~r1⊕x⊕~r1.1) ) @ #vk.6 )
                  case c_xor_case_1
                  solve( !KU( (~k2⊕x⊕~r1.2) ) @ #vk.6 )
                    case c_xor_case_1
                    solve( !KU( (~k⊕~r1⊕~r1.1) ) @ #vk.7 )
                      case c_xor_case_1
                      by contradiction /* cyclic */
                    next
                      case c_xor_case_2
                      by solve( !KU( ~k ) @ #vk.11 )
                    next
                      case c_xor_case_3
                      by contradiction /* cyclic */
                    next
                      case coerce
                      solve( !KD( (~k⊕~r1⊕~r1.1) ) ▶₀ #vk.6 )
                        case acceptreader
                        by solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                      next
                        case initiatereader
                        by contradiction /* impossible chain */
                      next
                        case tag1
                        solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                          case d_0_fst
                          by contradiction /* impossible chain */
                        next
                          case d_0_snd
                          by solve( (#vr.7, 0) ~~> (#vk.6, 0) )
                        qed
                      qed
                    qed
                  next
                    case c_xor_case_2
                    by solve( !KU( ~k2 ) @ #vk.10 )
                  next
                    case c_xor_case_3
                    solve( !KU( (~k⊕~r1⊕~r1.1) ) @ #vk.7 )
                      case c_xor_case_1
                      by contradiction /* cyclic */
                    next
                      case c_xor_case_2
                      by solve( !KU( ~k ) @ #vk.12 )
                    next
                      case c_xor_case_3
                      by contradiction /* cyclic */
                    next
                      case coerce
                      solve( !KD( (~k⊕~r1⊕~r1.1) ) ▶₀ #vk.6 )
                        case acceptreader
                        by solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                      next
                        case initiatereader
                        by contradiction /* impossible chain */
                      next
                        case tag1
                        solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                          case d_0_fst
                          by contradiction /* impossible chain */
                        next
                          case d_0_snd
                          by solve( (#vr.7, 0) ~~> (#vk.6, 0) )
                        qed
                      qed
                    qed
                  next
                    case coerce
                    solve( !KD( (~k2⊕x⊕~r1.2) ) ▶₀ #vk.5 )
                      case acceptreader
                      by solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                    next
                      case initiatereader
                      by contradiction /* impossible chain */
                    next
                      case tag1
                      solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                        case d_0_fst
                        by contradiction /* impossible chain */
                      next
                        case d_0_snd
                        by solve( (#vr.7, 0) ~~> (#vk.5, 0) )
                      qed
                    qed
                  qed
                next
                  case c_xor_case_2
                  by contradiction /* cyclic */
                next
                  case c_xor_case_3
                  solve( !KU( (~k2⊕x⊕~r1.2) ) @ #vk.6 )
                    case c_xor_case_1
                    solve( !KU( (~k⊕~r1.1) ) @ #vk.7 )
                      case c_xor
                      by contradiction /* cyclic */
                    next
                      case coerce
                      solve( !KD( (~k⊕~r1.1) ) ▶₀ #vk.6 )
                        case acceptreader
                        by solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                      next
                        case initiatereader
                        by contradiction /* impossible chain */
                      next
                        case tag1
                        solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                          case d_0_fst
                          by contradiction /* impossible chain */
                        next
                          case d_0_snd
                          by solve( (#vr.7, 0) ~~> (#vk.6, 0) )
                        qed
                      qed
                    qed
                  next
                    case c_xor_case_2
                    by solve( !KU( ~k2 ) @ #vk.10 )
                  next
                    case c_xor_case_3
                    solve( !KU( (~k⊕~r1.1) ) @ #vk.7 )
                      case c_xor
                      by contradiction /* cyclic */
                    next
                      case coerce
                      solve( !KD( (~k⊕~r1.1) ) ▶₀ #vk.6 )
                        case acceptreader
                        by solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                      next
                        case initiatereader
                        by contradiction /* impossible chain */
                      next
                        case tag1
                        solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                          case d_0_fst
                          by contradiction /* impossible chain */
                        next
                          case d_0_snd
                          by solve( (#vr.7, 0) ~~> (#vk.6, 0) )
                        qed
                      qed
                    qed
                  next
                    case coerce
                    solve( !KD( (~k2⊕x⊕~r1.2) ) ▶₀ #vk.5 )
                      case acceptreader
                      by solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                    next
                      case initiatereader
                      by contradiction /* impossible chain */
                    next
                      case tag1
                      solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                        case d_0_fst
                        by contradiction /* impossible chain */
                      next
                        case d_0_snd
                        by solve( (#vr.7, 0) ~~> (#vk.5, 0) )
                      qed
                    qed
                  qed
                next
                  case c_xor_case_4
                  by solve( !KU( ~k ) @ #vk.8 )
                next
                  case c_xor_case_5
                  solve( !KU( (~k2⊕x⊕~r1.2) ) @ #vk.6 )
                    case c_xor_case_1
                    solve( !KU( (~r1⊕~r1.1) ) @ #vk.7 )
                      case c_xor
                      by contradiction /* cyclic */
                    next
                      case coerce
                      solve( !KD( (~r1⊕~r1.1) ) ▶₀ #vk.6 )
                        case acceptreader
                        by solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                      next
                        case initiatereader
                        by contradiction /* impossible chain */
                      next
                        case tag1
                        solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                          case d_0_fst
                          by contradiction /* impossible chain */
                        next
                          case d_0_snd
                          by solve( (#vr.7, 0) ~~> (#vk.6, 0) )
                        qed
                      qed
                    qed
                  next
                    case c_xor_case_2
                    by solve( !KU( ~k2 ) @ #vk.10 )
                  next
                    case c_xor_case_3
                    solve( !KU( (~r1⊕~r1.1) ) @ #vk.7 )
                      case c_xor
                      by contradiction /* cyclic */
                    next
                      case coerce
                      solve( !KD( (~r1⊕~r1.1) ) ▶₀ #vk.6 )
                        case acceptreader
                        by solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                      next
                        case initiatereader
                        by contradiction /* impossible chain */
                      next
                        case tag1
                        solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                          case d_0_fst
                          by contradiction /* impossible chain */
                        next
                          case d_0_snd
                          by solve( (#vr.7, 0) ~~> (#vk.6, 0) )
                        qed
                      qed
                    qed
                  next
                    case coerce
                    solve( !KD( (~k2⊕x⊕~r1.2) ) ▶₀ #vk.5 )
                      case acceptreader
                      by solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                    next
                      case initiatereader
                      by contradiction /* impossible chain */
                    next
                      case tag1
                      solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                        case d_0_fst
                        by contradiction /* impossible chain */
                      next
                        case d_0_snd
                        by solve( (#vr.7, 0) ~~> (#vk.5, 0) )
                      qed
                    qed
                  qed
                next
                  case c_xor_case_6
                  solve( !KU( (~k2⊕x⊕~r1.2) ) @ #vk.6 )
                    case c_xor_case_1
                    solve( !KU( (x⊕~r1.1) ) @ #vk.7 )
                      case c_xor
                      by contradiction /* cyclic */
                    next
                      case coerce
                      solve( !KD( (x⊕~r1.1) ) ▶₀ #vk.6 )
                        case acceptreader
                        by solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                      next
                        case initiatereader
                        by contradiction /* impossible chain */
                      next
                        case tag1
                        solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                          case d_0_fst
                          by contradiction /* impossible chain */
                        next
                          case d_0_snd
                          by solve( (#vr.7, 0) ~~> (#vk.6, 0) )
                        qed
                      qed
                    qed
                  next
                    case c_xor_case_2
                    by solve( !KU( ~k2 ) @ #vk.10 )
                  next
                    case c_xor_case_3
                    solve( !KU( (x⊕~r1.1) ) @ #vk.7 )
                      case c_xor
                      by contradiction /* cyclic */
                    next
                      case coerce
                      solve( !KD( (x⊕~r1.1) ) ▶₀ #vk.6 )
                        case acceptreader
                        by solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                      next
                        case initiatereader
                        by contradiction /* impossible chain */
                      next
                        case tag1
                        solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                          case d_0_fst
                          by contradiction /* impossible chain */
                        next
                          case d_0_snd
                          by solve( (#vr.7, 0) ~~> (#vk.6, 0) )
                        qed
                      qed
                    qed
                  next
                    case coerce
                    solve( !KD( (~k2⊕x⊕~r1.2) ) ▶₀ #vk.5 )
                      case acceptreader
                      by solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                    next
                      case initiatereader
                      by contradiction /* impossible chain */
                    next
                      case tag1
                      solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                        case d_0_fst
                        by contradiction /* impossible chain */
                      next
                        case d_0_snd
                        by solve( (#vr.7, 0) ~~> (#vk.5, 0) )
                      qed
                    qed
                  qed
                next
                  case c_xor_case_7
                  by contradiction /* cyclic */
                next
                  case coerce
                  solve( !KD( (~k⊕~r1⊕x⊕~r1.1) ) ▶₀ #vk.4 )
                    case acceptreader
                    by solve( (#vl.2, 0) ~~> (#vk.4, 0) )
                  next
                    case initiatereader
                    by contradiction /* impossible chain */
                  next
                    case tag1
                    solve( (#vl.2, 0) ~~> (#vk.4, 0) )
                      case d_0_fst
                      by contradiction /* impossible chain */
                    next
                      case d_0_snd
                      by solve( (#vr.7, 0) ~~> (#vk.4, 0) )
                    qed
                  qed
                qed
              next
                case split_case_6
                solve( !KU( (~k⊕~r1⊕x⊕~r1.1⊕~r1.2) ) @ #vk.6 )
                  case c_xor_case_01
                  by contradiction /* cyclic */
                next
                  case c_xor_case_02
                  solve( !KU( (~k2⊕x) ) @ #vk.6 )
                    case c_xor
                    by solve( !KU( ~k2 ) @ #vk.9 )
                  next
                    case coerce
                    solve( !KD( (~k2⊕x) ) ▶₀ #vk.5 )
                      case acceptreader
                      by solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                    next
                      case initiatereader
                      by contradiction /* impossible chain */
                    next
                      case tag1
                      solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                        case d_0_fst
                        by contradiction /* impossible chain */
                      next
                        case d_0_snd
                        by solve( (#vr.7, 0) ~~> (#vk.5, 0) )
                      qed
                    qed
                  qed
                next
                  case c_xor_case_03
                  solve( !KU( (~k2⊕x) ) @ #vk.6 )
                    case c_xor
                    by solve( !KU( ~k2 ) @ #vk.10 )
                  next
                    case coerce
                    solve( !KD( (~k2⊕x) ) ▶₀ #vk.5 )
                      case acceptreader
                      by solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                    next
                      case initiatereader
                      by contradiction /* impossible chain */
                    next
                      case tag1
                      solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                        case d_0_fst
                        by contradiction /* impossible chain */
                      next
                        case d_0_snd
                        by solve( (#vr.7, 0) ~~> (#vk.5, 0) )
                      qed
                    qed
                  qed
                next
                  case c_xor_case_04
                  by contradiction /* cyclic */
                next
                  case c_xor_case_05
                  solve( !KU( (~k2⊕x) ) @ #vk.6 )
                    case c_xor
                    by solve( !KU( ~k2 ) @ #vk.10 )
                  next
                    case coerce
                    solve( !KD( (~k2⊕x) ) ▶₀ #vk.5 )
                      case acceptreader
                      by solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                    next
                      case initiatereader
                      by contradiction /* impossible chain */
                    next
                      case tag1
                      solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                        case d_0_fst
                        by contradiction /* impossible chain */
                      next
                        case d_0_snd
                        by solve( (#vr.7, 0) ~~> (#vk.5, 0) )
                      qed
                    qed
                  qed
                next
                  case c_xor_case_06
                  solve( !KU( (~k2⊕x) ) @ #vk.6 )
                    case c_xor
                    by solve( !KU( ~k2 ) @ #vk.10 )
                  next
                    case coerce
                    solve( !KD( (~k2⊕x) ) ▶₀ #vk.5 )
                      case acceptreader
                      by solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                    next
                      case initiatereader
                      by contradiction /* impossible chain */
                    next
                      case tag1
                      solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                        case d_0_fst
                        by contradiction /* impossible chain */
                      next
                        case d_0_snd
                        by solve( (#vr.7, 0) ~~> (#vk.5, 0) )
                      qed
                    qed
                  qed
                next
                  case c_xor_case_07
                  solve( !KU( (~k2⊕x) ) @ #vk.6 )
                    case c_xor
                    by solve( !KU( ~k2 ) @ #vk.10 )
                  next
                    case coerce
                    solve( !KD( (~k2⊕x) ) ▶₀ #vk.5 )
                      case acceptreader
                      by solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                    next
                      case initiatereader
                      by contradiction /* impossible chain */
                    next
                      case tag1
                      solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                        case d_0_fst
                        by contradiction /* impossible chain */
                      next
                        case d_0_snd
                        by solve( (#vr.7, 0) ~~> (#vk.5, 0) )
                      qed
                    qed
                  qed
                next
                  case c_xor_case_08
                  by solve( !KU( ~k ) @ #vk.8 )
                next
                  case c_xor_case_09
                  solve( !KU( (~k2⊕x) ) @ #vk.6 )
                    case c_xor
                    by solve( !KU( ~k2 ) @ #vk.10 )
                  next
                    case coerce
                    solve( !KD( (~k2⊕x) ) ▶₀ #vk.5 )
                      case acceptreader
                      by solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                    next
                      case initiatereader
                      by contradiction /* impossible chain */
                    next
                      case tag1
                      solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                        case d_0_fst
                        by contradiction /* impossible chain */
                      next
                        case d_0_snd
                        by solve( (#vr.7, 0) ~~> (#vk.5, 0) )
                      qed
                    qed
                  qed
                next
                  case c_xor_case_10
                  solve( !KU( (~k2⊕x) ) @ #vk.6 )
                    case c_xor
                    by solve( !KU( ~k2 ) @ #vk.10 )
                  next
                    case coerce
                    solve( !KD( (~k2⊕x) ) ▶₀ #vk.5 )
                      case acceptreader
                      by solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                    next
                      case initiatereader
                      by contradiction /* impossible chain */
                    next
                      case tag1
                      solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                        case d_0_fst
                        by contradiction /* impossible chain */
                      next
                        case d_0_snd
                        by solve( (#vr.7, 0) ~~> (#vk.5, 0) )
                      qed
                    qed
                  qed
                next
                  case c_xor_case_11
                  solve( !KU( (~k2⊕x) ) @ #vk.6 )
                    case c_xor
                    by solve( !KU( ~k2 ) @ #vk.10 )
                  next
                    case coerce
                    solve( !KD( (~k2⊕x) ) ▶₀ #vk.5 )
                      case acceptreader
                      by solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                    next
                      case initiatereader
                      by contradiction /* impossible chain */
                    next
                      case tag1
                      solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                        case d_0_fst
                        by contradiction /* impossible chain */
                      next
                        case d_0_snd
                        by solve( (#vr.7, 0) ~~> (#vk.5, 0) )
                      qed
                    qed
                  qed
                next
                  case c_xor_case_12
                  solve( !KU( (~k2⊕x) ) @ #vk.6 )
                    case c_xor
                    by solve( !KU( ~k2 ) @ #vk.10 )
                  next
                    case coerce
                    solve( !KD( (~k2⊕x) ) ▶₀ #vk.5 )
                      case acceptreader
                      by solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                    next
                      case initiatereader
                      by contradiction /* impossible chain */
                    next
                      case tag1
                      solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                        case d_0_fst
                        by contradiction /* impossible chain */
                      next
                        case d_0_snd
                        by solve( (#vr.7, 0) ~~> (#vk.5, 0) )
                      qed
                    qed
                  qed
                next
                  case c_xor_case_13
                  solve( !KU( (~k2⊕x) ) @ #vk.6 )
                    case c_xor
                    by solve( !KU( ~k2 ) @ #vk.10 )
                  next
                    case coerce
                    solve( !KD( (~k2⊕x) ) ▶₀ #vk.5 )
                      case acceptreader
                      by solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                    next
                      case initiatereader
                      by contradiction /* impossible chain */
                    next
                      case tag1
                      solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                        case d_0_fst
                        by contradiction /* impossible chain */
                      next
                        case d_0_snd
                        by solve( (#vr.7, 0) ~~> (#vk.5, 0) )
                      qed
                    qed
                  qed
                next
                  case c_xor_case_14
                  solve( !KU( (~k2⊕x) ) @ #vk.6 )
                    case c_xor
                    by solve( !KU( ~k2 ) @ #vk.10 )
                  next
                    case coerce
                    solve( !KD( (~k2⊕x) ) ▶₀ #vk.5 )
                      case acceptreader
                      by solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                    next
                      case initiatereader
                      by contradiction /* impossible chain */
                    next
                      case tag1
                      solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                        case d_0_fst
                        by contradiction /* impossible chain */
                      next
                        case d_0_snd
                        by solve( (#vr.7, 0) ~~> (#vk.5, 0) )
                      qed
                    qed
                  qed
                next
                  case c_xor_case_15
                  by contradiction /* cyclic */
                next
                  case coerce
                  solve( !KD( (~k⊕~r1⊕x⊕~r1.1⊕~r1.2) ) ▶₀ #vk.4 )
                    case acceptreader
                    by solve( (#vl.2, 0) ~~> (#vk.4, 0) )
                  next
                    case initiatereader
                    by contradiction /* impossible chain */
                  next
                    case tag1
                    solve( (#vl.2, 0) ~~> (#vk.4, 0) )
                      case d_0_fst
                      by contradiction /* impossible chain */
                    next
                      case d_0_snd
                      by solve( (#vr.7, 0) ~~> (#vk.4, 0) )
                    qed
                  qed
                qed
              next
                case split_case_7
                solve( !KU( (~k⊕~k2⊕~r1⊕x⊕~r1.1) ) @ #vk.6 )
                  case c_xor_case_01
                  solve( !KU( (x⊕~r1.2) ) @ #vk.6 )
                    case c_xor
                    solve( !KU( (~k⊕~k2⊕~r1⊕~r1.1) ) @ #vk.7 )
                      case c_xor_case_1
                      by contradiction /* cyclic */
                    next
                      case c_xor_case_2
                      by solve( !KU( ~k2 ) @ #vk.11 )
                    next
                      case c_xor_case_3
                      solve( !KU( (~k⊕~r1.1) ) @ #vk.10 )
                        case c_xor
                        by contradiction /* cyclic */
                      next
                        case coerce
                        solve( !KD( (~k⊕~r1.1) ) ▶₀ #vk.7 )
                          case acceptreader
                          by solve( (#vl.2, 0) ~~> (#vk.7, 0) )
                        next
                          case initiatereader
                          by contradiction /* impossible chain */
                        next
                          case tag1
                          solve( (#vl.2, 0) ~~> (#vk.7, 0) )
                            case d_0_fst
                            by contradiction /* impossible chain */
                          next
                            case d_0_snd
                            by solve( (#vr.7, 0) ~~> (#vk.7, 0) )
                          qed
                        qed
                      qed
                    next
                      case c_xor_case_4
                      by solve( !KU( ~k ) @ #vk.11 )
                    next
                      case c_xor_case_5
                      solve( !KU( (~k2⊕~r1.1) ) @ #vk.10 )
                        case c_xor
                        by contradiction /* cyclic */
                      next
                        case coerce
                        solve( !KD( (~k2⊕~r1.1) ) ▶₀ #vk.7 )
                          case acceptreader
                          by solve( (#vl.2, 0) ~~> (#vk.7, 0) )
                        next
                          case initiatereader
                          by contradiction /* impossible chain */
                        next
                          case tag1
                          solve( (#vl.2, 0) ~~> (#vk.7, 0) )
                            case d_0_fst
                            by contradiction /* impossible chain */
                          next
                            case d_0_snd
                            by solve( (#vr.7, 0) ~~> (#vk.7, 0) )
                          qed
                        qed
                      qed
                    next
                      case c_xor_case_6
                      solve( !KU( (~r1⊕~r1.1) ) @ #vk.10 )
                        case c_xor
                        by contradiction /* cyclic */
                      next
                        case coerce
                        solve( !KD( (~r1⊕~r1.1) ) ▶₀ #vk.7 )
                          case acceptreader
                          by solve( (#vl.2, 0) ~~> (#vk.7, 0) )
                        next
                          case initiatereader
                          by contradiction /* impossible chain */
                        next
                          case tag1
                          solve( (#vl.2, 0) ~~> (#vk.7, 0) )
                            case d_0_fst
                            by contradiction /* impossible chain */
                          next
                            case d_0_snd
                            by solve( (#vr.7, 0) ~~> (#vk.7, 0) )
                          qed
                        qed
                      qed
                    next
                      case c_xor_case_7
                      by contradiction /* cyclic */
                    next
                      case coerce
                      solve( !KD( (~k⊕~k2⊕~r1⊕~r1.1) ) ▶₀ #vk.6 )
                        case acceptreader
                        by solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                      next
                        case initiatereader
                        by contradiction /* impossible chain */
                      next
                        case tag1
                        solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                          case d_0_fst
                          by contradiction /* impossible chain */
                        next
                          case d_0_snd
                          by solve( (#vr.7, 0) ~~> (#vk.6, 0) )
                        qed
                      qed
                    qed
                  next
                    case coerce
                    solve( !KD( (x⊕~r1.2) ) ▶₀ #vk.5 )
                      case acceptreader
                      by solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                    next
                      case initiatereader
                      by contradiction /* impossible chain */
                    next
                      case tag1
                      solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                        case d_0_fst
                        by contradiction /* impossible chain */
                      next
                        case d_0_snd
                        by solve( (#vr.7, 0) ~~> (#vk.5, 0) )
                      qed
                    qed
                  qed
                next
                  case c_xor_case_02
                  by contradiction /* cyclic */
                next
                  case c_xor_case_03
                  solve( !KU( (x⊕~r1.2) ) @ #vk.6 )
                    case c_xor
                    solve( !KU( (~k⊕~k2⊕~r1.1) ) @ #vk.7 )
                      case c_xor_case_1
                      by solve( !KU( ~k2 ) @ #vk.12 )
                    next
                      case c_xor_case_2
                      by solve( !KU( ~k ) @ #vk.12 )
                    next
                      case c_xor_case_3
                      by contradiction /* cyclic */
                    next
                      case coerce
                      solve( !KD( (~k⊕~k2⊕~r1.1) ) ▶₀ #vk.6 )
                        case acceptreader
                        by solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                      next
                        case initiatereader
                        by contradiction /* impossible chain */
                      next
                        case tag1
                        solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                          case d_0_fst
                          by contradiction /* impossible chain */
                        next
                          case d_0_snd
                          by solve( (#vr.7, 0) ~~> (#vk.6, 0) )
                        qed
                      qed
                    qed
                  next
                    case coerce
                    solve( !KD( (x⊕~r1.2) ) ▶₀ #vk.5 )
                      case acceptreader
                      by solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                    next
                      case initiatereader
                      by contradiction /* impossible chain */
                    next
                      case tag1
                      solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                        case d_0_fst
                        by contradiction /* impossible chain */
                      next
                        case d_0_snd
                        by solve( (#vr.7, 0) ~~> (#vk.5, 0) )
                      qed
                    qed
                  qed
                next
                  case c_xor_case_04
                  by solve( !KU( ~k2 ) @ #vk.8 )
                next
                  case c_xor_case_05
                  solve( !KU( (x⊕~r1.2) ) @ #vk.6 )
                    case c_xor
                    solve( !KU( (~k⊕~r1⊕~r1.1) ) @ #vk.7 )
                      case c_xor_case_1
                      by contradiction /* cyclic */
                    next
                      case c_xor_case_2
                      by solve( !KU( ~k ) @ #vk.12 )
                    next
                      case c_xor_case_3
                      by contradiction /* cyclic */
                    next
                      case coerce
                      solve( !KD( (~k⊕~r1⊕~r1.1) ) ▶₀ #vk.6 )
                        case acceptreader
                        by solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                      next
                        case initiatereader
                        by contradiction /* impossible chain */
                      next
                        case tag1
                        solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                          case d_0_fst
                          by contradiction /* impossible chain */
                        next
                          case d_0_snd
                          by solve( (#vr.7, 0) ~~> (#vk.6, 0) )
                        qed
                      qed
                    qed
                  next
                    case coerce
                    solve( !KD( (x⊕~r1.2) ) ▶₀ #vk.5 )
                      case acceptreader
                      by solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                    next
                      case initiatereader
                      by contradiction /* impossible chain */
                    next
                      case tag1
                      solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                        case d_0_fst
                        by contradiction /* impossible chain */
                      next
                        case d_0_snd
                        by solve( (#vr.7, 0) ~~> (#vk.5, 0) )
                      qed
                    qed
                  qed
                next
                  case c_xor_case_06
                  solve( !KU( (x⊕~r1.2) ) @ #vk.6 )
                    case c_xor
                    solve( !KU( (~k⊕x⊕~r1.1) ) @ #vk.7 )
                      case c_xor_case_1
                      solve( !KU( (~k2⊕~r1) ) @ #vk.8 )
                        case c_xor
                        by contradiction /* cyclic */
                      next
                        case coerce
                        solve( !KD( (~k2⊕~r1) ) ▶₀ #vk.7 )
                          case acceptreader
                          by solve( (#vl.2, 0) ~~> (#vk.7, 0) )
                        next
                          case initiatereader
                          by contradiction /* impossible chain */
                        next
                          case tag1
                          solve( (#vl.2, 0) ~~> (#vk.7, 0) )
                            case d_0_fst
                            by contradiction /* impossible chain */
                          next
                            case d_0_snd
                            by solve( (#vr.7, 0) ~~> (#vk.7, 0) )
                          qed
                        qed
                      qed
                    next
                      case c_xor_case_2
                      by solve( !KU( ~k ) @ #vk.12 )
                    next
                      case c_xor_case_3
                      by contradiction /* cyclic */
                    next
                      case coerce
                      solve( !KD( (~k⊕x⊕~r1.1) ) ▶₀ #vk.6 )
                        case acceptreader
                        by solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                      next
                        case initiatereader
                        by contradiction /* impossible chain */
                      next
                        case tag1
                        solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                          case d_0_fst
                          by contradiction /* impossible chain */
                        next
                          case d_0_snd
                          by solve( (#vr.7, 0) ~~> (#vk.6, 0) )
                        qed
                      qed
                    qed
                  next
                    case coerce
                    solve( !KD( (x⊕~r1.2) ) ▶₀ #vk.5 )
                      case acceptreader
                      by solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                    next
                      case initiatereader
                      by contradiction /* impossible chain */
                    next
                      case tag1
                      solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                        case d_0_fst
                        by contradiction /* impossible chain */
                      next
                        case d_0_snd
                        by solve( (#vr.7, 0) ~~> (#vk.5, 0) )
                      qed
                    qed
                  qed
                next
                  case c_xor_case_07
                  solve( !KU( (x⊕~r1.2) ) @ #vk.6 )
                    case c_xor
                    solve( !KU( (~k⊕~r1.1) ) @ #vk.7 )
                      case c_xor
                      by contradiction /* cyclic */
                    next
                      case coerce
                      solve( !KD( (~k⊕~r1.1) ) ▶₀ #vk.6 )
                        case acceptreader
                        by solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                      next
                        case initiatereader
                        by contradiction /* impossible chain */
                      next
                        case tag1
                        solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                          case d_0_fst
                          by contradiction /* impossible chain */
                        next
                          case d_0_snd
                          by solve( (#vr.7, 0) ~~> (#vk.6, 0) )
                        qed
                      qed
                    qed
                  next
                    case coerce
                    solve( !KD( (x⊕~r1.2) ) ▶₀ #vk.5 )
                      case acceptreader
                      by solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                    next
                      case initiatereader
                      by contradiction /* impossible chain */
                    next
                      case tag1
                      solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                        case d_0_fst
                        by contradiction /* impossible chain */
                      next
                        case d_0_snd
                        by solve( (#vr.7, 0) ~~> (#vk.5, 0) )
                      qed
                    qed
                  qed
                next
                  case c_xor_case_08
                  by solve( !KU( ~k ) @ #vk.8 )
                next
                  case c_xor_case_09
                  solve( !KU( (x⊕~r1.2) ) @ #vk.6 )
                    case c_xor
                    solve( !KU( (~k2⊕~r1⊕~r1.1) ) @ #vk.7 )
                      case c_xor_case_1
                      by contradiction /* cyclic */
                    next
                      case c_xor_case_2
                      by solve( !KU( ~k2 ) @ #vk.12 )
                    next
                      case c_xor_case_3
                      by contradiction /* cyclic */
                    next
                      case coerce
                      solve( !KD( (~k2⊕~r1⊕~r1.1) ) ▶₀ #vk.6 )
                        case acceptreader
                        by solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                      next
                        case initiatereader
                        by contradiction /* impossible chain */
                      next
                        case tag1
                        solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                          case d_0_fst
                          by contradiction /* impossible chain */
                        next
                          case d_0_snd
                          by solve( (#vr.7, 0) ~~> (#vk.6, 0) )
                        qed
                      qed
                    qed
                  next
                    case coerce
                    solve( !KD( (x⊕~r1.2) ) ▶₀ #vk.5 )
                      case acceptreader
                      by solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                    next
                      case initiatereader
                      by contradiction /* impossible chain */
                    next
                      case tag1
                      solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                        case d_0_fst
                        by contradiction /* impossible chain */
                      next
                        case d_0_snd
                        by solve( (#vr.7, 0) ~~> (#vk.5, 0) )
                      qed
                    qed
                  qed
                next
                  case c_xor_case_10
                  solve( !KU( (x⊕~r1.2) ) @ #vk.6 )
                    case c_xor
                    solve( !KU( (~k2⊕x⊕~r1.1) ) @ #vk.7 )
                      case c_xor_case_1
                      solve( !KU( (~k⊕~r1) ) @ #vk.8 )
                        case c_xor
                        by contradiction /* cyclic */
                      next
                        case coerce
                        solve( !KD( (~k⊕~r1) ) ▶₀ #vk.7 )
                          case acceptreader
                          by solve( (#vl.2, 0) ~~> (#vk.7, 0) )
                        next
                          case initiatereader
                          by contradiction /* impossible chain */
                        next
                          case tag1
                          solve( (#vl.2, 0) ~~> (#vk.7, 0) )
                            case d_0_fst
                            by contradiction /* impossible chain */
                          next
                            case d_0_snd
                            by solve( (#vr.7, 0) ~~> (#vk.7, 0) )
                          qed
                        qed
                      qed
                    next
                      case c_xor_case_2
                      by solve( !KU( ~k2 ) @ #vk.12 )
                    next
                      case c_xor_case_3
                      by contradiction /* cyclic */
                    next
                      case coerce
                      solve( !KD( (~k2⊕x⊕~r1.1) ) ▶₀ #vk.6 )
                        case acceptreader
                        by solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                      next
                        case initiatereader
                        by contradiction /* impossible chain */
                      next
                        case tag1
                        solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                          case d_0_fst
                          by contradiction /* impossible chain */
                        next
                          case d_0_snd
                          by solve( (#vr.7, 0) ~~> (#vk.6, 0) )
                        qed
                      qed
                    qed
                  next
                    case coerce
                    solve( !KD( (x⊕~r1.2) ) ▶₀ #vk.5 )
                      case acceptreader
                      by solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                    next
                      case initiatereader
                      by contradiction /* impossible chain */
                    next
                      case tag1
                      solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                        case d_0_fst
                        by contradiction /* impossible chain */
                      next
                        case d_0_snd
                        by solve( (#vr.7, 0) ~~> (#vk.5, 0) )
                      qed
                    qed
                  qed
                next
                  case c_xor_case_11
                  solve( !KU( (x⊕~r1.2) ) @ #vk.6 )
                    case c_xor
                    solve( !KU( (~k2⊕~r1.1) ) @ #vk.7 )
                      case c_xor
                      by contradiction /* cyclic */
                    next
                      case coerce
                      solve( !KD( (~k2⊕~r1.1) ) ▶₀ #vk.6 )
                        case acceptreader
                        by solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                      next
                        case initiatereader
                        by contradiction /* impossible chain */
                      next
                        case tag1
                        solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                          case d_0_fst
                          by contradiction /* impossible chain */
                        next
                          case d_0_snd
                          by solve( (#vr.7, 0) ~~> (#vk.6, 0) )
                        qed
                      qed
                    qed
                  next
                    case coerce
                    solve( !KD( (x⊕~r1.2) ) ▶₀ #vk.5 )
                      case acceptreader
                      by solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                    next
                      case initiatereader
                      by contradiction /* impossible chain */
                    next
                      case tag1
                      solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                        case d_0_fst
                        by contradiction /* impossible chain */
                      next
                        case d_0_snd
                        by solve( (#vr.7, 0) ~~> (#vk.5, 0) )
                      qed
                    qed
                  qed
                next
                  case c_xor_case_12
                  solve( !KU( (x⊕~r1.2) ) @ #vk.6 )
                    case c_xor
                    solve( !KU( (~r1⊕x⊕~r1.1) ) @ #vk.7 )
                      case c_xor_case_1
                      solve( !KU( (~k⊕~k2) ) @ #vk.8 )
                        case c_xor
                        by solve( !KU( ~k2 ) @ #vk.12 )
                      next
                        case coerce
                        solve( !KD( (~k⊕~k2) ) ▶₀ #vk.7 )
                          case acceptreader
                          by solve( (#vl.2, 0) ~~> (#vk.7, 0) )
                        next
                          case initiatereader
                          by contradiction /* impossible chain */
                        next
                          case tag1
                          solve( (#vl.2, 0) ~~> (#vk.7, 0) )
                            case d_0_fst
                            by contradiction /* impossible chain */
                          next
                            case d_0_snd
                            by solve( (#vr.7, 0) ~~> (#vk.7, 0) )
                          qed
                        qed
                      qed
                    next
                      case c_xor_case_2
                      by contradiction /* cyclic */
                    next
                      case c_xor_case_3
                      by contradiction /* cyclic */
                    next
                      case coerce
                      solve( !KD( (~r1⊕x⊕~r1.1) ) ▶₀ #vk.6 )
                        case acceptreader
                        by solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                      next
                        case initiatereader
                        by contradiction /* impossible chain */
                      next
                        case tag1
                        solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                          case d_0_fst
                          by contradiction /* impossible chain */
                        next
                          case d_0_snd
                          by solve( (#vr.7, 0) ~~> (#vk.6, 0) )
                        qed
                      qed
                    qed
                  next
                    case coerce
                    solve( !KD( (x⊕~r1.2) ) ▶₀ #vk.5 )
                      case acceptreader
                      by solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                    next
                      case initiatereader
                      by contradiction /* impossible chain */
                    next
                      case tag1
                      solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                        case d_0_fst
                        by contradiction /* impossible chain */
                      next
                        case d_0_snd
                        by solve( (#vr.7, 0) ~~> (#vk.5, 0) )
                      qed
                    qed
                  qed
                next
                  case c_xor_case_13
                  solve( !KU( (x⊕~r1.2) ) @ #vk.6 )
                    case c_xor
                    solve( !KU( (~r1⊕~r1.1) ) @ #vk.7 )
                      case c_xor
                      by contradiction /* cyclic */
                    next
                      case coerce
                      solve( !KD( (~r1⊕~r1.1) ) ▶₀ #vk.6 )
                        case acceptreader
                        by solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                      next
                        case initiatereader
                        by contradiction /* impossible chain */
                      next
                        case tag1
                        solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                          case d_0_fst
                          by contradiction /* impossible chain */
                        next
                          case d_0_snd
                          by solve( (#vr.7, 0) ~~> (#vk.6, 0) )
                        qed
                      qed
                    qed
                  next
                    case coerce
                    solve( !KD( (x⊕~r1.2) ) ▶₀ #vk.5 )
                      case acceptreader
                      by solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                    next
                      case initiatereader
                      by contradiction /* impossible chain */
                    next
                      case tag1
                      solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                        case d_0_fst
                        by contradiction /* impossible chain */
                      next
                        case d_0_snd
                        by solve( (#vr.7, 0) ~~> (#vk.5, 0) )
                      qed
                    qed
                  qed
                next
                  case c_xor_case_14
                  solve( !KU( (x⊕~r1.2) ) @ #vk.6 )
                    case c_xor
                    solve( !KU( (x⊕~r1.1) ) @ #vk.7 )
                      case c_xor
                      by contradiction /* cyclic */
                    next
                      case coerce
                      solve( !KD( (x⊕~r1.1) ) ▶₀ #vk.6 )
                        case acceptreader
                        by solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                      next
                        case initiatereader
                        by contradiction /* impossible chain */
                      next
                        case tag1
                        solve( (#vl.2, 0) ~~> (#vk.6, 0) )
                          case d_0_fst
                          by contradiction /* impossible chain */
                        next
                          case d_0_snd
                          by solve( (#vr.7, 0) ~~> (#vk.6, 0) )
                        qed
                      qed
                    qed
                  next
                    case coerce
                    solve( !KD( (x⊕~r1.2) ) ▶₀ #vk.5 )
                      case acceptreader
                      by solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                    next
                      case initiatereader
                      by contradiction /* impossible chain */
                    next
                      case tag1
                      solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                        case d_0_fst
                        by contradiction /* impossible chain */
                      next
                        case d_0_snd
                        by solve( (#vr.7, 0) ~~> (#vk.5, 0) )
                      qed
                    qed
                  qed
                next
                  case c_xor_case_15
                  by contradiction /* cyclic */
                next
                  case coerce
                  solve( !KD( (~k⊕~k2⊕~r1⊕x⊕~r1.1) ) ▶₀ #vk.4 )
                    case acceptreader
                    by solve( (#vl.2, 0) ~~> (#vk.4, 0) )
                  next
                    case initiatereader
                    by contradiction /* impossible chain */
                  next
                    case tag1
                    solve( (#vl.2, 0) ~~> (#vk.4, 0) )
                      case d_0_fst
                      by contradiction /* impossible chain */
                    next
                      case d_0_snd
                      by solve( (#vr.7, 0) ~~> (#vk.4, 0) )
                    qed
                  qed
                qed
              qed
            next
              case tag1_case_2
              by contradiction /* cyclic */
            qed
          next
            case coerce
            solve( !KD( (x⊕h((~k⊕~r1⊕x⊕~r1.1))) ) ▶₀ #vk.2 )
              case acceptreader
              by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
            next
              case initiatereader
              by contradiction /* impossible chain */
            next
              case tag1
              solve( (#vl.1, 0) ~~> (#vk.2, 0) )
                case d_0_fst
                by contradiction /* impossible chain */
              next
                case d_0_snd
                by solve( (#vr.5, 0) ~~> (#vk.2, 0) )
              qed
            qed
          qed
        next
          case coerce
          solve( !KD( (x⊕~r1.1) ) ▶₀ #vk.1 )
            case acceptreader
            by solve( (#vl.1, 0) ~~> (#vk.1, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.1, 0) ~~> (#vk.1, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.5, 0) ~~> (#vk.1, 0) )
            qed
          qed
        qed
      qed
    next
      case tag1_case_2
      solve( splitEqs(3) )
        case split_case_1
        by solve( !KU( ~k2 ) @ #vk.1 )
      next
        case split_case_2
        solve( !KU( (~k⊕~k2⊕r0⊕~r1.1⊕h((~k⊕~r1⊕r0))) ) @ #vk.2 )
          case c_xor_case_01
          by contradiction /* cyclic */
        next
          case c_xor_case_02
          solve( !KU( (~k⊕~k2⊕~r1.1⊕h((~k⊕~r1⊕r0))) ) @ #vk.3 )
            case c_xor_case_1
            by contradiction /* cyclic */
          next
            case c_xor_case_2
            by solve( !KU( ~k2 ) @ #vk.5 )
          next
            case c_xor_case_3
            solve( !KU( (~k⊕h((~k⊕~r1⊕r0))) ) @ #vk.4 )
              case c_xor
              by solve( !KU( ~k ) @ #vk.7 )
            next
              case coerce
              solve( !KD( (~k⊕h((~k⊕~r1⊕r0))) ) ▶₀ #vk.3 )
                case acceptreader
                by solve( (#vl.1, 0) ~~> (#vk.3, 0) )
              next
                case initiatereader
                by contradiction /* impossible chain */
              next
                case tag1
                solve( (#vl.1, 0) ~~> (#vk.3, 0) )
                  case d_0_fst
                  by contradiction /* impossible chain */
                next
                  case d_0_snd
                  by solve( (#vr.5, 0) ~~> (#vk.3, 0) )
                qed
              qed
            qed
          next
            case c_xor_case_4
            by solve( !KU( ~k ) @ #vk.5 )
          next
            case c_xor_case_5
            solve( !KU( (~k2⊕h((~k⊕~r1⊕r0))) ) @ #vk.4 )
              case c_xor
              by solve( !KU( ~k2 ) @ #vk.7 )
            next
              case coerce
              solve( !KD( (~k2⊕h((~k⊕~r1⊕r0))) ) ▶₀ #vk.3 )
                case acceptreader
                by solve( (#vl.1, 0) ~~> (#vk.3, 0) )
              next
                case initiatereader
                by contradiction /* impossible chain */
              next
                case tag1
                solve( (#vl.1, 0) ~~> (#vk.3, 0) )
                  case d_0_fst
                  by contradiction /* impossible chain */
                next
                  case d_0_snd
                  by solve( (#vr.5, 0) ~~> (#vk.3, 0) )
                qed
              qed
            qed
          next
            case c_xor_case_6
            solve( !KU( (~r1.1⊕h((~k⊕~r1⊕r0))) ) @ #vk.4 )
              case c_xor
              by contradiction /* cyclic */
            next
              case coerce
              solve( !KD( (~r1.1⊕h((~k⊕~r1⊕r0))) ) ▶₀ #vk.3 )
                case acceptreader
                by solve( (#vl.1, 0) ~~> (#vk.3, 0) )
              next
                case initiatereader
                by contradiction /* impossible chain */
              next
                case tag1
                solve( (#vl.1, 0) ~~> (#vk.3, 0) )
                  case d_0_fst
                  by contradiction /* impossible chain */
                next
                  case d_0_snd
                  by solve( (#vr.5, 0) ~~> (#vk.3, 0) )
                qed
              qed
            qed
          next
            case c_xor_case_7
            solve( !KU( (~k⊕~k2⊕~r1.1) ) @ #vk.5 )
              case c_xor_case_1
              by solve( !KU( ~k2 ) @ #vk.7 )
            next
              case c_xor_case_2
              by solve( !KU( ~k ) @ #vk.7 )
            next
              case c_xor_case_3
              by contradiction /* cyclic */
            next
              case coerce
              solve( !KD( (~k⊕~k2⊕~r1.1) ) ▶₀ #vk.3 )
                case acceptreader
                by solve( (#vl.1, 0) ~~> (#vk.3, 0) )
              next
                case initiatereader
                by contradiction /* impossible chain */
              next
                case tag1
                solve( (#vl.1, 0) ~~> (#vk.3, 0) )
                  case d_0_fst
                  by contradiction /* impossible chain */
                next
                  case d_0_snd
                  by solve( (#vr.5, 0) ~~> (#vk.3, 0) )
                qed
              qed
            qed
          next
            case coerce
            solve( !KD( (~k⊕~k2⊕~r1.1⊕h((~k⊕~r1⊕r0))) ) ▶₀ #vk.2 )
              case acceptreader
              by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
            next
              case initiatereader
              by contradiction /* impossible chain */
            next
              case tag1
              solve( (#vl.1, 0) ~~> (#vk.2, 0) )
                case d_0_fst
                by contradiction /* impossible chain */
              next
                case d_0_snd
                by solve( (#vr.5, 0) ~~> (#vk.2, 0) )
              qed
            qed
          qed
        next
          case c_xor_case_03
          solve( !KU( (~k⊕~k2⊕h((~k⊕~r1⊕r0))) ) @ #vk.3 )
            case c_xor_case_1
            by solve( !KU( ~k2 ) @ #vk.6 )
          next
            case c_xor_case_2
            by solve( !KU( ~k ) @ #vk.6 )
          next
            case c_xor_case_3
            solve( !KU( (r0⊕~r1.1) ) @ #vk.4 )
              case c_xor
              by contradiction /* cyclic */
            next
              case coerce
              solve( !KD( (r0⊕~r1.1) ) ▶₀ #vk.3 )
                case acceptreader
                by solve( (#vl.1, 0) ~~> (#vk.3, 0) )
              next
                case initiatereader
                by contradiction /* impossible chain */
              next
                case tag1
                solve( (#vl.1, 0) ~~> (#vk.3, 0) )
                  case d_0_fst
                  by contradiction /* impossible chain */
                next
                  case d_0_snd
                  by solve( (#vr.5, 0) ~~> (#vk.3, 0) )
                qed
              qed
            qed
          next
            case coerce
            solve( !KD( (~k⊕~k2⊕h((~k⊕~r1⊕r0))) ) ▶₀ #vk.2 )
              case acceptreader
              by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
            next
              case initiatereader
              by contradiction /* impossible chain */
            next
              case tag1
              solve( (#vl.1, 0) ~~> (#vk.2, 0) )
                case d_0_fst
                by contradiction /* impossible chain */
              next
                case d_0_snd
                by solve( (#vr.5, 0) ~~> (#vk.2, 0) )
              qed
            qed
          qed
        next
          case c_xor_case_04
          by solve( !KU( ~k2 ) @ #vk.4 )
        next
          case c_xor_case_05
          solve( !KU( (~k⊕r0⊕h((~k⊕~r1⊕r0))) ) @ #vk.3 )
            case c_xor_case_1
            solve( !KU( (~k2⊕~r1.1) ) @ #vk.4 )
              case c_xor
              by contradiction /* cyclic */
            next
              case coerce
              solve( !KD( (~k2⊕~r1.1) ) ▶₀ #vk.3 )
                case acceptreader
                by solve( (#vl.1, 0) ~~> (#vk.3, 0) )
              next
                case initiatereader
                by contradiction /* impossible chain */
              next
                case tag1
                solve( (#vl.1, 0) ~~> (#vk.3, 0) )
                  case d_0_fst
                  by contradiction /* impossible chain */
                next
                  case d_0_snd
                  by solve( (#vr.5, 0) ~~> (#vk.3, 0) )
                qed
              qed
            qed
          next
            case c_xor_case_2
            by solve( !KU( ~k ) @ #vk.6 )
          next
            case c_xor_case_3
            solve( !KU( (~k2⊕~r1.1) ) @ #vk.4 )
              case c_xor
              by contradiction /* cyclic */
            next
              case coerce
              solve( !KD( (~k2⊕~r1.1) ) ▶₀ #vk.3 )
                case acceptreader
                by solve( (#vl.1, 0) ~~> (#vk.3, 0) )
              next
                case initiatereader
                by contradiction /* impossible chain */
              next
                case tag1
                solve( (#vl.1, 0) ~~> (#vk.3, 0) )
                  case d_0_fst
                  by contradiction /* impossible chain */
                next
                  case d_0_snd
                  by solve( (#vr.5, 0) ~~> (#vk.3, 0) )
                qed
              qed
            qed
          next
            case coerce
            solve( !KD( (~k⊕r0⊕h((~k⊕~r1⊕r0))) ) ▶₀ #vk.2 )
              case acceptreader
              by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
            next
              case initiatereader
              by contradiction /* impossible chain */
            next
              case tag1
              solve( (#vl.1, 0) ~~> (#vk.2, 0) )
                case d_0_fst
                by contradiction /* impossible chain */
              next
                case d_0_snd
                by solve( (#vr.5, 0) ~~> (#vk.2, 0) )
              qed
            qed
          qed
        next
          case c_xor_case_06
          solve( !KU( (~k⊕~r1.1⊕h((~k⊕~r1⊕r0))) ) @ #vk.3 )
            case c_xor_case_1
            by contradiction /* cyclic */
          next
            case c_xor_case_2
            by solve( !KU( ~k ) @ #vk.6 )
          next
            case c_xor_case_3
            solve( !KU( (~k2⊕r0) ) @ #vk.4 )
              case c_xor
              by solve( !KU( ~k2 ) @ #vk.7 )
            next
              case coerce
              solve( !KD( (~k2⊕r0) ) ▶₀ #vk.3 )
                case acceptreader
                by solve( (#vl.1, 0) ~~> (#vk.3, 0) )
              next
                case initiatereader
                by contradiction /* impossible chain */
              next
                case tag1
                solve( (#vl.1, 0) ~~> (#vk.3, 0) )
                  case d_0_fst
                  by contradiction /* impossible chain */
                next
                  case d_0_snd
                  by solve( (#vr.5, 0) ~~> (#vk.3, 0) )
                qed
              qed
            qed
          next
            case coerce
            solve( !KD( (~k⊕~r1.1⊕h((~k⊕~r1⊕r0))) ) ▶₀ #vk.2 )
              case acceptreader
              by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
            next
              case initiatereader
              by contradiction /* impossible chain */
            next
              case tag1
              solve( (#vl.1, 0) ~~> (#vk.2, 0) )
                case d_0_fst
                by contradiction /* impossible chain */
              next
                case d_0_snd
                by solve( (#vr.5, 0) ~~> (#vk.2, 0) )
              qed
            qed
          qed
        next
          case c_xor_case_07
          solve( !KU( (~k⊕h((~k⊕~r1⊕r0))) ) @ #vk.3 )
            case c_xor
            by solve( !KU( ~k ) @ #vk.6 )
          next
            case coerce
            solve( !KD( (~k⊕h((~k⊕~r1⊕r0))) ) ▶₀ #vk.2 )
              case acceptreader
              by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
            next
              case initiatereader
              by contradiction /* impossible chain */
            next
              case tag1
              solve( (#vl.1, 0) ~~> (#vk.2, 0) )
                case d_0_fst
                by contradiction /* impossible chain */
              next
                case d_0_snd
                by solve( (#vr.5, 0) ~~> (#vk.2, 0) )
              qed
            qed
          qed
        next
          case c_xor_case_08
          by solve( !KU( ~k ) @ #vk.4 )
        next
          case c_xor_case_09
          solve( !KU( (~k2⊕r0⊕h((~k⊕~r1⊕r0))) ) @ #vk.3 )
            case c_xor_case_1
            solve( !KU( (~k⊕~r1.1) ) @ #vk.4 )
              case c_xor
              by contradiction /* cyclic */
            next
              case coerce
              solve( !KD( (~k⊕~r1.1) ) ▶₀ #vk.3 )
                case acceptreader
                by solve( (#vl.1, 0) ~~> (#vk.3, 0) )
              next
                case initiatereader
                by contradiction /* impossible chain */
              next
                case tag1
                solve( (#vl.1, 0) ~~> (#vk.3, 0) )
                  case d_0_fst
                  by contradiction /* impossible chain */
                next
                  case d_0_snd
                  by solve( (#vr.5, 0) ~~> (#vk.3, 0) )
                qed
              qed
            qed
          next
            case c_xor_case_2
            by solve( !KU( ~k2 ) @ #vk.6 )
          next
            case c_xor_case_3
            solve( !KU( (~k⊕~r1.1) ) @ #vk.4 )
              case c_xor
              by contradiction /* cyclic */
            next
              case coerce
              solve( !KD( (~k⊕~r1.1) ) ▶₀ #vk.3 )
                case acceptreader
                by solve( (#vl.1, 0) ~~> (#vk.3, 0) )
              next
                case initiatereader
                by contradiction /* impossible chain */
              next
                case tag1
                solve( (#vl.1, 0) ~~> (#vk.3, 0) )
                  case d_0_fst
                  by contradiction /* impossible chain */
                next
                  case d_0_snd
                  by solve( (#vr.5, 0) ~~> (#vk.3, 0) )
                qed
              qed
            qed
          next
            case coerce
            solve( !KD( (~k2⊕r0⊕h((~k⊕~r1⊕r0))) ) ▶₀ #vk.2 )
              case acceptreader
              by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
            next
              case initiatereader
              by contradiction /* impossible chain */
            next
              case tag1
              solve( (#vl.1, 0) ~~> (#vk.2, 0) )
                case d_0_fst
                by contradiction /* impossible chain */
              next
                case d_0_snd
                by solve( (#vr.5, 0) ~~> (#vk.2, 0) )
              qed
            qed
          qed
        next
          case c_xor_case_10
          solve( !KU( (~k2⊕~r1.1⊕h((~k⊕~r1⊕r0))) ) @ #vk.3 )
            case c_xor_case_1
            by contradiction /* cyclic */
          next
            case c_xor_case_2
            by solve( !KU( ~k2 ) @ #vk.6 )
          next
            case c_xor_case_3
            solve( !KU( (~k⊕r0) ) @ #vk.4 )
              case c_xor
              by solve( !KU( ~k ) @ #vk.7 )
            next
              case coerce
              solve( !KD( (~k⊕r0) ) ▶₀ #vk.3 )
                case acceptreader
                by solve( (#vl.1, 0) ~~> (#vk.3, 0) )
              next
                case initiatereader
                by contradiction /* impossible chain */
              next
                case tag1
                solve( (#vl.1, 0) ~~> (#vk.3, 0) )
                  case d_0_fst
                  by contradiction /* impossible chain */
                next
                  case d_0_snd
                  by solve( (#vr.5, 0) ~~> (#vk.3, 0) )
                qed
              qed
            qed
          next
            case coerce
            solve( !KD( (~k2⊕~r1.1⊕h((~k⊕~r1⊕r0))) ) ▶₀ #vk.2 )
              case acceptreader
              by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
            next
              case initiatereader
              by contradiction /* impossible chain */
            next
              case tag1
              solve( (#vl.1, 0) ~~> (#vk.2, 0) )
                case d_0_fst
                by contradiction /* impossible chain */
              next
                case d_0_snd
                by solve( (#vr.5, 0) ~~> (#vk.2, 0) )
              qed
            qed
          qed
        next
          case c_xor_case_11
          solve( !KU( (~k2⊕h((~k⊕~r1⊕r0))) ) @ #vk.3 )
            case c_xor
            by solve( !KU( ~k2 ) @ #vk.6 )
          next
            case coerce
            solve( !KD( (~k2⊕h((~k⊕~r1⊕r0))) ) ▶₀ #vk.2 )
              case acceptreader
              by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
            next
              case initiatereader
              by contradiction /* impossible chain */
            next
              case tag1
              solve( (#vl.1, 0) ~~> (#vk.2, 0) )
                case d_0_fst
                by contradiction /* impossible chain */
              next
                case d_0_snd
                by solve( (#vr.5, 0) ~~> (#vk.2, 0) )
              qed
            qed
          qed
        next
          case c_xor_case_12
          solve( !KU( (r0⊕~r1.1⊕h((~k⊕~r1⊕r0))) ) @ #vk.3 )
            case c_xor_case_1
            by contradiction /* cyclic */
          next
            case c_xor_case_2
            solve( !KU( (~k⊕~k2) ) @ #vk.4 )
              case c_xor
              by solve( !KU( ~k2 ) @ #vk.6 )
            next
              case coerce
              solve( !KD( (~k⊕~k2) ) ▶₀ #vk.3 )
                case acceptreader
                by solve( (#vl.1, 0) ~~> (#vk.3, 0) )
              next
                case initiatereader
                by contradiction /* impossible chain */
              next
                case tag1
                solve( (#vl.1, 0) ~~> (#vk.3, 0) )
                  case d_0_fst
                  by contradiction /* impossible chain */
                next
                  case d_0_snd
                  by solve( (#vr.5, 0) ~~> (#vk.3, 0) )
                qed
              qed
            qed
          next
            case c_xor_case_3
            solve( !KU( (~k⊕~k2) ) @ #vk.4 )
              case c_xor
              by solve( !KU( ~k2 ) @ #vk.7 )
            next
              case coerce
              solve( !KD( (~k⊕~k2) ) ▶₀ #vk.3 )
                case acceptreader
                by solve( (#vl.1, 0) ~~> (#vk.3, 0) )
              next
                case initiatereader
                by contradiction /* impossible chain */
              next
                case tag1
                solve( (#vl.1, 0) ~~> (#vk.3, 0) )
                  case d_0_fst
                  by contradiction /* impossible chain */
                next
                  case d_0_snd
                  by solve( (#vr.5, 0) ~~> (#vk.3, 0) )
                qed
              qed
            qed
          next
            case coerce
            solve( !KD( (r0⊕~r1.1⊕h((~k⊕~r1⊕r0))) ) ▶₀ #vk.2 )
              case acceptreader
              by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
            next
              case initiatereader
              by contradiction /* impossible chain */
            next
              case tag1
              solve( (#vl.1, 0) ~~> (#vk.2, 0) )
                case d_0_fst
                by contradiction /* impossible chain */
              next
                case d_0_snd
                by solve( (#vr.5, 0) ~~> (#vk.2, 0) )
              qed
            qed
          qed
        next
          case c_xor_case_13
          solve( !KU( (r0⊕h((~k⊕~r1⊕r0))) ) @ #vk.3 )
            case c_xor
            solve( !KU( (~k⊕~k2⊕~r1.1) ) @ #vk.4 )
              case c_xor_case_1
              by solve( !KU( ~k2 ) @ #vk.7 )
            next
              case c_xor_case_2
              by solve( !KU( ~k ) @ #vk.7 )
            next
              case c_xor_case_3
              by contradiction /* cyclic */
            next
              case coerce
              solve( !KD( (~k⊕~k2⊕~r1.1) ) ▶₀ #vk.3 )
                case acceptreader
                by solve( (#vl.1, 0) ~~> (#vk.3, 0) )
              next
                case initiatereader
                by contradiction /* impossible chain */
              next
                case tag1
                solve( (#vl.1, 0) ~~> (#vk.3, 0) )
                  case d_0_fst
                  by contradiction /* impossible chain */
                next
                  case d_0_snd
                  by solve( (#vr.5, 0) ~~> (#vk.3, 0) )
                qed
              qed
            qed
          next
            case coerce
            solve( !KD( (r0⊕h((~k⊕~r1⊕r0))) ) ▶₀ #vk.2 )
              case acceptreader
              by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
            next
              case initiatereader
              by contradiction /* impossible chain */
            next
              case tag1
              solve( (#vl.1, 0) ~~> (#vk.2, 0) )
                case d_0_fst
                by contradiction /* impossible chain */
              next
                case d_0_snd
                by solve( (#vr.5, 0) ~~> (#vk.2, 0) )
              qed
            qed
          qed
        next
          case c_xor_case_14
          solve( !KU( (~r1.1⊕h((~k⊕~r1⊕r0))) ) @ #vk.3 )
            case c_xor
            by contradiction /* cyclic */
          next
            case coerce
            solve( !KD( (~r1.1⊕h((~k⊕~r1⊕r0))) ) ▶₀ #vk.2 )
              case acceptreader
              by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
            next
              case initiatereader
              by contradiction /* impossible chain */
            next
              case tag1
              solve( (#vl.1, 0) ~~> (#vk.2, 0) )
                case d_0_fst
                by contradiction /* impossible chain */
              next
                case d_0_snd
                by solve( (#vr.5, 0) ~~> (#vk.2, 0) )
              qed
            qed
          qed
        next
          case c_xor_case_15
          solve( !KU( (~k⊕~k2⊕r0⊕~r1.1) ) @ #vk.4 )
            case c_xor_case_1
            solve( !KU( (~k⊕~k2⊕~r1.1) ) @ #vk.5 )
              case c_xor_case_1
              by solve( !KU( ~k2 ) @ #vk.7 )
            next
              case c_xor_case_2
              by solve( !KU( ~k ) @ #vk.7 )
            next
              case c_xor_case_3
              by contradiction /* cyclic */
            next
              case coerce
              solve( !KD( (~k⊕~k2⊕~r1.1) ) ▶₀ #vk.3 )
                case acceptreader
                by solve( (#vl.1, 0) ~~> (#vk.3, 0) )
              next
                case initiatereader
                by contradiction /* impossible chain */
              next
                case tag1
                solve( (#vl.1, 0) ~~> (#vk.3, 0) )
                  case d_0_fst
                  by contradiction /* impossible chain */
                next
                  case d_0_snd
                  by solve( (#vr.5, 0) ~~> (#vk.3, 0) )
                qed
              qed
            qed
          next
            case c_xor_case_2
            by solve( !KU( ~k2 ) @ #vk.6 )
          next
            case c_xor_case_3
            solve( !KU( (~k⊕~r1.1) ) @ #vk.5 )
              case c_xor
              by contradiction /* cyclic */
            next
              case coerce
              solve( !KD( (~k⊕~r1.1) ) ▶₀ #vk.3 )
                case acceptreader
                by solve( (#vl.1, 0) ~~> (#vk.3, 0) )
              next
                case initiatereader
                by contradiction /* impossible chain */
              next
                case tag1
                solve( (#vl.1, 0) ~~> (#vk.3, 0) )
                  case d_0_fst
                  by contradiction /* impossible chain */
                next
                  case d_0_snd
                  by solve( (#vr.5, 0) ~~> (#vk.3, 0) )
                qed
              qed
            qed
          next
            case c_xor_case_4
            by solve( !KU( ~k ) @ #vk.6 )
          next
            case c_xor_case_5
            solve( !KU( (~k2⊕~r1.1) ) @ #vk.5 )
              case c_xor
              by contradiction /* cyclic */
            next
              case coerce
              solve( !KD( (~k2⊕~r1.1) ) ▶₀ #vk.3 )
                case acceptreader
                by solve( (#vl.1, 0) ~~> (#vk.3, 0) )
              next
                case initiatereader
                by contradiction /* impossible chain */
              next
                case tag1
                solve( (#vl.1, 0) ~~> (#vk.3, 0) )
                  case d_0_fst
                  by contradiction /* impossible chain */
                next
                  case d_0_snd
                  by solve( (#vr.5, 0) ~~> (#vk.3, 0) )
                qed
              qed
            qed
          next
            case c_xor_case_6
            solve( !KU( (r0⊕~r1.1) ) @ #vk.5 )
              case c_xor
              by contradiction /* cyclic */
            next
              case coerce
              solve( !KD( (r0⊕~r1.1) ) ▶₀ #vk.3 )
                case acceptreader
                by solve( (#vl.1, 0) ~~> (#vk.3, 0) )
              next
                case initiatereader
                by contradiction /* impossible chain */
              next
                case tag1
                solve( (#vl.1, 0) ~~> (#vk.3, 0) )
                  case d_0_fst
                  by contradiction /* impossible chain */
                next
                  case d_0_snd
                  by solve( (#vr.5, 0) ~~> (#vk.3, 0) )
                qed
              qed
            qed
          next
            case c_xor_case_7
            by contradiction /* cyclic */
          next
            case coerce
            solve( !KD( (~k⊕~k2⊕r0⊕~r1.1) ) ▶₀ #vk.2 )
              case acceptreader
              by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
            next
              case initiatereader
              by contradiction /* impossible chain */
            next
              case tag1
              solve( (#vl.1, 0) ~~> (#vk.2, 0) )
                case d_0_fst
                by contradiction /* impossible chain */
              next
                case d_0_snd
                by solve( (#vr.5, 0) ~~> (#vk.2, 0) )
              qed
            qed
          qed
        next
          case coerce
          solve( !KD( (~k⊕~k2⊕r0⊕~r1.1⊕h((~k⊕~r1⊕r0))) ) ▶₀ #vk.1 )
            case acceptreader
            by solve( (#vl.1, 0) ~~> (#vk.1, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.1, 0) ~~> (#vk.1, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.5, 0) ~~> (#vk.1, 0) )
            qed
          qed
        qed
      next
        case split_case_3
        solve( !KU( (~k⊕~k2⊕h((~k⊕~r0⊕~r1))) ) @ #vk.2 )
          case c_xor_case_1
          by solve( !KU( ~k2 ) @ #vk.4 )
        next
          case c_xor_case_2
          by solve( !KU( ~k ) @ #vk.4 )
        next
          case c_xor_case_3
          solve( !KU( h((~k⊕~r0⊕~r1)) ) @ #vk.3 )
            case c_h
            solve( !KU( (~k⊕~k2) ) @ #vk.4 )
              case c_xor
              by solve( !KU( ~k2 ) @ #vk.6 )
            next
              case coerce
              solve( !KD( (~k⊕~k2) ) ▶₀ #vk.3 )
                case acceptreader
                by solve( (#vl.1, 0) ~~> (#vk.3, 0) )
              next
                case initiatereader
                by contradiction /* impossible chain */
              next
                case tag1
                solve( (#vl.1, 0) ~~> (#vk.3, 0) )
                  case d_0_fst
                  by contradiction /* impossible chain */
                next
                  case d_0_snd
                  by solve( (#vr.5, 0) ~~> (#vk.3, 0) )
                qed
              qed
            qed
          next
            case tag1_case_1
            solve( !KU( (~k⊕~k2) ) @ #vk.4 )
              case c_xor
              by solve( !KU( ~k2 ) @ #vk.6 )
            next
              case coerce
              solve( !KD( (~k⊕~k2) ) ▶₀ #vk.3 )
                case acceptreader
                by solve( (#vl.2, 0) ~~> (#vk.3, 0) )
              next
                case initiatereader
                by contradiction /* impossible chain */
              next
                case tag1
                solve( (#vl.2, 0) ~~> (#vk.3, 0) )
                  case d_0_fst
                  by contradiction /* impossible chain */
                next
                  case d_0_snd
                  by solve( (#vr.7, 0) ~~> (#vk.3, 0) )
                qed
              qed
            qed
          next
            case tag1_case_2
            by contradiction /* cyclic */
          qed
        next
          case coerce
          solve( !KD( (~k⊕~k2⊕h((~k⊕~r0⊕~r1))) ) ▶₀ #vk.1 )
            case acceptreader
            by solve( (#vl.1, 0) ~~> (#vk.1, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.1, 0) ~~> (#vk.1, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.5, 0) ~~> (#vk.1, 0) )
            qed
          qed
        qed
      next
        case split_case_4
        solve( !KU( (~k2⊕~r1.1) ) @ #vk.1 )
          case c_xor
          by solve( !KU( ~k2 ) @ #vk.4 )
        next
          case coerce
          solve( !KD( (~k2⊕~r1.1) ) ▶₀ #vk.1 )
            case acceptreader
            by solve( (#vl.1, 0) ~~> (#vk.1, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.1, 0) ~~> (#vk.1, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.5, 0) ~~> (#vk.1, 0) )
            qed
          qed
        qed
      next
        case split_case_5
        solve( !KU( (~k2⊕x⊕~r1.1) ) @ #vk.1 )
          case c_xor_case_1
          solve( !KU( (~k⊕x⊕h((~k⊕~k2⊕~r1⊕x⊕~r1.1))) ) @ #vk.2 )
            case c_xor_case_1
            solve( !KU( (~k2⊕~r1.1) ) @ #vk.3 )
              case c_xor
              by solve( !KU( ~k2 ) @ #vk.7 )
            next
              case coerce
              solve( !KD( (~k2⊕~r1.1) ) ▶₀ #vk.3 )
                case acceptreader
                by solve( (#vl.1, 0) ~~> (#vk.3, 0) )
              next
                case initiatereader
                by contradiction /* impossible chain */
              next
                case tag1
                solve( (#vl.1, 0) ~~> (#vk.3, 0) )
                  case d_0_fst
                  by contradiction /* impossible chain */
                next
                  case d_0_snd
                  by solve( (#vr.5, 0) ~~> (#vk.3, 0) )
                qed
              qed
            qed
          next
            case c_xor_case_2
            by solve( !KU( ~k ) @ #vk.6 )
          next
            case c_xor_case_3
            solve( !KU( (~k2⊕~r1.1) ) @ #vk.3 )
              case c_xor
              by solve( !KU( ~k2 ) @ #vk.8 )
            next
              case coerce
              solve( !KD( (~k2⊕~r1.1) ) ▶₀ #vk.3 )
                case acceptreader
                by solve( (#vl.1, 0) ~~> (#vk.3, 0) )
              next
                case initiatereader
                by contradiction /* impossible chain */
              next
                case tag1
                solve( (#vl.1, 0) ~~> (#vk.3, 0) )
                  case d_0_fst
                  by contradiction /* impossible chain */
                next
                  case d_0_snd
                  by solve( (#vr.5, 0) ~~> (#vk.3, 0) )
                qed
              qed
            qed
          next
            case coerce
            solve( !KD( (~k⊕x⊕h((~k⊕~k2⊕~r1⊕x⊕~r1.1))) ) ▶₀ #vk.2 )
              case acceptreader
              by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
            next
              case initiatereader
              by contradiction /* impossible chain */
            next
              case tag1
              solve( (#vl.1, 0) ~~> (#vk.2, 0) )
                case d_0_fst
                by contradiction /* impossible chain */
              next
                case d_0_snd
                by solve( (#vr.5, 0) ~~> (#vk.2, 0) )
              qed
            qed
          qed
        next
          case c_xor_case_2
          by solve( !KU( ~k2 ) @ #vk.4 )
        next
          case c_xor_case_3
          solve( !KU( (~k⊕x⊕h((~k⊕~k2⊕~r1⊕x⊕~r1.1))) ) @ #vk.2 )
            case c_xor_case_1
            solve( !KU( (~k2⊕x) ) @ #vk.4 )
              case c_xor
              by solve( !KU( ~k2 ) @ #vk.7 )
            next
              case coerce
              solve( !KD( (~k2⊕x) ) ▶₀ #vk.3 )
                case acceptreader
                by solve( (#vl.1, 0) ~~> (#vk.3, 0) )
              next
                case initiatereader
                by contradiction /* impossible chain */
              next
                case tag1
                solve( (#vl.1, 0) ~~> (#vk.3, 0) )
                  case d_0_fst
                  by contradiction /* impossible chain */
                next
                  case d_0_snd
                  by solve( (#vr.5, 0) ~~> (#vk.3, 0) )
                qed
              qed
            qed
          next
            case c_xor_case_2
            by solve( !KU( ~k ) @ #vk.6 )
          next
            case c_xor_case_3
            solve( !KU( (~k2⊕x) ) @ #vk.4 )
              case c_xor
              by solve( !KU( ~k2 ) @ #vk.8 )
            next
              case coerce
              solve( !KD( (~k2⊕x) ) ▶₀ #vk.3 )
                case acceptreader
                by solve( (#vl.1, 0) ~~> (#vk.3, 0) )
              next
                case initiatereader
                by contradiction /* impossible chain */
              next
                case tag1
                solve( (#vl.1, 0) ~~> (#vk.3, 0) )
                  case d_0_fst
                  by contradiction /* impossible chain */
                next
                  case d_0_snd
                  by solve( (#vr.5, 0) ~~> (#vk.3, 0) )
                qed
              qed
            qed
          next
            case coerce
            solve( !KD( (~k⊕x⊕h((~k⊕~k2⊕~r1⊕x⊕~r1.1))) ) ▶₀ #vk.2 )
              case acceptreader
              by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
            next
              case initiatereader
              by contradiction /* impossible chain */
            next
              case tag1
              solve( (#vl.1, 0) ~~> (#vk.2, 0) )
                case d_0_fst
                by contradiction /* impossible chain */
              next
                case d_0_snd
                by solve( (#vr.5, 0) ~~> (#vk.2, 0) )
              qed
            qed
          qed
        next
          case coerce
          solve( !KD( (~k2⊕x⊕~r1.1) ) ▶₀ #vk.1 )
            case acceptreader
            by solve( (#vl.1, 0) ~~> (#vk.1, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.1, 0) ~~> (#vk.1, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.5, 0) ~~> (#vk.1, 0) )
            qed
          qed
        qed
      next
        case split_case_6
        solve( !KU( (~k2⊕x) ) @ #vk.1 )
          case c_xor
          by solve( !KU( ~k2 ) @ #vk.4 )
        next
          case coerce
          solve( !KD( (~k2⊕x) ) ▶₀ #vk.1 )
            case acceptreader
            by solve( (#vl.1, 0) ~~> (#vk.1, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.1, 0) ~~> (#vk.1, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.5, 0) ~~> (#vk.1, 0) )
            qed
          qed
        qed
      next
        case split_case_7
        solve( !KU( (x⊕~r1.1) ) @ #vk.1 )
          case c_xor
          solve( !KU( (~k⊕~k2⊕x⊕h((~k⊕~r1⊕x⊕~r1.1))) ) @ #vk.2 )
            case c_xor_case_1
            solve( !KU( (~k⊕~k2⊕h((~k⊕~r1⊕x⊕~r1.1))) ) @ #vk.5 )
              case c_xor_case_1
              by solve( !KU( ~k2 ) @ #vk.7 )
            next
              case c_xor_case_2
              by solve( !KU( ~k ) @ #vk.7 )
            next
              case c_xor_case_3
              solve( !KU( h((~k⊕~r1⊕x⊕~r1.1)) ) @ #vk.6 )
                case c_h
                solve( !KU( (~k⊕~k2) ) @ #vk.7 )
                  case c_xor
                  by solve( !KU( ~k2 ) @ #vk.9 )
                next
                  case coerce
                  solve( !KD( (~k⊕~k2) ) ▶₀ #vk.5 )
                    case acceptreader
                    by solve( (#vl.1, 0) ~~> (#vk.5, 0) )
                  next
                    case initiatereader
                    by contradiction /* impossible chain */
                  next
                    case tag1
                    solve( (#vl.1, 0) ~~> (#vk.5, 0) )
                      case d_0_fst
                      by contradiction /* impossible chain */
                    next
                      case d_0_snd
                      by solve( (#vr.5, 0) ~~> (#vk.5, 0) )
                    qed
                  qed
                qed
              next
                case tag1_case_1
                solve( !KU( (~k⊕~k2) ) @ #vk.7 )
                  case c_xor
                  by solve( !KU( ~k2 ) @ #vk.9 )
                next
                  case coerce
                  solve( !KD( (~k⊕~k2) ) ▶₀ #vk.5 )
                    case acceptreader
                    by solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                  next
                    case initiatereader
                    by contradiction /* impossible chain */
                  next
                    case tag1
                    solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                      case d_0_fst
                      by contradiction /* impossible chain */
                    next
                      case d_0_snd
                      by solve( (#vr.7, 0) ~~> (#vk.5, 0) )
                    qed
                  qed
                qed
              next
                case tag1_case_2
                by contradiction /* cyclic */
              qed
            next
              case coerce
              solve( !KD( (~k⊕~k2⊕h((~k⊕~r1⊕x⊕~r1.1))) ) ▶₀ #vk.3 )
                case acceptreader
                by solve( (#vl.1, 0) ~~> (#vk.3, 0) )
              next
                case initiatereader
                by contradiction /* impossible chain */
              next
                case tag1
                solve( (#vl.1, 0) ~~> (#vk.3, 0) )
                  case d_0_fst
                  by contradiction /* impossible chain */
                next
                  case d_0_snd
                  by solve( (#vr.5, 0) ~~> (#vk.3, 0) )
                qed
              qed
            qed
          next
            case c_xor_case_2
            by solve( !KU( ~k2 ) @ #vk.6 )
          next
            case c_xor_case_3
            solve( !KU( (~k⊕h((~k⊕~r1⊕x⊕~r1.1))) ) @ #vk.5 )
              case c_xor
              by solve( !KU( ~k ) @ #vk.8 )
            next
              case coerce
              solve( !KD( (~k⊕h((~k⊕~r1⊕x⊕~r1.1))) ) ▶₀ #vk.3 )
                case acceptreader
                by solve( (#vl.1, 0) ~~> (#vk.3, 0) )
              next
                case initiatereader
                by contradiction /* impossible chain */
              next
                case tag1
                solve( (#vl.1, 0) ~~> (#vk.3, 0) )
                  case d_0_fst
                  by contradiction /* impossible chain */
                next
                  case d_0_snd
                  by solve( (#vr.5, 0) ~~> (#vk.3, 0) )
                qed
              qed
            qed
          next
            case c_xor_case_4
            by solve( !KU( ~k ) @ #vk.6 )
          next
            case c_xor_case_5
            solve( !KU( (~k2⊕h((~k⊕~r1⊕x⊕~r1.1))) ) @ #vk.5 )
              case c_xor
              by solve( !KU( ~k2 ) @ #vk.8 )
            next
              case coerce
              solve( !KD( (~k2⊕h((~k⊕~r1⊕x⊕~r1.1))) ) ▶₀ #vk.3 )
                case acceptreader
                by solve( (#vl.1, 0) ~~> (#vk.3, 0) )
              next
                case initiatereader
                by contradiction /* impossible chain */
              next
                case tag1
                solve( (#vl.1, 0) ~~> (#vk.3, 0) )
                  case d_0_fst
                  by contradiction /* impossible chain */
                next
                  case d_0_snd
                  by solve( (#vr.5, 0) ~~> (#vk.3, 0) )
                qed
              qed
            qed
          next
            case c_xor_case_6
            solve( !KU( (x⊕h((~k⊕~r1⊕x⊕~r1.1))) ) @ #vk.5 )
              case c_xor
              solve( !KU( (~k⊕~k2) ) @ #vk.6 )
                case c_xor
                by solve( !KU( ~k2 ) @ #vk.8 )
              next
                case coerce
                solve( !KD( (~k⊕~k2) ) ▶₀ #vk.4 )
                  case acceptreader
                  by solve( (#vl.1, 0) ~~> (#vk.4, 0) )
                next
                  case initiatereader
                  by contradiction /* impossible chain */
                next
                  case tag1
                  solve( (#vl.1, 0) ~~> (#vk.4, 0) )
                    case d_0_fst
                    by contradiction /* impossible chain */
                  next
                    case d_0_snd
                    by solve( (#vr.5, 0) ~~> (#vk.4, 0) )
                  qed
                qed
              qed
            next
              case coerce
              solve( !KD( (x⊕h((~k⊕~r1⊕x⊕~r1.1))) ) ▶₀ #vk.3 )
                case acceptreader
                by solve( (#vl.1, 0) ~~> (#vk.3, 0) )
              next
                case initiatereader
                by contradiction /* impossible chain */
              next
                case tag1
                solve( (#vl.1, 0) ~~> (#vk.3, 0) )
                  case d_0_fst
                  by contradiction /* impossible chain */
                next
                  case d_0_snd
                  by solve( (#vr.5, 0) ~~> (#vk.3, 0) )
                qed
              qed
            qed
          next
            case c_xor_case_7
            solve( !KU( h((~k⊕~r1⊕x⊕~r1.1)) ) @ #vk.5 )
              case c_h
              solve( !KU( (~k⊕~k2⊕x) ) @ #vk.6 )
                case c_xor_case_1
                by solve( !KU( ~k2 ) @ #vk.9 )
              next
                case c_xor_case_2
                by solve( !KU( ~k ) @ #vk.9 )
              next
                case c_xor_case_3
                solve( !KU( (~k⊕~r1⊕x⊕~r1.1) ) @ #vk.7 )
                  case c_xor_case_1
                  solve( !KU( (~k⊕~k2) ) @ #vk.8 )
                    case c_xor
                    by solve( !KU( ~k2 ) @ #vk.10 )
                  next
                    case coerce
                    solve( !KD( (~k⊕~k2) ) ▶₀ #vk.6 )
                      case acceptreader
                      by solve( (#vl.1, 0) ~~> (#vk.6, 0) )
                    next
                      case initiatereader
                      by contradiction /* impossible chain */
                    next
                      case tag1
                      solve( (#vl.1, 0) ~~> (#vk.6, 0) )
                        case d_0_fst
                        by contradiction /* impossible chain */
                      next
                        case d_0_snd
                        by solve( (#vr.5, 0) ~~> (#vk.6, 0) )
                      qed
                    qed
                  qed
                next
                  case c_xor_case_2
                  by contradiction /* cyclic */
                next
                  case c_xor_case_3
                  solve( !KU( (~k⊕~k2) ) @ #vk.8 )
                    case c_xor
                    by solve( !KU( ~k2 ) @ #vk.11 )
                  next
                    case coerce
                    solve( !KD( (~k⊕~k2) ) ▶₀ #vk.6 )
                      case acceptreader
                      by solve( (#vl.1, 0) ~~> (#vk.6, 0) )
                    next
                      case initiatereader
                      by contradiction /* impossible chain */
                    next
                      case tag1
                      solve( (#vl.1, 0) ~~> (#vk.6, 0) )
                        case d_0_fst
                        by contradiction /* impossible chain */
                      next
                        case d_0_snd
                        by solve( (#vr.5, 0) ~~> (#vk.6, 0) )
                      qed
                    qed
                  qed
                next
                  case c_xor_case_4
                  by solve( !KU( ~k ) @ #vk.10 )
                next
                  case c_xor_case_5
                  solve( !KU( (~k⊕~k2) ) @ #vk.8 )
                    case c_xor
                    by solve( !KU( ~k2 ) @ #vk.11 )
                  next
                    case coerce
                    solve( !KD( (~k⊕~k2) ) ▶₀ #vk.6 )
                      case acceptreader
                      by solve( (#vl.1, 0) ~~> (#vk.6, 0) )
                    next
                      case initiatereader
                      by contradiction /* impossible chain */
                    next
                      case tag1
                      solve( (#vl.1, 0) ~~> (#vk.6, 0) )
                        case d_0_fst
                        by contradiction /* impossible chain */
                      next
                        case d_0_snd
                        by solve( (#vr.5, 0) ~~> (#vk.6, 0) )
                      qed
                    qed
                  qed
                next
                  case c_xor_case_6
                  by contradiction /* cyclic */
                next
                  case c_xor_case_7
                  by contradiction /* cyclic */
                next
                  case coerce
                  solve( !KD( (~k⊕~r1⊕x⊕~r1.1) ) ▶₀ #vk.5 )
                    case acceptreader
                    by solve( (#vl.1, 0) ~~> (#vk.5, 0) )
                  next
                    case initiatereader
                    by contradiction /* impossible chain */
                  next
                    case tag1
                    solve( (#vl.1, 0) ~~> (#vk.5, 0) )
                      case d_0_fst
                      by contradiction /* impossible chain */
                    next
                      case d_0_snd
                      by solve( (#vr.5, 0) ~~> (#vk.5, 0) )
                    qed
                  qed
                qed
              next
                case coerce
                solve( !KD( (~k⊕~k2⊕x) ) ▶₀ #vk.4 )
                  case acceptreader
                  by solve( (#vl.1, 0) ~~> (#vk.4, 0) )
                next
                  case initiatereader
                  by contradiction /* impossible chain */
                next
                  case tag1
                  solve( (#vl.1, 0) ~~> (#vk.4, 0) )
                    case d_0_fst
                    by contradiction /* impossible chain */
                  next
                    case d_0_snd
                    by solve( (#vr.5, 0) ~~> (#vk.4, 0) )
                  qed
                qed
              qed
            next
              case tag1_case_1
              solve( !KU( (~k⊕~k2⊕x) ) @ #vk.6 )
                case c_xor_case_1
                by solve( !KU( ~k2 ) @ #vk.9 )
              next
                case c_xor_case_2
                by solve( !KU( ~k ) @ #vk.9 )
              next
                case c_xor_case_3
                solve( !KU( (~k⊕~k2) ) @ #vk.8 )
                  case c_xor
                  by solve( !KU( ~k2 ) @ #vk.9 )
                next
                  case coerce
                  solve( !KD( (~k⊕~k2) ) ▶₀ #vk.5 )
                    case acceptreader
                    by solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                  next
                    case initiatereader
                    by contradiction /* impossible chain */
                  next
                    case tag1
                    solve( (#vl.2, 0) ~~> (#vk.5, 0) )
                      case d_0_fst
                      by contradiction /* impossible chain */
                    next
                      case d_0_snd
                      by solve( (#vr.7, 0) ~~> (#vk.5, 0) )
                    qed
                  qed
                qed
              next
                case coerce
                solve( !KD( (~k⊕~k2⊕x) ) ▶₀ #vk.4 )
                  case acceptreader
                  by solve( (#vl.2, 0) ~~> (#vk.4, 0) )
                next
                  case initiatereader
                  by contradiction /* impossible chain */
                next
                  case tag1
                  solve( (#vl.2, 0) ~~> (#vk.4, 0) )
                    case d_0_fst
                    by contradiction /* impossible chain */
                  next
                    case d_0_snd
                    by solve( (#vr.7, 0) ~~> (#vk.4, 0) )
                  qed
                qed
              qed
            next
              case tag1_case_2
              by contradiction /* cyclic */
            qed
          next
            case coerce
            solve( !KD( (~k⊕~k2⊕x⊕h((~k⊕~r1⊕x⊕~r1.1))) ) ▶₀ #vk.2 )
              case acceptreader
              by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
            next
              case initiatereader
              by contradiction /* impossible chain */
            next
              case tag1
              solve( (#vl.1, 0) ~~> (#vk.2, 0) )
                case d_0_fst
                by contradiction /* impossible chain */
              next
                case d_0_snd
                by solve( (#vr.5, 0) ~~> (#vk.2, 0) )
              qed
            qed
          qed
        next
          case coerce
          solve( !KD( (x⊕~r1.1) ) ▶₀ #vk.1 )
            case acceptreader
            by solve( (#vl.1, 0) ~~> (#vk.1, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.1, 0) ~~> (#vk.1, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.5, 0) ~~> (#vk.1, 0) )
            qed
          qed
        qed
      qed
    qed
  next
    case split_case_6
    solve( !KU( h((~k⊕~r1⊕x⊕h((~k⊕x)))) ) @ #vk )
      case c_h
      solve( !KU( (~r1⊕x) ) @ #vk.1 )
        case c_xor
        by contradiction /* cyclic */
      next
        case coerce
        solve( !KD( (~r1⊕x) ) ▶₀ #vk.1 )
          case acceptreader
          by solve( (#vl, 0) ~~> (#vk.1, 0) )
        next
          case initiatereader
          by contradiction /* impossible chain */
        next
          case tag1
          solve( (#vl, 0) ~~> (#vk.1, 0) )
            case d_0_fst
            by contradiction /* impossible chain */
          next
            case d_0_snd
            by solve( (#vr.3, 0) ~~> (#vk.1, 0) )
          qed
        qed
      qed
    next
      case tag1_case_1
      solve( !KU( (~r1⊕x) ) @ #vk.1 )
        case c_xor
        by contradiction /* cyclic */
      next
        case coerce
        solve( !KD( (~r1⊕x) ) ▶₀ #vk.1 )
          case acceptreader
          by solve( (#vl.1, 0) ~~> (#vk.1, 0) )
        next
          case initiatereader
          by contradiction /* impossible chain */
        next
          case tag1
          solve( (#vl.1, 0) ~~> (#vk.1, 0) )
            case d_0_fst
            by contradiction /* impossible chain */
          next
            case d_0_snd
            by solve( (#vr.5, 0) ~~> (#vk.1, 0) )
          qed
        qed
      qed
    next
      case tag1_case_2
      solve( !KU( (~r1⊕x) ) @ #vk.1 )
        case c_xor
        by contradiction /* cyclic */
      next
        case coerce
        solve( !KD( (~r1⊕x) ) ▶₀ #vk.1 )
          case acceptreader
          by solve( (#vl.1, 0) ~~> (#vk.1, 0) )
        next
          case initiatereader
          by contradiction /* impossible chain */
        next
          case tag1
          solve( (#vl.1, 0) ~~> (#vk.1, 0) )
            case d_0_fst
            by contradiction /* impossible chain */
          next
            case d_0_snd
            by solve( (#vr.5, 0) ~~> (#vk.1, 0) )
          qed
        qed
      qed
    qed
  next
    case split_case_7
    solve( !KU( h((~r1⊕z⊕h(z))) ) @ #vk )
      case c_h
      solve( !KU( (~k⊕~r1⊕z) ) @ #vk.1 )
        case c_xor_case_1
        by contradiction /* cyclic */
      next
        case c_xor_case_2
        by solve( !KU( ~k ) @ #vk.4 )
      next
        case c_xor_case_3
        solve( !KU( (~r1⊕z⊕h(z)) ) @ #vk.2 )
          case c_xor_case_1
          solve( !KU( (~k⊕~r1) ) @ #vk.4 )
            case c_xor
            by contradiction /* cyclic */
          next
            case coerce
            solve( !KD( (~k⊕~r1) ) ▶₀ #vk.3 )
              case acceptreader
              by solve( (#vl, 0) ~~> (#vk.3, 0) )
            next
              case initiatereader
              by contradiction /* impossible chain */
            next
              case tag1
              solve( (#vl, 0) ~~> (#vk.3, 0) )
                case d_0_fst
                by contradiction /* impossible chain */
              next
                case d_0_snd
                by solve( (#vr.3, 0) ~~> (#vk.3, 0) )
              qed
            qed
          qed
        next
          case c_xor_case_2
          solve( !KU( (~k⊕~r1) ) @ #vk.4 )
            case c_xor
            by contradiction /* cyclic */
          next
            case coerce
            solve( !KD( (~k⊕~r1) ) ▶₀ #vk.3 )
              case acceptreader
              by solve( (#vl, 0) ~~> (#vk.3, 0) )
            next
              case initiatereader
              by contradiction /* impossible chain */
            next
              case tag1
              solve( (#vl, 0) ~~> (#vk.3, 0) )
                case d_0_fst
                by contradiction /* impossible chain */
              next
                case d_0_snd
                by solve( (#vr.3, 0) ~~> (#vk.3, 0) )
              qed
            qed
          qed
        next
          case c_xor_case_3
          solve( !KU( (~k⊕~r1) ) @ #vk.4 )
            case c_xor
            by contradiction /* cyclic */
          next
            case coerce
            solve( !KD( (~k⊕~r1) ) ▶₀ #vk.3 )
              case acceptreader
              by solve( (#vl, 0) ~~> (#vk.3, 0) )
            next
              case initiatereader
              by contradiction /* impossible chain */
            next
              case tag1
              solve( (#vl, 0) ~~> (#vk.3, 0) )
                case d_0_fst
                by contradiction /* impossible chain */
              next
                case d_0_snd
                by solve( (#vr.3, 0) ~~> (#vk.3, 0) )
              qed
            qed
          qed
        next
          case coerce
          solve( !KD( (~r1⊕z⊕h(z)) ) ▶₀ #vk.2 )
            case acceptreader
            by solve( (#vl, 0) ~~> (#vk.2, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl, 0) ~~> (#vk.2, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.3, 0) ~~> (#vk.2, 0) )
            qed
          qed
        qed
      next
        case coerce
        solve( !KD( (~k⊕~r1⊕z) ) ▶₀ #vk.1 )
          case acceptreader
          by solve( (#vl, 0) ~~> (#vk.1, 0) )
        next
          case initiatereader
          by contradiction /* impossible chain */
        next
          case tag1
          solve( (#vl, 0) ~~> (#vk.1, 0) )
            case d_0_fst
            by contradiction /* impossible chain */
          next
            case d_0_snd
            by solve( (#vr.3, 0) ~~> (#vk.1, 0) )
          qed
        qed
      qed
    next
      case tag1_case_1
      solve( !KU( (~k⊕~r1⊕z) ) @ #vk.1 )
        case c_xor_case_1
        by contradiction /* cyclic */
      next
        case c_xor_case_2
        by solve( !KU( ~k ) @ #vk.4 )
      next
        case c_xor_case_3
        solve( !KU( (~x⊕x.1⊕x.2) ) @ #vk.2 )
          case c_xor_case_1
          solve( !KU( (~k⊕~r1) ) @ #vk.4 )
            case c_xor
            by contradiction /* cyclic */
          next
            case coerce
            solve( !KD( (~k⊕~r1) ) ▶₀ #vk.3 )
              case acceptreader
              by solve( (#vl.1, 0) ~~> (#vk.3, 0) )
            next
              case initiatereader
              by contradiction /* impossible chain */
            next
              case tag1
              solve( (#vl.1, 0) ~~> (#vk.3, 0) )
                case d_0_fst
                by contradiction /* impossible chain */
              next
                case d_0_snd
                by solve( (#vr.5, 0) ~~> (#vk.3, 0) )
              qed
            qed
          qed
        next
          case c_xor_case_2
          solve( !KU( ~x.2 ) @ #vk.6 )
            case fresh
            solve( !KU( (~k⊕~r1) ) @ #vk.5 )
              case c_xor
              by contradiction /* cyclic */
            next
              case coerce
              solve( !KD( (~k⊕~r1) ) ▶₀ #vk.4 )
                case acceptreader
                by solve( (#vl.1, 0) ~~> (#vk.4, 0) )
              next
                case initiatereader
                by contradiction /* impossible chain */
              next
                case tag1
                solve( (#vl.1, 0) ~~> (#vk.4, 0) )
                  case d_0_fst
                  by contradiction /* impossible chain */
                next
                  case d_0_snd
                  by solve( (#vr.5, 0) ~~> (#vk.4, 0) )
                qed
              qed
            qed
          next
            case tag1
            solve( !KU( (~k⊕~r1) ) @ #vk.5 )
              case c_xor
              by contradiction /* cyclic */
            next
              case coerce
              solve( !KD( (~k⊕~r1) ) ▶₀ #vk.4 )
                case acceptreader
                by solve( (#vl.2, 0) ~~> (#vk.4, 0) )
              next
                case initiatereader
                by contradiction /* impossible chain */
              next
                case tag1
                solve( (#vl.2, 0) ~~> (#vk.4, 0) )
                  case d_0_fst
                  by contradiction /* impossible chain */
                next
                  case d_0_snd
                  by solve( (#vr.7, 0) ~~> (#vk.4, 0) )
                qed
              qed
            qed
          qed
        next
          case c_xor_case_3
          solve( !KU( (~k⊕~r1) ) @ #vk.4 )
            case c_xor
            by contradiction /* cyclic */
          next
            case coerce
            solve( !KD( (~k⊕~r1) ) ▶₀ #vk.3 )
              case acceptreader
              by solve( (#vl.1, 0) ~~> (#vk.3, 0) )
            next
              case initiatereader
              by contradiction /* impossible chain */
            next
              case tag1
              solve( (#vl.1, 0) ~~> (#vk.3, 0) )
                case d_0_fst
                by contradiction /* impossible chain */
              next
                case d_0_snd
                by solve( (#vr.5, 0) ~~> (#vk.3, 0) )
              qed
            qed
          qed
        next
          case coerce
          solve( !KD( (~x⊕x.1⊕x.2) ) ▶₀ #vk.2 )
            case acceptreader
            by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.1, 0) ~~> (#vk.2, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.5, 0) ~~> (#vk.2, 0) )
            qed
          qed
        qed
      next
        case coerce
        solve( !KD( (~k⊕~r1⊕z) ) ▶₀ #vk.1 )
          case acceptreader
          by solve( (#vl.1, 0) ~~> (#vk.1, 0) )
        next
          case initiatereader
          by contradiction /* impossible chain */
        next
          case tag1
          solve( (#vl.1, 0) ~~> (#vk.1, 0) )
            case d_0_fst
            by contradiction /* impossible chain */
          next
            case d_0_snd
            by solve( (#vr.5, 0) ~~> (#vk.1, 0) )
          qed
        qed
      qed
    next
      case tag1_case_2
      solve( !KU( (~k⊕~r1⊕z) ) @ #vk.1 )
        case c_xor_case_1
        by contradiction /* cyclic */
      next
        case c_xor_case_2
        by solve( !KU( ~k ) @ #vk.4 )
      next
        case c_xor_case_3
        solve( !KU( (~k⊕~r1) ) @ #vk.4 )
          case c_xor
          by contradiction /* cyclic */
        next
          case coerce
          solve( !KD( (~k⊕~r1) ) ▶₀ #vk.2 )
            case acceptreader
            by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.1, 0) ~~> (#vk.2, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.5, 0) ~~> (#vk.2, 0) )
            qed
          qed
        qed
      next
        case coerce
        solve( !KD( (~k⊕~r1⊕z) ) ▶₀ #vk.1 )
          case acceptreader
          by solve( (#vl.1, 0) ~~> (#vk.1, 0) )
        next
          case initiatereader
          by contradiction /* impossible chain */
        next
          case tag1
          solve( (#vl.1, 0) ~~> (#vk.1, 0) )
            case d_0_fst
            by contradiction /* impossible chain */
          next
            case d_0_snd
            by solve( (#vr.5, 0) ~~> (#vk.1, 0) )
          qed
        qed
      qed
    qed
  next
    case split_case_8
    solve( splitEqs(1) )
      case split
      solve( !KU( h((x⊕h((~r1⊕x)))) ) @ #vk )
        case c_h
        solve( !KU( (~k⊕x) ) @ #vk.1 )
          case c_xor
          by solve( !KU( ~k ) @ #vk.4 )
        next
          case coerce
          solve( !KD( (~k⊕x) ) ▶₀ #vk.1 )
            case acceptreader
            by solve( (#vl, 0) ~~> (#vk.1, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl, 0) ~~> (#vk.1, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.3, 0) ~~> (#vk.1, 0) )
            qed
          qed
        qed
      next
        case tag1_case_1
        solve( !KU( (~k⊕x) ) @ #vk.1 )
          case c_xor
          by solve( !KU( ~k ) @ #vk.4 )
        next
          case coerce
          solve( !KD( (~k⊕x) ) ▶₀ #vk.1 )
            case acceptreader
            by solve( (#vl.1, 0) ~~> (#vk.1, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.1, 0) ~~> (#vk.1, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.5, 0) ~~> (#vk.1, 0) )
            qed
          qed
        qed
      next
        case tag1_case_2
        solve( !KU( (~k⊕x) ) @ #vk.1 )
          case c_xor
          by solve( !KU( ~k ) @ #vk.4 )
        next
          case coerce
          solve( !KD( (~k⊕x) ) ▶₀ #vk.1 )
            case acceptreader
            by solve( (#vl.1, 0) ~~> (#vk.1, 0) )
          next
            case initiatereader
            by contradiction /* impossible chain */
          next
            case tag1
            solve( (#vl.1, 0) ~~> (#vk.1, 0) )
              case d_0_fst
              by contradiction /* impossible chain */
            next
              case d_0_snd
              by solve( (#vr.5, 0) ~~> (#vk.1, 0) )
            qed
          qed
        qed
      qed
    qed
  qed
qed

/* All well-formedness checks were successful. */

diffLemma Observational_equivalence:
rule-equivalence
  case Rule_Destrd_0_fst
  backward-search
    case LHS
    step( simplify )
    step( solve( !KD( <x, x.1> ) ▶₀ #i ) )
      case acceptreader
      by step( solve( (#vl, 0) ~~> (#i, 0) ) )
    next
      case initiatereader
      by step( contradiction /* impossible chain */ )
    next
      case tag1
      step( solve( (#vl, 0) ~~> (#i, 0) ) )
        case d_0_fst
        by step( contradiction /* impossible chain */ )
      next
        case d_0_snd
        by step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
      next
        case pair
        step( solve( TagRun( ~k, phase ) ▶₀ #vr ) )
          case setup_case_1
          step( solve( splitEqs(0) ) )
            case split_case_1
            by step( solve( !KU( ~k ) @ #vk ) )
          next
            case split_case_2
            by step( contradiction /* cyclic */ )
          next
            case split_case_3
            MIRRORED
          next
            case split_case_4
            step( solve( !KU( zero ) @ #vk ) )
              case c_zero
              MIRRORED
            next
              case coerce
              step( solve( !KD( zero ) ▶₀ #vk ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.3, 0) ~~> (#vk, 0) ) )
                qed
              qed
            qed
          next
            case split_case_5
            step( solve( !KU( (~k⊕~r1) ) @ #vk ) )
              case c_xor
              by step( contradiction /* cyclic */ )
            next
              case coerce
              step( solve( !KD( (~k⊕~r1) ) ▶₀ #vk ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.3, 0) ~~> (#vk, 0) ) )
                qed
              qed
            qed
          next
            case split_case_6
            step( solve( !KU( (~k⊕~r1⊕z) ) @ #vk ) )
              case c_xor_case_1
              by step( contradiction /* cyclic */ )
            next
              case c_xor_case_2
              by step( solve( !KU( ~k ) @ #vk.2 ) )
            next
              case c_xor_case_3
              step( solve( !KU( (~k⊕~r1) ) @ #vk.2 ) )
                case c_xor
                by step( contradiction /* cyclic */ )
              next
                case coerce
                step( solve( !KD( (~k⊕~r1) ) ▶₀ #vk.1 ) )
                  case acceptreader
                  by step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                next
                  case initiatereader
                  by step( contradiction /* impossible chain */ )
                next
                  case tag1
                  step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                    case d_0_fst
                    by step( contradiction /* impossible chain */ )
                  next
                    case d_0_snd
                    by step( solve( (#vr.3, 0) ~~> (#vk.1, 0) ) )
                  qed
                qed
              qed
            next
              case coerce
              step( solve( !KD( (~k⊕~r1⊕z) ) ▶₀ #vk ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.3, 0) ~~> (#vk, 0) ) )
                qed
              qed
            qed
          next
            case split_case_7
            step( solve( !KU( (~r1⊕x) ) @ #vk ) )
              case c_xor
              by step( contradiction /* cyclic */ )
            next
              case coerce
              step( solve( !KD( (~r1⊕x) ) ▶₀ #vk ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.3, 0) ~~> (#vk, 0) ) )
                qed
              qed
            qed
          next
            case split_case_8
            step( solve( !KU( (~k⊕x) ) @ #vk ) )
              case c_xor
              by step( solve( !KU( ~k ) @ #vk.2 ) )
            next
              case coerce
              step( solve( !KD( (~k⊕x) ) ▶₀ #vk ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.3, 0) ~~> (#vk, 0) ) )
                qed
              qed
            qed
          qed
        next
          case setup_case_2
          step( solve( splitEqs(0) ) )
            case split_case_1
            by step( solve( !KU( ~k ) @ #vk ) )
          next
            case split_case_2
            by step( contradiction /* cyclic */ )
          next
            case split_case_3
            MIRRORED
          next
            case split_case_4
            step( solve( !KU( zero ) @ #vk ) )
              case c_zero
              MIRRORED
            next
              case coerce
              step( solve( !KD( zero ) ▶₀ #vk ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.3, 0) ~~> (#vk, 0) ) )
                qed
              qed
            qed
          next
            case split_case_5
            step( solve( !KU( (~k⊕~r1) ) @ #vk ) )
              case c_xor
              by step( contradiction /* cyclic */ )
            next
              case coerce
              step( solve( !KD( (~k⊕~r1) ) ▶₀ #vk ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.3, 0) ~~> (#vk, 0) ) )
                qed
              qed
            qed
          next
            case split_case_6
            step( solve( !KU( (~k⊕~r1⊕z) ) @ #vk ) )
              case c_xor_case_1
              by step( contradiction /* cyclic */ )
            next
              case c_xor_case_2
              by step( solve( !KU( ~k ) @ #vk.2 ) )
            next
              case c_xor_case_3
              step( solve( !KU( (~k⊕~r1) ) @ #vk.2 ) )
                case c_xor
                by step( contradiction /* cyclic */ )
              next
                case coerce
                step( solve( !KD( (~k⊕~r1) ) ▶₀ #vk.1 ) )
                  case acceptreader
                  by step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                next
                  case initiatereader
                  by step( contradiction /* impossible chain */ )
                next
                  case tag1
                  step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                    case d_0_fst
                    by step( contradiction /* impossible chain */ )
                  next
                    case d_0_snd
                    by step( solve( (#vr.3, 0) ~~> (#vk.1, 0) ) )
                  qed
                qed
              qed
            next
              case coerce
              step( solve( !KD( (~k⊕~r1⊕z) ) ▶₀ #vk ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.3, 0) ~~> (#vk, 0) ) )
                qed
              qed
            qed
          next
            case split_case_7
            step( solve( !KU( (~r1⊕x) ) @ #vk ) )
              case c_xor
              by step( contradiction /* cyclic */ )
            next
              case coerce
              step( solve( !KD( (~r1⊕x) ) ▶₀ #vk ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.3, 0) ~~> (#vk, 0) ) )
                qed
              qed
            qed
          next
            case split_case_8
            step( solve( !KU( (~k⊕x) ) @ #vk ) )
              case c_xor
              by step( solve( !KU( ~k ) @ #vk.2 ) )
            next
              case coerce
              step( solve( !KD( (~k⊕x) ) ▶₀ #vk ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.3, 0) ~~> (#vk, 0) ) )
                qed
              qed
            qed
          qed
        next
          case setup_case_3
          step( solve( splitEqs(0) ) )
            case split_case_1
            by step( solve( !KU( ~k ) @ #vk ) )
          next
            case split_case_2
            by step( contradiction /* cyclic */ )
          next
            case split_case_3
            MIRRORED
          next
            case split_case_4
            step( solve( !KU( zero ) @ #vk ) )
              case c_zero
              MIRRORED
            next
              case coerce
              step( solve( !KD( zero ) ▶₀ #vk ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.3, 0) ~~> (#vk, 0) ) )
                qed
              qed
            qed
          next
            case split_case_5
            step( solve( !KU( (~k⊕~r1) ) @ #vk ) )
              case c_xor
              by step( contradiction /* cyclic */ )
            next
              case coerce
              step( solve( !KD( (~k⊕~r1) ) ▶₀ #vk ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.3, 0) ~~> (#vk, 0) ) )
                qed
              qed
            qed
          next
            case split_case_6
            step( solve( !KU( (~k⊕~r1⊕z) ) @ #vk ) )
              case c_xor_case_1
              by step( contradiction /* cyclic */ )
            next
              case c_xor_case_2
              by step( solve( !KU( ~k ) @ #vk.2 ) )
            next
              case c_xor_case_3
              step( solve( !KU( (~k⊕~r1) ) @ #vk.2 ) )
                case c_xor
                by step( contradiction /* cyclic */ )
              next
                case coerce
                step( solve( !KD( (~k⊕~r1) ) ▶₀ #vk.1 ) )
                  case acceptreader
                  by step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                next
                  case initiatereader
                  by step( contradiction /* impossible chain */ )
                next
                  case tag1
                  step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                    case d_0_fst
                    by step( contradiction /* impossible chain */ )
                  next
                    case d_0_snd
                    by step( solve( (#vr.3, 0) ~~> (#vk.1, 0) ) )
                  qed
                qed
              qed
            next
              case coerce
              step( solve( !KD( (~k⊕~r1⊕z) ) ▶₀ #vk ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.3, 0) ~~> (#vk, 0) ) )
                qed
              qed
            qed
          next
            case split_case_7
            step( solve( !KU( (~r1⊕x) ) @ #vk ) )
              case c_xor
              by step( contradiction /* cyclic */ )
            next
              case coerce
              step( solve( !KD( (~r1⊕x) ) ▶₀ #vk ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.3, 0) ~~> (#vk, 0) ) )
                qed
              qed
            qed
          next
            case split_case_8
            step( solve( !KU( (~k⊕x) ) @ #vk ) )
              case c_xor
              by step( solve( !KU( ~k ) @ #vk.2 ) )
            next
              case coerce
              step( solve( !KD( (~k⊕x) ) ▶₀ #vk ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.3, 0) ~~> (#vk, 0) ) )
                qed
              qed
            qed
          qed
        qed
      qed
    qed
  next
    case RHS
    step( simplify )
    step( solve( !KD( <x, x.1> ) ▶₀ #i ) )
      case acceptreader
      by step( solve( (#vl, 0) ~~> (#i, 0) ) )
    next
      case initiatereader
      by step( contradiction /* impossible chain */ )
    next
      case tag1
      step( solve( (#vl, 0) ~~> (#i, 0) ) )
        case d_0_fst
        by step( contradiction /* impossible chain */ )
      next
        case d_0_snd
        by step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
      next
        case pair
        step( solve( TagRun( ~k, phase ) ▶₀ #vr ) )
          case setup_case_1
          step( solve( splitEqs(0) ) )
            case split_case_1
            by step( solve( !KU( ~k ) @ #vk ) )
          next
            case split_case_2
            by step( contradiction /* cyclic */ )
          next
            case split_case_3
            MIRRORED
          next
            case split_case_4
            step( solve( !KU( zero ) @ #vk ) )
              case c_zero
              MIRRORED
            next
              case coerce
              step( solve( !KD( zero ) ▶₀ #vk ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.3, 0) ~~> (#vk, 0) ) )
                qed
              qed
            qed
          next
            case split_case_5
            step( solve( !KU( (~k⊕~r1) ) @ #vk ) )
              case c_xor
              by step( contradiction /* cyclic */ )
            next
              case coerce
              step( solve( !KD( (~k⊕~r1) ) ▶₀ #vk ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.3, 0) ~~> (#vk, 0) ) )
                qed
              qed
            qed
          next
            case split_case_6
            step( solve( !KU( (~k⊕~r1⊕z) ) @ #vk ) )
              case c_xor_case_1
              by step( contradiction /* cyclic */ )
            next
              case c_xor_case_2
              by step( solve( !KU( ~k ) @ #vk.2 ) )
            next
              case c_xor_case_3
              step( solve( !KU( (~k⊕~r1) ) @ #vk.2 ) )
                case c_xor
                by step( contradiction /* cyclic */ )
              next
                case coerce
                step( solve( !KD( (~k⊕~r1) ) ▶₀ #vk.1 ) )
                  case acceptreader
                  by step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                next
                  case initiatereader
                  by step( contradiction /* impossible chain */ )
                next
                  case tag1
                  step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                    case d_0_fst
                    by step( contradiction /* impossible chain */ )
                  next
                    case d_0_snd
                    by step( solve( (#vr.3, 0) ~~> (#vk.1, 0) ) )
                  qed
                qed
              qed
            next
              case coerce
              step( solve( !KD( (~k⊕~r1⊕z) ) ▶₀ #vk ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.3, 0) ~~> (#vk, 0) ) )
                qed
              qed
            qed
          next
            case split_case_7
            step( solve( !KU( (~r1⊕x) ) @ #vk ) )
              case c_xor
              by step( contradiction /* cyclic */ )
            next
              case coerce
              step( solve( !KD( (~r1⊕x) ) ▶₀ #vk ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.3, 0) ~~> (#vk, 0) ) )
                qed
              qed
            qed
          next
            case split_case_8
            step( solve( !KU( (~k⊕x) ) @ #vk ) )
              case c_xor
              by step( solve( !KU( ~k ) @ #vk.2 ) )
            next
              case coerce
              step( solve( !KD( (~k⊕x) ) ▶₀ #vk ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.3, 0) ~~> (#vk, 0) ) )
                qed
              qed
            qed
          qed
        next
          case setup_case_2
          step( solve( splitEqs(0) ) )
            case split_case_1
            by step( solve( !KU( ~k ) @ #vk ) )
          next
            case split_case_2
            by step( contradiction /* cyclic */ )
          next
            case split_case_3
            MIRRORED
          next
            case split_case_4
            step( solve( !KU( zero ) @ #vk ) )
              case c_zero
              MIRRORED
            next
              case coerce
              step( solve( !KD( zero ) ▶₀ #vk ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.3, 0) ~~> (#vk, 0) ) )
                qed
              qed
            qed
          next
            case split_case_5
            step( solve( !KU( (~k⊕~r1) ) @ #vk ) )
              case c_xor
              by step( contradiction /* cyclic */ )
            next
              case coerce
              step( solve( !KD( (~k⊕~r1) ) ▶₀ #vk ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.3, 0) ~~> (#vk, 0) ) )
                qed
              qed
            qed
          next
            case split_case_6
            step( solve( !KU( (~k⊕~r1⊕z) ) @ #vk ) )
              case c_xor_case_1
              by step( contradiction /* cyclic */ )
            next
              case c_xor_case_2
              by step( solve( !KU( ~k ) @ #vk.2 ) )
            next
              case c_xor_case_3
              step( solve( !KU( (~k⊕~r1) ) @ #vk.2 ) )
                case c_xor
                by step( contradiction /* cyclic */ )
              next
                case coerce
                step( solve( !KD( (~k⊕~r1) ) ▶₀ #vk.1 ) )
                  case acceptreader
                  by step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                next
                  case initiatereader
                  by step( contradiction /* impossible chain */ )
                next
                  case tag1
                  step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                    case d_0_fst
                    by step( contradiction /* impossible chain */ )
                  next
                    case d_0_snd
                    by step( solve( (#vr.3, 0) ~~> (#vk.1, 0) ) )
                  qed
                qed
              qed
            next
              case coerce
              step( solve( !KD( (~k⊕~r1⊕z) ) ▶₀ #vk ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.3, 0) ~~> (#vk, 0) ) )
                qed
              qed
            qed
          next
            case split_case_7
            step( solve( !KU( (~r1⊕x) ) @ #vk ) )
              case c_xor
              by step( contradiction /* cyclic */ )
            next
              case coerce
              step( solve( !KD( (~r1⊕x) ) ▶₀ #vk ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.3, 0) ~~> (#vk, 0) ) )
                qed
              qed
            qed
          next
            case split_case_8
            step( solve( !KU( (~k⊕x) ) @ #vk ) )
              case c_xor
              by step( solve( !KU( ~k ) @ #vk.2 ) )
            next
              case coerce
              step( solve( !KD( (~k⊕x) ) ▶₀ #vk ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.3, 0) ~~> (#vk, 0) ) )
                qed
              qed
            qed
          qed
        next
          case setup_case_3
          step( solve( splitEqs(0) ) )
            case split_case_1
            by step( solve( !KU( ~k ) @ #vk ) )
          next
            case split_case_2
            by step( contradiction /* cyclic */ )
          next
            case split_case_3
            MIRRORED
          next
            case split_case_4
            step( solve( !KU( zero ) @ #vk ) )
              case c_zero
              MIRRORED
            next
              case coerce
              step( solve( !KD( zero ) ▶₀ #vk ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.3, 0) ~~> (#vk, 0) ) )
                qed
              qed
            qed
          next
            case split_case_5
            step( solve( !KU( (~k⊕~r1) ) @ #vk ) )
              case c_xor
              by step( contradiction /* cyclic */ )
            next
              case coerce
              step( solve( !KD( (~k⊕~r1) ) ▶₀ #vk ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.3, 0) ~~> (#vk, 0) ) )
                qed
              qed
            qed
          next
            case split_case_6
            step( solve( !KU( (~k⊕~r1⊕z) ) @ #vk ) )
              case c_xor_case_1
              by step( contradiction /* cyclic */ )
            next
              case c_xor_case_2
              by step( solve( !KU( ~k ) @ #vk.2 ) )
            next
              case c_xor_case_3
              step( solve( !KU( (~k⊕~r1) ) @ #vk.2 ) )
                case c_xor
                by step( contradiction /* cyclic */ )
              next
                case coerce
                step( solve( !KD( (~k⊕~r1) ) ▶₀ #vk.1 ) )
                  case acceptreader
                  by step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                next
                  case initiatereader
                  by step( contradiction /* impossible chain */ )
                next
                  case tag1
                  step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                    case d_0_fst
                    by step( contradiction /* impossible chain */ )
                  next
                    case d_0_snd
                    by step( solve( (#vr.3, 0) ~~> (#vk.1, 0) ) )
                  qed
                qed
              qed
            next
              case coerce
              step( solve( !KD( (~k⊕~r1⊕z) ) ▶₀ #vk ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.3, 0) ~~> (#vk, 0) ) )
                qed
              qed
            qed
          next
            case split_case_7
            step( solve( !KU( (~r1⊕x) ) @ #vk ) )
              case c_xor
              by step( contradiction /* cyclic */ )
            next
              case coerce
              step( solve( !KD( (~r1⊕x) ) ▶₀ #vk ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.3, 0) ~~> (#vk, 0) ) )
                qed
              qed
            qed
          next
            case split_case_8
            step( solve( !KU( (~k⊕x) ) @ #vk ) )
              case c_xor
              by step( solve( !KU( ~k ) @ #vk.2 ) )
            next
              case coerce
              step( solve( !KD( (~k⊕x) ) ▶₀ #vk ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.3, 0) ~~> (#vk, 0) ) )
                qed
              qed
            qed
          qed
        qed
      qed
    qed
  qed
next
  case Rule_Destrd_0_snd
  backward-search
    case LHS
    step( simplify )
    step( solve( !KD( <x, x.1> ) ▶₀ #i ) )
      case acceptreader
      by step( solve( (#vl, 0) ~~> (#i, 0) ) )
    next
      case initiatereader
      by step( contradiction /* impossible chain */ )
    next
      case tag1
      step( solve( (#vl, 0) ~~> (#i, 0) ) )
        case d_0_fst
        by step( contradiction /* impossible chain */ )
      next
        case d_0_snd
        by step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
      next
        case pair
        step( solve( TagRun( ~k, phase ) ▶₀ #vr ) )
          case setup_case_1
          step( solve( splitEqs(0) ) )
            case split_case_1
            by step( solve( !KU( ~k ) @ #vk ) )
          next
            case split_case_2
            by step( contradiction /* cyclic */ )
          next
            case split_case_3
            MIRRORED
          next
            case split_case_4
            step( solve( !KU( zero ) @ #vk ) )
              case c_zero
              MIRRORED
            next
              case coerce
              step( solve( !KD( zero ) ▶₀ #vk ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.3, 0) ~~> (#vk, 0) ) )
                qed
              qed
            qed
          next
            case split_case_5
            step( solve( !KU( (~k⊕~r1) ) @ #vk ) )
              case c_xor
              by step( contradiction /* cyclic */ )
            next
              case coerce
              step( solve( !KD( (~k⊕~r1) ) ▶₀ #vk ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.3, 0) ~~> (#vk, 0) ) )
                qed
              qed
            qed
          next
            case split_case_6
            step( solve( !KU( (~k⊕~r1⊕z) ) @ #vk ) )
              case c_xor_case_1
              by step( contradiction /* cyclic */ )
            next
              case c_xor_case_2
              by step( solve( !KU( ~k ) @ #vk.2 ) )
            next
              case c_xor_case_3
              step( solve( !KU( (~k⊕~r1) ) @ #vk.2 ) )
                case c_xor
                by step( contradiction /* cyclic */ )
              next
                case coerce
                step( solve( !KD( (~k⊕~r1) ) ▶₀ #vk.1 ) )
                  case acceptreader
                  by step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                next
                  case initiatereader
                  by step( contradiction /* impossible chain */ )
                next
                  case tag1
                  step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                    case d_0_fst
                    by step( contradiction /* impossible chain */ )
                  next
                    case d_0_snd
                    by step( solve( (#vr.3, 0) ~~> (#vk.1, 0) ) )
                  qed
                qed
              qed
            next
              case coerce
              step( solve( !KD( (~k⊕~r1⊕z) ) ▶₀ #vk ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.3, 0) ~~> (#vk, 0) ) )
                qed
              qed
            qed
          next
            case split_case_7
            step( solve( !KU( (~r1⊕x) ) @ #vk ) )
              case c_xor
              by step( contradiction /* cyclic */ )
            next
              case coerce
              step( solve( !KD( (~r1⊕x) ) ▶₀ #vk ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.3, 0) ~~> (#vk, 0) ) )
                qed
              qed
            qed
          next
            case split_case_8
            step( solve( !KU( (~k⊕x) ) @ #vk ) )
              case c_xor
              by step( solve( !KU( ~k ) @ #vk.2 ) )
            next
              case coerce
              step( solve( !KD( (~k⊕x) ) ▶₀ #vk ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.3, 0) ~~> (#vk, 0) ) )
                qed
              qed
            qed
          qed
        next
          case setup_case_2
          step( solve( splitEqs(0) ) )
            case split_case_1
            by step( solve( !KU( ~k ) @ #vk ) )
          next
            case split_case_2
            by step( contradiction /* cyclic */ )
          next
            case split_case_3
            MIRRORED
          next
            case split_case_4
            step( solve( !KU( zero ) @ #vk ) )
              case c_zero
              MIRRORED
            next
              case coerce
              step( solve( !KD( zero ) ▶₀ #vk ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.3, 0) ~~> (#vk, 0) ) )
                qed
              qed
            qed
          next
            case split_case_5
            step( solve( !KU( (~k⊕~r1) ) @ #vk ) )
              case c_xor
              by step( contradiction /* cyclic */ )
            next
              case coerce
              step( solve( !KD( (~k⊕~r1) ) ▶₀ #vk ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.3, 0) ~~> (#vk, 0) ) )
                qed
              qed
            qed
          next
            case split_case_6
            step( solve( !KU( (~k⊕~r1⊕z) ) @ #vk ) )
              case c_xor_case_1
              by step( contradiction /* cyclic */ )
            next
              case c_xor_case_2
              by step( solve( !KU( ~k ) @ #vk.2 ) )
            next
              case c_xor_case_3
              step( solve( !KU( (~k⊕~r1) ) @ #vk.2 ) )
                case c_xor
                by step( contradiction /* cyclic */ )
              next
                case coerce
                step( solve( !KD( (~k⊕~r1) ) ▶₀ #vk.1 ) )
                  case acceptreader
                  by step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                next
                  case initiatereader
                  by step( contradiction /* impossible chain */ )
                next
                  case tag1
                  step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                    case d_0_fst
                    by step( contradiction /* impossible chain */ )
                  next
                    case d_0_snd
                    by step( solve( (#vr.3, 0) ~~> (#vk.1, 0) ) )
                  qed
                qed
              qed
            next
              case coerce
              step( solve( !KD( (~k⊕~r1⊕z) ) ▶₀ #vk ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.3, 0) ~~> (#vk, 0) ) )
                qed
              qed
            qed
          next
            case split_case_7
            step( solve( !KU( (~r1⊕x) ) @ #vk ) )
              case c_xor
              by step( contradiction /* cyclic */ )
            next
              case coerce
              step( solve( !KD( (~r1⊕x) ) ▶₀ #vk ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.3, 0) ~~> (#vk, 0) ) )
                qed
              qed
            qed
          next
            case split_case_8
            step( solve( !KU( (~k⊕x) ) @ #vk ) )
              case c_xor
              by step( solve( !KU( ~k ) @ #vk.2 ) )
            next
              case coerce
              step( solve( !KD( (~k⊕x) ) ▶₀ #vk ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.3, 0) ~~> (#vk, 0) ) )
                qed
              qed
            qed
          qed
        next
          case setup_case_3
          step( solve( splitEqs(0) ) )
            case split_case_1
            by step( solve( !KU( ~k ) @ #vk ) )
          next
            case split_case_2
            by step( contradiction /* cyclic */ )
          next
            case split_case_3
            MIRRORED
          next
            case split_case_4
            step( solve( !KU( zero ) @ #vk ) )
              case c_zero
              MIRRORED
            next
              case coerce
              step( solve( !KD( zero ) ▶₀ #vk ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.3, 0) ~~> (#vk, 0) ) )
                qed
              qed
            qed
          next
            case split_case_5
            step( solve( !KU( (~k⊕~r1) ) @ #vk ) )
              case c_xor
              by step( contradiction /* cyclic */ )
            next
              case coerce
              step( solve( !KD( (~k⊕~r1) ) ▶₀ #vk ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.3, 0) ~~> (#vk, 0) ) )
                qed
              qed
            qed
          next
            case split_case_6
            step( solve( !KU( (~k⊕~r1⊕z) ) @ #vk ) )
              case c_xor_case_1
              by step( contradiction /* cyclic */ )
            next
              case c_xor_case_2
              by step( solve( !KU( ~k ) @ #vk.2 ) )
            next
              case c_xor_case_3
              step( solve( !KU( (~k⊕~r1) ) @ #vk.2 ) )
                case c_xor
                by step( contradiction /* cyclic */ )
              next
                case coerce
                step( solve( !KD( (~k⊕~r1) ) ▶₀ #vk.1 ) )
                  case acceptreader
                  by step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                next
                  case initiatereader
                  by step( contradiction /* impossible chain */ )
                next
                  case tag1
                  step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                    case d_0_fst
                    by step( contradiction /* impossible chain */ )
                  next
                    case d_0_snd
                    by step( solve( (#vr.3, 0) ~~> (#vk.1, 0) ) )
                  qed
                qed
              qed
            next
              case coerce
              step( solve( !KD( (~k⊕~r1⊕z) ) ▶₀ #vk ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.3, 0) ~~> (#vk, 0) ) )
                qed
              qed
            qed
          next
            case split_case_7
            step( solve( !KU( (~r1⊕x) ) @ #vk ) )
              case c_xor
              by step( contradiction /* cyclic */ )
            next
              case coerce
              step( solve( !KD( (~r1⊕x) ) ▶₀ #vk ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.3, 0) ~~> (#vk, 0) ) )
                qed
              qed
            qed
          next
            case split_case_8
            step( solve( !KU( (~k⊕x) ) @ #vk ) )
              case c_xor
              by step( solve( !KU( ~k ) @ #vk.2 ) )
            next
              case coerce
              step( solve( !KD( (~k⊕x) ) ▶₀ #vk ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.3, 0) ~~> (#vk, 0) ) )
                qed
              qed
            qed
          qed
        qed
      qed
    qed
  next
    case RHS
    step( simplify )
    step( solve( !KD( <x, x.1> ) ▶₀ #i ) )
      case acceptreader
      by step( solve( (#vl, 0) ~~> (#i, 0) ) )
    next
      case initiatereader
      by step( contradiction /* impossible chain */ )
    next
      case tag1
      step( solve( (#vl, 0) ~~> (#i, 0) ) )
        case d_0_fst
        by step( contradiction /* impossible chain */ )
      next
        case d_0_snd
        by step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
      next
        case pair
        step( solve( TagRun( ~k, phase ) ▶₀ #vr ) )
          case setup_case_1
          step( solve( splitEqs(0) ) )
            case split_case_1
            by step( solve( !KU( ~k ) @ #vk ) )
          next
            case split_case_2
            by step( contradiction /* cyclic */ )
          next
            case split_case_3
            MIRRORED
          next
            case split_case_4
            step( solve( !KU( zero ) @ #vk ) )
              case c_zero
              MIRRORED
            next
              case coerce
              step( solve( !KD( zero ) ▶₀ #vk ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.3, 0) ~~> (#vk, 0) ) )
                qed
              qed
            qed
          next
            case split_case_5
            step( solve( !KU( (~k⊕~r1) ) @ #vk ) )
              case c_xor
              by step( contradiction /* cyclic */ )
            next
              case coerce
              step( solve( !KD( (~k⊕~r1) ) ▶₀ #vk ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.3, 0) ~~> (#vk, 0) ) )
                qed
              qed
            qed
          next
            case split_case_6
            step( solve( !KU( (~k⊕~r1⊕z) ) @ #vk ) )
              case c_xor_case_1
              by step( contradiction /* cyclic */ )
            next
              case c_xor_case_2
              by step( solve( !KU( ~k ) @ #vk.2 ) )
            next
              case c_xor_case_3
              step( solve( !KU( (~k⊕~r1) ) @ #vk.2 ) )
                case c_xor
                by step( contradiction /* cyclic */ )
              next
                case coerce
                step( solve( !KD( (~k⊕~r1) ) ▶₀ #vk.1 ) )
                  case acceptreader
                  by step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                next
                  case initiatereader
                  by step( contradiction /* impossible chain */ )
                next
                  case tag1
                  step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                    case d_0_fst
                    by step( contradiction /* impossible chain */ )
                  next
                    case d_0_snd
                    by step( solve( (#vr.3, 0) ~~> (#vk.1, 0) ) )
                  qed
                qed
              qed
            next
              case coerce
              step( solve( !KD( (~k⊕~r1⊕z) ) ▶₀ #vk ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.3, 0) ~~> (#vk, 0) ) )
                qed
              qed
            qed
          next
            case split_case_7
            step( solve( !KU( (~r1⊕x) ) @ #vk ) )
              case c_xor
              by step( contradiction /* cyclic */ )
            next
              case coerce
              step( solve( !KD( (~r1⊕x) ) ▶₀ #vk ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.3, 0) ~~> (#vk, 0) ) )
                qed
              qed
            qed
          next
            case split_case_8
            step( solve( !KU( (~k⊕x) ) @ #vk ) )
              case c_xor
              by step( solve( !KU( ~k ) @ #vk.2 ) )
            next
              case coerce
              step( solve( !KD( (~k⊕x) ) ▶₀ #vk ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.3, 0) ~~> (#vk, 0) ) )
                qed
              qed
            qed
          qed
        next
          case setup_case_2
          step( solve( splitEqs(0) ) )
            case split_case_1
            by step( solve( !KU( ~k ) @ #vk ) )
          next
            case split_case_2
            by step( contradiction /* cyclic */ )
          next
            case split_case_3
            MIRRORED
          next
            case split_case_4
            step( solve( !KU( zero ) @ #vk ) )
              case c_zero
              MIRRORED
            next
              case coerce
              step( solve( !KD( zero ) ▶₀ #vk ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.3, 0) ~~> (#vk, 0) ) )
                qed
              qed
            qed
          next
            case split_case_5
            step( solve( !KU( (~k⊕~r1) ) @ #vk ) )
              case c_xor
              by step( contradiction /* cyclic */ )
            next
              case coerce
              step( solve( !KD( (~k⊕~r1) ) ▶₀ #vk ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.3, 0) ~~> (#vk, 0) ) )
                qed
              qed
            qed
          next
            case split_case_6
            step( solve( !KU( (~k⊕~r1⊕z) ) @ #vk ) )
              case c_xor_case_1
              by step( contradiction /* cyclic */ )
            next
              case c_xor_case_2
              by step( solve( !KU( ~k ) @ #vk.2 ) )
            next
              case c_xor_case_3
              step( solve( !KU( (~k⊕~r1) ) @ #vk.2 ) )
                case c_xor
                by step( contradiction /* cyclic */ )
              next
                case coerce
                step( solve( !KD( (~k⊕~r1) ) ▶₀ #vk.1 ) )
                  case acceptreader
                  by step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                next
                  case initiatereader
                  by step( contradiction /* impossible chain */ )
                next
                  case tag1
                  step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                    case d_0_fst
                    by step( contradiction /* impossible chain */ )
                  next
                    case d_0_snd
                    by step( solve( (#vr.3, 0) ~~> (#vk.1, 0) ) )
                  qed
                qed
              qed
            next
              case coerce
              step( solve( !KD( (~k⊕~r1⊕z) ) ▶₀ #vk ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.3, 0) ~~> (#vk, 0) ) )
                qed
              qed
            qed
          next
            case split_case_7
            step( solve( !KU( (~r1⊕x) ) @ #vk ) )
              case c_xor
              by step( contradiction /* cyclic */ )
            next
              case coerce
              step( solve( !KD( (~r1⊕x) ) ▶₀ #vk ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.3, 0) ~~> (#vk, 0) ) )
                qed
              qed
            qed
          next
            case split_case_8
            step( solve( !KU( (~k⊕x) ) @ #vk ) )
              case c_xor
              by step( solve( !KU( ~k ) @ #vk.2 ) )
            next
              case coerce
              step( solve( !KD( (~k⊕x) ) ▶₀ #vk ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.3, 0) ~~> (#vk, 0) ) )
                qed
              qed
            qed
          qed
        next
          case setup_case_3
          step( solve( splitEqs(0) ) )
            case split_case_1
            by step( solve( !KU( ~k ) @ #vk ) )
          next
            case split_case_2
            by step( contradiction /* cyclic */ )
          next
            case split_case_3
            MIRRORED
          next
            case split_case_4
            step( solve( !KU( zero ) @ #vk ) )
              case c_zero
              MIRRORED
            next
              case coerce
              step( solve( !KD( zero ) ▶₀ #vk ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.3, 0) ~~> (#vk, 0) ) )
                qed
              qed
            qed
          next
            case split_case_5
            step( solve( !KU( (~k⊕~r1) ) @ #vk ) )
              case c_xor
              by step( contradiction /* cyclic */ )
            next
              case coerce
              step( solve( !KD( (~k⊕~r1) ) ▶₀ #vk ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.3, 0) ~~> (#vk, 0) ) )
                qed
              qed
            qed
          next
            case split_case_6
            step( solve( !KU( (~k⊕~r1⊕z) ) @ #vk ) )
              case c_xor_case_1
              by step( contradiction /* cyclic */ )
            next
              case c_xor_case_2
              by step( solve( !KU( ~k ) @ #vk.2 ) )
            next
              case c_xor_case_3
              step( solve( !KU( (~k⊕~r1) ) @ #vk.2 ) )
                case c_xor
                by step( contradiction /* cyclic */ )
              next
                case coerce
                step( solve( !KD( (~k⊕~r1) ) ▶₀ #vk.1 ) )
                  case acceptreader
                  by step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                next
                  case initiatereader
                  by step( contradiction /* impossible chain */ )
                next
                  case tag1
                  step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                    case d_0_fst
                    by step( contradiction /* impossible chain */ )
                  next
                    case d_0_snd
                    by step( solve( (#vr.3, 0) ~~> (#vk.1, 0) ) )
                  qed
                qed
              qed
            next
              case coerce
              step( solve( !KD( (~k⊕~r1⊕z) ) ▶₀ #vk ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.3, 0) ~~> (#vk, 0) ) )
                qed
              qed
            qed
          next
            case split_case_7
            step( solve( !KU( (~r1⊕x) ) @ #vk ) )
              case c_xor
              by step( contradiction /* cyclic */ )
            next
              case coerce
              step( solve( !KD( (~r1⊕x) ) ▶₀ #vk ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.3, 0) ~~> (#vk, 0) ) )
                qed
              qed
            qed
          next
            case split_case_8
            step( solve( !KU( (~k⊕x) ) @ #vk ) )
              case c_xor
              by step( solve( !KU( ~k ) @ #vk.2 ) )
            next
              case coerce
              step( solve( !KD( (~k⊕x) ) ▶₀ #vk ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.3, 0) ~~> (#vk, 0) ) )
                qed
              qed
            qed
          qed
        qed
      qed
    qed
  qed
next
  case Rule_Destrd_union
  backward-search
    case LHS
    step( simplify )
    step( solve( !KD( (x+y) ) ▶₀ #i ) )
      case acceptreader
      by step( solve( (#vl, 0) ~~> (#i, 0) ) )
    next
      case initiatereader
      by step( contradiction /* impossible chain */ )
    next
      case tag1
      step( solve( (#vl, 0) ~~> (#i, 0) ) )
        case d_0_fst
        by step( contradiction /* impossible chain */ )
      next
        case d_0_snd
        by step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
      qed
    qed
  next
    case RHS
    step( simplify )
    step( solve( !KD( (x+y) ) ▶₀ #i ) )
      case acceptreader
      by step( solve( (#vl, 0) ~~> (#i, 0) ) )
    next
      case initiatereader
      by step( contradiction /* impossible chain */ )
    next
      case tag1
      step( solve( (#vl, 0) ~~> (#i, 0) ) )
        case d_0_fst
        by step( contradiction /* impossible chain */ )
      next
        case d_0_snd
        by step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
      qed
    qed
  qed
next
  case Rule_Destrd_xor
  backward-search
    case LHS
    step( simplify )
    step( solve( DiffIntrDestrd_xor( ) @ #i ) )
      case d_xor_case_1
      step( solve( !KD( (x⊕y) ) ▶₀ #i ) )
        case acceptreader
        by step( solve( (#vl, 0) ~~> (#i, 0) ) )
      next
        case initiatereader
        by step( contradiction /* impossible chain */ )
      next
        case tag1
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_0_fst
          by step( contradiction /* impossible chain */ )
        next
          case d_0_snd
          by step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
        qed
      qed
    next
      case d_xor_case_2
      step( solve( !KD( (x⊕y) ) ▶₀ #i ) )
        case acceptreader
        by step( solve( (#vl, 0) ~~> (#i, 0) ) )
      next
        case initiatereader
        by step( contradiction /* impossible chain */ )
      next
        case tag1
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_0_fst
          by step( contradiction /* impossible chain */ )
        next
          case d_0_snd
          by step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
        qed
      qed
    qed
  next
    case RHS
    step( simplify )
    step( solve( DiffIntrDestrd_xor( ) @ #i ) )
      case d_xor_case_1
      step( solve( !KD( (x⊕y) ) ▶₀ #i ) )
        case acceptreader
        by step( solve( (#vl, 0) ~~> (#i, 0) ) )
      next
        case initiatereader
        by step( contradiction /* impossible chain */ )
      next
        case tag1
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_0_fst
          by step( contradiction /* impossible chain */ )
        next
          case d_0_snd
          by step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
        qed
      qed
    next
      case d_xor_case_2
      step( solve( !KD( (x⊕y) ) ▶₀ #i ) )
        case acceptreader
        by step( solve( (#vl, 0) ~~> (#i, 0) ) )
      next
        case initiatereader
        by step( contradiction /* impossible chain */ )
      next
        case tag1
        step( solve( (#vl, 0) ~~> (#i, 0) ) )
          case d_0_fst
          by step( contradiction /* impossible chain */ )
        next
          case d_0_snd
          by step( solve( (#vr.1, 0) ~~> (#i, 0) ) )
        qed
      qed
    qed
  qed
next
  case Rule_Equality
  backward-search
    case LHS
    step( simplify )
    step( solve( !KD( x ) ▶₁ #i ) )
      case acceptreader
      step( solve( (#vl, 0) ~~> (#i, 1) ) )
        case h
        by step( solve( ReaderState1( ~k, ~r0, phase ) ▶₀ #vr ) )
      qed
    next
      case initiatereader
      step( solve( (#vl, 0) ~~> (#i, 1) ) )
        case Var_fresh_r0
        by step( solve( ReaderRun( ~k, phase ) ▶₀ #vr ) )
      qed
    next
      case tag1
      step( solve( (#vl, 0) ~~> (#i, 1) ) )
        case d_0_fst
        step( solve( (#vr.1, 0) ~~> (#i, 1) ) )
          case Var_fresh_r1
          step( solve( TagRun( ~k, phase ) ▶₀ #vr ) )
            case setup_case_1
            step( solve( !KU( ~r1 ) @ #vk ) )
              case tag1
              step( solve( splitEqs(0) ) )
                case split_case_1
                by step( solve( !KU( ~k ) @ #vk.1 ) )
              next
                case split_case_2
                MIRRORED
              next
                case split_case_3
                MIRRORED
              next
                case split_case_4
                step( solve( !KU( zero ) @ #vk.1 ) )
                  case c_zero
                  MIRRORED
                next
                  case coerce
                  step( solve( !KD( zero ) ▶₀ #vk.1 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.5, 0) ~~> (#vk.1, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_5
                step( solve( !KU( (~k⊕~r1) ) @ #vk.1 ) )
                  case c_xor
                  by step( contradiction /* cyclic */ )
                next
                  case coerce
                  step( solve( !KD( (~k⊕~r1) ) ▶₀ #vk.1 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.5, 0) ~~> (#vk.1, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_6
                step( solve( !KU( (~k⊕~r1⊕z) ) @ #vk.1 ) )
                  case c_xor_case_1
                  by step( contradiction /* cyclic */ )
                next
                  case c_xor_case_2
                  by step( solve( !KU( ~k ) @ #vk.3 ) )
                next
                  case c_xor_case_3
                  step( solve( !KU( (~k⊕~r1) ) @ #vk.3 ) )
                    case c_xor
                    by step( contradiction /* cyclic */ )
                  next
                    case coerce
                    step( solve( !KD( (~k⊕~r1) ) ▶₀ #vk.2 ) )
                      case acceptreader
                      by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.5, 0) ~~> (#vk.2, 0) ) )
                      qed
                    qed
                  qed
                next
                  case coerce
                  step( solve( !KD( (~k⊕~r1⊕z) ) ▶₀ #vk.1 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.5, 0) ~~> (#vk.1, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_7
                step( solve( !KU( (~r1⊕x) ) @ #vk.1 ) )
                  case c_xor
                  by step( contradiction /* cyclic */ )
                next
                  case coerce
                  step( solve( !KD( (~r1⊕x) ) ▶₀ #vk.1 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.5, 0) ~~> (#vk.1, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_8
                step( solve( !KU( (~k⊕x) ) @ #vk.1 ) )
                  case c_xor
                  by step( solve( !KU( ~k ) @ #vk.3 ) )
                next
                  case coerce
                  step( solve( !KD( (~k⊕x) ) ▶₀ #vk.1 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.5, 0) ~~> (#vk.1, 0) ) )
                    qed
                  qed
                qed
              qed
            qed
          next
            case setup_case_2
            step( solve( !KU( ~r1 ) @ #vk ) )
              case tag1
              step( solve( splitEqs(0) ) )
                case split_case_1
                by step( solve( !KU( ~k ) @ #vk.1 ) )
              next
                case split_case_2
                MIRRORED
              next
                case split_case_3
                MIRRORED
              next
                case split_case_4
                step( solve( !KU( zero ) @ #vk.1 ) )
                  case c_zero
                  MIRRORED
                next
                  case coerce
                  step( solve( !KD( zero ) ▶₀ #vk.1 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.5, 0) ~~> (#vk.1, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_5
                step( solve( !KU( (~k⊕~r1) ) @ #vk.1 ) )
                  case c_xor
                  by step( contradiction /* cyclic */ )
                next
                  case coerce
                  step( solve( !KD( (~k⊕~r1) ) ▶₀ #vk.1 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.5, 0) ~~> (#vk.1, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_6
                step( solve( !KU( (~k⊕~r1⊕z) ) @ #vk.1 ) )
                  case c_xor_case_1
                  by step( contradiction /* cyclic */ )
                next
                  case c_xor_case_2
                  by step( solve( !KU( ~k ) @ #vk.3 ) )
                next
                  case c_xor_case_3
                  step( solve( !KU( (~k⊕~r1) ) @ #vk.3 ) )
                    case c_xor
                    by step( contradiction /* cyclic */ )
                  next
                    case coerce
                    step( solve( !KD( (~k⊕~r1) ) ▶₀ #vk.2 ) )
                      case acceptreader
                      by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.5, 0) ~~> (#vk.2, 0) ) )
                      qed
                    qed
                  qed
                next
                  case coerce
                  step( solve( !KD( (~k⊕~r1⊕z) ) ▶₀ #vk.1 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.5, 0) ~~> (#vk.1, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_7
                step( solve( !KU( (~r1⊕x) ) @ #vk.1 ) )
                  case c_xor
                  by step( contradiction /* cyclic */ )
                next
                  case coerce
                  step( solve( !KD( (~r1⊕x) ) ▶₀ #vk.1 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.5, 0) ~~> (#vk.1, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_8
                step( solve( !KU( (~k⊕x) ) @ #vk.1 ) )
                  case c_xor
                  by step( solve( !KU( ~k ) @ #vk.3 ) )
                next
                  case coerce
                  step( solve( !KD( (~k⊕x) ) ▶₀ #vk.1 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.5, 0) ~~> (#vk.1, 0) ) )
                    qed
                  qed
                qed
              qed
            qed
          next
            case setup_case_3
            step( solve( !KU( ~r1 ) @ #vk ) )
              case tag1
              step( solve( splitEqs(0) ) )
                case split_case_1
                by step( solve( !KU( ~k ) @ #vk.1 ) )
              next
                case split_case_2
                MIRRORED
              next
                case split_case_3
                MIRRORED
              next
                case split_case_4
                step( solve( !KU( zero ) @ #vk.1 ) )
                  case c_zero
                  MIRRORED
                next
                  case coerce
                  step( solve( !KD( zero ) ▶₀ #vk.1 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.5, 0) ~~> (#vk.1, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_5
                step( solve( !KU( (~k⊕~r1) ) @ #vk.1 ) )
                  case c_xor
                  by step( contradiction /* cyclic */ )
                next
                  case coerce
                  step( solve( !KD( (~k⊕~r1) ) ▶₀ #vk.1 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.5, 0) ~~> (#vk.1, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_6
                step( solve( !KU( (~k⊕~r1⊕z) ) @ #vk.1 ) )
                  case c_xor_case_1
                  by step( contradiction /* cyclic */ )
                next
                  case c_xor_case_2
                  by step( solve( !KU( ~k ) @ #vk.3 ) )
                next
                  case c_xor_case_3
                  step( solve( !KU( (~k⊕~r1) ) @ #vk.3 ) )
                    case c_xor
                    by step( contradiction /* cyclic */ )
                  next
                    case coerce
                    step( solve( !KD( (~k⊕~r1) ) ▶₀ #vk.2 ) )
                      case acceptreader
                      by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.5, 0) ~~> (#vk.2, 0) ) )
                      qed
                    qed
                  qed
                next
                  case coerce
                  step( solve( !KD( (~k⊕~r1⊕z) ) ▶₀ #vk.1 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.5, 0) ~~> (#vk.1, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_7
                step( solve( !KU( (~r1⊕x) ) @ #vk.1 ) )
                  case c_xor
                  by step( contradiction /* cyclic */ )
                next
                  case coerce
                  step( solve( !KD( (~r1⊕x) ) ▶₀ #vk.1 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.5, 0) ~~> (#vk.1, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_8
                step( solve( !KU( (~k⊕x) ) @ #vk.1 ) )
                  case c_xor
                  by step( solve( !KU( ~k ) @ #vk.3 ) )
                next
                  case coerce
                  step( solve( !KD( (~k⊕x) ) ▶₀ #vk.1 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.5, 0) ~~> (#vk.1, 0) ) )
                    qed
                  qed
                qed
              qed
            qed
          qed
        qed
      next
        case d_0_snd
        step( solve( (#vr.1, 0) ~~> (#i, 1) ) )
          case h
          step( solve( TagRun( ~k, phase ) ▶₀ #vr ) )
            case setup_case_1
            step( solve( !KU( h(z) ) @ #vk ) )
              case c_h
              step( solve( splitEqs(0) ) )
                case split_case_1
                by step( solve( !KU( ~k ) @ #vk.1 ) )
              next
                case split_case_2
                by step( contradiction /* cyclic */ )
              next
                case split_case_3
                step( solve( !KU( (~k⊕~r1⊕r0) ) @ #vk.2 ) )
                  case c_xor_case_1
                  step( solve( !KU( (~k⊕r0) ) @ #vk.3 ) )
                    case c_xor
                    by step( solve( !KU( ~k ) @ #vk.5 ) )
                  next
                    case coerce
                    step( solve( !KD( (~k⊕r0) ) ▶₀ #vk.2 ) )
                      case acceptreader
                      by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.4, 0) ~~> (#vk.2, 0) ) )
                      qed
                    qed
                  qed
                next
                  case c_xor_case_2
                  by step( solve( !KU( ~k ) @ #vk.4 ) )
                next
                  case c_xor_case_3
                  step( solve( !KU( (~k⊕~r1) ) @ #vk.3 ) )
                    case c_xor
                    by step( solve( !KU( ~k ) @ #vk.5 ) )
                  next
                    case coerce
                    step( solve( !KD( (~k⊕~r1) ) ▶₀ #vk.2 ) )
                      case acceptreader
                      by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.4, 0) ~~> (#vk.2, 0) ) )
                      qed
                    qed
                  qed
                next
                  case coerce
                  step( solve( !KD( (~k⊕~r1⊕r0) ) ▶₀ #vk.1 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.4, 0) ~~> (#vk.1, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_4
                step( solve( !KU( (~k⊕~r1) ) @ #vk.2 ) )
                  case c_xor
                  by step( solve( !KU( ~k ) @ #vk.4 ) )
                next
                  case coerce
                  step( solve( !KD( (~k⊕~r1) ) ▶₀ #vk.1 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.4, 0) ~~> (#vk.1, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_5
                step( solve( !KU( (~k⊕~r1) ) @ #vk.1 ) )
                  case c_xor
                  by step( contradiction /* cyclic */ )
                next
                  case coerce
                  step( solve( !KD( (~k⊕~r1) ) ▶₀ #vk.1 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.4, 0) ~~> (#vk.1, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_6
                step( solve( !KU( (~k⊕~r1⊕z) ) @ #vk.1 ) )
                  case c_xor_case_1
                  by step( contradiction /* cyclic */ )
                next
                  case c_xor_case_2
                  by step( solve( !KU( ~k ) @ #vk.4 ) )
                next
                  case c_xor_case_3
                  step( solve( !KU( (~k⊕~r1) ) @ #vk.3 ) )
                    case c_xor
                    by step( contradiction /* cyclic */ )
                  next
                    case coerce
                    step( solve( !KD( (~k⊕~r1) ) ▶₀ #vk.2 ) )
                      case acceptreader
                      by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.4, 0) ~~> (#vk.2, 0) ) )
                      qed
                    qed
                  qed
                next
                  case coerce
                  step( solve( !KD( (~k⊕~r1⊕z) ) ▶₀ #vk.1 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.4, 0) ~~> (#vk.1, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_7
                step( solve( !KU( (~r1⊕x) ) @ #vk.1 ) )
                  case c_xor
                  by step( contradiction /* cyclic */ )
                next
                  case coerce
                  step( solve( !KD( (~r1⊕x) ) ▶₀ #vk.1 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.4, 0) ~~> (#vk.1, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_8
                step( solve( !KU( (~k⊕x) ) @ #vk.1 ) )
                  case c_xor
                  by step( solve( !KU( ~k ) @ #vk.4 ) )
                next
                  case coerce
                  step( solve( !KD( (~k⊕x) ) ▶₀ #vk.1 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.4, 0) ~~> (#vk.1, 0) ) )
                    qed
                  qed
                qed
              qed
            next
              case tag1_case_1
              step( solve( splitEqs(0) ) )
                case split_case_1
                by step( solve( !KU( ~k ) @ #vk.1 ) )
              next
                case split_case_2
                by step( contradiction /* cyclic */ )
              next
                case split_case_3
                MIRRORED
              next
                case split_case_4
                step( solve( !KU( zero ) @ #vk.1 ) )
                  case c_zero
                  MIRRORED
                next
                  case coerce
                  step( solve( !KD( zero ) ▶₀ #vk.1 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.5, 0) ~~> (#vk.1, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_5
                step( solve( !KU( (~k⊕~r1) ) @ #vk.1 ) )
                  case c_xor
                  by step( contradiction /* cyclic */ )
                next
                  case coerce
                  step( solve( !KD( (~k⊕~r1) ) ▶₀ #vk.1 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.5, 0) ~~> (#vk.1, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_6
                step( solve( !KU( (~k⊕~r1⊕z) ) @ #vk.1 ) )
                  case c_xor_case_1
                  by step( contradiction /* cyclic */ )
                next
                  case c_xor_case_2
                  by step( solve( !KU( ~k ) @ #vk.3 ) )
                next
                  case c_xor_case_3
                  step( solve( !KU( (~k⊕~r1) ) @ #vk.3 ) )
                    case c_xor
                    by step( contradiction /* cyclic */ )
                  next
                    case coerce
                    step( solve( !KD( (~k⊕~r1) ) ▶₀ #vk.2 ) )
                      case acceptreader
                      by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.5, 0) ~~> (#vk.2, 0) ) )
                      qed
                    qed
                  qed
                next
                  case coerce
                  step( solve( !KD( (~k⊕~r1⊕z) ) ▶₀ #vk.1 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.5, 0) ~~> (#vk.1, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_7
                step( solve( !KU( (~r1⊕x) ) @ #vk.1 ) )
                  case c_xor
                  by step( contradiction /* cyclic */ )
                next
                  case coerce
                  step( solve( !KD( (~r1⊕x) ) ▶₀ #vk.1 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.5, 0) ~~> (#vk.1, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_8
                step( solve( !KU( (~k⊕x) ) @ #vk.1 ) )
                  case c_xor
                  by step( solve( !KU( ~k ) @ #vk.3 ) )
                next
                  case coerce
                  step( solve( !KD( (~k⊕x) ) ▶₀ #vk.1 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.5, 0) ~~> (#vk.1, 0) ) )
                    qed
                  qed
                qed
              qed
            next
              case tag1_case_2
              step( solve( splitEqs(0) ) )
                case split_case_1
                by step( solve( !KU( ~k ) @ #vk.1 ) )
              next
                case split_case_2
                by step( contradiction /* cyclic */ )
              next
                case split_case_3
                step( solve( splitEqs(1) ) )
                  case split_case_1
                  step( solve( !KU( (~k2⊕~r1.1) ) @ #vk.1 ) )
                    case c_xor
                    by step( solve( !KU( ~k2 ) @ #vk.4 ) )
                  next
                    case coerce
                    step( solve( !KD( (~k2⊕~r1.1) ) ▶₀ #vk.1 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.1, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_2
                  step( solve( !KU( (~k⊕~k2⊕~r1⊕r0⊕~r1.1) ) @ #vk.2 ) )
                    case c_xor_case_01
                    step( solve( !KU( (~k⊕~k2⊕~r1⊕~r1.1) ) @ #vk.3 ) )
                      case c_xor_case_1
                      step( solve( !KU( (~k⊕~k2⊕~r1.1) ) @ #vk.4 ) )
                        case c_xor_case_1
                        by step( solve( !KU( ~k2 ) @ #vk.7 ) )
                      next
                        case c_xor_case_2
                        by step( solve( !KU( ~k ) @ #vk.7 ) )
                      next
                        case c_xor_case_3
                        by step( contradiction /* cyclic */ )
                      next
                        case coerce
                        step( solve( !KD( (~k⊕~k2⊕~r1.1) ) ▶₀ #vk.3 ) )
                          case acceptreader
                          by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                        next
                          case initiatereader
                          by step( contradiction /* impossible chain */ )
                        next
                          case tag1
                          step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                            case d_0_fst
                            by step( contradiction /* impossible chain */ )
                          next
                            case d_0_snd
                            by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                          qed
                        qed
                      qed
                    next
                      case c_xor_case_2
                      by step( solve( !KU( ~k2 ) @ #vk.5 ) )
                    next
                      case c_xor_case_3
                      step( solve( !KU( (~k⊕~r1.1) ) @ #vk.4 ) )
                        case c_xor
                        by step( contradiction /* cyclic */ )
                      next
                        case coerce
                        step( solve( !KD( (~k⊕~r1.1) ) ▶₀ #vk.3 ) )
                          case acceptreader
                          by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                        next
                          case initiatereader
                          by step( contradiction /* impossible chain */ )
                        next
                          case tag1
                          step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                            case d_0_fst
                            by step( contradiction /* impossible chain */ )
                          next
                            case d_0_snd
                            by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                          qed
                        qed
                      qed
                    next
                      case c_xor_case_4
                      by step( solve( !KU( ~k ) @ #vk.5 ) )
                    next
                      case c_xor_case_5
                      step( solve( !KU( (~k2⊕~r1.1) ) @ #vk.4 ) )
                        case c_xor
                        by step( contradiction /* cyclic */ )
                      next
                        case coerce
                        step( solve( !KD( (~k2⊕~r1.1) ) ▶₀ #vk.3 ) )
                          case acceptreader
                          by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                        next
                          case initiatereader
                          by step( contradiction /* impossible chain */ )
                        next
                          case tag1
                          step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                            case d_0_fst
                            by step( contradiction /* impossible chain */ )
                          next
                            case d_0_snd
                            by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                          qed
                        qed
                      qed
                    next
                      case c_xor_case_6
                      step( solve( !KU( (~r1⊕~r1.1) ) @ #vk.4 ) )
                        case c_xor
                        by step( contradiction /* cyclic */ )
                      next
                        case coerce
                        step( solve( !KD( (~r1⊕~r1.1) ) ▶₀ #vk.3 ) )
                          case acceptreader
                          by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                        next
                          case initiatereader
                          by step( contradiction /* impossible chain */ )
                        next
                          case tag1
                          step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                            case d_0_fst
                            by step( contradiction /* impossible chain */ )
                          next
                            case d_0_snd
                            by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                          qed
                        qed
                      qed
                    next
                      case c_xor_case_7
                      by step( contradiction /* cyclic */ )
                    next
                      case coerce
                      step( solve( !KD( (~k⊕~k2⊕~r1⊕~r1.1) ) ▶₀ #vk.2 ) )
                        case acceptreader
                        by step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                      next
                        case initiatereader
                        by step( contradiction /* impossible chain */ )
                      next
                        case tag1
                        step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                          case d_0_fst
                          by step( contradiction /* impossible chain */ )
                        next
                          case d_0_snd
                          by step( solve( (#vr.6, 0) ~~> (#vk.2, 0) ) )
                        qed
                      qed
                    qed
                  next
                    case c_xor_case_02
                    step( solve( !KU( (~k⊕~k2⊕r0⊕~r1.1) ) @ #vk.3 ) )
                      case c_xor_case_1
                      step( solve( !KU( (~k⊕~k2⊕~r1.1) ) @ #vk.5 ) )
                        case c_xor_case_1
                        by step( solve( !KU( ~k2 ) @ #vk.7 ) )
                      next
                        case c_xor_case_2
                        by step( solve( !KU( ~k ) @ #vk.7 ) )
                      next
                        case c_xor_case_3
                        by step( contradiction /* cyclic */ )
                      next
                        case coerce
                        step( solve( !KD( (~k⊕~k2⊕~r1.1) ) ▶₀ #vk.3 ) )
                          case acceptreader
                          by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                        next
                          case initiatereader
                          by step( contradiction /* impossible chain */ )
                        next
                          case tag1
                          step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                            case d_0_fst
                            by step( contradiction /* impossible chain */ )
                          next
                            case d_0_snd
                            by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                          qed
                        qed
                      qed
                    next
                      case c_xor_case_2
                      by step( solve( !KU( ~k2 ) @ #vk.6 ) )
                    next
                      case c_xor_case_3
                      step( solve( !KU( (~k⊕~r1.1) ) @ #vk.5 ) )
                        case c_xor
                        by step( contradiction /* cyclic */ )
                      next
                        case coerce
                        step( solve( !KD( (~k⊕~r1.1) ) ▶₀ #vk.3 ) )
                          case acceptreader
                          by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                        next
                          case initiatereader
                          by step( contradiction /* impossible chain */ )
                        next
                          case tag1
                          step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                            case d_0_fst
                            by step( contradiction /* impossible chain */ )
                          next
                            case d_0_snd
                            by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                          qed
                        qed
                      qed
                    next
                      case c_xor_case_4
                      by step( solve( !KU( ~k ) @ #vk.6 ) )
                    next
                      case c_xor_case_5
                      step( solve( !KU( (~k2⊕~r1.1) ) @ #vk.5 ) )
                        case c_xor
                        by step( contradiction /* cyclic */ )
                      next
                        case coerce
                        step( solve( !KD( (~k2⊕~r1.1) ) ▶₀ #vk.3 ) )
                          case acceptreader
                          by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                        next
                          case initiatereader
                          by step( contradiction /* impossible chain */ )
                        next
                          case tag1
                          step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                            case d_0_fst
                            by step( contradiction /* impossible chain */ )
                          next
                            case d_0_snd
                            by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                          qed
                        qed
                      qed
                    next
                      case c_xor_case_6
                      step( solve( !KU( (r0⊕~r1.1) ) @ #vk.5 ) )
                        case c_xor
                        by step( contradiction /* cyclic */ )
                      next
                        case coerce
                        step( solve( !KD( (r0⊕~r1.1) ) ▶₀ #vk.3 ) )
                          case acceptreader
                          by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                        next
                          case initiatereader
                          by step( contradiction /* impossible chain */ )
                        next
                          case tag1
                          step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                            case d_0_fst
                            by step( contradiction /* impossible chain */ )
                          next
                            case d_0_snd
                            by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                          qed
                        qed
                      qed
                    next
                      case c_xor_case_7
                      by step( contradiction /* cyclic */ )
                    next
                      case coerce
                      step( solve( !KD( (~k⊕~k2⊕r0⊕~r1.1) ) ▶₀ #vk.2 ) )
                        case acceptreader
                        by step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                      next
                        case initiatereader
                        by step( contradiction /* impossible chain */ )
                      next
                        case tag1
                        step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                          case d_0_fst
                          by step( contradiction /* impossible chain */ )
                        next
                          case d_0_snd
                          by step( solve( (#vr.6, 0) ~~> (#vk.2, 0) ) )
                        qed
                      qed
                    qed
                  next
                    case c_xor_case_03
                    step( solve( !KU( (~k⊕~k2⊕~r1.1) ) @ #vk.3 ) )
                      case c_xor_case_1
                      by step( solve( !KU( ~k2 ) @ #vk.6 ) )
                    next
                      case c_xor_case_2
                      by step( solve( !KU( ~k ) @ #vk.6 ) )
                    next
                      case c_xor_case_3
                      by step( contradiction /* cyclic */ )
                    next
                      case coerce
                      step( solve( !KD( (~k⊕~k2⊕~r1.1) ) ▶₀ #vk.2 ) )
                        case acceptreader
                        by step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                      next
                        case initiatereader
                        by step( contradiction /* impossible chain */ )
                      next
                        case tag1
                        step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                          case d_0_fst
                          by step( contradiction /* impossible chain */ )
                        next
                          case d_0_snd
                          by step( solve( (#vr.6, 0) ~~> (#vk.2, 0) ) )
                        qed
                      qed
                    qed
                  next
                    case c_xor_case_04
                    by step( solve( !KU( ~k2 ) @ #vk.4 ) )
                  next
                    case c_xor_case_05
                    step( solve( !KU( (~k⊕~r1⊕~r1.1) ) @ #vk.3 ) )
                      case c_xor_case_1
                      step( solve( !KU( (~k2⊕r0) ) @ #vk.4 ) )
                        case c_xor
                        by step( solve( !KU( ~k2 ) @ #vk.7 ) )
                      next
                        case coerce
                        step( solve( !KD( (~k2⊕r0) ) ▶₀ #vk.3 ) )
                          case acceptreader
                          by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                        next
                          case initiatereader
                          by step( contradiction /* impossible chain */ )
                        next
                          case tag1
                          step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                            case d_0_fst
                            by step( contradiction /* impossible chain */ )
                          next
                            case d_0_snd
                            by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                          qed
                        qed
                      qed
                    next
                      case c_xor_case_2
                      by step( solve( !KU( ~k ) @ #vk.6 ) )
                    next
                      case c_xor_case_3
                      by step( contradiction /* cyclic */ )
                    next
                      case coerce
                      step( solve( !KD( (~k⊕~r1⊕~r1.1) ) ▶₀ #vk.2 ) )
                        case acceptreader
                        by step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                      next
                        case initiatereader
                        by step( contradiction /* impossible chain */ )
                      next
                        case tag1
                        step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                          case d_0_fst
                          by step( contradiction /* impossible chain */ )
                        next
                          case d_0_snd
                          by step( solve( (#vr.6, 0) ~~> (#vk.2, 0) ) )
                        qed
                      qed
                    qed
                  next
                    case c_xor_case_06
                    step( solve( !KU( (~k⊕r0⊕~r1.1) ) @ #vk.3 ) )
                      case c_xor_case_1
                      step( solve( !KU( (~k2⊕~r1) ) @ #vk.4 ) )
                        case c_xor
                        by step( solve( !KU( ~k2 ) @ #vk.7 ) )
                      next
                        case coerce
                        step( solve( !KD( (~k2⊕~r1) ) ▶₀ #vk.3 ) )
                          case acceptreader
                          by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                        next
                          case initiatereader
                          by step( contradiction /* impossible chain */ )
                        next
                          case tag1
                          step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                            case d_0_fst
                            by step( contradiction /* impossible chain */ )
                          next
                            case d_0_snd
                            by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                          qed
                        qed
                      qed
                    next
                      case c_xor_case_2
                      by step( solve( !KU( ~k ) @ #vk.6 ) )
                    next
                      case c_xor_case_3
                      by step( contradiction /* cyclic */ )
                    next
                      case coerce
                      step( solve( !KD( (~k⊕r0⊕~r1.1) ) ▶₀ #vk.2 ) )
                        case acceptreader
                        by step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                      next
                        case initiatereader
                        by step( contradiction /* impossible chain */ )
                      next
                        case tag1
                        step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                          case d_0_fst
                          by step( contradiction /* impossible chain */ )
                        next
                          case d_0_snd
                          by step( solve( (#vr.6, 0) ~~> (#vk.2, 0) ) )
                        qed
                      qed
                    qed
                  next
                    case c_xor_case_07
                    step( solve( !KU( (~k⊕~r1.1) ) @ #vk.3 ) )
                      case c_xor
                      by step( contradiction /* cyclic */ )
                    next
                      case coerce
                      step( solve( !KD( (~k⊕~r1.1) ) ▶₀ #vk.2 ) )
                        case acceptreader
                        by step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                      next
                        case initiatereader
                        by step( contradiction /* impossible chain */ )
                      next
                        case tag1
                        step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                          case d_0_fst
                          by step( contradiction /* impossible chain */ )
                        next
                          case d_0_snd
                          by step( solve( (#vr.6, 0) ~~> (#vk.2, 0) ) )
                        qed
                      qed
                    qed
                  next
                    case c_xor_case_08
                    by step( solve( !KU( ~k ) @ #vk.4 ) )
                  next
                    case c_xor_case_09
                    step( solve( !KU( (~k2⊕~r1⊕~r1.1) ) @ #vk.3 ) )
                      case c_xor_case_1
                      step( solve( !KU( (~k⊕r0) ) @ #vk.4 ) )
                        case c_xor
                        by step( solve( !KU( ~k ) @ #vk.7 ) )
                      next
                        case coerce
                        step( solve( !KD( (~k⊕r0) ) ▶₀ #vk.3 ) )
                          case acceptreader
                          by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                        next
                          case initiatereader
                          by step( contradiction /* impossible chain */ )
                        next
                          case tag1
                          step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                            case d_0_fst
                            by step( contradiction /* impossible chain */ )
                          next
                            case d_0_snd
                            by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                          qed
                        qed
                      qed
                    next
                      case c_xor_case_2
                      by step( solve( !KU( ~k2 ) @ #vk.6 ) )
                    next
                      case c_xor_case_3
                      by step( contradiction /* cyclic */ )
                    next
                      case coerce
                      step( solve( !KD( (~k2⊕~r1⊕~r1.1) ) ▶₀ #vk.2 ) )
                        case acceptreader
                        by step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                      next
                        case initiatereader
                        by step( contradiction /* impossible chain */ )
                      next
                        case tag1
                        step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                          case d_0_fst
                          by step( contradiction /* impossible chain */ )
                        next
                          case d_0_snd
                          by step( solve( (#vr.6, 0) ~~> (#vk.2, 0) ) )
                        qed
                      qed
                    qed
                  next
                    case c_xor_case_10
                    step( solve( !KU( (~k2⊕r0⊕~r1.1) ) @ #vk.3 ) )
                      case c_xor_case_1
                      step( solve( !KU( (~k⊕~r1) ) @ #vk.4 ) )
                        case c_xor
                        by step( solve( !KU( ~k ) @ #vk.7 ) )
                      next
                        case coerce
                        step( solve( !KD( (~k⊕~r1) ) ▶₀ #vk.3 ) )
                          case acceptreader
                          by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                        next
                          case initiatereader
                          by step( contradiction /* impossible chain */ )
                        next
                          case tag1
                          step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                            case d_0_fst
                            by step( contradiction /* impossible chain */ )
                          next
                            case d_0_snd
                            by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                          qed
                        qed
                      qed
                    next
                      case c_xor_case_2
                      by step( solve( !KU( ~k2 ) @ #vk.6 ) )
                    next
                      case c_xor_case_3
                      by step( contradiction /* cyclic */ )
                    next
                      case coerce
                      step( solve( !KD( (~k2⊕r0⊕~r1.1) ) ▶₀ #vk.2 ) )
                        case acceptreader
                        by step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                      next
                        case initiatereader
                        by step( contradiction /* impossible chain */ )
                      next
                        case tag1
                        step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                          case d_0_fst
                          by step( contradiction /* impossible chain */ )
                        next
                          case d_0_snd
                          by step( solve( (#vr.6, 0) ~~> (#vk.2, 0) ) )
                        qed
                      qed
                    qed
                  next
                    case c_xor_case_11
                    step( solve( !KU( (~k2⊕~r1.1) ) @ #vk.3 ) )
                      case c_xor
                      by step( contradiction /* cyclic */ )
                    next
                      case coerce
                      step( solve( !KD( (~k2⊕~r1.1) ) ▶₀ #vk.2 ) )
                        case acceptreader
                        by step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                      next
                        case initiatereader
                        by step( contradiction /* impossible chain */ )
                      next
                        case tag1
                        step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                          case d_0_fst
                          by step( contradiction /* impossible chain */ )
                        next
                          case d_0_snd
                          by step( solve( (#vr.6, 0) ~~> (#vk.2, 0) ) )
                        qed
                      qed
                    qed
                  next
                    case c_xor_case_12
                    step( solve( !KU( (~r1⊕r0⊕~r1.1) ) @ #vk.3 ) )
                      case c_xor_case_1
                      step( solve( !KU( (~k⊕~k2) ) @ #vk.4 ) )
                        case c_xor
                        by step( solve( !KU( ~k2 ) @ #vk.6 ) )
                      next
                        case coerce
                        step( solve( !KD( (~k⊕~k2) ) ▶₀ #vk.3 ) )
                          case acceptreader
                          by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                        next
                          case initiatereader
                          by step( contradiction /* impossible chain */ )
                        next
                          case tag1
                          step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                            case d_0_fst
                            by step( contradiction /* impossible chain */ )
                          next
                            case d_0_snd
                            by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                          qed
                        qed
                      qed
                    next
                      case c_xor_case_2
                      step( solve( !KU( (~k⊕~k2) ) @ #vk.4 ) )
                        case c_xor
                        by step( solve( !KU( ~k2 ) @ #vk.7 ) )
                      next
                        case coerce
                        step( solve( !KD( (~k⊕~k2) ) ▶₀ #vk.3 ) )
                          case acceptreader
                          by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                        next
                          case initiatereader
                          by step( contradiction /* impossible chain */ )
                        next
                          case tag1
                          step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                            case d_0_fst
                            by step( contradiction /* impossible chain */ )
                          next
                            case d_0_snd
                            by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                          qed
                        qed
                      qed
                    next
                      case c_xor_case_3
                      by step( contradiction /* cyclic */ )
                    next
                      case coerce
                      step( solve( !KD( (~r1⊕r0⊕~r1.1) ) ▶₀ #vk.2 ) )
                        case acceptreader
                        by step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                      next
                        case initiatereader
                        by step( contradiction /* impossible chain */ )
                      next
                        case tag1
                        step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                          case d_0_fst
                          by step( contradiction /* impossible chain */ )
                        next
                          case d_0_snd
                          by step( solve( (#vr.6, 0) ~~> (#vk.2, 0) ) )
                        qed
                      qed
                    qed
                  next
                    case c_xor_case_13
                    step( solve( !KU( (~r1⊕~r1.1) ) @ #vk.3 ) )
                      case c_xor
                      by step( contradiction /* cyclic */ )
                    next
                      case coerce
                      step( solve( !KD( (~r1⊕~r1.1) ) ▶₀ #vk.2 ) )
                        case acceptreader
                        by step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                      next
                        case initiatereader
                        by step( contradiction /* impossible chain */ )
                      next
                        case tag1
                        step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                          case d_0_fst
                          by step( contradiction /* impossible chain */ )
                        next
                          case d_0_snd
                          by step( solve( (#vr.6, 0) ~~> (#vk.2, 0) ) )
                        qed
                      qed
                    qed
                  next
                    case c_xor_case_14
                    step( solve( !KU( (r0⊕~r1.1) ) @ #vk.3 ) )
                      case c_xor
                      by step( contradiction /* cyclic */ )
                    next
                      case coerce
                      step( solve( !KD( (r0⊕~r1.1) ) ▶₀ #vk.2 ) )
                        case acceptreader
                        by step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                      next
                        case initiatereader
                        by step( contradiction /* impossible chain */ )
                      next
                        case tag1
                        step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                          case d_0_fst
                          by step( contradiction /* impossible chain */ )
                        next
                          case d_0_snd
                          by step( solve( (#vr.6, 0) ~~> (#vk.2, 0) ) )
                        qed
                      qed
                    qed
                  next
                    case c_xor_case_15
                    by step( contradiction /* cyclic */ )
                  next
                    case coerce
                    step( solve( !KD( (~k⊕~k2⊕~r1⊕r0⊕~r1.1) ) ▶₀ #vk.1 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.1, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_3
                  step( solve( !KU( (~k2⊕x⊕~r1.1) ) @ #vk.1 ) )
                    case c_xor_case_1
                    step( solve( !KU( (~k⊕~r1⊕x) ) @ #vk.2 ) )
                      case c_xor_case_1
                      step( solve( !KU( (~k2⊕~r1.1) ) @ #vk.3 ) )
                        case c_xor
                        by step( contradiction /* cyclic */ )
                      next
                        case coerce
                        step( solve( !KD( (~k2⊕~r1.1) ) ▶₀ #vk.3 ) )
                          case acceptreader
                          by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                        next
                          case initiatereader
                          by step( contradiction /* impossible chain */ )
                        next
                          case tag1
                          step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                            case d_0_fst
                            by step( contradiction /* impossible chain */ )
                          next
                            case d_0_snd
                            by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                          qed
                        qed
                      qed
                    next
                      case c_xor_case_2
                      by step( solve( !KU( ~k ) @ #vk.6 ) )
                    next
                      case c_xor_case_3
                      step( solve( !KU( (~k2⊕~r1.1) ) @ #vk.3 ) )
                        case c_xor
                        by step( solve( !KU( ~k2 ) @ #vk.7 ) )
                      next
                        case coerce
                        step( solve( !KD( (~k2⊕~r1.1) ) ▶₀ #vk.3 ) )
                          case acceptreader
                          by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                        next
                          case initiatereader
                          by step( contradiction /* impossible chain */ )
                        next
                          case tag1
                          step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                            case d_0_fst
                            by step( contradiction /* impossible chain */ )
                          next
                            case d_0_snd
                            by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                          qed
                        qed
                      qed
                    next
                      case coerce
                      step( solve( !KD( (~k⊕~r1⊕x) ) ▶₀ #vk.2 ) )
                        case acceptreader
                        by step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                      next
                        case initiatereader
                        by step( contradiction /* impossible chain */ )
                      next
                        case tag1
                        step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                          case d_0_fst
                          by step( contradiction /* impossible chain */ )
                        next
                          case d_0_snd
                          by step( solve( (#vr.6, 0) ~~> (#vk.2, 0) ) )
                        qed
                      qed
                    qed
                  next
                    case c_xor_case_2
                    by step( solve( !KU( ~k2 ) @ #vk.4 ) )
                  next
                    case c_xor_case_3
                    step( solve( !KU( (~k⊕~r1⊕x) ) @ #vk.2 ) )
                      case c_xor_case_1
                      by step( contradiction /* cyclic */ )
                    next
                      case c_xor_case_2
                      by step( solve( !KU( ~k ) @ #vk.6 ) )
                    next
                      case c_xor_case_3
                      step( solve( !KU( (~k2⊕x) ) @ #vk.4 ) )
                        case c_xor
                        by step( solve( !KU( ~k2 ) @ #vk.7 ) )
                      next
                        case coerce
                        step( solve( !KD( (~k2⊕x) ) ▶₀ #vk.3 ) )
                          case acceptreader
                          by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                        next
                          case initiatereader
                          by step( contradiction /* impossible chain */ )
                        next
                          case tag1
                          step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                            case d_0_fst
                            by step( contradiction /* impossible chain */ )
                          next
                            case d_0_snd
                            by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                          qed
                        qed
                      qed
                    next
                      case coerce
                      step( solve( !KD( (~k⊕~r1⊕x) ) ▶₀ #vk.2 ) )
                        case acceptreader
                        by step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                      next
                        case initiatereader
                        by step( contradiction /* impossible chain */ )
                      next
                        case tag1
                        step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                          case d_0_fst
                          by step( contradiction /* impossible chain */ )
                        next
                          case d_0_snd
                          by step( solve( (#vr.6, 0) ~~> (#vk.2, 0) ) )
                        qed
                      qed
                    qed
                  next
                    case coerce
                    step( solve( !KD( (~k2⊕x⊕~r1.1) ) ▶₀ #vk.1 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.1, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_4
                  by step( solve( !KU( ~k2 ) @ #vk.1 ) )
                next
                  case split_case_5
                  step( solve( !KU( (~k2⊕x) ) @ #vk.1 ) )
                    case c_xor
                    by step( solve( !KU( ~k2 ) @ #vk.4 ) )
                  next
                    case coerce
                    step( solve( !KD( (~k2⊕x) ) ▶₀ #vk.1 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.1, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_6
                  step( solve( !KU( (~k⊕~k2⊕~r1) ) @ #vk.2 ) )
                    case c_xor_case_1
                    by step( solve( !KU( ~k2 ) @ #vk.4 ) )
                  next
                    case c_xor_case_2
                    by step( solve( !KU( ~k ) @ #vk.4 ) )
                  next
                    case c_xor_case_3
                    by step( contradiction /* cyclic */ )
                  next
                    case coerce
                    step( solve( !KD( (~k⊕~k2⊕~r1) ) ▶₀ #vk.1 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.1, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_7
                  step( solve( !KU( (x⊕~r1.1) ) @ #vk.1 ) )
                    case c_xor
                    step( solve( !KU( (~k⊕~k2⊕~r1⊕x) ) @ #vk.2 ) )
                      case c_xor_case_1
                      by step( contradiction /* cyclic */ )
                    next
                      case c_xor_case_2
                      by step( solve( !KU( ~k2 ) @ #vk.6 ) )
                    next
                      case c_xor_case_3
                      step( solve( !KU( (~k⊕x) ) @ #vk.5 ) )
                        case c_xor
                        by step( solve( !KU( ~k ) @ #vk.7 ) )
                      next
                        case coerce
                        step( solve( !KD( (~k⊕x) ) ▶₀ #vk.3 ) )
                          case acceptreader
                          by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                        next
                          case initiatereader
                          by step( contradiction /* impossible chain */ )
                        next
                          case tag1
                          step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                            case d_0_fst
                            by step( contradiction /* impossible chain */ )
                          next
                            case d_0_snd
                            by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                          qed
                        qed
                      qed
                    next
                      case c_xor_case_4
                      by step( solve( !KU( ~k ) @ #vk.6 ) )
                    next
                      case c_xor_case_5
                      step( solve( !KU( (~k2⊕x) ) @ #vk.5 ) )
                        case c_xor
                        by step( solve( !KU( ~k2 ) @ #vk.7 ) )
                      next
                        case coerce
                        step( solve( !KD( (~k2⊕x) ) ▶₀ #vk.3 ) )
                          case acceptreader
                          by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                        next
                          case initiatereader
                          by step( contradiction /* impossible chain */ )
                        next
                          case tag1
                          step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                            case d_0_fst
                            by step( contradiction /* impossible chain */ )
                          next
                            case d_0_snd
                            by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                          qed
                        qed
                      qed
                    next
                      case c_xor_case_6
                      step( solve( !KU( (~r1⊕x) ) @ #vk.5 ) )
                        case c_xor
                        by step( contradiction /* cyclic */ )
                      next
                        case coerce
                        step( solve( !KD( (~r1⊕x) ) ▶₀ #vk.3 ) )
                          case acceptreader
                          by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                        next
                          case initiatereader
                          by step( contradiction /* impossible chain */ )
                        next
                          case tag1
                          step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                            case d_0_fst
                            by step( contradiction /* impossible chain */ )
                          next
                            case d_0_snd
                            by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                          qed
                        qed
                      qed
                    next
                      case c_xor_case_7
                      step( solve( !KU( (~k⊕~k2⊕~r1) ) @ #vk.5 ) )
                        case c_xor_case_1
                        by step( solve( !KU( ~k2 ) @ #vk.7 ) )
                      next
                        case c_xor_case_2
                        by step( solve( !KU( ~k ) @ #vk.7 ) )
                      next
                        case c_xor_case_3
                        by step( contradiction /* cyclic */ )
                      next
                        case coerce
                        step( solve( !KD( (~k⊕~k2⊕~r1) ) ▶₀ #vk.3 ) )
                          case acceptreader
                          by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                        next
                          case initiatereader
                          by step( contradiction /* impossible chain */ )
                        next
                          case tag1
                          step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                            case d_0_fst
                            by step( contradiction /* impossible chain */ )
                          next
                            case d_0_snd
                            by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                          qed
                        qed
                      qed
                    next
                      case coerce
                      step( solve( !KD( (~k⊕~k2⊕~r1⊕x) ) ▶₀ #vk.2 ) )
                        case acceptreader
                        by step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                      next
                        case initiatereader
                        by step( contradiction /* impossible chain */ )
                      next
                        case tag1
                        step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                          case d_0_fst
                          by step( contradiction /* impossible chain */ )
                        next
                          case d_0_snd
                          by step( solve( (#vr.6, 0) ~~> (#vk.2, 0) ) )
                        qed
                      qed
                    qed
                  next
                    case coerce
                    step( solve( !KD( (x⊕~r1.1) ) ▶₀ #vk.1 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.1, 0) ) )
                      qed
                    qed
                  qed
                qed
              next
                case split_case_4
                step( solve( !KU( zero ) @ #vk.1 ) )
                  case c_zero
                  step( solve( splitEqs(1) ) )
                    case split
                    step( solve( !KU( (~k⊕~k2⊕~r1⊕~r1.1) ) @ #vk.2 ) )
                      case c_xor_case_1
                      step( solve( !KU( (~k⊕~k2⊕~r1.1) ) @ #vk.3 ) )
                        case c_xor_case_1
                        by step( solve( !KU( ~k2 ) @ #vk.6 ) )
                      next
                        case c_xor_case_2
                        by step( solve( !KU( ~k ) @ #vk.6 ) )
                      next
                        case c_xor_case_3
                        by step( contradiction /* cyclic */ )
                      next
                        case coerce
                        step( solve( !KD( (~k⊕~k2⊕~r1.1) ) ▶₀ #vk.3 ) )
                          case acceptreader
                          by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                        next
                          case initiatereader
                          by step( contradiction /* impossible chain */ )
                        next
                          case tag1
                          step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                            case d_0_fst
                            by step( contradiction /* impossible chain */ )
                          next
                            case d_0_snd
                            by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                          qed
                        qed
                      qed
                    next
                      case c_xor_case_2
                      by step( solve( !KU( ~k2 ) @ #vk.4 ) )
                    next
                      case c_xor_case_3
                      step( solve( !KU( (~k⊕~r1.1) ) @ #vk.3 ) )
                        case c_xor
                        by step( contradiction /* cyclic */ )
                      next
                        case coerce
                        step( solve( !KD( (~k⊕~r1.1) ) ▶₀ #vk.3 ) )
                          case acceptreader
                          by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                        next
                          case initiatereader
                          by step( contradiction /* impossible chain */ )
                        next
                          case tag1
                          step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                            case d_0_fst
                            by step( contradiction /* impossible chain */ )
                          next
                            case d_0_snd
                            by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                          qed
                        qed
                      qed
                    next
                      case c_xor_case_4
                      by step( solve( !KU( ~k ) @ #vk.4 ) )
                    next
                      case c_xor_case_5
                      step( solve( !KU( (~k2⊕~r1.1) ) @ #vk.3 ) )
                        case c_xor
                        by step( contradiction /* cyclic */ )
                      next
                        case coerce
                        step( solve( !KD( (~k2⊕~r1.1) ) ▶₀ #vk.3 ) )
                          case acceptreader
                          by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                        next
                          case initiatereader
                          by step( contradiction /* impossible chain */ )
                        next
                          case tag1
                          step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                            case d_0_fst
                            by step( contradiction /* impossible chain */ )
                          next
                            case d_0_snd
                            by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                          qed
                        qed
                      qed
                    next
                      case c_xor_case_6
                      step( solve( !KU( (~r1⊕~r1.1) ) @ #vk.3 ) )
                        case c_xor
                        by step( contradiction /* cyclic */ )
                      next
                        case coerce
                        step( solve( !KD( (~r1⊕~r1.1) ) ▶₀ #vk.3 ) )
                          case acceptreader
                          by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                        next
                          case initiatereader
                          by step( contradiction /* impossible chain */ )
                        next
                          case tag1
                          step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                            case d_0_fst
                            by step( contradiction /* impossible chain */ )
                          next
                            case d_0_snd
                            by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                          qed
                        qed
                      qed
                    next
                      case c_xor_case_7
                      by step( contradiction /* cyclic */ )
                    next
                      case coerce
                      step( solve( !KD( (~k⊕~k2⊕~r1⊕~r1.1) ) ▶₀ #vk.2 ) )
                        case acceptreader
                        by step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                      next
                        case initiatereader
                        by step( contradiction /* impossible chain */ )
                      next
                        case tag1
                        step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                          case d_0_fst
                          by step( contradiction /* impossible chain */ )
                        next
                          case d_0_snd
                          by step( solve( (#vr.6, 0) ~~> (#vk.2, 0) ) )
                        qed
                      qed
                    qed
                  qed
                next
                  case coerce
                  step( solve( !KD( zero ) ▶₀ #vk.1 ) )
                    case acceptreader
                    by step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.6, 0) ~~> (#vk.1, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_5
                step( solve( !KU( (~k⊕~r1) ) @ #vk.1 ) )
                  case c_xor
                  by step( contradiction /* cyclic */ )
                next
                  case coerce
                  step( solve( !KD( (~k⊕~r1) ) ▶₀ #vk.1 ) )
                    case acceptreader
                    by step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.6, 0) ~~> (#vk.1, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_6
                step( solve( !KU( (~k⊕~r1⊕z) ) @ #vk.1 ) )
                  case c_xor_case_1
                  by step( contradiction /* cyclic */ )
                next
                  case c_xor_case_2
                  by step( solve( !KU( ~k ) @ #vk.4 ) )
                next
                  case c_xor_case_3
                  step( solve( !KU( (~k⊕~r1) ) @ #vk.4 ) )
                    case c_xor
                    by step( contradiction /* cyclic */ )
                  next
                    case coerce
                    step( solve( !KD( (~k⊕~r1) ) ▶₀ #vk.2 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.2, 0) ) )
                      qed
                    qed
                  qed
                next
                  case coerce
                  step( solve( !KD( (~k⊕~r1⊕z) ) ▶₀ #vk.1 ) )
                    case acceptreader
                    by step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.6, 0) ~~> (#vk.1, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_7
                step( solve( !KU( (~r1⊕x) ) @ #vk.1 ) )
                  case c_xor
                  by step( contradiction /* cyclic */ )
                next
                  case coerce
                  step( solve( !KD( (~r1⊕x) ) ▶₀ #vk.1 ) )
                    case acceptreader
                    by step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.6, 0) ~~> (#vk.1, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_8
                step( solve( !KU( (~k⊕x) ) @ #vk.1 ) )
                  case c_xor
                  by step( solve( !KU( ~k ) @ #vk.4 ) )
                next
                  case coerce
                  step( solve( !KD( (~k⊕x) ) ▶₀ #vk.1 ) )
                    case acceptreader
                    by step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.6, 0) ~~> (#vk.1, 0) ) )
                    qed
                  qed
                qed
              qed
            next
              case tag1_case_3
              step( solve( splitEqs(0) ) )
                case split_case_1
                by step( solve( !KU( ~k ) @ #vk.1 ) )
              next
                case split_case_2
                by step( contradiction /* cyclic */ )
              next
                case split_case_3
                step( solve( splitEqs(1) ) )
                  case split_case_1
                  by step( contradiction /* cyclic */ )
                next
                  case split_case_2
                  step( solve( !KU( (x⊕~r1.1) ) @ #vk.1 ) )
                    case c_xor
                    step( solve( !KU( (~r1⊕x) ) @ #vk.2 ) )
                      case c_xor
                      by step( contradiction /* cyclic */ )
                    next
                      case coerce
                      step( solve( !KD( (~r1⊕x) ) ▶₀ #vk.2 ) )
                        case acceptreader
                        by step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                      next
                        case initiatereader
                        by step( contradiction /* impossible chain */ )
                      next
                        case tag1
                        step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                          case d_0_fst
                          by step( contradiction /* impossible chain */ )
                        next
                          case d_0_snd
                          by step( solve( (#vr.6, 0) ~~> (#vk.2, 0) ) )
                        qed
                      qed
                    qed
                  next
                    case coerce
                    step( solve( !KD( (x⊕~r1.1) ) ▶₀ #vk.1 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.1, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_3
                  step( solve( !KU( (~r1⊕r0⊕~r1.1) ) @ #vk.2 ) )
                    case c_xor_case_1
                    step( solve( !KU( (~r1⊕~r1.1) ) @ #vk.3 ) )
                      case c_xor
                      by step( contradiction /* cyclic */ )
                    next
                      case coerce
                      step( solve( !KD( (~r1⊕~r1.1) ) ▶₀ #vk.2 ) )
                        case acceptreader
                        by step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                      next
                        case initiatereader
                        by step( contradiction /* impossible chain */ )
                      next
                        case tag1
                        step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                          case d_0_fst
                          by step( contradiction /* impossible chain */ )
                        next
                          case d_0_snd
                          by step( solve( (#vr.6, 0) ~~> (#vk.2, 0) ) )
                        qed
                      qed
                    qed
                  next
                    case c_xor_case_2
                    step( solve( !KU( (r0⊕~r1.1) ) @ #vk.3 ) )
                      case c_xor
                      by step( contradiction /* cyclic */ )
                    next
                      case coerce
                      step( solve( !KD( (r0⊕~r1.1) ) ▶₀ #vk.2 ) )
                        case acceptreader
                        by step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                      next
                        case initiatereader
                        by step( contradiction /* impossible chain */ )
                      next
                        case tag1
                        step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                          case d_0_fst
                          by step( contradiction /* impossible chain */ )
                        next
                          case d_0_snd
                          by step( solve( (#vr.6, 0) ~~> (#vk.2, 0) ) )
                        qed
                      qed
                    qed
                  next
                    case c_xor_case_3
                    by step( contradiction /* cyclic */ )
                  next
                    case coerce
                    step( solve( !KD( (~r1⊕r0⊕~r1.1) ) ▶₀ #vk.1 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.1, 0) ) )
                      qed
                    qed
                  qed
                qed
              next
                case split_case_4
                step( solve( !KU( zero ) @ #vk.1 ) )
                  case c_zero
                  step( solve( splitEqs(1) ) )
                    case split
                    step( solve( !KU( (~r1⊕~r1.1) ) @ #vk.2 ) )
                      case c_xor
                      by step( contradiction /* cyclic */ )
                    next
                      case coerce
                      step( solve( !KD( (~r1⊕~r1.1) ) ▶₀ #vk.2 ) )
                        case acceptreader
                        by step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                      next
                        case initiatereader
                        by step( contradiction /* impossible chain */ )
                      next
                        case tag1
                        step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                          case d_0_fst
                          by step( contradiction /* impossible chain */ )
                        next
                          case d_0_snd
                          by step( solve( (#vr.6, 0) ~~> (#vk.2, 0) ) )
                        qed
                      qed
                    qed
                  qed
                next
                  case coerce
                  step( solve( !KD( zero ) ▶₀ #vk.1 ) )
                    case acceptreader
                    by step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.6, 0) ~~> (#vk.1, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_5
                step( solve( !KU( (~k⊕~r1) ) @ #vk.1 ) )
                  case c_xor
                  by step( contradiction /* cyclic */ )
                next
                  case coerce
                  step( solve( !KD( (~k⊕~r1) ) ▶₀ #vk.1 ) )
                    case acceptreader
                    by step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.6, 0) ~~> (#vk.1, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_6
                step( solve( !KU( (~k⊕~r1⊕z) ) @ #vk.1 ) )
                  case c_xor_case_1
                  by step( contradiction /* cyclic */ )
                next
                  case c_xor_case_2
                  by step( solve( !KU( ~k ) @ #vk.4 ) )
                next
                  case c_xor_case_3
                  step( solve( !KU( (~k⊕~r1) ) @ #vk.4 ) )
                    case c_xor
                    by step( contradiction /* cyclic */ )
                  next
                    case coerce
                    step( solve( !KD( (~k⊕~r1) ) ▶₀ #vk.2 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.2, 0) ) )
                      qed
                    qed
                  qed
                next
                  case coerce
                  step( solve( !KD( (~k⊕~r1⊕z) ) ▶₀ #vk.1 ) )
                    case acceptreader
                    by step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.6, 0) ~~> (#vk.1, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_7
                step( solve( !KU( (~r1⊕x) ) @ #vk.1 ) )
                  case c_xor
                  by step( contradiction /* cyclic */ )
                next
                  case coerce
                  step( solve( !KD( (~r1⊕x) ) ▶₀ #vk.1 ) )
                    case acceptreader
                    by step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.6, 0) ~~> (#vk.1, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_8
                step( solve( !KU( (~k⊕x) ) @ #vk.1 ) )
                  case c_xor
                  by step( solve( !KU( ~k ) @ #vk.4 ) )
                next
                  case coerce
                  step( solve( !KD( (~k⊕x) ) ▶₀ #vk.1 ) )
                    case acceptreader
                    by step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.6, 0) ~~> (#vk.1, 0) ) )
                    qed
                  qed
                qed
              qed
            qed
          next
            case setup_case_2
            step( solve( !KU( h(z) ) @ #vk ) )
              case c_h
              step( solve( splitEqs(0) ) )
                case split_case_1
                by step( solve( !KU( ~k ) @ #vk.1 ) )
              next
                case split_case_2
                by step( contradiction /* cyclic */ )
              next
                case split_case_3
                step( solve( !KU( (~k⊕~r1⊕r0) ) @ #vk.2 ) )
                  case c_xor_case_1
                  step( solve( !KU( (~k⊕r0) ) @ #vk.3 ) )
                    case c_xor
                    by step( solve( !KU( ~k ) @ #vk.5 ) )
                  next
                    case coerce
                    step( solve( !KD( (~k⊕r0) ) ▶₀ #vk.2 ) )
                      case acceptreader
                      by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.4, 0) ~~> (#vk.2, 0) ) )
                      qed
                    qed
                  qed
                next
                  case c_xor_case_2
                  by step( solve( !KU( ~k ) @ #vk.4 ) )
                next
                  case c_xor_case_3
                  step( solve( !KU( (~k⊕~r1) ) @ #vk.3 ) )
                    case c_xor
                    by step( solve( !KU( ~k ) @ #vk.5 ) )
                  next
                    case coerce
                    step( solve( !KD( (~k⊕~r1) ) ▶₀ #vk.2 ) )
                      case acceptreader
                      by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.4, 0) ~~> (#vk.2, 0) ) )
                      qed
                    qed
                  qed
                next
                  case coerce
                  step( solve( !KD( (~k⊕~r1⊕r0) ) ▶₀ #vk.1 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.4, 0) ~~> (#vk.1, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_4
                step( solve( !KU( (~k⊕~r1) ) @ #vk.2 ) )
                  case c_xor
                  by step( solve( !KU( ~k ) @ #vk.4 ) )
                next
                  case coerce
                  step( solve( !KD( (~k⊕~r1) ) ▶₀ #vk.1 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.4, 0) ~~> (#vk.1, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_5
                step( solve( !KU( (~k⊕~r1) ) @ #vk.1 ) )
                  case c_xor
                  by step( contradiction /* cyclic */ )
                next
                  case coerce
                  step( solve( !KD( (~k⊕~r1) ) ▶₀ #vk.1 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.4, 0) ~~> (#vk.1, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_6
                step( solve( !KU( (~k⊕~r1⊕z) ) @ #vk.1 ) )
                  case c_xor_case_1
                  by step( contradiction /* cyclic */ )
                next
                  case c_xor_case_2
                  by step( solve( !KU( ~k ) @ #vk.4 ) )
                next
                  case c_xor_case_3
                  step( solve( !KU( (~k⊕~r1) ) @ #vk.3 ) )
                    case c_xor
                    by step( contradiction /* cyclic */ )
                  next
                    case coerce
                    step( solve( !KD( (~k⊕~r1) ) ▶₀ #vk.2 ) )
                      case acceptreader
                      by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.4, 0) ~~> (#vk.2, 0) ) )
                      qed
                    qed
                  qed
                next
                  case coerce
                  step( solve( !KD( (~k⊕~r1⊕z) ) ▶₀ #vk.1 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.4, 0) ~~> (#vk.1, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_7
                step( solve( !KU( (~r1⊕x) ) @ #vk.1 ) )
                  case c_xor
                  by step( contradiction /* cyclic */ )
                next
                  case coerce
                  step( solve( !KD( (~r1⊕x) ) ▶₀ #vk.1 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.4, 0) ~~> (#vk.1, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_8
                step( solve( !KU( (~k⊕x) ) @ #vk.1 ) )
                  case c_xor
                  by step( solve( !KU( ~k ) @ #vk.4 ) )
                next
                  case coerce
                  step( solve( !KD( (~k⊕x) ) ▶₀ #vk.1 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.4, 0) ~~> (#vk.1, 0) ) )
                    qed
                  qed
                qed
              qed
            next
              case tag1_case_1
              step( solve( splitEqs(0) ) )
                case split_case_1
                by step( solve( !KU( ~k ) @ #vk.1 ) )
              next
                case split_case_2
                by step( contradiction /* cyclic */ )
              next
                case split_case_3
                step( solve( splitEqs(1) ) )
                  case split_case_1
                  step( solve( !KU( (~k1⊕~r1.1) ) @ #vk.1 ) )
                    case c_xor
                    by step( solve( !KU( ~k1 ) @ #vk.4 ) )
                  next
                    case coerce
                    step( solve( !KD( (~k1⊕~r1.1) ) ▶₀ #vk.1 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.1, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_2
                  step( solve( !KU( (~k⊕~k1⊕~r1⊕r0⊕~r1.1) ) @ #vk.2 ) )
                    case c_xor_case_01
                    step( solve( !KU( (~k⊕~k1⊕~r1⊕~r1.1) ) @ #vk.3 ) )
                      case c_xor_case_1
                      step( solve( !KU( (~k⊕~k1⊕~r1.1) ) @ #vk.4 ) )
                        case c_xor_case_1
                        by step( solve( !KU( ~k1 ) @ #vk.7 ) )
                      next
                        case c_xor_case_2
                        by step( solve( !KU( ~k ) @ #vk.7 ) )
                      next
                        case c_xor_case_3
                        by step( contradiction /* cyclic */ )
                      next
                        case coerce
                        step( solve( !KD( (~k⊕~k1⊕~r1.1) ) ▶₀ #vk.3 ) )
                          case acceptreader
                          by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                        next
                          case initiatereader
                          by step( contradiction /* impossible chain */ )
                        next
                          case tag1
                          step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                            case d_0_fst
                            by step( contradiction /* impossible chain */ )
                          next
                            case d_0_snd
                            by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                          qed
                        qed
                      qed
                    next
                      case c_xor_case_2
                      by step( solve( !KU( ~k1 ) @ #vk.5 ) )
                    next
                      case c_xor_case_3
                      step( solve( !KU( (~k⊕~r1.1) ) @ #vk.4 ) )
                        case c_xor
                        by step( contradiction /* cyclic */ )
                      next
                        case coerce
                        step( solve( !KD( (~k⊕~r1.1) ) ▶₀ #vk.3 ) )
                          case acceptreader
                          by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                        next
                          case initiatereader
                          by step( contradiction /* impossible chain */ )
                        next
                          case tag1
                          step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                            case d_0_fst
                            by step( contradiction /* impossible chain */ )
                          next
                            case d_0_snd
                            by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                          qed
                        qed
                      qed
                    next
                      case c_xor_case_4
                      by step( solve( !KU( ~k ) @ #vk.5 ) )
                    next
                      case c_xor_case_5
                      step( solve( !KU( (~k1⊕~r1.1) ) @ #vk.4 ) )
                        case c_xor
                        by step( contradiction /* cyclic */ )
                      next
                        case coerce
                        step( solve( !KD( (~k1⊕~r1.1) ) ▶₀ #vk.3 ) )
                          case acceptreader
                          by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                        next
                          case initiatereader
                          by step( contradiction /* impossible chain */ )
                        next
                          case tag1
                          step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                            case d_0_fst
                            by step( contradiction /* impossible chain */ )
                          next
                            case d_0_snd
                            by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                          qed
                        qed
                      qed
                    next
                      case c_xor_case_6
                      step( solve( !KU( (~r1⊕~r1.1) ) @ #vk.4 ) )
                        case c_xor
                        by step( contradiction /* cyclic */ )
                      next
                        case coerce
                        step( solve( !KD( (~r1⊕~r1.1) ) ▶₀ #vk.3 ) )
                          case acceptreader
                          by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                        next
                          case initiatereader
                          by step( contradiction /* impossible chain */ )
                        next
                          case tag1
                          step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                            case d_0_fst
                            by step( contradiction /* impossible chain */ )
                          next
                            case d_0_snd
                            by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                          qed
                        qed
                      qed
                    next
                      case c_xor_case_7
                      by step( contradiction /* cyclic */ )
                    next
                      case coerce
                      step( solve( !KD( (~k⊕~k1⊕~r1⊕~r1.1) ) ▶₀ #vk.2 ) )
                        case acceptreader
                        by step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                      next
                        case initiatereader
                        by step( contradiction /* impossible chain */ )
                      next
                        case tag1
                        step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                          case d_0_fst
                          by step( contradiction /* impossible chain */ )
                        next
                          case d_0_snd
                          by step( solve( (#vr.6, 0) ~~> (#vk.2, 0) ) )
                        qed
                      qed
                    qed
                  next
                    case c_xor_case_02
                    step( solve( !KU( (~k⊕~k1⊕r0⊕~r1.1) ) @ #vk.3 ) )
                      case c_xor_case_1
                      step( solve( !KU( (~k⊕~k1⊕~r1.1) ) @ #vk.5 ) )
                        case c_xor_case_1
                        by step( solve( !KU( ~k1 ) @ #vk.7 ) )
                      next
                        case c_xor_case_2
                        by step( solve( !KU( ~k ) @ #vk.7 ) )
                      next
                        case c_xor_case_3
                        by step( contradiction /* cyclic */ )
                      next
                        case coerce
                        step( solve( !KD( (~k⊕~k1⊕~r1.1) ) ▶₀ #vk.3 ) )
                          case acceptreader
                          by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                        next
                          case initiatereader
                          by step( contradiction /* impossible chain */ )
                        next
                          case tag1
                          step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                            case d_0_fst
                            by step( contradiction /* impossible chain */ )
                          next
                            case d_0_snd
                            by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                          qed
                        qed
                      qed
                    next
                      case c_xor_case_2
                      by step( solve( !KU( ~k1 ) @ #vk.6 ) )
                    next
                      case c_xor_case_3
                      step( solve( !KU( (~k⊕~r1.1) ) @ #vk.5 ) )
                        case c_xor
                        by step( contradiction /* cyclic */ )
                      next
                        case coerce
                        step( solve( !KD( (~k⊕~r1.1) ) ▶₀ #vk.3 ) )
                          case acceptreader
                          by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                        next
                          case initiatereader
                          by step( contradiction /* impossible chain */ )
                        next
                          case tag1
                          step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                            case d_0_fst
                            by step( contradiction /* impossible chain */ )
                          next
                            case d_0_snd
                            by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                          qed
                        qed
                      qed
                    next
                      case c_xor_case_4
                      by step( solve( !KU( ~k ) @ #vk.6 ) )
                    next
                      case c_xor_case_5
                      step( solve( !KU( (~k1⊕~r1.1) ) @ #vk.5 ) )
                        case c_xor
                        by step( contradiction /* cyclic */ )
                      next
                        case coerce
                        step( solve( !KD( (~k1⊕~r1.1) ) ▶₀ #vk.3 ) )
                          case acceptreader
                          by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                        next
                          case initiatereader
                          by step( contradiction /* impossible chain */ )
                        next
                          case tag1
                          step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                            case d_0_fst
                            by step( contradiction /* impossible chain */ )
                          next
                            case d_0_snd
                            by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                          qed
                        qed
                      qed
                    next
                      case c_xor_case_6
                      step( solve( !KU( (r0⊕~r1.1) ) @ #vk.5 ) )
                        case c_xor
                        by step( contradiction /* cyclic */ )
                      next
                        case coerce
                        step( solve( !KD( (r0⊕~r1.1) ) ▶₀ #vk.3 ) )
                          case acceptreader
                          by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                        next
                          case initiatereader
                          by step( contradiction /* impossible chain */ )
                        next
                          case tag1
                          step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                            case d_0_fst
                            by step( contradiction /* impossible chain */ )
                          next
                            case d_0_snd
                            by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                          qed
                        qed
                      qed
                    next
                      case c_xor_case_7
                      by step( contradiction /* cyclic */ )
                    next
                      case coerce
                      step( solve( !KD( (~k⊕~k1⊕r0⊕~r1.1) ) ▶₀ #vk.2 ) )
                        case acceptreader
                        by step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                      next
                        case initiatereader
                        by step( contradiction /* impossible chain */ )
                      next
                        case tag1
                        step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                          case d_0_fst
                          by step( contradiction /* impossible chain */ )
                        next
                          case d_0_snd
                          by step( solve( (#vr.6, 0) ~~> (#vk.2, 0) ) )
                        qed
                      qed
                    qed
                  next
                    case c_xor_case_03
                    step( solve( !KU( (~k⊕~k1⊕~r1.1) ) @ #vk.3 ) )
                      case c_xor_case_1
                      by step( solve( !KU( ~k1 ) @ #vk.6 ) )
                    next
                      case c_xor_case_2
                      by step( solve( !KU( ~k ) @ #vk.6 ) )
                    next
                      case c_xor_case_3
                      by step( contradiction /* cyclic */ )
                    next
                      case coerce
                      step( solve( !KD( (~k⊕~k1⊕~r1.1) ) ▶₀ #vk.2 ) )
                        case acceptreader
                        by step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                      next
                        case initiatereader
                        by step( contradiction /* impossible chain */ )
                      next
                        case tag1
                        step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                          case d_0_fst
                          by step( contradiction /* impossible chain */ )
                        next
                          case d_0_snd
                          by step( solve( (#vr.6, 0) ~~> (#vk.2, 0) ) )
                        qed
                      qed
                    qed
                  next
                    case c_xor_case_04
                    by step( solve( !KU( ~k1 ) @ #vk.4 ) )
                  next
                    case c_xor_case_05
                    step( solve( !KU( (~k⊕~r1⊕~r1.1) ) @ #vk.3 ) )
                      case c_xor_case_1
                      step( solve( !KU( (~k1⊕r0) ) @ #vk.4 ) )
                        case c_xor
                        by step( solve( !KU( ~k1 ) @ #vk.7 ) )
                      next
                        case coerce
                        step( solve( !KD( (~k1⊕r0) ) ▶₀ #vk.3 ) )
                          case acceptreader
                          by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                        next
                          case initiatereader
                          by step( contradiction /* impossible chain */ )
                        next
                          case tag1
                          step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                            case d_0_fst
                            by step( contradiction /* impossible chain */ )
                          next
                            case d_0_snd
                            by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                          qed
                        qed
                      qed
                    next
                      case c_xor_case_2
                      by step( solve( !KU( ~k ) @ #vk.6 ) )
                    next
                      case c_xor_case_3
                      by step( contradiction /* cyclic */ )
                    next
                      case coerce
                      step( solve( !KD( (~k⊕~r1⊕~r1.1) ) ▶₀ #vk.2 ) )
                        case acceptreader
                        by step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                      next
                        case initiatereader
                        by step( contradiction /* impossible chain */ )
                      next
                        case tag1
                        step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                          case d_0_fst
                          by step( contradiction /* impossible chain */ )
                        next
                          case d_0_snd
                          by step( solve( (#vr.6, 0) ~~> (#vk.2, 0) ) )
                        qed
                      qed
                    qed
                  next
                    case c_xor_case_06
                    step( solve( !KU( (~k⊕r0⊕~r1.1) ) @ #vk.3 ) )
                      case c_xor_case_1
                      step( solve( !KU( (~k1⊕~r1) ) @ #vk.4 ) )
                        case c_xor
                        by step( solve( !KU( ~k1 ) @ #vk.7 ) )
                      next
                        case coerce
                        step( solve( !KD( (~k1⊕~r1) ) ▶₀ #vk.3 ) )
                          case acceptreader
                          by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                        next
                          case initiatereader
                          by step( contradiction /* impossible chain */ )
                        next
                          case tag1
                          step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                            case d_0_fst
                            by step( contradiction /* impossible chain */ )
                          next
                            case d_0_snd
                            by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                          qed
                        qed
                      qed
                    next
                      case c_xor_case_2
                      by step( solve( !KU( ~k ) @ #vk.6 ) )
                    next
                      case c_xor_case_3
                      by step( contradiction /* cyclic */ )
                    next
                      case coerce
                      step( solve( !KD( (~k⊕r0⊕~r1.1) ) ▶₀ #vk.2 ) )
                        case acceptreader
                        by step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                      next
                        case initiatereader
                        by step( contradiction /* impossible chain */ )
                      next
                        case tag1
                        step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                          case d_0_fst
                          by step( contradiction /* impossible chain */ )
                        next
                          case d_0_snd
                          by step( solve( (#vr.6, 0) ~~> (#vk.2, 0) ) )
                        qed
                      qed
                    qed
                  next
                    case c_xor_case_07
                    step( solve( !KU( (~k⊕~r1.1) ) @ #vk.3 ) )
                      case c_xor
                      by step( contradiction /* cyclic */ )
                    next
                      case coerce
                      step( solve( !KD( (~k⊕~r1.1) ) ▶₀ #vk.2 ) )
                        case acceptreader
                        by step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                      next
                        case initiatereader
                        by step( contradiction /* impossible chain */ )
                      next
                        case tag1
                        step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                          case d_0_fst
                          by step( contradiction /* impossible chain */ )
                        next
                          case d_0_snd
                          by step( solve( (#vr.6, 0) ~~> (#vk.2, 0) ) )
                        qed
                      qed
                    qed
                  next
                    case c_xor_case_08
                    by step( solve( !KU( ~k ) @ #vk.4 ) )
                  next
                    case c_xor_case_09
                    step( solve( !KU( (~k1⊕~r1⊕~r1.1) ) @ #vk.3 ) )
                      case c_xor_case_1
                      step( solve( !KU( (~k⊕r0) ) @ #vk.4 ) )
                        case c_xor
                        by step( solve( !KU( ~k ) @ #vk.7 ) )
                      next
                        case coerce
                        step( solve( !KD( (~k⊕r0) ) ▶₀ #vk.3 ) )
                          case acceptreader
                          by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                        next
                          case initiatereader
                          by step( contradiction /* impossible chain */ )
                        next
                          case tag1
                          step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                            case d_0_fst
                            by step( contradiction /* impossible chain */ )
                          next
                            case d_0_snd
                            by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                          qed
                        qed
                      qed
                    next
                      case c_xor_case_2
                      by step( solve( !KU( ~k1 ) @ #vk.6 ) )
                    next
                      case c_xor_case_3
                      by step( contradiction /* cyclic */ )
                    next
                      case coerce
                      step( solve( !KD( (~k1⊕~r1⊕~r1.1) ) ▶₀ #vk.2 ) )
                        case acceptreader
                        by step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                      next
                        case initiatereader
                        by step( contradiction /* impossible chain */ )
                      next
                        case tag1
                        step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                          case d_0_fst
                          by step( contradiction /* impossible chain */ )
                        next
                          case d_0_snd
                          by step( solve( (#vr.6, 0) ~~> (#vk.2, 0) ) )
                        qed
                      qed
                    qed
                  next
                    case c_xor_case_10
                    step( solve( !KU( (~k1⊕r0⊕~r1.1) ) @ #vk.3 ) )
                      case c_xor_case_1
                      step( solve( !KU( (~k⊕~r1) ) @ #vk.4 ) )
                        case c_xor
                        by step( solve( !KU( ~k ) @ #vk.7 ) )
                      next
                        case coerce
                        step( solve( !KD( (~k⊕~r1) ) ▶₀ #vk.3 ) )
                          case acceptreader
                          by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                        next
                          case initiatereader
                          by step( contradiction /* impossible chain */ )
                        next
                          case tag1
                          step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                            case d_0_fst
                            by step( contradiction /* impossible chain */ )
                          next
                            case d_0_snd
                            by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                          qed
                        qed
                      qed
                    next
                      case c_xor_case_2
                      by step( solve( !KU( ~k1 ) @ #vk.6 ) )
                    next
                      case c_xor_case_3
                      by step( contradiction /* cyclic */ )
                    next
                      case coerce
                      step( solve( !KD( (~k1⊕r0⊕~r1.1) ) ▶₀ #vk.2 ) )
                        case acceptreader
                        by step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                      next
                        case initiatereader
                        by step( contradiction /* impossible chain */ )
                      next
                        case tag1
                        step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                          case d_0_fst
                          by step( contradiction /* impossible chain */ )
                        next
                          case d_0_snd
                          by step( solve( (#vr.6, 0) ~~> (#vk.2, 0) ) )
                        qed
                      qed
                    qed
                  next
                    case c_xor_case_11
                    step( solve( !KU( (~k1⊕~r1.1) ) @ #vk.3 ) )
                      case c_xor
                      by step( contradiction /* cyclic */ )
                    next
                      case coerce
                      step( solve( !KD( (~k1⊕~r1.1) ) ▶₀ #vk.2 ) )
                        case acceptreader
                        by step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                      next
                        case initiatereader
                        by step( contradiction /* impossible chain */ )
                      next
                        case tag1
                        step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                          case d_0_fst
                          by step( contradiction /* impossible chain */ )
                        next
                          case d_0_snd
                          by step( solve( (#vr.6, 0) ~~> (#vk.2, 0) ) )
                        qed
                      qed
                    qed
                  next
                    case c_xor_case_12
                    step( solve( !KU( (~r1⊕r0⊕~r1.1) ) @ #vk.3 ) )
                      case c_xor_case_1
                      step( solve( !KU( (~k⊕~k1) ) @ #vk.4 ) )
                        case c_xor
                        by step( solve( !KU( ~k1 ) @ #vk.6 ) )
                      next
                        case coerce
                        step( solve( !KD( (~k⊕~k1) ) ▶₀ #vk.3 ) )
                          case acceptreader
                          by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                        next
                          case initiatereader
                          by step( contradiction /* impossible chain */ )
                        next
                          case tag1
                          step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                            case d_0_fst
                            by step( contradiction /* impossible chain */ )
                          next
                            case d_0_snd
                            by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                          qed
                        qed
                      qed
                    next
                      case c_xor_case_2
                      step( solve( !KU( (~k⊕~k1) ) @ #vk.4 ) )
                        case c_xor
                        by step( solve( !KU( ~k1 ) @ #vk.7 ) )
                      next
                        case coerce
                        step( solve( !KD( (~k⊕~k1) ) ▶₀ #vk.3 ) )
                          case acceptreader
                          by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                        next
                          case initiatereader
                          by step( contradiction /* impossible chain */ )
                        next
                          case tag1
                          step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                            case d_0_fst
                            by step( contradiction /* impossible chain */ )
                          next
                            case d_0_snd
                            by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                          qed
                        qed
                      qed
                    next
                      case c_xor_case_3
                      by step( contradiction /* cyclic */ )
                    next
                      case coerce
                      step( solve( !KD( (~r1⊕r0⊕~r1.1) ) ▶₀ #vk.2 ) )
                        case acceptreader
                        by step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                      next
                        case initiatereader
                        by step( contradiction /* impossible chain */ )
                      next
                        case tag1
                        step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                          case d_0_fst
                          by step( contradiction /* impossible chain */ )
                        next
                          case d_0_snd
                          by step( solve( (#vr.6, 0) ~~> (#vk.2, 0) ) )
                        qed
                      qed
                    qed
                  next
                    case c_xor_case_13
                    step( solve( !KU( (~r1⊕~r1.1) ) @ #vk.3 ) )
                      case c_xor
                      by step( contradiction /* cyclic */ )
                    next
                      case coerce
                      step( solve( !KD( (~r1⊕~r1.1) ) ▶₀ #vk.2 ) )
                        case acceptreader
                        by step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                      next
                        case initiatereader
                        by step( contradiction /* impossible chain */ )
                      next
                        case tag1
                        step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                          case d_0_fst
                          by step( contradiction /* impossible chain */ )
                        next
                          case d_0_snd
                          by step( solve( (#vr.6, 0) ~~> (#vk.2, 0) ) )
                        qed
                      qed
                    qed
                  next
                    case c_xor_case_14
                    step( solve( !KU( (r0⊕~r1.1) ) @ #vk.3 ) )
                      case c_xor
                      by step( contradiction /* cyclic */ )
                    next
                      case coerce
                      step( solve( !KD( (r0⊕~r1.1) ) ▶₀ #vk.2 ) )
                        case acceptreader
                        by step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                      next
                        case initiatereader
                        by step( contradiction /* impossible chain */ )
                      next
                        case tag1
                        step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                          case d_0_fst
                          by step( contradiction /* impossible chain */ )
                        next
                          case d_0_snd
                          by step( solve( (#vr.6, 0) ~~> (#vk.2, 0) ) )
                        qed
                      qed
                    qed
                  next
                    case c_xor_case_15
                    by step( contradiction /* cyclic */ )
                  next
                    case coerce
                    step( solve( !KD( (~k⊕~k1⊕~r1⊕r0⊕~r1.1) ) ▶₀ #vk.1 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.1, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_3
                  step( solve( !KU( (~k1⊕x⊕~r1.1) ) @ #vk.1 ) )
                    case c_xor_case_1
                    step( solve( !KU( (~k⊕~r1⊕x) ) @ #vk.2 ) )
                      case c_xor_case_1
                      step( solve( !KU( (~k1⊕~r1.1) ) @ #vk.3 ) )
                        case c_xor
                        by step( contradiction /* cyclic */ )
                      next
                        case coerce
                        step( solve( !KD( (~k1⊕~r1.1) ) ▶₀ #vk.3 ) )
                          case acceptreader
                          by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                        next
                          case initiatereader
                          by step( contradiction /* impossible chain */ )
                        next
                          case tag1
                          step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                            case d_0_fst
                            by step( contradiction /* impossible chain */ )
                          next
                            case d_0_snd
                            by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                          qed
                        qed
                      qed
                    next
                      case c_xor_case_2
                      by step( solve( !KU( ~k ) @ #vk.6 ) )
                    next
                      case c_xor_case_3
                      step( solve( !KU( (~k1⊕~r1.1) ) @ #vk.3 ) )
                        case c_xor
                        by step( solve( !KU( ~k1 ) @ #vk.7 ) )
                      next
                        case coerce
                        step( solve( !KD( (~k1⊕~r1.1) ) ▶₀ #vk.3 ) )
                          case acceptreader
                          by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                        next
                          case initiatereader
                          by step( contradiction /* impossible chain */ )
                        next
                          case tag1
                          step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                            case d_0_fst
                            by step( contradiction /* impossible chain */ )
                          next
                            case d_0_snd
                            by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                          qed
                        qed
                      qed
                    next
                      case coerce
                      step( solve( !KD( (~k⊕~r1⊕x) ) ▶₀ #vk.2 ) )
                        case acceptreader
                        by step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                      next
                        case initiatereader
                        by step( contradiction /* impossible chain */ )
                      next
                        case tag1
                        step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                          case d_0_fst
                          by step( contradiction /* impossible chain */ )
                        next
                          case d_0_snd
                          by step( solve( (#vr.6, 0) ~~> (#vk.2, 0) ) )
                        qed
                      qed
                    qed
                  next
                    case c_xor_case_2
                    by step( solve( !KU( ~k1 ) @ #vk.4 ) )
                  next
                    case c_xor_case_3
                    step( solve( !KU( (~k⊕~r1⊕x) ) @ #vk.2 ) )
                      case c_xor_case_1
                      by step( contradiction /* cyclic */ )
                    next
                      case c_xor_case_2
                      by step( solve( !KU( ~k ) @ #vk.6 ) )
                    next
                      case c_xor_case_3
                      step( solve( !KU( (~k1⊕x) ) @ #vk.4 ) )
                        case c_xor
                        by step( solve( !KU( ~k1 ) @ #vk.7 ) )
                      next
                        case coerce
                        step( solve( !KD( (~k1⊕x) ) ▶₀ #vk.3 ) )
                          case acceptreader
                          by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                        next
                          case initiatereader
                          by step( contradiction /* impossible chain */ )
                        next
                          case tag1
                          step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                            case d_0_fst
                            by step( contradiction /* impossible chain */ )
                          next
                            case d_0_snd
                            by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                          qed
                        qed
                      qed
                    next
                      case coerce
                      step( solve( !KD( (~k⊕~r1⊕x) ) ▶₀ #vk.2 ) )
                        case acceptreader
                        by step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                      next
                        case initiatereader
                        by step( contradiction /* impossible chain */ )
                      next
                        case tag1
                        step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                          case d_0_fst
                          by step( contradiction /* impossible chain */ )
                        next
                          case d_0_snd
                          by step( solve( (#vr.6, 0) ~~> (#vk.2, 0) ) )
                        qed
                      qed
                    qed
                  next
                    case coerce
                    step( solve( !KD( (~k1⊕x⊕~r1.1) ) ▶₀ #vk.1 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.1, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_4
                  by step( solve( !KU( ~k1 ) @ #vk.1 ) )
                next
                  case split_case_5
                  step( solve( !KU( (~k1⊕x) ) @ #vk.1 ) )
                    case c_xor
                    by step( solve( !KU( ~k1 ) @ #vk.4 ) )
                  next
                    case coerce
                    step( solve( !KD( (~k1⊕x) ) ▶₀ #vk.1 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.1, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_6
                  step( solve( !KU( (~k⊕~k1⊕~r1) ) @ #vk.2 ) )
                    case c_xor_case_1
                    by step( solve( !KU( ~k1 ) @ #vk.4 ) )
                  next
                    case c_xor_case_2
                    by step( solve( !KU( ~k ) @ #vk.4 ) )
                  next
                    case c_xor_case_3
                    by step( contradiction /* cyclic */ )
                  next
                    case coerce
                    step( solve( !KD( (~k⊕~k1⊕~r1) ) ▶₀ #vk.1 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.1, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_7
                  step( solve( !KU( (x⊕~r1.1) ) @ #vk.1 ) )
                    case c_xor
                    step( solve( !KU( (~k⊕~k1⊕~r1⊕x) ) @ #vk.2 ) )
                      case c_xor_case_1
                      by step( contradiction /* cyclic */ )
                    next
                      case c_xor_case_2
                      by step( solve( !KU( ~k1 ) @ #vk.6 ) )
                    next
                      case c_xor_case_3
                      step( solve( !KU( (~k⊕x) ) @ #vk.5 ) )
                        case c_xor
                        by step( solve( !KU( ~k ) @ #vk.7 ) )
                      next
                        case coerce
                        step( solve( !KD( (~k⊕x) ) ▶₀ #vk.3 ) )
                          case acceptreader
                          by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                        next
                          case initiatereader
                          by step( contradiction /* impossible chain */ )
                        next
                          case tag1
                          step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                            case d_0_fst
                            by step( contradiction /* impossible chain */ )
                          next
                            case d_0_snd
                            by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                          qed
                        qed
                      qed
                    next
                      case c_xor_case_4
                      by step( solve( !KU( ~k ) @ #vk.6 ) )
                    next
                      case c_xor_case_5
                      step( solve( !KU( (~k1⊕x) ) @ #vk.5 ) )
                        case c_xor
                        by step( solve( !KU( ~k1 ) @ #vk.7 ) )
                      next
                        case coerce
                        step( solve( !KD( (~k1⊕x) ) ▶₀ #vk.3 ) )
                          case acceptreader
                          by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                        next
                          case initiatereader
                          by step( contradiction /* impossible chain */ )
                        next
                          case tag1
                          step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                            case d_0_fst
                            by step( contradiction /* impossible chain */ )
                          next
                            case d_0_snd
                            by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                          qed
                        qed
                      qed
                    next
                      case c_xor_case_6
                      step( solve( !KU( (~r1⊕x) ) @ #vk.5 ) )
                        case c_xor
                        by step( contradiction /* cyclic */ )
                      next
                        case coerce
                        step( solve( !KD( (~r1⊕x) ) ▶₀ #vk.3 ) )
                          case acceptreader
                          by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                        next
                          case initiatereader
                          by step( contradiction /* impossible chain */ )
                        next
                          case tag1
                          step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                            case d_0_fst
                            by step( contradiction /* impossible chain */ )
                          next
                            case d_0_snd
                            by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                          qed
                        qed
                      qed
                    next
                      case c_xor_case_7
                      step( solve( !KU( (~k⊕~k1⊕~r1) ) @ #vk.5 ) )
                        case c_xor_case_1
                        by step( solve( !KU( ~k1 ) @ #vk.7 ) )
                      next
                        case c_xor_case_2
                        by step( solve( !KU( ~k ) @ #vk.7 ) )
                      next
                        case c_xor_case_3
                        by step( contradiction /* cyclic */ )
                      next
                        case coerce
                        step( solve( !KD( (~k⊕~k1⊕~r1) ) ▶₀ #vk.3 ) )
                          case acceptreader
                          by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                        next
                          case initiatereader
                          by step( contradiction /* impossible chain */ )
                        next
                          case tag1
                          step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                            case d_0_fst
                            by step( contradiction /* impossible chain */ )
                          next
                            case d_0_snd
                            by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                          qed
                        qed
                      qed
                    next
                      case coerce
                      step( solve( !KD( (~k⊕~k1⊕~r1⊕x) ) ▶₀ #vk.2 ) )
                        case acceptreader
                        by step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                      next
                        case initiatereader
                        by step( contradiction /* impossible chain */ )
                      next
                        case tag1
                        step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                          case d_0_fst
                          by step( contradiction /* impossible chain */ )
                        next
                          case d_0_snd
                          by step( solve( (#vr.6, 0) ~~> (#vk.2, 0) ) )
                        qed
                      qed
                    qed
                  next
                    case coerce
                    step( solve( !KD( (x⊕~r1.1) ) ▶₀ #vk.1 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.1, 0) ) )
                      qed
                    qed
                  qed
                qed
              next
                case split_case_4
                step( solve( !KU( zero ) @ #vk.1 ) )
                  case c_zero
                  step( solve( splitEqs(1) ) )
                    case split
                    step( solve( !KU( (~k⊕~k1⊕~r1⊕~r1.1) ) @ #vk.2 ) )
                      case c_xor_case_1
                      step( solve( !KU( (~k⊕~k1⊕~r1.1) ) @ #vk.3 ) )
                        case c_xor_case_1
                        by step( solve( !KU( ~k1 ) @ #vk.6 ) )
                      next
                        case c_xor_case_2
                        by step( solve( !KU( ~k ) @ #vk.6 ) )
                      next
                        case c_xor_case_3
                        by step( contradiction /* cyclic */ )
                      next
                        case coerce
                        step( solve( !KD( (~k⊕~k1⊕~r1.1) ) ▶₀ #vk.3 ) )
                          case acceptreader
                          by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                        next
                          case initiatereader
                          by step( contradiction /* impossible chain */ )
                        next
                          case tag1
                          step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                            case d_0_fst
                            by step( contradiction /* impossible chain */ )
                          next
                            case d_0_snd
                            by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                          qed
                        qed
                      qed
                    next
                      case c_xor_case_2
                      by step( solve( !KU( ~k1 ) @ #vk.4 ) )
                    next
                      case c_xor_case_3
                      step( solve( !KU( (~k⊕~r1.1) ) @ #vk.3 ) )
                        case c_xor
                        by step( contradiction /* cyclic */ )
                      next
                        case coerce
                        step( solve( !KD( (~k⊕~r1.1) ) ▶₀ #vk.3 ) )
                          case acceptreader
                          by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                        next
                          case initiatereader
                          by step( contradiction /* impossible chain */ )
                        next
                          case tag1
                          step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                            case d_0_fst
                            by step( contradiction /* impossible chain */ )
                          next
                            case d_0_snd
                            by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                          qed
                        qed
                      qed
                    next
                      case c_xor_case_4
                      by step( solve( !KU( ~k ) @ #vk.4 ) )
                    next
                      case c_xor_case_5
                      step( solve( !KU( (~k1⊕~r1.1) ) @ #vk.3 ) )
                        case c_xor
                        by step( contradiction /* cyclic */ )
                      next
                        case coerce
                        step( solve( !KD( (~k1⊕~r1.1) ) ▶₀ #vk.3 ) )
                          case acceptreader
                          by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                        next
                          case initiatereader
                          by step( contradiction /* impossible chain */ )
                        next
                          case tag1
                          step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                            case d_0_fst
                            by step( contradiction /* impossible chain */ )
                          next
                            case d_0_snd
                            by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                          qed
                        qed
                      qed
                    next
                      case c_xor_case_6
                      step( solve( !KU( (~r1⊕~r1.1) ) @ #vk.3 ) )
                        case c_xor
                        by step( contradiction /* cyclic */ )
                      next
                        case coerce
                        step( solve( !KD( (~r1⊕~r1.1) ) ▶₀ #vk.3 ) )
                          case acceptreader
                          by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                        next
                          case initiatereader
                          by step( contradiction /* impossible chain */ )
                        next
                          case tag1
                          step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                            case d_0_fst
                            by step( contradiction /* impossible chain */ )
                          next
                            case d_0_snd
                            by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                          qed
                        qed
                      qed
                    next
                      case c_xor_case_7
                      by step( contradiction /* cyclic */ )
                    next
                      case coerce
                      step( solve( !KD( (~k⊕~k1⊕~r1⊕~r1.1) ) ▶₀ #vk.2 ) )
                        case acceptreader
                        by step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                      next
                        case initiatereader
                        by step( contradiction /* impossible chain */ )
                      next
                        case tag1
                        step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                          case d_0_fst
                          by step( contradiction /* impossible chain */ )
                        next
                          case d_0_snd
                          by step( solve( (#vr.6, 0) ~~> (#vk.2, 0) ) )
                        qed
                      qed
                    qed
                  qed
                next
                  case coerce
                  step( solve( !KD( zero ) ▶₀ #vk.1 ) )
                    case acceptreader
                    by step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.6, 0) ~~> (#vk.1, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_5
                step( solve( !KU( (~k⊕~r1) ) @ #vk.1 ) )
                  case c_xor
                  by step( contradiction /* cyclic */ )
                next
                  case coerce
                  step( solve( !KD( (~k⊕~r1) ) ▶₀ #vk.1 ) )
                    case acceptreader
                    by step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.6, 0) ~~> (#vk.1, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_6
                step( solve( !KU( (~k⊕~r1⊕z) ) @ #vk.1 ) )
                  case c_xor_case_1
                  by step( contradiction /* cyclic */ )
                next
                  case c_xor_case_2
                  by step( solve( !KU( ~k ) @ #vk.4 ) )
                next
                  case c_xor_case_3
                  step( solve( !KU( (~k⊕~r1) ) @ #vk.4 ) )
                    case c_xor
                    by step( contradiction /* cyclic */ )
                  next
                    case coerce
                    step( solve( !KD( (~k⊕~r1) ) ▶₀ #vk.2 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.2, 0) ) )
                      qed
                    qed
                  qed
                next
                  case coerce
                  step( solve( !KD( (~k⊕~r1⊕z) ) ▶₀ #vk.1 ) )
                    case acceptreader
                    by step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.6, 0) ~~> (#vk.1, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_7
                step( solve( !KU( (~r1⊕x) ) @ #vk.1 ) )
                  case c_xor
                  by step( contradiction /* cyclic */ )
                next
                  case coerce
                  step( solve( !KD( (~r1⊕x) ) ▶₀ #vk.1 ) )
                    case acceptreader
                    by step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.6, 0) ~~> (#vk.1, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_8
                step( solve( !KU( (~k⊕x) ) @ #vk.1 ) )
                  case c_xor
                  by step( solve( !KU( ~k ) @ #vk.4 ) )
                next
                  case coerce
                  step( solve( !KD( (~k⊕x) ) ▶₀ #vk.1 ) )
                    case acceptreader
                    by step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.6, 0) ~~> (#vk.1, 0) ) )
                    qed
                  qed
                qed
              qed
            next
              case tag1_case_2
              step( solve( splitEqs(0) ) )
                case split_case_1
                by step( solve( !KU( ~k ) @ #vk.1 ) )
              next
                case split_case_2
                by step( contradiction /* cyclic */ )
              next
                case split_case_3
                MIRRORED
              next
                case split_case_4
                step( solve( !KU( zero ) @ #vk.1 ) )
                  case c_zero
                  MIRRORED
                next
                  case coerce
                  step( solve( !KD( zero ) ▶₀ #vk.1 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.5, 0) ~~> (#vk.1, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_5
                step( solve( !KU( (~k⊕~r1) ) @ #vk.1 ) )
                  case c_xor
                  by step( contradiction /* cyclic */ )
                next
                  case coerce
                  step( solve( !KD( (~k⊕~r1) ) ▶₀ #vk.1 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.5, 0) ~~> (#vk.1, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_6
                step( solve( !KU( (~k⊕~r1⊕z) ) @ #vk.1 ) )
                  case c_xor_case_1
                  by step( contradiction /* cyclic */ )
                next
                  case c_xor_case_2
                  by step( solve( !KU( ~k ) @ #vk.3 ) )
                next
                  case c_xor_case_3
                  step( solve( !KU( (~k⊕~r1) ) @ #vk.3 ) )
                    case c_xor
                    by step( contradiction /* cyclic */ )
                  next
                    case coerce
                    step( solve( !KD( (~k⊕~r1) ) ▶₀ #vk.2 ) )
                      case acceptreader
                      by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.5, 0) ~~> (#vk.2, 0) ) )
                      qed
                    qed
                  qed
                next
                  case coerce
                  step( solve( !KD( (~k⊕~r1⊕z) ) ▶₀ #vk.1 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.5, 0) ~~> (#vk.1, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_7
                step( solve( !KU( (~r1⊕x) ) @ #vk.1 ) )
                  case c_xor
                  by step( contradiction /* cyclic */ )
                next
                  case coerce
                  step( solve( !KD( (~r1⊕x) ) ▶₀ #vk.1 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.5, 0) ~~> (#vk.1, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_8
                step( solve( !KU( (~k⊕x) ) @ #vk.1 ) )
                  case c_xor
                  by step( solve( !KU( ~k ) @ #vk.3 ) )
                next
                  case coerce
                  step( solve( !KD( (~k⊕x) ) ▶₀ #vk.1 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.5, 0) ~~> (#vk.1, 0) ) )
                    qed
                  qed
                qed
              qed
            next
              case tag1_case_3
              step( solve( splitEqs(0) ) )
                case split_case_1
                by step( solve( !KU( ~k ) @ #vk.1 ) )
              next
                case split_case_2
                by step( contradiction /* cyclic */ )
              next
                case split_case_3
                step( solve( splitEqs(1) ) )
                  case split_case_1
                  step( solve( !KU( (~k1⊕~r1.1) ) @ #vk.1 ) )
                    case c_xor
                    by step( solve( !KU( ~k1 ) @ #vk.4 ) )
                  next
                    case coerce
                    step( solve( !KD( (~k1⊕~r1.1) ) ▶₀ #vk.1 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.1, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_2
                  step( solve( !KU( (~k⊕~k1⊕~r1⊕r0⊕~r1.1) ) @ #vk.2 ) )
                    case c_xor_case_01
                    step( solve( !KU( (~k⊕~k1⊕~r1⊕~r1.1) ) @ #vk.3 ) )
                      case c_xor_case_1
                      step( solve( !KU( (~k⊕~k1⊕~r1.1) ) @ #vk.4 ) )
                        case c_xor_case_1
                        by step( solve( !KU( ~k1 ) @ #vk.7 ) )
                      next
                        case c_xor_case_2
                        by step( solve( !KU( ~k ) @ #vk.7 ) )
                      next
                        case c_xor_case_3
                        by step( contradiction /* cyclic */ )
                      next
                        case coerce
                        step( solve( !KD( (~k⊕~k1⊕~r1.1) ) ▶₀ #vk.3 ) )
                          case acceptreader
                          by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                        next
                          case initiatereader
                          by step( contradiction /* impossible chain */ )
                        next
                          case tag1
                          step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                            case d_0_fst
                            by step( contradiction /* impossible chain */ )
                          next
                            case d_0_snd
                            by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                          qed
                        qed
                      qed
                    next
                      case c_xor_case_2
                      by step( solve( !KU( ~k1 ) @ #vk.5 ) )
                    next
                      case c_xor_case_3
                      step( solve( !KU( (~k⊕~r1.1) ) @ #vk.4 ) )
                        case c_xor
                        by step( contradiction /* cyclic */ )
                      next
                        case coerce
                        step( solve( !KD( (~k⊕~r1.1) ) ▶₀ #vk.3 ) )
                          case acceptreader
                          by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                        next
                          case initiatereader
                          by step( contradiction /* impossible chain */ )
                        next
                          case tag1
                          step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                            case d_0_fst
                            by step( contradiction /* impossible chain */ )
                          next
                            case d_0_snd
                            by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                          qed
                        qed
                      qed
                    next
                      case c_xor_case_4
                      by step( solve( !KU( ~k ) @ #vk.5 ) )
                    next
                      case c_xor_case_5
                      step( solve( !KU( (~k1⊕~r1.1) ) @ #vk.4 ) )
                        case c_xor
                        by step( contradiction /* cyclic */ )
                      next
                        case coerce
                        step( solve( !KD( (~k1⊕~r1.1) ) ▶₀ #vk.3 ) )
                          case acceptreader
                          by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                        next
                          case initiatereader
                          by step( contradiction /* impossible chain */ )
                        next
                          case tag1
                          step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                            case d_0_fst
                            by step( contradiction /* impossible chain */ )
                          next
                            case d_0_snd
                            by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                          qed
                        qed
                      qed
                    next
                      case c_xor_case_6
                      step( solve( !KU( (~r1⊕~r1.1) ) @ #vk.4 ) )
                        case c_xor
                        by step( contradiction /* cyclic */ )
                      next
                        case coerce
                        step( solve( !KD( (~r1⊕~r1.1) ) ▶₀ #vk.3 ) )
                          case acceptreader
                          by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                        next
                          case initiatereader
                          by step( contradiction /* impossible chain */ )
                        next
                          case tag1
                          step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                            case d_0_fst
                            by step( contradiction /* impossible chain */ )
                          next
                            case d_0_snd
                            by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                          qed
                        qed
                      qed
                    next
                      case c_xor_case_7
                      by step( contradiction /* cyclic */ )
                    next
                      case coerce
                      step( solve( !KD( (~k⊕~k1⊕~r1⊕~r1.1) ) ▶₀ #vk.2 ) )
                        case acceptreader
                        by step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                      next
                        case initiatereader
                        by step( contradiction /* impossible chain */ )
                      next
                        case tag1
                        step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                          case d_0_fst
                          by step( contradiction /* impossible chain */ )
                        next
                          case d_0_snd
                          by step( solve( (#vr.6, 0) ~~> (#vk.2, 0) ) )
                        qed
                      qed
                    qed
                  next
                    case c_xor_case_02
                    step( solve( !KU( (~k⊕~k1⊕r0⊕~r1.1) ) @ #vk.3 ) )
                      case c_xor_case_1
                      step( solve( !KU( (~k⊕~k1⊕~r1.1) ) @ #vk.5 ) )
                        case c_xor_case_1
                        by step( solve( !KU( ~k1 ) @ #vk.7 ) )
                      next
                        case c_xor_case_2
                        by step( solve( !KU( ~k ) @ #vk.7 ) )
                      next
                        case c_xor_case_3
                        by step( contradiction /* cyclic */ )
                      next
                        case coerce
                        step( solve( !KD( (~k⊕~k1⊕~r1.1) ) ▶₀ #vk.3 ) )
                          case acceptreader
                          by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                        next
                          case initiatereader
                          by step( contradiction /* impossible chain */ )
                        next
                          case tag1
                          step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                            case d_0_fst
                            by step( contradiction /* impossible chain */ )
                          next
                            case d_0_snd
                            by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                          qed
                        qed
                      qed
                    next
                      case c_xor_case_2
                      by step( solve( !KU( ~k1 ) @ #vk.6 ) )
                    next
                      case c_xor_case_3
                      step( solve( !KU( (~k⊕~r1.1) ) @ #vk.5 ) )
                        case c_xor
                        by step( contradiction /* cyclic */ )
                      next
                        case coerce
                        step( solve( !KD( (~k⊕~r1.1) ) ▶₀ #vk.3 ) )
                          case acceptreader
                          by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                        next
                          case initiatereader
                          by step( contradiction /* impossible chain */ )
                        next
                          case tag1
                          step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                            case d_0_fst
                            by step( contradiction /* impossible chain */ )
                          next
                            case d_0_snd
                            by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                          qed
                        qed
                      qed
                    next
                      case c_xor_case_4
                      by step( solve( !KU( ~k ) @ #vk.6 ) )
                    next
                      case c_xor_case_5
                      step( solve( !KU( (~k1⊕~r1.1) ) @ #vk.5 ) )
                        case c_xor
                        by step( contradiction /* cyclic */ )
                      next
                        case coerce
                        step( solve( !KD( (~k1⊕~r1.1) ) ▶₀ #vk.3 ) )
                          case acceptreader
                          by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                        next
                          case initiatereader
                          by step( contradiction /* impossible chain */ )
                        next
                          case tag1
                          step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                            case d_0_fst
                            by step( contradiction /* impossible chain */ )
                          next
                            case d_0_snd
                            by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                          qed
                        qed
                      qed
                    next
                      case c_xor_case_6
                      step( solve( !KU( (r0⊕~r1.1) ) @ #vk.5 ) )
                        case c_xor
                        by step( contradiction /* cyclic */ )
                      next
                        case coerce
                        step( solve( !KD( (r0⊕~r1.1) ) ▶₀ #vk.3 ) )
                          case acceptreader
                          by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                        next
                          case initiatereader
                          by step( contradiction /* impossible chain */ )
                        next
                          case tag1
                          step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                            case d_0_fst
                            by step( contradiction /* impossible chain */ )
                          next
                            case d_0_snd
                            by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                          qed
                        qed
                      qed
                    next
                      case c_xor_case_7
                      by step( contradiction /* cyclic */ )
                    next
                      case coerce
                      step( solve( !KD( (~k⊕~k1⊕r0⊕~r1.1) ) ▶₀ #vk.2 ) )
                        case acceptreader
                        by step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                      next
                        case initiatereader
                        by step( contradiction /* impossible chain */ )
                      next
                        case tag1
                        step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                          case d_0_fst
                          by step( contradiction /* impossible chain */ )
                        next
                          case d_0_snd
                          by step( solve( (#vr.6, 0) ~~> (#vk.2, 0) ) )
                        qed
                      qed
                    qed
                  next
                    case c_xor_case_03
                    step( solve( !KU( (~k⊕~k1⊕~r1.1) ) @ #vk.3 ) )
                      case c_xor_case_1
                      by step( solve( !KU( ~k1 ) @ #vk.6 ) )
                    next
                      case c_xor_case_2
                      by step( solve( !KU( ~k ) @ #vk.6 ) )
                    next
                      case c_xor_case_3
                      by step( contradiction /* cyclic */ )
                    next
                      case coerce
                      step( solve( !KD( (~k⊕~k1⊕~r1.1) ) ▶₀ #vk.2 ) )
                        case acceptreader
                        by step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                      next
                        case initiatereader
                        by step( contradiction /* impossible chain */ )
                      next
                        case tag1
                        step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                          case d_0_fst
                          by step( contradiction /* impossible chain */ )
                        next
                          case d_0_snd
                          by step( solve( (#vr.6, 0) ~~> (#vk.2, 0) ) )
                        qed
                      qed
                    qed
                  next
                    case c_xor_case_04
                    by step( solve( !KU( ~k1 ) @ #vk.4 ) )
                  next
                    case c_xor_case_05
                    step( solve( !KU( (~k⊕~r1⊕~r1.1) ) @ #vk.3 ) )
                      case c_xor_case_1
                      step( solve( !KU( (~k1⊕r0) ) @ #vk.4 ) )
                        case c_xor
                        by step( solve( !KU( ~k1 ) @ #vk.7 ) )
                      next
                        case coerce
                        step( solve( !KD( (~k1⊕r0) ) ▶₀ #vk.3 ) )
                          case acceptreader
                          by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                        next
                          case initiatereader
                          by step( contradiction /* impossible chain */ )
                        next
                          case tag1
                          step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                            case d_0_fst
                            by step( contradiction /* impossible chain */ )
                          next
                            case d_0_snd
                            by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                          qed
                        qed
                      qed
                    next
                      case c_xor_case_2
                      by step( solve( !KU( ~k ) @ #vk.6 ) )
                    next
                      case c_xor_case_3
                      by step( contradiction /* cyclic */ )
                    next
                      case coerce
                      step( solve( !KD( (~k⊕~r1⊕~r1.1) ) ▶₀ #vk.2 ) )
                        case acceptreader
                        by step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                      next
                        case initiatereader
                        by step( contradiction /* impossible chain */ )
                      next
                        case tag1
                        step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                          case d_0_fst
                          by step( contradiction /* impossible chain */ )
                        next
                          case d_0_snd
                          by step( solve( (#vr.6, 0) ~~> (#vk.2, 0) ) )
                        qed
                      qed
                    qed
                  next
                    case c_xor_case_06
                    step( solve( !KU( (~k⊕r0⊕~r1.1) ) @ #vk.3 ) )
                      case c_xor_case_1
                      step( solve( !KU( (~k1⊕~r1) ) @ #vk.4 ) )
                        case c_xor
                        by step( solve( !KU( ~k1 ) @ #vk.7 ) )
                      next
                        case coerce
                        step( solve( !KD( (~k1⊕~r1) ) ▶₀ #vk.3 ) )
                          case acceptreader
                          by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                        next
                          case initiatereader
                          by step( contradiction /* impossible chain */ )
                        next
                          case tag1
                          step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                            case d_0_fst
                            by step( contradiction /* impossible chain */ )
                          next
                            case d_0_snd
                            by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                          qed
                        qed
                      qed
                    next
                      case c_xor_case_2
                      by step( solve( !KU( ~k ) @ #vk.6 ) )
                    next
                      case c_xor_case_3
                      by step( contradiction /* cyclic */ )
                    next
                      case coerce
                      step( solve( !KD( (~k⊕r0⊕~r1.1) ) ▶₀ #vk.2 ) )
                        case acceptreader
                        by step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                      next
                        case initiatereader
                        by step( contradiction /* impossible chain */ )
                      next
                        case tag1
                        step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                          case d_0_fst
                          by step( contradiction /* impossible chain */ )
                        next
                          case d_0_snd
                          by step( solve( (#vr.6, 0) ~~> (#vk.2, 0) ) )
                        qed
                      qed
                    qed
                  next
                    case c_xor_case_07
                    step( solve( !KU( (~k⊕~r1.1) ) @ #vk.3 ) )
                      case c_xor
                      by step( contradiction /* cyclic */ )
                    next
                      case coerce
                      step( solve( !KD( (~k⊕~r1.1) ) ▶₀ #vk.2 ) )
                        case acceptreader
                        by step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                      next
                        case initiatereader
                        by step( contradiction /* impossible chain */ )
                      next
                        case tag1
                        step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                          case d_0_fst
                          by step( contradiction /* impossible chain */ )
                        next
                          case d_0_snd
                          by step( solve( (#vr.6, 0) ~~> (#vk.2, 0) ) )
                        qed
                      qed
                    qed
                  next
                    case c_xor_case_08
                    by step( solve( !KU( ~k ) @ #vk.4 ) )
                  next
                    case c_xor_case_09
                    step( solve( !KU( (~k1⊕~r1⊕~r1.1) ) @ #vk.3 ) )
                      case c_xor_case_1
                      step( solve( !KU( (~k⊕r0) ) @ #vk.4 ) )
                        case c_xor
                        by step( solve( !KU( ~k ) @ #vk.7 ) )
                      next
                        case coerce
                        step( solve( !KD( (~k⊕r0) ) ▶₀ #vk.3 ) )
                          case acceptreader
                          by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                        next
                          case initiatereader
                          by step( contradiction /* impossible chain */ )
                        next
                          case tag1
                          step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                            case d_0_fst
                            by step( contradiction /* impossible chain */ )
                          next
                            case d_0_snd
                            by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                          qed
                        qed
                      qed
                    next
                      case c_xor_case_2
                      by step( solve( !KU( ~k1 ) @ #vk.6 ) )
                    next
                      case c_xor_case_3
                      by step( contradiction /* cyclic */ )
                    next
                      case coerce
                      step( solve( !KD( (~k1⊕~r1⊕~r1.1) ) ▶₀ #vk.2 ) )
                        case acceptreader
                        by step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                      next
                        case initiatereader
                        by step( contradiction /* impossible chain */ )
                      next
                        case tag1
                        step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                          case d_0_fst
                          by step( contradiction /* impossible chain */ )
                        next
                          case d_0_snd
                          by step( solve( (#vr.6, 0) ~~> (#vk.2, 0) ) )
                        qed
                      qed
                    qed
                  next
                    case c_xor_case_10
                    step( solve( !KU( (~k1⊕r0⊕~r1.1) ) @ #vk.3 ) )
                      case c_xor_case_1
                      step( solve( !KU( (~k⊕~r1) ) @ #vk.4 ) )
                        case c_xor
                        by step( solve( !KU( ~k ) @ #vk.7 ) )
                      next
                        case coerce
                        step( solve( !KD( (~k⊕~r1) ) ▶₀ #vk.3 ) )
                          case acceptreader
                          by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                        next
                          case initiatereader
                          by step( contradiction /* impossible chain */ )
                        next
                          case tag1
                          step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                            case d_0_fst
                            by step( contradiction /* impossible chain */ )
                          next
                            case d_0_snd
                            by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                          qed
                        qed
                      qed
                    next
                      case c_xor_case_2
                      by step( solve( !KU( ~k1 ) @ #vk.6 ) )
                    next
                      case c_xor_case_3
                      by step( contradiction /* cyclic */ )
                    next
                      case coerce
                      step( solve( !KD( (~k1⊕r0⊕~r1.1) ) ▶₀ #vk.2 ) )
                        case acceptreader
                        by step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                      next
                        case initiatereader
                        by step( contradiction /* impossible chain */ )
                      next
                        case tag1
                        step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                          case d_0_fst
                          by step( contradiction /* impossible chain */ )
                        next
                          case d_0_snd
                          by step( solve( (#vr.6, 0) ~~> (#vk.2, 0) ) )
                        qed
                      qed
                    qed
                  next
                    case c_xor_case_11
                    step( solve( !KU( (~k1⊕~r1.1) ) @ #vk.3 ) )
                      case c_xor
                      by step( contradiction /* cyclic */ )
                    next
                      case coerce
                      step( solve( !KD( (~k1⊕~r1.1) ) ▶₀ #vk.2 ) )
                        case acceptreader
                        by step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                      next
                        case initiatereader
                        by step( contradiction /* impossible chain */ )
                      next
                        case tag1
                        step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                          case d_0_fst
                          by step( contradiction /* impossible chain */ )
                        next
                          case d_0_snd
                          by step( solve( (#vr.6, 0) ~~> (#vk.2, 0) ) )
                        qed
                      qed
                    qed
                  next
                    case c_xor_case_12
                    step( solve( !KU( (~r1⊕r0⊕~r1.1) ) @ #vk.3 ) )
                      case c_xor_case_1
                      step( solve( !KU( (~k⊕~k1) ) @ #vk.4 ) )
                        case c_xor
                        by step( solve( !KU( ~k1 ) @ #vk.6 ) )
                      next
                        case coerce
                        step( solve( !KD( (~k⊕~k1) ) ▶₀ #vk.3 ) )
                          case acceptreader
                          by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                        next
                          case initiatereader
                          by step( contradiction /* impossible chain */ )
                        next
                          case tag1
                          step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                            case d_0_fst
                            by step( contradiction /* impossible chain */ )
                          next
                            case d_0_snd
                            by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                          qed
                        qed
                      qed
                    next
                      case c_xor_case_2
                      step( solve( !KU( (~k⊕~k1) ) @ #vk.4 ) )
                        case c_xor
                        by step( solve( !KU( ~k1 ) @ #vk.7 ) )
                      next
                        case coerce
                        step( solve( !KD( (~k⊕~k1) ) ▶₀ #vk.3 ) )
                          case acceptreader
                          by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                        next
                          case initiatereader
                          by step( contradiction /* impossible chain */ )
                        next
                          case tag1
                          step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                            case d_0_fst
                            by step( contradiction /* impossible chain */ )
                          next
                            case d_0_snd
                            by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                          qed
                        qed
                      qed
                    next
                      case c_xor_case_3
                      by step( contradiction /* cyclic */ )
                    next
                      case coerce
                      step( solve( !KD( (~r1⊕r0⊕~r1.1) ) ▶₀ #vk.2 ) )
                        case acceptreader
                        by step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                      next
                        case initiatereader
                        by step( contradiction /* impossible chain */ )
                      next
                        case tag1
                        step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                          case d_0_fst
                          by step( contradiction /* impossible chain */ )
                        next
                          case d_0_snd
                          by step( solve( (#vr.6, 0) ~~> (#vk.2, 0) ) )
                        qed
                      qed
                    qed
                  next
                    case c_xor_case_13
                    step( solve( !KU( (~r1⊕~r1.1) ) @ #vk.3 ) )
                      case c_xor
                      by step( contradiction /* cyclic */ )
                    next
                      case coerce
                      step( solve( !KD( (~r1⊕~r1.1) ) ▶₀ #vk.2 ) )
                        case acceptreader
                        by step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                      next
                        case initiatereader
                        by step( contradiction /* impossible chain */ )
                      next
                        case tag1
                        step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                          case d_0_fst
                          by step( contradiction /* impossible chain */ )
                        next
                          case d_0_snd
                          by step( solve( (#vr.6, 0) ~~> (#vk.2, 0) ) )
                        qed
                      qed
                    qed
                  next
                    case c_xor_case_14
                    step( solve( !KU( (r0⊕~r1.1) ) @ #vk.3 ) )
                      case c_xor
                      by step( contradiction /* cyclic */ )
                    next
                      case coerce
                      step( solve( !KD( (r0⊕~r1.1) ) ▶₀ #vk.2 ) )
                        case acceptreader
                        by step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                      next
                        case initiatereader
                        by step( contradiction /* impossible chain */ )
                      next
                        case tag1
                        step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                          case d_0_fst
                          by step( contradiction /* impossible chain */ )
                        next
                          case d_0_snd
                          by step( solve( (#vr.6, 0) ~~> (#vk.2, 0) ) )
                        qed
                      qed
                    qed
                  next
                    case c_xor_case_15
                    by step( contradiction /* cyclic */ )
                  next
                    case coerce
                    step( solve( !KD( (~k⊕~k1⊕~r1⊕r0⊕~r1.1) ) ▶₀ #vk.1 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.1, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_3
                  step( solve( !KU( (~k1⊕x⊕~r1.1) ) @ #vk.1 ) )
                    case c_xor_case_1
                    step( solve( !KU( (~k⊕~r1⊕x) ) @ #vk.2 ) )
                      case c_xor_case_1
                      step( solve( !KU( (~k1⊕~r1.1) ) @ #vk.3 ) )
                        case c_xor
                        by step( contradiction /* cyclic */ )
                      next
                        case coerce
                        step( solve( !KD( (~k1⊕~r1.1) ) ▶₀ #vk.3 ) )
                          case acceptreader
                          by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                        next
                          case initiatereader
                          by step( contradiction /* impossible chain */ )
                        next
                          case tag1
                          step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                            case d_0_fst
                            by step( contradiction /* impossible chain */ )
                          next
                            case d_0_snd
                            by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                          qed
                        qed
                      qed
                    next
                      case c_xor_case_2
                      by step( solve( !KU( ~k ) @ #vk.6 ) )
                    next
                      case c_xor_case_3
                      step( solve( !KU( (~k1⊕~r1.1) ) @ #vk.3 ) )
                        case c_xor
                        by step( solve( !KU( ~k1 ) @ #vk.7 ) )
                      next
                        case coerce
                        step( solve( !KD( (~k1⊕~r1.1) ) ▶₀ #vk.3 ) )
                          case acceptreader
                          by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                        next
                          case initiatereader
                          by step( contradiction /* impossible chain */ )
                        next
                          case tag1
                          step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                            case d_0_fst
                            by step( contradiction /* impossible chain */ )
                          next
                            case d_0_snd
                            by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                          qed
                        qed
                      qed
                    next
                      case coerce
                      step( solve( !KD( (~k⊕~r1⊕x) ) ▶₀ #vk.2 ) )
                        case acceptreader
                        by step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                      next
                        case initiatereader
                        by step( contradiction /* impossible chain */ )
                      next
                        case tag1
                        step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                          case d_0_fst
                          by step( contradiction /* impossible chain */ )
                        next
                          case d_0_snd
                          by step( solve( (#vr.6, 0) ~~> (#vk.2, 0) ) )
                        qed
                      qed
                    qed
                  next
                    case c_xor_case_2
                    by step( solve( !KU( ~k1 ) @ #vk.4 ) )
                  next
                    case c_xor_case_3
                    step( solve( !KU( (~k⊕~r1⊕x) ) @ #vk.2 ) )
                      case c_xor_case_1
                      by step( contradiction /* cyclic */ )
                    next
                      case c_xor_case_2
                      by step( solve( !KU( ~k ) @ #vk.6 ) )
                    next
                      case c_xor_case_3
                      step( solve( !KU( (~k1⊕x) ) @ #vk.4 ) )
                        case c_xor
                        by step( solve( !KU( ~k1 ) @ #vk.7 ) )
                      next
                        case coerce
                        step( solve( !KD( (~k1⊕x) ) ▶₀ #vk.3 ) )
                          case acceptreader
                          by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                        next
                          case initiatereader
                          by step( contradiction /* impossible chain */ )
                        next
                          case tag1
                          step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                            case d_0_fst
                            by step( contradiction /* impossible chain */ )
                          next
                            case d_0_snd
                            by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                          qed
                        qed
                      qed
                    next
                      case coerce
                      step( solve( !KD( (~k⊕~r1⊕x) ) ▶₀ #vk.2 ) )
                        case acceptreader
                        by step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                      next
                        case initiatereader
                        by step( contradiction /* impossible chain */ )
                      next
                        case tag1
                        step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                          case d_0_fst
                          by step( contradiction /* impossible chain */ )
                        next
                          case d_0_snd
                          by step( solve( (#vr.6, 0) ~~> (#vk.2, 0) ) )
                        qed
                      qed
                    qed
                  next
                    case coerce
                    step( solve( !KD( (~k1⊕x⊕~r1.1) ) ▶₀ #vk.1 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.1, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_4
                  by step( solve( !KU( ~k1 ) @ #vk.1 ) )
                next
                  case split_case_5
                  step( solve( !KU( (~k1⊕x) ) @ #vk.1 ) )
                    case c_xor
                    by step( solve( !KU( ~k1 ) @ #vk.4 ) )
                  next
                    case coerce
                    step( solve( !KD( (~k1⊕x) ) ▶₀ #vk.1 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.1, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_6
                  step( solve( !KU( (~k⊕~k1⊕~r1) ) @ #vk.2 ) )
                    case c_xor_case_1
                    by step( solve( !KU( ~k1 ) @ #vk.4 ) )
                  next
                    case c_xor_case_2
                    by step( solve( !KU( ~k ) @ #vk.4 ) )
                  next
                    case c_xor_case_3
                    by step( contradiction /* cyclic */ )
                  next
                    case coerce
                    step( solve( !KD( (~k⊕~k1⊕~r1) ) ▶₀ #vk.1 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.1, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_7
                  step( solve( !KU( (x⊕~r1.1) ) @ #vk.1 ) )
                    case c_xor
                    step( solve( !KU( (~k⊕~k1⊕~r1⊕x) ) @ #vk.2 ) )
                      case c_xor_case_1
                      by step( contradiction /* cyclic */ )
                    next
                      case c_xor_case_2
                      by step( solve( !KU( ~k1 ) @ #vk.6 ) )
                    next
                      case c_xor_case_3
                      step( solve( !KU( (~k⊕x) ) @ #vk.5 ) )
                        case c_xor
                        by step( solve( !KU( ~k ) @ #vk.7 ) )
                      next
                        case coerce
                        step( solve( !KD( (~k⊕x) ) ▶₀ #vk.3 ) )
                          case acceptreader
                          by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                        next
                          case initiatereader
                          by step( contradiction /* impossible chain */ )
                        next
                          case tag1
                          step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                            case d_0_fst
                            by step( contradiction /* impossible chain */ )
                          next
                            case d_0_snd
                            by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                          qed
                        qed
                      qed
                    next
                      case c_xor_case_4
                      by step( solve( !KU( ~k ) @ #vk.6 ) )
                    next
                      case c_xor_case_5
                      step( solve( !KU( (~k1⊕x) ) @ #vk.5 ) )
                        case c_xor
                        by step( solve( !KU( ~k1 ) @ #vk.7 ) )
                      next
                        case coerce
                        step( solve( !KD( (~k1⊕x) ) ▶₀ #vk.3 ) )
                          case acceptreader
                          by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                        next
                          case initiatereader
                          by step( contradiction /* impossible chain */ )
                        next
                          case tag1
                          step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                            case d_0_fst
                            by step( contradiction /* impossible chain */ )
                          next
                            case d_0_snd
                            by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                          qed
                        qed
                      qed
                    next
                      case c_xor_case_6
                      step( solve( !KU( (~r1⊕x) ) @ #vk.5 ) )
                        case c_xor
                        by step( contradiction /* cyclic */ )
                      next
                        case coerce
                        step( solve( !KD( (~r1⊕x) ) ▶₀ #vk.3 ) )
                          case acceptreader
                          by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                        next
                          case initiatereader
                          by step( contradiction /* impossible chain */ )
                        next
                          case tag1
                          step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                            case d_0_fst
                            by step( contradiction /* impossible chain */ )
                          next
                            case d_0_snd
                            by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                          qed
                        qed
                      qed
                    next
                      case c_xor_case_7
                      step( solve( !KU( (~k⊕~k1⊕~r1) ) @ #vk.5 ) )
                        case c_xor_case_1
                        by step( solve( !KU( ~k1 ) @ #vk.7 ) )
                      next
                        case c_xor_case_2
                        by step( solve( !KU( ~k ) @ #vk.7 ) )
                      next
                        case c_xor_case_3
                        by step( contradiction /* cyclic */ )
                      next
                        case coerce
                        step( solve( !KD( (~k⊕~k1⊕~r1) ) ▶₀ #vk.3 ) )
                          case acceptreader
                          by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                        next
                          case initiatereader
                          by step( contradiction /* impossible chain */ )
                        next
                          case tag1
                          step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                            case d_0_fst
                            by step( contradiction /* impossible chain */ )
                          next
                            case d_0_snd
                            by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                          qed
                        qed
                      qed
                    next
                      case coerce
                      step( solve( !KD( (~k⊕~k1⊕~r1⊕x) ) ▶₀ #vk.2 ) )
                        case acceptreader
                        by step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                      next
                        case initiatereader
                        by step( contradiction /* impossible chain */ )
                      next
                        case tag1
                        step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                          case d_0_fst
                          by step( contradiction /* impossible chain */ )
                        next
                          case d_0_snd
                          by step( solve( (#vr.6, 0) ~~> (#vk.2, 0) ) )
                        qed
                      qed
                    qed
                  next
                    case coerce
                    step( solve( !KD( (x⊕~r1.1) ) ▶₀ #vk.1 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.1, 0) ) )
                      qed
                    qed
                  qed
                qed
              next
                case split_case_4
                step( solve( !KU( zero ) @ #vk.1 ) )
                  case c_zero
                  step( solve( splitEqs(1) ) )
                    case split
                    step( solve( !KU( (~k⊕~k1⊕~r1⊕~r1.1) ) @ #vk.2 ) )
                      case c_xor_case_1
                      step( solve( !KU( (~k⊕~k1⊕~r1.1) ) @ #vk.3 ) )
                        case c_xor_case_1
                        by step( solve( !KU( ~k1 ) @ #vk.6 ) )
                      next
                        case c_xor_case_2
                        by step( solve( !KU( ~k ) @ #vk.6 ) )
                      next
                        case c_xor_case_3
                        by step( contradiction /* cyclic */ )
                      next
                        case coerce
                        step( solve( !KD( (~k⊕~k1⊕~r1.1) ) ▶₀ #vk.3 ) )
                          case acceptreader
                          by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                        next
                          case initiatereader
                          by step( contradiction /* impossible chain */ )
                        next
                          case tag1
                          step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                            case d_0_fst
                            by step( contradiction /* impossible chain */ )
                          next
                            case d_0_snd
                            by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                          qed
                        qed
                      qed
                    next
                      case c_xor_case_2
                      by step( solve( !KU( ~k1 ) @ #vk.4 ) )
                    next
                      case c_xor_case_3
                      step( solve( !KU( (~k⊕~r1.1) ) @ #vk.3 ) )
                        case c_xor
                        by step( contradiction /* cyclic */ )
                      next
                        case coerce
                        step( solve( !KD( (~k⊕~r1.1) ) ▶₀ #vk.3 ) )
                          case acceptreader
                          by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                        next
                          case initiatereader
                          by step( contradiction /* impossible chain */ )
                        next
                          case tag1
                          step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                            case d_0_fst
                            by step( contradiction /* impossible chain */ )
                          next
                            case d_0_snd
                            by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                          qed
                        qed
                      qed
                    next
                      case c_xor_case_4
                      by step( solve( !KU( ~k ) @ #vk.4 ) )
                    next
                      case c_xor_case_5
                      step( solve( !KU( (~k1⊕~r1.1) ) @ #vk.3 ) )
                        case c_xor
                        by step( contradiction /* cyclic */ )
                      next
                        case coerce
                        step( solve( !KD( (~k1⊕~r1.1) ) ▶₀ #vk.3 ) )
                          case acceptreader
                          by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                        next
                          case initiatereader
                          by step( contradiction /* impossible chain */ )
                        next
                          case tag1
                          step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                            case d_0_fst
                            by step( contradiction /* impossible chain */ )
                          next
                            case d_0_snd
                            by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                          qed
                        qed
                      qed
                    next
                      case c_xor_case_6
                      step( solve( !KU( (~r1⊕~r1.1) ) @ #vk.3 ) )
                        case c_xor
                        by step( contradiction /* cyclic */ )
                      next
                        case coerce
                        step( solve( !KD( (~r1⊕~r1.1) ) ▶₀ #vk.3 ) )
                          case acceptreader
                          by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                        next
                          case initiatereader
                          by step( contradiction /* impossible chain */ )
                        next
                          case tag1
                          step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                            case d_0_fst
                            by step( contradiction /* impossible chain */ )
                          next
                            case d_0_snd
                            by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                          qed
                        qed
                      qed
                    next
                      case c_xor_case_7
                      by step( contradiction /* cyclic */ )
                    next
                      case coerce
                      step( solve( !KD( (~k⊕~k1⊕~r1⊕~r1.1) ) ▶₀ #vk.2 ) )
                        case acceptreader
                        by step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                      next
                        case initiatereader
                        by step( contradiction /* impossible chain */ )
                      next
                        case tag1
                        step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                          case d_0_fst
                          by step( contradiction /* impossible chain */ )
                        next
                          case d_0_snd
                          by step( solve( (#vr.6, 0) ~~> (#vk.2, 0) ) )
                        qed
                      qed
                    qed
                  qed
                next
                  case coerce
                  step( solve( !KD( zero ) ▶₀ #vk.1 ) )
                    case acceptreader
                    by step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.6, 0) ~~> (#vk.1, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_5
                step( solve( !KU( (~k⊕~r1) ) @ #vk.1 ) )
                  case c_xor
                  by step( contradiction /* cyclic */ )
                next
                  case coerce
                  step( solve( !KD( (~k⊕~r1) ) ▶₀ #vk.1 ) )
                    case acceptreader
                    by step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.6, 0) ~~> (#vk.1, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_6
                step( solve( !KU( (~k⊕~r1⊕z) ) @ #vk.1 ) )
                  case c_xor_case_1
                  by step( contradiction /* cyclic */ )
                next
                  case c_xor_case_2
                  by step( solve( !KU( ~k ) @ #vk.4 ) )
                next
                  case c_xor_case_3
                  step( solve( !KU( (~k⊕~r1) ) @ #vk.4 ) )
                    case c_xor
                    by step( contradiction /* cyclic */ )
                  next
                    case coerce
                    step( solve( !KD( (~k⊕~r1) ) ▶₀ #vk.2 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.2, 0) ) )
                      qed
                    qed
                  qed
                next
                  case coerce
                  step( solve( !KD( (~k⊕~r1⊕z) ) ▶₀ #vk.1 ) )
                    case acceptreader
                    by step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.6, 0) ~~> (#vk.1, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_7
                step( solve( !KU( (~r1⊕x) ) @ #vk.1 ) )
                  case c_xor
                  by step( contradiction /* cyclic */ )
                next
                  case coerce
                  step( solve( !KD( (~r1⊕x) ) ▶₀ #vk.1 ) )
                    case acceptreader
                    by step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.6, 0) ~~> (#vk.1, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_8
                step( solve( !KU( (~k⊕x) ) @ #vk.1 ) )
                  case c_xor
                  by step( solve( !KU( ~k ) @ #vk.4 ) )
                next
                  case coerce
                  step( solve( !KD( (~k⊕x) ) ▶₀ #vk.1 ) )
                    case acceptreader
                    by step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.6, 0) ~~> (#vk.1, 0) ) )
                    qed
                  qed
                qed
              qed
            qed
          next
            case setup_case_3
            step( solve( !KU( h(z) ) @ #vk ) )
              case c_h
              step( solve( splitEqs(0) ) )
                case split_case_1
                by step( solve( !KU( ~k ) @ #vk.1 ) )
              next
                case split_case_2
                by step( contradiction /* cyclic */ )
              next
                case split_case_3
                step( solve( !KU( (~k⊕~r1⊕r0) ) @ #vk.2 ) )
                  case c_xor_case_1
                  step( solve( !KU( (~k⊕r0) ) @ #vk.3 ) )
                    case c_xor
                    by step( solve( !KU( ~k ) @ #vk.5 ) )
                  next
                    case coerce
                    step( solve( !KD( (~k⊕r0) ) ▶₀ #vk.2 ) )
                      case acceptreader
                      by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.4, 0) ~~> (#vk.2, 0) ) )
                      qed
                    qed
                  qed
                next
                  case c_xor_case_2
                  by step( solve( !KU( ~k ) @ #vk.4 ) )
                next
                  case c_xor_case_3
                  step( solve( !KU( (~k⊕~r1) ) @ #vk.3 ) )
                    case c_xor
                    by step( solve( !KU( ~k ) @ #vk.5 ) )
                  next
                    case coerce
                    step( solve( !KD( (~k⊕~r1) ) ▶₀ #vk.2 ) )
                      case acceptreader
                      by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.4, 0) ~~> (#vk.2, 0) ) )
                      qed
                    qed
                  qed
                next
                  case coerce
                  step( solve( !KD( (~k⊕~r1⊕r0) ) ▶₀ #vk.1 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.4, 0) ~~> (#vk.1, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_4
                step( solve( !KU( (~k⊕~r1) ) @ #vk.2 ) )
                  case c_xor
                  by step( solve( !KU( ~k ) @ #vk.4 ) )
                next
                  case coerce
                  step( solve( !KD( (~k⊕~r1) ) ▶₀ #vk.1 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.4, 0) ~~> (#vk.1, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_5
                step( solve( !KU( (~k⊕~r1) ) @ #vk.1 ) )
                  case c_xor
                  by step( contradiction /* cyclic */ )
                next
                  case coerce
                  step( solve( !KD( (~k⊕~r1) ) ▶₀ #vk.1 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.4, 0) ~~> (#vk.1, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_6
                step( solve( !KU( (~k⊕~r1⊕z) ) @ #vk.1 ) )
                  case c_xor_case_1
                  by step( contradiction /* cyclic */ )
                next
                  case c_xor_case_2
                  by step( solve( !KU( ~k ) @ #vk.4 ) )
                next
                  case c_xor_case_3
                  step( solve( !KU( (~k⊕~r1) ) @ #vk.3 ) )
                    case c_xor
                    by step( contradiction /* cyclic */ )
                  next
                    case coerce
                    step( solve( !KD( (~k⊕~r1) ) ▶₀ #vk.2 ) )
                      case acceptreader
                      by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.4, 0) ~~> (#vk.2, 0) ) )
                      qed
                    qed
                  qed
                next
                  case coerce
                  step( solve( !KD( (~k⊕~r1⊕z) ) ▶₀ #vk.1 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.4, 0) ~~> (#vk.1, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_7
                step( solve( !KU( (~r1⊕x) ) @ #vk.1 ) )
                  case c_xor
                  by step( contradiction /* cyclic */ )
                next
                  case coerce
                  step( solve( !KD( (~r1⊕x) ) ▶₀ #vk.1 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.4, 0) ~~> (#vk.1, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_8
                step( solve( !KU( (~k⊕x) ) @ #vk.1 ) )
                  case c_xor
                  by step( solve( !KU( ~k ) @ #vk.4 ) )
                next
                  case coerce
                  step( solve( !KD( (~k⊕x) ) ▶₀ #vk.1 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.4, 0) ~~> (#vk.1, 0) ) )
                    qed
                  qed
                qed
              qed
            next
              case tag1_case_1
              step( solve( splitEqs(0) ) )
                case split_case_1
                by step( solve( !KU( ~k ) @ #vk.1 ) )
              next
                case split_case_2
                by step( contradiction /* cyclic */ )
              next
                case split_case_3
                step( solve( splitEqs(1) ) )
                  case split_case_1
                  by step( contradiction /* cyclic */ )
                next
                  case split_case_2
                  step( solve( !KU( (x⊕~r1.1) ) @ #vk.1 ) )
                    case c_xor
                    step( solve( !KU( (~r1⊕x) ) @ #vk.2 ) )
                      case c_xor
                      by step( contradiction /* cyclic */ )
                    next
                      case coerce
                      step( solve( !KD( (~r1⊕x) ) ▶₀ #vk.2 ) )
                        case acceptreader
                        by step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                      next
                        case initiatereader
                        by step( contradiction /* impossible chain */ )
                      next
                        case tag1
                        step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                          case d_0_fst
                          by step( contradiction /* impossible chain */ )
                        next
                          case d_0_snd
                          by step( solve( (#vr.6, 0) ~~> (#vk.2, 0) ) )
                        qed
                      qed
                    qed
                  next
                    case coerce
                    step( solve( !KD( (x⊕~r1.1) ) ▶₀ #vk.1 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.1, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_3
                  step( solve( !KU( (~r1⊕r0⊕~r1.1) ) @ #vk.2 ) )
                    case c_xor_case_1
                    step( solve( !KU( (~r1⊕~r1.1) ) @ #vk.3 ) )
                      case c_xor
                      by step( contradiction /* cyclic */ )
                    next
                      case coerce
                      step( solve( !KD( (~r1⊕~r1.1) ) ▶₀ #vk.2 ) )
                        case acceptreader
                        by step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                      next
                        case initiatereader
                        by step( contradiction /* impossible chain */ )
                      next
                        case tag1
                        step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                          case d_0_fst
                          by step( contradiction /* impossible chain */ )
                        next
                          case d_0_snd
                          by step( solve( (#vr.6, 0) ~~> (#vk.2, 0) ) )
                        qed
                      qed
                    qed
                  next
                    case c_xor_case_2
                    step( solve( !KU( (r0⊕~r1.1) ) @ #vk.3 ) )
                      case c_xor
                      by step( contradiction /* cyclic */ )
                    next
                      case coerce
                      step( solve( !KD( (r0⊕~r1.1) ) ▶₀ #vk.2 ) )
                        case acceptreader
                        by step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                      next
                        case initiatereader
                        by step( contradiction /* impossible chain */ )
                      next
                        case tag1
                        step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                          case d_0_fst
                          by step( contradiction /* impossible chain */ )
                        next
                          case d_0_snd
                          by step( solve( (#vr.6, 0) ~~> (#vk.2, 0) ) )
                        qed
                      qed
                    qed
                  next
                    case c_xor_case_3
                    by step( contradiction /* cyclic */ )
                  next
                    case coerce
                    step( solve( !KD( (~r1⊕r0⊕~r1.1) ) ▶₀ #vk.1 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.1, 0) ) )
                      qed
                    qed
                  qed
                qed
              next
                case split_case_4
                step( solve( !KU( zero ) @ #vk.1 ) )
                  case c_zero
                  step( solve( splitEqs(1) ) )
                    case split
                    step( solve( !KU( (~r1⊕~r1.1) ) @ #vk.2 ) )
                      case c_xor
                      by step( contradiction /* cyclic */ )
                    next
                      case coerce
                      step( solve( !KD( (~r1⊕~r1.1) ) ▶₀ #vk.2 ) )
                        case acceptreader
                        by step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                      next
                        case initiatereader
                        by step( contradiction /* impossible chain */ )
                      next
                        case tag1
                        step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                          case d_0_fst
                          by step( contradiction /* impossible chain */ )
                        next
                          case d_0_snd
                          by step( solve( (#vr.6, 0) ~~> (#vk.2, 0) ) )
                        qed
                      qed
                    qed
                  qed
                next
                  case coerce
                  step( solve( !KD( zero ) ▶₀ #vk.1 ) )
                    case acceptreader
                    by step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.6, 0) ~~> (#vk.1, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_5
                step( solve( !KU( (~k⊕~r1) ) @ #vk.1 ) )
                  case c_xor
                  by step( contradiction /* cyclic */ )
                next
                  case coerce
                  step( solve( !KD( (~k⊕~r1) ) ▶₀ #vk.1 ) )
                    case acceptreader
                    by step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.6, 0) ~~> (#vk.1, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_6
                step( solve( !KU( (~k⊕~r1⊕z) ) @ #vk.1 ) )
                  case c_xor_case_1
                  by step( contradiction /* cyclic */ )
                next
                  case c_xor_case_2
                  by step( solve( !KU( ~k ) @ #vk.4 ) )
                next
                  case c_xor_case_3
                  step( solve( !KU( (~k⊕~r1) ) @ #vk.4 ) )
                    case c_xor
                    by step( contradiction /* cyclic */ )
                  next
                    case coerce
                    step( solve( !KD( (~k⊕~r1) ) ▶₀ #vk.2 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.2, 0) ) )
                      qed
                    qed
                  qed
                next
                  case coerce
                  step( solve( !KD( (~k⊕~r1⊕z) ) ▶₀ #vk.1 ) )
                    case acceptreader
                    by step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.6, 0) ~~> (#vk.1, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_7
                step( solve( !KU( (~r1⊕x) ) @ #vk.1 ) )
                  case c_xor
                  by step( contradiction /* cyclic */ )
                next
                  case coerce
                  step( solve( !KD( (~r1⊕x) ) ▶₀ #vk.1 ) )
                    case acceptreader
                    by step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.6, 0) ~~> (#vk.1, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_8
                step( solve( !KU( (~k⊕x) ) @ #vk.1 ) )
                  case c_xor
                  by step( solve( !KU( ~k ) @ #vk.4 ) )
                next
                  case coerce
                  step( solve( !KD( (~k⊕x) ) ▶₀ #vk.1 ) )
                    case acceptreader
                    by step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.6, 0) ~~> (#vk.1, 0) ) )
                    qed
                  qed
                qed
              qed
            next
              case tag1_case_2
              step( solve( splitEqs(0) ) )
                case split_case_1
                by step( solve( !KU( ~k ) @ #vk.1 ) )
              next
                case split_case_2
                by step( contradiction /* cyclic */ )
              next
                case split_case_3
                step( solve( splitEqs(1) ) )
                  case split_case_1
                  step( solve( !KU( (~k2⊕~r1.1) ) @ #vk.1 ) )
                    case c_xor
                    by step( solve( !KU( ~k2 ) @ #vk.4 ) )
                  next
                    case coerce
                    step( solve( !KD( (~k2⊕~r1.1) ) ▶₀ #vk.1 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.1, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_2
                  step( solve( !KU( (~k⊕~k2⊕~r1⊕r0⊕~r1.1) ) @ #vk.2 ) )
                    case c_xor_case_01
                    step( solve( !KU( (~k⊕~k2⊕~r1⊕~r1.1) ) @ #vk.3 ) )
                      case c_xor_case_1
                      step( solve( !KU( (~k⊕~k2⊕~r1.1) ) @ #vk.4 ) )
                        case c_xor_case_1
                        by step( solve( !KU( ~k2 ) @ #vk.7 ) )
                      next
                        case c_xor_case_2
                        by step( solve( !KU( ~k ) @ #vk.7 ) )
                      next
                        case c_xor_case_3
                        by step( contradiction /* cyclic */ )
                      next
                        case coerce
                        step( solve( !KD( (~k⊕~k2⊕~r1.1) ) ▶₀ #vk.3 ) )
                          case acceptreader
                          by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                        next
                          case initiatereader
                          by step( contradiction /* impossible chain */ )
                        next
                          case tag1
                          step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                            case d_0_fst
                            by step( contradiction /* impossible chain */ )
                          next
                            case d_0_snd
                            by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                          qed
                        qed
                      qed
                    next
                      case c_xor_case_2
                      by step( solve( !KU( ~k2 ) @ #vk.5 ) )
                    next
                      case c_xor_case_3
                      step( solve( !KU( (~k⊕~r1.1) ) @ #vk.4 ) )
                        case c_xor
                        by step( contradiction /* cyclic */ )
                      next
                        case coerce
                        step( solve( !KD( (~k⊕~r1.1) ) ▶₀ #vk.3 ) )
                          case acceptreader
                          by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                        next
                          case initiatereader
                          by step( contradiction /* impossible chain */ )
                        next
                          case tag1
                          step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                            case d_0_fst
                            by step( contradiction /* impossible chain */ )
                          next
                            case d_0_snd
                            by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                          qed
                        qed
                      qed
                    next
                      case c_xor_case_4
                      by step( solve( !KU( ~k ) @ #vk.5 ) )
                    next
                      case c_xor_case_5
                      step( solve( !KU( (~k2⊕~r1.1) ) @ #vk.4 ) )
                        case c_xor
                        by step( contradiction /* cyclic */ )
                      next
                        case coerce
                        step( solve( !KD( (~k2⊕~r1.1) ) ▶₀ #vk.3 ) )
                          case acceptreader
                          by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                        next
                          case initiatereader
                          by step( contradiction /* impossible chain */ )
                        next
                          case tag1
                          step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                            case d_0_fst
                            by step( contradiction /* impossible chain */ )
                          next
                            case d_0_snd
                            by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                          qed
                        qed
                      qed
                    next
                      case c_xor_case_6
                      step( solve( !KU( (~r1⊕~r1.1) ) @ #vk.4 ) )
                        case c_xor
                        by step( contradiction /* cyclic */ )
                      next
                        case coerce
                        step( solve( !KD( (~r1⊕~r1.1) ) ▶₀ #vk.3 ) )
                          case acceptreader
                          by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                        next
                          case initiatereader
                          by step( contradiction /* impossible chain */ )
                        next
                          case tag1
                          step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                            case d_0_fst
                            by step( contradiction /* impossible chain */ )
                          next
                            case d_0_snd
                            by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                          qed
                        qed
                      qed
                    next
                      case c_xor_case_7
                      by step( contradiction /* cyclic */ )
                    next
                      case coerce
                      step( solve( !KD( (~k⊕~k2⊕~r1⊕~r1.1) ) ▶₀ #vk.2 ) )
                        case acceptreader
                        by step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                      next
                        case initiatereader
                        by step( contradiction /* impossible chain */ )
                      next
                        case tag1
                        step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                          case d_0_fst
                          by step( contradiction /* impossible chain */ )
                        next
                          case d_0_snd
                          by step( solve( (#vr.6, 0) ~~> (#vk.2, 0) ) )
                        qed
                      qed
                    qed
                  next
                    case c_xor_case_02
                    step( solve( !KU( (~k⊕~k2⊕r0⊕~r1.1) ) @ #vk.3 ) )
                      case c_xor_case_1
                      step( solve( !KU( (~k⊕~k2⊕~r1.1) ) @ #vk.5 ) )
                        case c_xor_case_1
                        by step( solve( !KU( ~k2 ) @ #vk.7 ) )
                      next
                        case c_xor_case_2
                        by step( solve( !KU( ~k ) @ #vk.7 ) )
                      next
                        case c_xor_case_3
                        by step( contradiction /* cyclic */ )
                      next
                        case coerce
                        step( solve( !KD( (~k⊕~k2⊕~r1.1) ) ▶₀ #vk.3 ) )
                          case acceptreader
                          by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                        next
                          case initiatereader
                          by step( contradiction /* impossible chain */ )
                        next
                          case tag1
                          step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                            case d_0_fst
                            by step( contradiction /* impossible chain */ )
                          next
                            case d_0_snd
                            by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                          qed
                        qed
                      qed
                    next
                      case c_xor_case_2
                      by step( solve( !KU( ~k2 ) @ #vk.6 ) )
                    next
                      case c_xor_case_3
                      step( solve( !KU( (~k⊕~r1.1) ) @ #vk.5 ) )
                        case c_xor
                        by step( contradiction /* cyclic */ )
                      next
                        case coerce
                        step( solve( !KD( (~k⊕~r1.1) ) ▶₀ #vk.3 ) )
                          case acceptreader
                          by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                        next
                          case initiatereader
                          by step( contradiction /* impossible chain */ )
                        next
                          case tag1
                          step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                            case d_0_fst
                            by step( contradiction /* impossible chain */ )
                          next
                            case d_0_snd
                            by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                          qed
                        qed
                      qed
                    next
                      case c_xor_case_4
                      by step( solve( !KU( ~k ) @ #vk.6 ) )
                    next
                      case c_xor_case_5
                      step( solve( !KU( (~k2⊕~r1.1) ) @ #vk.5 ) )
                        case c_xor
                        by step( contradiction /* cyclic */ )
                      next
                        case coerce
                        step( solve( !KD( (~k2⊕~r1.1) ) ▶₀ #vk.3 ) )
                          case acceptreader
                          by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                        next
                          case initiatereader
                          by step( contradiction /* impossible chain */ )
                        next
                          case tag1
                          step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                            case d_0_fst
                            by step( contradiction /* impossible chain */ )
                          next
                            case d_0_snd
                            by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                          qed
                        qed
                      qed
                    next
                      case c_xor_case_6
                      step( solve( !KU( (r0⊕~r1.1) ) @ #vk.5 ) )
                        case c_xor
                        by step( contradiction /* cyclic */ )
                      next
                        case coerce
                        step( solve( !KD( (r0⊕~r1.1) ) ▶₀ #vk.3 ) )
                          case acceptreader
                          by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                        next
                          case initiatereader
                          by step( contradiction /* impossible chain */ )
                        next
                          case tag1
                          step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                            case d_0_fst
                            by step( contradiction /* impossible chain */ )
                          next
                            case d_0_snd
                            by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                          qed
                        qed
                      qed
                    next
                      case c_xor_case_7
                      by step( contradiction /* cyclic */ )
                    next
                      case coerce
                      step( solve( !KD( (~k⊕~k2⊕r0⊕~r1.1) ) ▶₀ #vk.2 ) )
                        case acceptreader
                        by step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                      next
                        case initiatereader
                        by step( contradiction /* impossible chain */ )
                      next
                        case tag1
                        step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                          case d_0_fst
                          by step( contradiction /* impossible chain */ )
                        next
                          case d_0_snd
                          by step( solve( (#vr.6, 0) ~~> (#vk.2, 0) ) )
                        qed
                      qed
                    qed
                  next
                    case c_xor_case_03
                    step( solve( !KU( (~k⊕~k2⊕~r1.1) ) @ #vk.3 ) )
                      case c_xor_case_1
                      by step( solve( !KU( ~k2 ) @ #vk.6 ) )
                    next
                      case c_xor_case_2
                      by step( solve( !KU( ~k ) @ #vk.6 ) )
                    next
                      case c_xor_case_3
                      by step( contradiction /* cyclic */ )
                    next
                      case coerce
                      step( solve( !KD( (~k⊕~k2⊕~r1.1) ) ▶₀ #vk.2 ) )
                        case acceptreader
                        by step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                      next
                        case initiatereader
                        by step( contradiction /* impossible chain */ )
                      next
                        case tag1
                        step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                          case d_0_fst
                          by step( contradiction /* impossible chain */ )
                        next
                          case d_0_snd
                          by step( solve( (#vr.6, 0) ~~> (#vk.2, 0) ) )
                        qed
                      qed
                    qed
                  next
                    case c_xor_case_04
                    by step( solve( !KU( ~k2 ) @ #vk.4 ) )
                  next
                    case c_xor_case_05
                    step( solve( !KU( (~k⊕~r1⊕~r1.1) ) @ #vk.3 ) )
                      case c_xor_case_1
                      step( solve( !KU( (~k2⊕r0) ) @ #vk.4 ) )
                        case c_xor
                        by step( solve( !KU( ~k2 ) @ #vk.7 ) )
                      next
                        case coerce
                        step( solve( !KD( (~k2⊕r0) ) ▶₀ #vk.3 ) )
                          case acceptreader
                          by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                        next
                          case initiatereader
                          by step( contradiction /* impossible chain */ )
                        next
                          case tag1
                          step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                            case d_0_fst
                            by step( contradiction /* impossible chain */ )
                          next
                            case d_0_snd
                            by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                          qed
                        qed
                      qed
                    next
                      case c_xor_case_2
                      by step( solve( !KU( ~k ) @ #vk.6 ) )
                    next
                      case c_xor_case_3
                      by step( contradiction /* cyclic */ )
                    next
                      case coerce
                      step( solve( !KD( (~k⊕~r1⊕~r1.1) ) ▶₀ #vk.2 ) )
                        case acceptreader
                        by step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                      next
                        case initiatereader
                        by step( contradiction /* impossible chain */ )
                      next
                        case tag1
                        step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                          case d_0_fst
                          by step( contradiction /* impossible chain */ )
                        next
                          case d_0_snd
                          by step( solve( (#vr.6, 0) ~~> (#vk.2, 0) ) )
                        qed
                      qed
                    qed
                  next
                    case c_xor_case_06
                    step( solve( !KU( (~k⊕r0⊕~r1.1) ) @ #vk.3 ) )
                      case c_xor_case_1
                      step( solve( !KU( (~k2⊕~r1) ) @ #vk.4 ) )
                        case c_xor
                        by step( solve( !KU( ~k2 ) @ #vk.7 ) )
                      next
                        case coerce
                        step( solve( !KD( (~k2⊕~r1) ) ▶₀ #vk.3 ) )
                          case acceptreader
                          by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                        next
                          case initiatereader
                          by step( contradiction /* impossible chain */ )
                        next
                          case tag1
                          step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                            case d_0_fst
                            by step( contradiction /* impossible chain */ )
                          next
                            case d_0_snd
                            by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                          qed
                        qed
                      qed
                    next
                      case c_xor_case_2
                      by step( solve( !KU( ~k ) @ #vk.6 ) )
                    next
                      case c_xor_case_3
                      by step( contradiction /* cyclic */ )
                    next
                      case coerce
                      step( solve( !KD( (~k⊕r0⊕~r1.1) ) ▶₀ #vk.2 ) )
                        case acceptreader
                        by step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                      next
                        case initiatereader
                        by step( contradiction /* impossible chain */ )
                      next
                        case tag1
                        step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                          case d_0_fst
                          by step( contradiction /* impossible chain */ )
                        next
                          case d_0_snd
                          by step( solve( (#vr.6, 0) ~~> (#vk.2, 0) ) )
                        qed
                      qed
                    qed
                  next
                    case c_xor_case_07
                    step( solve( !KU( (~k⊕~r1.1) ) @ #vk.3 ) )
                      case c_xor
                      by step( contradiction /* cyclic */ )
                    next
                      case coerce
                      step( solve( !KD( (~k⊕~r1.1) ) ▶₀ #vk.2 ) )
                        case acceptreader
                        by step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                      next
                        case initiatereader
                        by step( contradiction /* impossible chain */ )
                      next
                        case tag1
                        step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                          case d_0_fst
                          by step( contradiction /* impossible chain */ )
                        next
                          case d_0_snd
                          by step( solve( (#vr.6, 0) ~~> (#vk.2, 0) ) )
                        qed
                      qed
                    qed
                  next
                    case c_xor_case_08
                    by step( solve( !KU( ~k ) @ #vk.4 ) )
                  next
                    case c_xor_case_09
                    step( solve( !KU( (~k2⊕~r1⊕~r1.1) ) @ #vk.3 ) )
                      case c_xor_case_1
                      step( solve( !KU( (~k⊕r0) ) @ #vk.4 ) )
                        case c_xor
                        by step( solve( !KU( ~k ) @ #vk.7 ) )
                      next
                        case coerce
                        step( solve( !KD( (~k⊕r0) ) ▶₀ #vk.3 ) )
                          case acceptreader
                          by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                        next
                          case initiatereader
                          by step( contradiction /* impossible chain */ )
                        next
                          case tag1
                          step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                            case d_0_fst
                            by step( contradiction /* impossible chain */ )
                          next
                            case d_0_snd
                            by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                          qed
                        qed
                      qed
                    next
                      case c_xor_case_2
                      by step( solve( !KU( ~k2 ) @ #vk.6 ) )
                    next
                      case c_xor_case_3
                      by step( contradiction /* cyclic */ )
                    next
                      case coerce
                      step( solve( !KD( (~k2⊕~r1⊕~r1.1) ) ▶₀ #vk.2 ) )
                        case acceptreader
                        by step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                      next
                        case initiatereader
                        by step( contradiction /* impossible chain */ )
                      next
                        case tag1
                        step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                          case d_0_fst
                          by step( contradiction /* impossible chain */ )
                        next
                          case d_0_snd
                          by step( solve( (#vr.6, 0) ~~> (#vk.2, 0) ) )
                        qed
                      qed
                    qed
                  next
                    case c_xor_case_10
                    step( solve( !KU( (~k2⊕r0⊕~r1.1) ) @ #vk.3 ) )
                      case c_xor_case_1
                      step( solve( !KU( (~k⊕~r1) ) @ #vk.4 ) )
                        case c_xor
                        by step( solve( !KU( ~k ) @ #vk.7 ) )
                      next
                        case coerce
                        step( solve( !KD( (~k⊕~r1) ) ▶₀ #vk.3 ) )
                          case acceptreader
                          by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                        next
                          case initiatereader
                          by step( contradiction /* impossible chain */ )
                        next
                          case tag1
                          step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                            case d_0_fst
                            by step( contradiction /* impossible chain */ )
                          next
                            case d_0_snd
                            by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                          qed
                        qed
                      qed
                    next
                      case c_xor_case_2
                      by step( solve( !KU( ~k2 ) @ #vk.6 ) )
                    next
                      case c_xor_case_3
                      by step( contradiction /* cyclic */ )
                    next
                      case coerce
                      step( solve( !KD( (~k2⊕r0⊕~r1.1) ) ▶₀ #vk.2 ) )
                        case acceptreader
                        by step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                      next
                        case initiatereader
                        by step( contradiction /* impossible chain */ )
                      next
                        case tag1
                        step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                          case d_0_fst
                          by step( contradiction /* impossible chain */ )
                        next
                          case d_0_snd
                          by step( solve( (#vr.6, 0) ~~> (#vk.2, 0) ) )
                        qed
                      qed
                    qed
                  next
                    case c_xor_case_11
                    step( solve( !KU( (~k2⊕~r1.1) ) @ #vk.3 ) )
                      case c_xor
                      by step( contradiction /* cyclic */ )
                    next
                      case coerce
                      step( solve( !KD( (~k2⊕~r1.1) ) ▶₀ #vk.2 ) )
                        case acceptreader
                        by step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                      next
                        case initiatereader
                        by step( contradiction /* impossible chain */ )
                      next
                        case tag1
                        step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                          case d_0_fst
                          by step( contradiction /* impossible chain */ )
                        next
                          case d_0_snd
                          by step( solve( (#vr.6, 0) ~~> (#vk.2, 0) ) )
                        qed
                      qed
                    qed
                  next
                    case c_xor_case_12
                    step( solve( !KU( (~r1⊕r0⊕~r1.1) ) @ #vk.3 ) )
                      case c_xor_case_1
                      step( solve( !KU( (~k⊕~k2) ) @ #vk.4 ) )
                        case c_xor
                        by step( solve( !KU( ~k2 ) @ #vk.6 ) )
                      next
                        case coerce
                        step( solve( !KD( (~k⊕~k2) ) ▶₀ #vk.3 ) )
                          case acceptreader
                          by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                        next
                          case initiatereader
                          by step( contradiction /* impossible chain */ )
                        next
                          case tag1
                          step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                            case d_0_fst
                            by step( contradiction /* impossible chain */ )
                          next
                            case d_0_snd
                            by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                          qed
                        qed
                      qed
                    next
                      case c_xor_case_2
                      step( solve( !KU( (~k⊕~k2) ) @ #vk.4 ) )
                        case c_xor
                        by step( solve( !KU( ~k2 ) @ #vk.7 ) )
                      next
                        case coerce
                        step( solve( !KD( (~k⊕~k2) ) ▶₀ #vk.3 ) )
                          case acceptreader
                          by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                        next
                          case initiatereader
                          by step( contradiction /* impossible chain */ )
                        next
                          case tag1
                          step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                            case d_0_fst
                            by step( contradiction /* impossible chain */ )
                          next
                            case d_0_snd
                            by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                          qed
                        qed
                      qed
                    next
                      case c_xor_case_3
                      by step( contradiction /* cyclic */ )
                    next
                      case coerce
                      step( solve( !KD( (~r1⊕r0⊕~r1.1) ) ▶₀ #vk.2 ) )
                        case acceptreader
                        by step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                      next
                        case initiatereader
                        by step( contradiction /* impossible chain */ )
                      next
                        case tag1
                        step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                          case d_0_fst
                          by step( contradiction /* impossible chain */ )
                        next
                          case d_0_snd
                          by step( solve( (#vr.6, 0) ~~> (#vk.2, 0) ) )
                        qed
                      qed
                    qed
                  next
                    case c_xor_case_13
                    step( solve( !KU( (~r1⊕~r1.1) ) @ #vk.3 ) )
                      case c_xor
                      by step( contradiction /* cyclic */ )
                    next
                      case coerce
                      step( solve( !KD( (~r1⊕~r1.1) ) ▶₀ #vk.2 ) )
                        case acceptreader
                        by step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                      next
                        case initiatereader
                        by step( contradiction /* impossible chain */ )
                      next
                        case tag1
                        step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                          case d_0_fst
                          by step( contradiction /* impossible chain */ )
                        next
                          case d_0_snd
                          by step( solve( (#vr.6, 0) ~~> (#vk.2, 0) ) )
                        qed
                      qed
                    qed
                  next
                    case c_xor_case_14
                    step( solve( !KU( (r0⊕~r1.1) ) @ #vk.3 ) )
                      case c_xor
                      by step( contradiction /* cyclic */ )
                    next
                      case coerce
                      step( solve( !KD( (r0⊕~r1.1) ) ▶₀ #vk.2 ) )
                        case acceptreader
                        by step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                      next
                        case initiatereader
                        by step( contradiction /* impossible chain */ )
                      next
                        case tag1
                        step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                          case d_0_fst
                          by step( contradiction /* impossible chain */ )
                        next
                          case d_0_snd
                          by step( solve( (#vr.6, 0) ~~> (#vk.2, 0) ) )
                        qed
                      qed
                    qed
                  next
                    case c_xor_case_15
                    by step( contradiction /* cyclic */ )
                  next
                    case coerce
                    step( solve( !KD( (~k⊕~k2⊕~r1⊕r0⊕~r1.1) ) ▶₀ #vk.1 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.1, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_3
                  step( solve( !KU( (~k2⊕x⊕~r1.1) ) @ #vk.1 ) )
                    case c_xor_case_1
                    step( solve( !KU( (~k⊕~r1⊕x) ) @ #vk.2 ) )
                      case c_xor_case_1
                      step( solve( !KU( (~k2⊕~r1.1) ) @ #vk.3 ) )
                        case c_xor
                        by step( contradiction /* cyclic */ )
                      next
                        case coerce
                        step( solve( !KD( (~k2⊕~r1.1) ) ▶₀ #vk.3 ) )
                          case acceptreader
                          by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                        next
                          case initiatereader
                          by step( contradiction /* impossible chain */ )
                        next
                          case tag1
                          step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                            case d_0_fst
                            by step( contradiction /* impossible chain */ )
                          next
                            case d_0_snd
                            by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                          qed
                        qed
                      qed
                    next
                      case c_xor_case_2
                      by step( solve( !KU( ~k ) @ #vk.6 ) )
                    next
                      case c_xor_case_3
                      step( solve( !KU( (~k2⊕~r1.1) ) @ #vk.3 ) )
                        case c_xor
                        by step( solve( !KU( ~k2 ) @ #vk.7 ) )
                      next
                        case coerce
                        step( solve( !KD( (~k2⊕~r1.1) ) ▶₀ #vk.3 ) )
                          case acceptreader
                          by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                        next
                          case initiatereader
                          by step( contradiction /* impossible chain */ )
                        next
                          case tag1
                          step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                            case d_0_fst
                            by step( contradiction /* impossible chain */ )
                          next
                            case d_0_snd
                            by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                          qed
                        qed
                      qed
                    next
                      case coerce
                      step( solve( !KD( (~k⊕~r1⊕x) ) ▶₀ #vk.2 ) )
                        case acceptreader
                        by step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                      next
                        case initiatereader
                        by step( contradiction /* impossible chain */ )
                      next
                        case tag1
                        step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                          case d_0_fst
                          by step( contradiction /* impossible chain */ )
                        next
                          case d_0_snd
                          by step( solve( (#vr.6, 0) ~~> (#vk.2, 0) ) )
                        qed
                      qed
                    qed
                  next
                    case c_xor_case_2
                    by step( solve( !KU( ~k2 ) @ #vk.4 ) )
                  next
                    case c_xor_case_3
                    step( solve( !KU( (~k⊕~r1⊕x) ) @ #vk.2 ) )
                      case c_xor_case_1
                      by step( contradiction /* cyclic */ )
                    next
                      case c_xor_case_2
                      by step( solve( !KU( ~k ) @ #vk.6 ) )
                    next
                      case c_xor_case_3
                      step( solve( !KU( (~k2⊕x) ) @ #vk.4 ) )
                        case c_xor
                        by step( solve( !KU( ~k2 ) @ #vk.7 ) )
                      next
                        case coerce
                        step( solve( !KD( (~k2⊕x) ) ▶₀ #vk.3 ) )
                          case acceptreader
                          by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                        next
                          case initiatereader
                          by step( contradiction /* impossible chain */ )
                        next
                          case tag1
                          step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                            case d_0_fst
                            by step( contradiction /* impossible chain */ )
                          next
                            case d_0_snd
                            by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                          qed
                        qed
                      qed
                    next
                      case coerce
                      step( solve( !KD( (~k⊕~r1⊕x) ) ▶₀ #vk.2 ) )
                        case acceptreader
                        by step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                      next
                        case initiatereader
                        by step( contradiction /* impossible chain */ )
                      next
                        case tag1
                        step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                          case d_0_fst
                          by step( contradiction /* impossible chain */ )
                        next
                          case d_0_snd
                          by step( solve( (#vr.6, 0) ~~> (#vk.2, 0) ) )
                        qed
                      qed
                    qed
                  next
                    case coerce
                    step( solve( !KD( (~k2⊕x⊕~r1.1) ) ▶₀ #vk.1 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.1, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_4
                  by step( solve( !KU( ~k2 ) @ #vk.1 ) )
                next
                  case split_case_5
                  step( solve( !KU( (~k2⊕x) ) @ #vk.1 ) )
                    case c_xor
                    by step( solve( !KU( ~k2 ) @ #vk.4 ) )
                  next
                    case coerce
                    step( solve( !KD( (~k2⊕x) ) ▶₀ #vk.1 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.1, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_6
                  step( solve( !KU( (~k⊕~k2⊕~r1) ) @ #vk.2 ) )
                    case c_xor_case_1
                    by step( solve( !KU( ~k2 ) @ #vk.4 ) )
                  next
                    case c_xor_case_2
                    by step( solve( !KU( ~k ) @ #vk.4 ) )
                  next
                    case c_xor_case_3
                    by step( contradiction /* cyclic */ )
                  next
                    case coerce
                    step( solve( !KD( (~k⊕~k2⊕~r1) ) ▶₀ #vk.1 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.1, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_7
                  step( solve( !KU( (x⊕~r1.1) ) @ #vk.1 ) )
                    case c_xor
                    step( solve( !KU( (~k⊕~k2⊕~r1⊕x) ) @ #vk.2 ) )
                      case c_xor_case_1
                      by step( contradiction /* cyclic */ )
                    next
                      case c_xor_case_2
                      by step( solve( !KU( ~k2 ) @ #vk.6 ) )
                    next
                      case c_xor_case_3
                      step( solve( !KU( (~k⊕x) ) @ #vk.5 ) )
                        case c_xor
                        by step( solve( !KU( ~k ) @ #vk.7 ) )
                      next
                        case coerce
                        step( solve( !KD( (~k⊕x) ) ▶₀ #vk.3 ) )
                          case acceptreader
                          by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                        next
                          case initiatereader
                          by step( contradiction /* impossible chain */ )
                        next
                          case tag1
                          step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                            case d_0_fst
                            by step( contradiction /* impossible chain */ )
                          next
                            case d_0_snd
                            by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                          qed
                        qed
                      qed
                    next
                      case c_xor_case_4
                      by step( solve( !KU( ~k ) @ #vk.6 ) )
                    next
                      case c_xor_case_5
                      step( solve( !KU( (~k2⊕x) ) @ #vk.5 ) )
                        case c_xor
                        by step( solve( !KU( ~k2 ) @ #vk.7 ) )
                      next
                        case coerce
                        step( solve( !KD( (~k2⊕x) ) ▶₀ #vk.3 ) )
                          case acceptreader
                          by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                        next
                          case initiatereader
                          by step( contradiction /* impossible chain */ )
                        next
                          case tag1
                          step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                            case d_0_fst
                            by step( contradiction /* impossible chain */ )
                          next
                            case d_0_snd
                            by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                          qed
                        qed
                      qed
                    next
                      case c_xor_case_6
                      step( solve( !KU( (~r1⊕x) ) @ #vk.5 ) )
                        case c_xor
                        by step( contradiction /* cyclic */ )
                      next
                        case coerce
                        step( solve( !KD( (~r1⊕x) ) ▶₀ #vk.3 ) )
                          case acceptreader
                          by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                        next
                          case initiatereader
                          by step( contradiction /* impossible chain */ )
                        next
                          case tag1
                          step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                            case d_0_fst
                            by step( contradiction /* impossible chain */ )
                          next
                            case d_0_snd
                            by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                          qed
                        qed
                      qed
                    next
                      case c_xor_case_7
                      step( solve( !KU( (~k⊕~k2⊕~r1) ) @ #vk.5 ) )
                        case c_xor_case_1
                        by step( solve( !KU( ~k2 ) @ #vk.7 ) )
                      next
                        case c_xor_case_2
                        by step( solve( !KU( ~k ) @ #vk.7 ) )
                      next
                        case c_xor_case_3
                        by step( contradiction /* cyclic */ )
                      next
                        case coerce
                        step( solve( !KD( (~k⊕~k2⊕~r1) ) ▶₀ #vk.3 ) )
                          case acceptreader
                          by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                        next
                          case initiatereader
                          by step( contradiction /* impossible chain */ )
                        next
                          case tag1
                          step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                            case d_0_fst
                            by step( contradiction /* impossible chain */ )
                          next
                            case d_0_snd
                            by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                          qed
                        qed
                      qed
                    next
                      case coerce
                      step( solve( !KD( (~k⊕~k2⊕~r1⊕x) ) ▶₀ #vk.2 ) )
                        case acceptreader
                        by step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                      next
                        case initiatereader
                        by step( contradiction /* impossible chain */ )
                      next
                        case tag1
                        step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                          case d_0_fst
                          by step( contradiction /* impossible chain */ )
                        next
                          case d_0_snd
                          by step( solve( (#vr.6, 0) ~~> (#vk.2, 0) ) )
                        qed
                      qed
                    qed
                  next
                    case coerce
                    step( solve( !KD( (x⊕~r1.1) ) ▶₀ #vk.1 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.1, 0) ) )
                      qed
                    qed
                  qed
                qed
              next
                case split_case_4
                step( solve( !KU( zero ) @ #vk.1 ) )
                  case c_zero
                  step( solve( splitEqs(1) ) )
                    case split
                    step( solve( !KU( (~k⊕~k2⊕~r1⊕~r1.1) ) @ #vk.2 ) )
                      case c_xor_case_1
                      step( solve( !KU( (~k⊕~k2⊕~r1.1) ) @ #vk.3 ) )
                        case c_xor_case_1
                        by step( solve( !KU( ~k2 ) @ #vk.6 ) )
                      next
                        case c_xor_case_2
                        by step( solve( !KU( ~k ) @ #vk.6 ) )
                      next
                        case c_xor_case_3
                        by step( contradiction /* cyclic */ )
                      next
                        case coerce
                        step( solve( !KD( (~k⊕~k2⊕~r1.1) ) ▶₀ #vk.3 ) )
                          case acceptreader
                          by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                        next
                          case initiatereader
                          by step( contradiction /* impossible chain */ )
                        next
                          case tag1
                          step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                            case d_0_fst
                            by step( contradiction /* impossible chain */ )
                          next
                            case d_0_snd
                            by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                          qed
                        qed
                      qed
                    next
                      case c_xor_case_2
                      by step( solve( !KU( ~k2 ) @ #vk.4 ) )
                    next
                      case c_xor_case_3
                      step( solve( !KU( (~k⊕~r1.1) ) @ #vk.3 ) )
                        case c_xor
                        by step( contradiction /* cyclic */ )
                      next
                        case coerce
                        step( solve( !KD( (~k⊕~r1.1) ) ▶₀ #vk.3 ) )
                          case acceptreader
                          by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                        next
                          case initiatereader
                          by step( contradiction /* impossible chain */ )
                        next
                          case tag1
                          step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                            case d_0_fst
                            by step( contradiction /* impossible chain */ )
                          next
                            case d_0_snd
                            by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                          qed
                        qed
                      qed
                    next
                      case c_xor_case_4
                      by step( solve( !KU( ~k ) @ #vk.4 ) )
                    next
                      case c_xor_case_5
                      step( solve( !KU( (~k2⊕~r1.1) ) @ #vk.3 ) )
                        case c_xor
                        by step( contradiction /* cyclic */ )
                      next
                        case coerce
                        step( solve( !KD( (~k2⊕~r1.1) ) ▶₀ #vk.3 ) )
                          case acceptreader
                          by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                        next
                          case initiatereader
                          by step( contradiction /* impossible chain */ )
                        next
                          case tag1
                          step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                            case d_0_fst
                            by step( contradiction /* impossible chain */ )
                          next
                            case d_0_snd
                            by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                          qed
                        qed
                      qed
                    next
                      case c_xor_case_6
                      step( solve( !KU( (~r1⊕~r1.1) ) @ #vk.3 ) )
                        case c_xor
                        by step( contradiction /* cyclic */ )
                      next
                        case coerce
                        step( solve( !KD( (~r1⊕~r1.1) ) ▶₀ #vk.3 ) )
                          case acceptreader
                          by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                        next
                          case initiatereader
                          by step( contradiction /* impossible chain */ )
                        next
                          case tag1
                          step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                            case d_0_fst
                            by step( contradiction /* impossible chain */ )
                          next
                            case d_0_snd
                            by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                          qed
                        qed
                      qed
                    next
                      case c_xor_case_7
                      by step( contradiction /* cyclic */ )
                    next
                      case coerce
                      step( solve( !KD( (~k⊕~k2⊕~r1⊕~r1.1) ) ▶₀ #vk.2 ) )
                        case acceptreader
                        by step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                      next
                        case initiatereader
                        by step( contradiction /* impossible chain */ )
                      next
                        case tag1
                        step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                          case d_0_fst
                          by step( contradiction /* impossible chain */ )
                        next
                          case d_0_snd
                          by step( solve( (#vr.6, 0) ~~> (#vk.2, 0) ) )
                        qed
                      qed
                    qed
                  qed
                next
                  case coerce
                  step( solve( !KD( zero ) ▶₀ #vk.1 ) )
                    case acceptreader
                    by step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.6, 0) ~~> (#vk.1, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_5
                step( solve( !KU( (~k⊕~r1) ) @ #vk.1 ) )
                  case c_xor
                  by step( contradiction /* cyclic */ )
                next
                  case coerce
                  step( solve( !KD( (~k⊕~r1) ) ▶₀ #vk.1 ) )
                    case acceptreader
                    by step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.6, 0) ~~> (#vk.1, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_6
                step( solve( !KU( (~k⊕~r1⊕z) ) @ #vk.1 ) )
                  case c_xor_case_1
                  by step( contradiction /* cyclic */ )
                next
                  case c_xor_case_2
                  by step( solve( !KU( ~k ) @ #vk.4 ) )
                next
                  case c_xor_case_3
                  step( solve( !KU( (~k⊕~r1) ) @ #vk.4 ) )
                    case c_xor
                    by step( contradiction /* cyclic */ )
                  next
                    case coerce
                    step( solve( !KD( (~k⊕~r1) ) ▶₀ #vk.2 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.2, 0) ) )
                      qed
                    qed
                  qed
                next
                  case coerce
                  step( solve( !KD( (~k⊕~r1⊕z) ) ▶₀ #vk.1 ) )
                    case acceptreader
                    by step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.6, 0) ~~> (#vk.1, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_7
                step( solve( !KU( (~r1⊕x) ) @ #vk.1 ) )
                  case c_xor
                  by step( contradiction /* cyclic */ )
                next
                  case coerce
                  step( solve( !KD( (~r1⊕x) ) ▶₀ #vk.1 ) )
                    case acceptreader
                    by step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.6, 0) ~~> (#vk.1, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_8
                step( solve( !KU( (~k⊕x) ) @ #vk.1 ) )
                  case c_xor
                  by step( solve( !KU( ~k ) @ #vk.4 ) )
                next
                  case coerce
                  step( solve( !KD( (~k⊕x) ) ▶₀ #vk.1 ) )
                    case acceptreader
                    by step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.6, 0) ~~> (#vk.1, 0) ) )
                    qed
                  qed
                qed
              qed
            next
              case tag1_case_3
              step( solve( splitEqs(0) ) )
                case split_case_1
                by step( solve( !KU( ~k ) @ #vk.1 ) )
              next
                case split_case_2
                by step( contradiction /* cyclic */ )
              next
                case split_case_3
                MIRRORED
              next
                case split_case_4
                step( solve( !KU( zero ) @ #vk.1 ) )
                  case c_zero
                  MIRRORED
                next
                  case coerce
                  step( solve( !KD( zero ) ▶₀ #vk.1 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.5, 0) ~~> (#vk.1, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_5
                step( solve( !KU( (~k⊕~r1) ) @ #vk.1 ) )
                  case c_xor
                  by step( contradiction /* cyclic */ )
                next
                  case coerce
                  step( solve( !KD( (~k⊕~r1) ) ▶₀ #vk.1 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.5, 0) ~~> (#vk.1, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_6
                step( solve( !KU( (~k⊕~r1⊕z) ) @ #vk.1 ) )
                  case c_xor_case_1
                  by step( contradiction /* cyclic */ )
                next
                  case c_xor_case_2
                  by step( solve( !KU( ~k ) @ #vk.3 ) )
                next
                  case c_xor_case_3
                  step( solve( !KU( (~k⊕~r1) ) @ #vk.3 ) )
                    case c_xor
                    by step( contradiction /* cyclic */ )
                  next
                    case coerce
                    step( solve( !KD( (~k⊕~r1) ) ▶₀ #vk.2 ) )
                      case acceptreader
                      by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.5, 0) ~~> (#vk.2, 0) ) )
                      qed
                    qed
                  qed
                next
                  case coerce
                  step( solve( !KD( (~k⊕~r1⊕z) ) ▶₀ #vk.1 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.5, 0) ~~> (#vk.1, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_7
                step( solve( !KU( (~r1⊕x) ) @ #vk.1 ) )
                  case c_xor
                  by step( contradiction /* cyclic */ )
                next
                  case coerce
                  step( solve( !KD( (~r1⊕x) ) ▶₀ #vk.1 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.5, 0) ~~> (#vk.1, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_8
                step( solve( !KU( (~k⊕x) ) @ #vk.1 ) )
                  case c_xor
                  by step( solve( !KU( ~k ) @ #vk.3 ) )
                next
                  case coerce
                  step( solve( !KD( (~k⊕x) ) ▶₀ #vk.1 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.5, 0) ~~> (#vk.1, 0) ) )
                    qed
                  qed
                qed
              qed
            qed
          qed
        qed
      next
        case pair
        step( solve( TagRun( ~k, phase ) ▶₀ #vr ) )
          case setup_case_1
          step( solve( !KU( ~r1 ) @ #vk.2 ) )
            case tag1
            step( solve( !KU( h(z) ) @ #vk.3 ) )
              case c_h
              step( solve( splitEqs(0) ) )
                case split_case_1
                by step( solve( !KU( ~k ) @ #vk.3 ) )
              next
                case split_case_2
                by step( contradiction /* cyclic */ )
              next
                case split_case_3
                step( solve( !KU( (~k⊕~r1⊕r0) ) @ #vk.4 ) )
                  case c_xor_case_1
                  step( solve( !KU( (~k⊕r0) ) @ #vk.5 ) )
                    case c_xor
                    by step( solve( !KU( ~k ) @ #vk.6 ) )
                  next
                    case coerce
                    step( solve( !KD( (~k⊕r0) ) ▶₀ #vk.4 ) )
                      case acceptreader
                      by step( solve( (#vl.1, 0) ~~> (#vk.4, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.1, 0) ~~> (#vk.4, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.4, 0) ~~> (#vk.4, 0) ) )
                      qed
                    qed
                  qed
                next
                  case c_xor_case_2
                  by step( solve( !KU( ~k ) @ #vk.6 ) )
                next
                  case c_xor_case_3
                  step( solve( !KU( (~k⊕~r1) ) @ #vk.5 ) )
                    case c_xor
                    by step( solve( !KU( ~k ) @ #vk.6 ) )
                  next
                    case coerce
                    step( solve( !KD( (~k⊕~r1) ) ▶₀ #vk.4 ) )
                      case acceptreader
                      by step( solve( (#vl.1, 0) ~~> (#vk.4, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.1, 0) ~~> (#vk.4, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.4, 0) ~~> (#vk.4, 0) ) )
                      qed
                    qed
                  qed
                next
                  case coerce
                  step( solve( !KD( (~k⊕~r1⊕r0) ) ▶₀ #vk.3 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.4, 0) ~~> (#vk.3, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_4
                step( solve( !KU( (~k⊕~r1) ) @ #vk.4 ) )
                  case c_xor
                  by step( solve( !KU( ~k ) @ #vk.5 ) )
                next
                  case coerce
                  step( solve( !KD( (~k⊕~r1) ) ▶₀ #vk.3 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.4, 0) ~~> (#vk.3, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_5
                step( solve( !KU( (~k⊕~r1) ) @ #vk.3 ) )
                  case c_xor
                  by step( contradiction /* cyclic */ )
                next
                  case coerce
                  step( solve( !KD( (~k⊕~r1) ) ▶₀ #vk.3 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.4, 0) ~~> (#vk.3, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_6
                step( solve( !KU( (~k⊕~r1⊕z) ) @ #vk.3 ) )
                  case c_xor_case_1
                  by step( contradiction /* cyclic */ )
                next
                  case c_xor_case_2
                  by step( solve( !KU( ~k ) @ #vk.6 ) )
                next
                  case c_xor_case_3
                  step( solve( !KU( (~k⊕~r1) ) @ #vk.5 ) )
                    case c_xor
                    by step( contradiction /* cyclic */ )
                  next
                    case coerce
                    step( solve( !KD( (~k⊕~r1) ) ▶₀ #vk.4 ) )
                      case acceptreader
                      by step( solve( (#vl.1, 0) ~~> (#vk.4, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.1, 0) ~~> (#vk.4, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.4, 0) ~~> (#vk.4, 0) ) )
                      qed
                    qed
                  qed
                next
                  case coerce
                  step( solve( !KD( (~k⊕~r1⊕z) ) ▶₀ #vk.3 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.4, 0) ~~> (#vk.3, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_7
                step( solve( !KU( (~r1⊕x) ) @ #vk.3 ) )
                  case c_xor
                  by step( contradiction /* cyclic */ )
                next
                  case coerce
                  step( solve( !KD( (~r1⊕x) ) ▶₀ #vk.3 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.4, 0) ~~> (#vk.3, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_8
                step( solve( !KU( (~k⊕x) ) @ #vk.3 ) )
                  case c_xor
                  by step( solve( !KU( ~k ) @ #vk.6 ) )
                next
                  case coerce
                  step( solve( !KD( (~k⊕x) ) ▶₀ #vk.3 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.4, 0) ~~> (#vk.3, 0) ) )
                    qed
                  qed
                qed
              qed
            next
              case tag1_case_1
              step( solve( splitEqs(0) ) )
                case split_case_1
                by step( solve( !KU( ~k ) @ #vk.3 ) )
              next
                case split_case_2
                MIRRORED
              next
                case split_case_3
                MIRRORED
              next
                case split_case_4
                step( solve( !KU( zero ) @ #vk.3 ) )
                  case c_zero
                  MIRRORED
                next
                  case coerce
                  step( solve( !KD( zero ) ▶₀ #vk.3 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.5, 0) ~~> (#vk.3, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_5
                step( solve( !KU( (~k⊕~r1) ) @ #vk.3 ) )
                  case c_xor
                  by step( contradiction /* cyclic */ )
                next
                  case coerce
                  step( solve( !KD( (~k⊕~r1) ) ▶₀ #vk.3 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.5, 0) ~~> (#vk.3, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_6
                step( solve( !KU( (~k⊕~r1⊕z) ) @ #vk.3 ) )
                  case c_xor_case_1
                  by step( contradiction /* cyclic */ )
                next
                  case c_xor_case_2
                  by step( solve( !KU( ~k ) @ #vk.5 ) )
                next
                  case c_xor_case_3
                  step( solve( !KU( (~k⊕~r1) ) @ #vk.5 ) )
                    case c_xor
                    by step( contradiction /* cyclic */ )
                  next
                    case coerce
                    step( solve( !KD( (~k⊕~r1) ) ▶₀ #vk.4 ) )
                      case acceptreader
                      by step( solve( (#vl.1, 0) ~~> (#vk.4, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.1, 0) ~~> (#vk.4, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.5, 0) ~~> (#vk.4, 0) ) )
                      qed
                    qed
                  qed
                next
                  case coerce
                  step( solve( !KD( (~k⊕~r1⊕z) ) ▶₀ #vk.3 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.5, 0) ~~> (#vk.3, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_7
                step( solve( !KU( (~r1⊕x) ) @ #vk.3 ) )
                  case c_xor
                  by step( contradiction /* cyclic */ )
                next
                  case coerce
                  step( solve( !KD( (~r1⊕x) ) ▶₀ #vk.3 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.5, 0) ~~> (#vk.3, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_8
                step( solve( !KU( (~k⊕x) ) @ #vk.3 ) )
                  case c_xor
                  by step( solve( !KU( ~k ) @ #vk.5 ) )
                next
                  case coerce
                  step( solve( !KD( (~k⊕x) ) ▶₀ #vk.3 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.5, 0) ~~> (#vk.3, 0) ) )
                    qed
                  qed
                qed
              qed
            next
              case tag1_case_2
              step( solve( splitEqs(0) ) )
                case split_case_1
                by step( solve( !KU( ~k ) @ #vk.3 ) )
              next
                case split_case_2
                by step( contradiction /* cyclic */ )
              next
                case split_case_3
                step( solve( splitEqs(2) ) )
                  case split_case_1
                  by step( solve( !KU( ~k2 ) @ #vk.3 ) )
                next
                  case split_case_2
                  step( solve( !KU( (~k⊕~k2⊕~r1) ) @ #vk.4 ) )
                    case c_xor_case_1
                    by step( solve( !KU( ~k2 ) @ #vk.6 ) )
                  next
                    case c_xor_case_2
                    by step( solve( !KU( ~k ) @ #vk.6 ) )
                  next
                    case c_xor_case_3
                    by step( contradiction /* cyclic */ )
                  next
                    case coerce
                    step( solve( !KD( (~k⊕~k2⊕~r1) ) ▶₀ #vk.3 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_3
                  step( solve( !KU( (~k2⊕~r1.1) ) @ #vk.3 ) )
                    case c_xor
                    by step( solve( !KU( ~k2 ) @ #vk.6 ) )
                  next
                    case coerce
                    step( solve( !KD( (~k2⊕~r1.1) ) ▶₀ #vk.3 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_4
                  step( solve( !KU( (~k2⊕x⊕~r1.1) ) @ #vk.3 ) )
                    case c_xor_case_1
                    step( solve( !KU( (~k⊕~r1⊕x) ) @ #vk.4 ) )
                      case c_xor_case_1
                      step( solve( !KU( (~k2⊕~r1.1) ) @ #vk.5 ) )
                        case c_xor
                        by step( contradiction /* cyclic */ )
                      next
                        case coerce
                        step( solve( !KD( (~k2⊕~r1.1) ) ▶₀ #vk.5 ) )
                          case acceptreader
                          by step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                        next
                          case initiatereader
                          by step( contradiction /* impossible chain */ )
                        next
                          case tag1
                          step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                            case d_0_fst
                            by step( contradiction /* impossible chain */ )
                          next
                            case d_0_snd
                            by step( solve( (#vr.6, 0) ~~> (#vk.5, 0) ) )
                          qed
                        qed
                      qed
                    next
                      case c_xor_case_2
                      by step( solve( !KU( ~k ) @ #vk.8 ) )
                    next
                      case c_xor_case_3
                      step( solve( !KU( (~k2⊕~r1.1) ) @ #vk.5 ) )
                        case c_xor
                        by step( solve( !KU( ~k2 ) @ #vk.9 ) )
                      next
                        case coerce
                        step( solve( !KD( (~k2⊕~r1.1) ) ▶₀ #vk.5 ) )
                          case acceptreader
                          by step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                        next
                          case initiatereader
                          by step( contradiction /* impossible chain */ )
                        next
                          case tag1
                          step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                            case d_0_fst
                            by step( contradiction /* impossible chain */ )
                          next
                            case d_0_snd
                            by step( solve( (#vr.6, 0) ~~> (#vk.5, 0) ) )
                          qed
                        qed
                      qed
                    next
                      case coerce
                      step( solve( !KD( (~k⊕~r1⊕x) ) ▶₀ #vk.4 ) )
                        case acceptreader
                        by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                      next
                        case initiatereader
                        by step( contradiction /* impossible chain */ )
                      next
                        case tag1
                        step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                          case d_0_fst
                          by step( contradiction /* impossible chain */ )
                        next
                          case d_0_snd
                          by step( solve( (#vr.6, 0) ~~> (#vk.4, 0) ) )
                        qed
                      qed
                    qed
                  next
                    case c_xor_case_2
                    by step( solve( !KU( ~k2 ) @ #vk.6 ) )
                  next
                    case c_xor_case_3
                    step( solve( !KU( (~k⊕~r1⊕x) ) @ #vk.4 ) )
                      case c_xor_case_1
                      by step( contradiction /* cyclic */ )
                    next
                      case c_xor_case_2
                      by step( solve( !KU( ~k ) @ #vk.8 ) )
                    next
                      case c_xor_case_3
                      step( solve( !KU( (~k2⊕x) ) @ #vk.6 ) )
                        case c_xor
                        by step( solve( !KU( ~k2 ) @ #vk.9 ) )
                      next
                        case coerce
                        step( solve( !KD( (~k2⊕x) ) ▶₀ #vk.5 ) )
                          case acceptreader
                          by step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                        next
                          case initiatereader
                          by step( contradiction /* impossible chain */ )
                        next
                          case tag1
                          step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                            case d_0_fst
                            by step( contradiction /* impossible chain */ )
                          next
                            case d_0_snd
                            by step( solve( (#vr.6, 0) ~~> (#vk.5, 0) ) )
                          qed
                        qed
                      qed
                    next
                      case coerce
                      step( solve( !KD( (~k⊕~r1⊕x) ) ▶₀ #vk.4 ) )
                        case acceptreader
                        by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                      next
                        case initiatereader
                        by step( contradiction /* impossible chain */ )
                      next
                        case tag1
                        step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                          case d_0_fst
                          by step( contradiction /* impossible chain */ )
                        next
                          case d_0_snd
                          by step( solve( (#vr.6, 0) ~~> (#vk.4, 0) ) )
                        qed
                      qed
                    qed
                  next
                    case coerce
                    step( solve( !KD( (~k2⊕x⊕~r1.1) ) ▶₀ #vk.3 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_5
                  step( solve( !KU( (~k2⊕x) ) @ #vk.3 ) )
                    case c_xor
                    by step( solve( !KU( ~k2 ) @ #vk.6 ) )
                  next
                    case coerce
                    step( solve( !KD( (~k2⊕x) ) ▶₀ #vk.3 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_6
                  step( solve( !KU( (x⊕~r1.1) ) @ #vk.3 ) )
                    case c_xor
                    step( solve( !KU( (~k⊕~k2⊕~r1⊕x) ) @ #vk.4 ) )
                      case c_xor_case_1
                      by step( contradiction /* cyclic */ )
                    next
                      case c_xor_case_2
                      by step( solve( !KU( ~k2 ) @ #vk.8 ) )
                    next
                      case c_xor_case_3
                      step( solve( !KU( (~k⊕x) ) @ #vk.7 ) )
                        case c_xor
                        by step( solve( !KU( ~k ) @ #vk.9 ) )
                      next
                        case coerce
                        step( solve( !KD( (~k⊕x) ) ▶₀ #vk.5 ) )
                          case acceptreader
                          by step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                        next
                          case initiatereader
                          by step( contradiction /* impossible chain */ )
                        next
                          case tag1
                          step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                            case d_0_fst
                            by step( contradiction /* impossible chain */ )
                          next
                            case d_0_snd
                            by step( solve( (#vr.6, 0) ~~> (#vk.5, 0) ) )
                          qed
                        qed
                      qed
                    next
                      case c_xor_case_4
                      by step( solve( !KU( ~k ) @ #vk.8 ) )
                    next
                      case c_xor_case_5
                      step( solve( !KU( (~k2⊕x) ) @ #vk.7 ) )
                        case c_xor
                        by step( solve( !KU( ~k2 ) @ #vk.9 ) )
                      next
                        case coerce
                        step( solve( !KD( (~k2⊕x) ) ▶₀ #vk.5 ) )
                          case acceptreader
                          by step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                        next
                          case initiatereader
                          by step( contradiction /* impossible chain */ )
                        next
                          case tag1
                          step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                            case d_0_fst
                            by step( contradiction /* impossible chain */ )
                          next
                            case d_0_snd
                            by step( solve( (#vr.6, 0) ~~> (#vk.5, 0) ) )
                          qed
                        qed
                      qed
                    next
                      case c_xor_case_6
                      step( solve( !KU( (~r1⊕x) ) @ #vk.7 ) )
                        case c_xor
                        by step( contradiction /* cyclic */ )
                      next
                        case coerce
                        step( solve( !KD( (~r1⊕x) ) ▶₀ #vk.5 ) )
                          case acceptreader
                          by step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                        next
                          case initiatereader
                          by step( contradiction /* impossible chain */ )
                        next
                          case tag1
                          step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                            case d_0_fst
                            by step( contradiction /* impossible chain */ )
                          next
                            case d_0_snd
                            by step( solve( (#vr.6, 0) ~~> (#vk.5, 0) ) )
                          qed
                        qed
                      qed
                    next
                      case c_xor_case_7
                      step( solve( !KU( (~k⊕~k2⊕~r1) ) @ #vk.7 ) )
                        case c_xor_case_1
                        by step( solve( !KU( ~k2 ) @ #vk.9 ) )
                      next
                        case c_xor_case_2
                        by step( solve( !KU( ~k ) @ #vk.9 ) )
                      next
                        case c_xor_case_3
                        by step( contradiction /* cyclic */ )
                      next
                        case coerce
                        step( solve( !KD( (~k⊕~k2⊕~r1) ) ▶₀ #vk.5 ) )
                          case acceptreader
                          by step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                        next
                          case initiatereader
                          by step( contradiction /* impossible chain */ )
                        next
                          case tag1
                          step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                            case d_0_fst
                            by step( contradiction /* impossible chain */ )
                          next
                            case d_0_snd
                            by step( solve( (#vr.6, 0) ~~> (#vk.5, 0) ) )
                          qed
                        qed
                      qed
                    next
                      case coerce
                      step( solve( !KD( (~k⊕~k2⊕~r1⊕x) ) ▶₀ #vk.4 ) )
                        case acceptreader
                        by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                      next
                        case initiatereader
                        by step( contradiction /* impossible chain */ )
                      next
                        case tag1
                        step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                          case d_0_fst
                          by step( contradiction /* impossible chain */ )
                        next
                          case d_0_snd
                          by step( solve( (#vr.6, 0) ~~> (#vk.4, 0) ) )
                        qed
                      qed
                    qed
                  next
                    case coerce
                    step( solve( !KD( (x⊕~r1.1) ) ▶₀ #vk.3 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_7
                  step( solve( !KU( (~k⊕~k2⊕~r1⊕r0⊕~r1.1) ) @ #vk.4 ) )
                    case c_xor_case_01
                    step( solve( !KU( (~k⊕~k2⊕~r1⊕~r1.1) ) @ #vk.5 ) )
                      case c_xor_case_1
                      step( solve( !KU( (~k⊕~k2⊕~r1.1) ) @ #vk.6 ) )
                        case c_xor_case_1
                        by step( solve( !KU( ~k2 ) @ #vk.8 ) )
                      next
                        case c_xor_case_2
                        by step( solve( !KU( ~k ) @ #vk.8 ) )
                      next
                        case c_xor_case_3
                        by step( contradiction /* cyclic */ )
                      next
                        case coerce
                        step( solve( !KD( (~k⊕~k2⊕~r1.1) ) ▶₀ #vk.5 ) )
                          case acceptreader
                          by step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                        next
                          case initiatereader
                          by step( contradiction /* impossible chain */ )
                        next
                          case tag1
                          step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                            case d_0_fst
                            by step( contradiction /* impossible chain */ )
                          next
                            case d_0_snd
                            by step( solve( (#vr.6, 0) ~~> (#vk.5, 0) ) )
                          qed
                        qed
                      qed
                    next
                      case c_xor_case_2
                      by step( solve( !KU( ~k2 ) @ #vk.7 ) )
                    next
                      case c_xor_case_3
                      step( solve( !KU( (~k⊕~r1.1) ) @ #vk.6 ) )
                        case c_xor
                        by step( contradiction /* cyclic */ )
                      next
                        case coerce
                        step( solve( !KD( (~k⊕~r1.1) ) ▶₀ #vk.5 ) )
                          case acceptreader
                          by step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                        next
                          case initiatereader
                          by step( contradiction /* impossible chain */ )
                        next
                          case tag1
                          step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                            case d_0_fst
                            by step( contradiction /* impossible chain */ )
                          next
                            case d_0_snd
                            by step( solve( (#vr.6, 0) ~~> (#vk.5, 0) ) )
                          qed
                        qed
                      qed
                    next
                      case c_xor_case_4
                      by step( solve( !KU( ~k ) @ #vk.7 ) )
                    next
                      case c_xor_case_5
                      step( solve( !KU( (~k2⊕~r1.1) ) @ #vk.6 ) )
                        case c_xor
                        by step( contradiction /* cyclic */ )
                      next
                        case coerce
                        step( solve( !KD( (~k2⊕~r1.1) ) ▶₀ #vk.5 ) )
                          case acceptreader
                          by step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                        next
                          case initiatereader
                          by step( contradiction /* impossible chain */ )
                        next
                          case tag1
                          step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                            case d_0_fst
                            by step( contradiction /* impossible chain */ )
                          next
                            case d_0_snd
                            by step( solve( (#vr.6, 0) ~~> (#vk.5, 0) ) )
                          qed
                        qed
                      qed
                    next
                      case c_xor_case_6
                      step( solve( !KU( (~r1⊕~r1.1) ) @ #vk.6 ) )
                        case c_xor
                        by step( contradiction /* cyclic */ )
                      next
                        case coerce
                        step( solve( !KD( (~r1⊕~r1.1) ) ▶₀ #vk.5 ) )
                          case acceptreader
                          by step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                        next
                          case initiatereader
                          by step( contradiction /* impossible chain */ )
                        next
                          case tag1
                          step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                            case d_0_fst
                            by step( contradiction /* impossible chain */ )
                          next
                            case d_0_snd
                            by step( solve( (#vr.6, 0) ~~> (#vk.5, 0) ) )
                          qed
                        qed
                      qed
                    next
                      case c_xor_case_7
                      by step( contradiction /* cyclic */ )
                    next
                      case coerce
                      step( solve( !KD( (~k⊕~k2⊕~r1⊕~r1.1) ) ▶₀ #vk.4 ) )
                        case acceptreader
                        by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                      next
                        case initiatereader
                        by step( contradiction /* impossible chain */ )
                      next
                        case tag1
                        step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                          case d_0_fst
                          by step( contradiction /* impossible chain */ )
                        next
                          case d_0_snd
                          by step( solve( (#vr.6, 0) ~~> (#vk.4, 0) ) )
                        qed
                      qed
                    qed
                  next
                    case c_xor_case_02
                    step( solve( !KU( (~k⊕~k2⊕r0⊕~r1.1) ) @ #vk.5 ) )
                      case c_xor_case_1
                      step( solve( !KU( (~k⊕~k2⊕~r1.1) ) @ #vk.6 ) )
                        case c_xor_case_1
                        by step( solve( !KU( ~k2 ) @ #vk.8 ) )
                      next
                        case c_xor_case_2
                        by step( solve( !KU( ~k ) @ #vk.8 ) )
                      next
                        case c_xor_case_3
                        by step( contradiction /* cyclic */ )
                      next
                        case coerce
                        step( solve( !KD( (~k⊕~k2⊕~r1.1) ) ▶₀ #vk.5 ) )
                          case acceptreader
                          by step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                        next
                          case initiatereader
                          by step( contradiction /* impossible chain */ )
                        next
                          case tag1
                          step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                            case d_0_fst
                            by step( contradiction /* impossible chain */ )
                          next
                            case d_0_snd
                            by step( solve( (#vr.6, 0) ~~> (#vk.5, 0) ) )
                          qed
                        qed
                      qed
                    next
                      case c_xor_case_2
                      by step( solve( !KU( ~k2 ) @ #vk.7 ) )
                    next
                      case c_xor_case_3
                      step( solve( !KU( (~k⊕~r1.1) ) @ #vk.6 ) )
                        case c_xor
                        by step( contradiction /* cyclic */ )
                      next
                        case coerce
                        step( solve( !KD( (~k⊕~r1.1) ) ▶₀ #vk.5 ) )
                          case acceptreader
                          by step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                        next
                          case initiatereader
                          by step( contradiction /* impossible chain */ )
                        next
                          case tag1
                          step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                            case d_0_fst
                            by step( contradiction /* impossible chain */ )
                          next
                            case d_0_snd
                            by step( solve( (#vr.6, 0) ~~> (#vk.5, 0) ) )
                          qed
                        qed
                      qed
                    next
                      case c_xor_case_4
                      by step( solve( !KU( ~k ) @ #vk.7 ) )
                    next
                      case c_xor_case_5
                      step( solve( !KU( (~k2⊕~r1.1) ) @ #vk.6 ) )
                        case c_xor
                        by step( contradiction /* cyclic */ )
                      next
                        case coerce
                        step( solve( !KD( (~k2⊕~r1.1) ) ▶₀ #vk.5 ) )
                          case acceptreader
                          by step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                        next
                          case initiatereader
                          by step( contradiction /* impossible chain */ )
                        next
                          case tag1
                          step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                            case d_0_fst
                            by step( contradiction /* impossible chain */ )
                          next
                            case d_0_snd
                            by step( solve( (#vr.6, 0) ~~> (#vk.5, 0) ) )
                          qed
                        qed
                      qed
                    next
                      case c_xor_case_6
                      step( solve( !KU( (r0⊕~r1.1) ) @ #vk.6 ) )
                        case c_xor
                        by step( contradiction /* cyclic */ )
                      next
                        case coerce
                        step( solve( !KD( (r0⊕~r1.1) ) ▶₀ #vk.5 ) )
                          case acceptreader
                          by step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                        next
                          case initiatereader
                          by step( contradiction /* impossible chain */ )
                        next
                          case tag1
                          step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                            case d_0_fst
                            by step( contradiction /* impossible chain */ )
                          next
                            case d_0_snd
                            by step( solve( (#vr.6, 0) ~~> (#vk.5, 0) ) )
                          qed
                        qed
                      qed
                    next
                      case c_xor_case_7
                      by step( contradiction /* cyclic */ )
                    next
                      case coerce
                      step( solve( !KD( (~k⊕~k2⊕r0⊕~r1.1) ) ▶₀ #vk.4 ) )
                        case acceptreader
                        by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                      next
                        case initiatereader
                        by step( contradiction /* impossible chain */ )
                      next
                        case tag1
                        step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                          case d_0_fst
                          by step( contradiction /* impossible chain */ )
                        next
                          case d_0_snd
                          by step( solve( (#vr.6, 0) ~~> (#vk.4, 0) ) )
                        qed
                      qed
                    qed
                  next
                    case c_xor_case_03
                    step( solve( !KU( (~k⊕~k2⊕~r1.1) ) @ #vk.5 ) )
                      case c_xor_case_1
                      by step( solve( !KU( ~k2 ) @ #vk.8 ) )
                    next
                      case c_xor_case_2
                      by step( solve( !KU( ~k ) @ #vk.8 ) )
                    next
                      case c_xor_case_3
                      by step( contradiction /* cyclic */ )
                    next
                      case coerce
                      step( solve( !KD( (~k⊕~k2⊕~r1.1) ) ▶₀ #vk.4 ) )
                        case acceptreader
                        by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                      next
                        case initiatereader
                        by step( contradiction /* impossible chain */ )
                      next
                        case tag1
                        step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                          case d_0_fst
                          by step( contradiction /* impossible chain */ )
                        next
                          case d_0_snd
                          by step( solve( (#vr.6, 0) ~~> (#vk.4, 0) ) )
                        qed
                      qed
                    qed
                  next
                    case c_xor_case_04
                    by step( solve( !KU( ~k2 ) @ #vk.6 ) )
                  next
                    case c_xor_case_05
                    step( solve( !KU( (~k⊕~r1⊕~r1.1) ) @ #vk.5 ) )
                      case c_xor_case_1
                      step( solve( !KU( (~k2⊕r0) ) @ #vk.6 ) )
                        case c_xor
                        by step( solve( !KU( ~k2 ) @ #vk.8 ) )
                      next
                        case coerce
                        step( solve( !KD( (~k2⊕r0) ) ▶₀ #vk.5 ) )
                          case acceptreader
                          by step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                        next
                          case initiatereader
                          by step( contradiction /* impossible chain */ )
                        next
                          case tag1
                          step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                            case d_0_fst
                            by step( contradiction /* impossible chain */ )
                          next
                            case d_0_snd
                            by step( solve( (#vr.6, 0) ~~> (#vk.5, 0) ) )
                          qed
                        qed
                      qed
                    next
                      case c_xor_case_2
                      by step( solve( !KU( ~k ) @ #vk.8 ) )
                    next
                      case c_xor_case_3
                      by step( contradiction /* cyclic */ )
                    next
                      case coerce
                      step( solve( !KD( (~k⊕~r1⊕~r1.1) ) ▶₀ #vk.4 ) )
                        case acceptreader
                        by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                      next
                        case initiatereader
                        by step( contradiction /* impossible chain */ )
                      next
                        case tag1
                        step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                          case d_0_fst
                          by step( contradiction /* impossible chain */ )
                        next
                          case d_0_snd
                          by step( solve( (#vr.6, 0) ~~> (#vk.4, 0) ) )
                        qed
                      qed
                    qed
                  next
                    case c_xor_case_06
                    step( solve( !KU( (~k⊕r0⊕~r1.1) ) @ #vk.5 ) )
                      case c_xor_case_1
                      step( solve( !KU( (~k2⊕~r1) ) @ #vk.6 ) )
                        case c_xor
                        by step( solve( !KU( ~k2 ) @ #vk.8 ) )
                      next
                        case coerce
                        step( solve( !KD( (~k2⊕~r1) ) ▶₀ #vk.5 ) )
                          case acceptreader
                          by step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                        next
                          case initiatereader
                          by step( contradiction /* impossible chain */ )
                        next
                          case tag1
                          step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                            case d_0_fst
                            by step( contradiction /* impossible chain */ )
                          next
                            case d_0_snd
                            by step( solve( (#vr.6, 0) ~~> (#vk.5, 0) ) )
                          qed
                        qed
                      qed
                    next
                      case c_xor_case_2
                      by step( solve( !KU( ~k ) @ #vk.8 ) )
                    next
                      case c_xor_case_3
                      by step( contradiction /* cyclic */ )
                    next
                      case coerce
                      step( solve( !KD( (~k⊕r0⊕~r1.1) ) ▶₀ #vk.4 ) )
                        case acceptreader
                        by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                      next
                        case initiatereader
                        by step( contradiction /* impossible chain */ )
                      next
                        case tag1
                        step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                          case d_0_fst
                          by step( contradiction /* impossible chain */ )
                        next
                          case d_0_snd
                          by step( solve( (#vr.6, 0) ~~> (#vk.4, 0) ) )
                        qed
                      qed
                    qed
                  next
                    case c_xor_case_07
                    step( solve( !KU( (~k⊕~r1.1) ) @ #vk.5 ) )
                      case c_xor
                      by step( contradiction /* cyclic */ )
                    next
                      case coerce
                      step( solve( !KD( (~k⊕~r1.1) ) ▶₀ #vk.4 ) )
                        case acceptreader
                        by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                      next
                        case initiatereader
                        by step( contradiction /* impossible chain */ )
                      next
                        case tag1
                        step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                          case d_0_fst
                          by step( contradiction /* impossible chain */ )
                        next
                          case d_0_snd
                          by step( solve( (#vr.6, 0) ~~> (#vk.4, 0) ) )
                        qed
                      qed
                    qed
                  next
                    case c_xor_case_08
                    by step( solve( !KU( ~k ) @ #vk.6 ) )
                  next
                    case c_xor_case_09
                    step( solve( !KU( (~k2⊕~r1⊕~r1.1) ) @ #vk.5 ) )
                      case c_xor_case_1
                      step( solve( !KU( (~k⊕r0) ) @ #vk.6 ) )
                        case c_xor
                        by step( solve( !KU( ~k ) @ #vk.8 ) )
                      next
                        case coerce
                        step( solve( !KD( (~k⊕r0) ) ▶₀ #vk.5 ) )
                          case acceptreader
                          by step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                        next
                          case initiatereader
                          by step( contradiction /* impossible chain */ )
                        next
                          case tag1
                          step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                            case d_0_fst
                            by step( contradiction /* impossible chain */ )
                          next
                            case d_0_snd
                            by step( solve( (#vr.6, 0) ~~> (#vk.5, 0) ) )
                          qed
                        qed
                      qed
                    next
                      case c_xor_case_2
                      by step( solve( !KU( ~k2 ) @ #vk.8 ) )
                    next
                      case c_xor_case_3
                      by step( contradiction /* cyclic */ )
                    next
                      case coerce
                      step( solve( !KD( (~k2⊕~r1⊕~r1.1) ) ▶₀ #vk.4 ) )
                        case acceptreader
                        by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                      next
                        case initiatereader
                        by step( contradiction /* impossible chain */ )
                      next
                        case tag1
                        step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                          case d_0_fst
                          by step( contradiction /* impossible chain */ )
                        next
                          case d_0_snd
                          by step( solve( (#vr.6, 0) ~~> (#vk.4, 0) ) )
                        qed
                      qed
                    qed
                  next
                    case c_xor_case_10
                    step( solve( !KU( (~k2⊕r0⊕~r1.1) ) @ #vk.5 ) )
                      case c_xor_case_1
                      step( solve( !KU( (~k⊕~r1) ) @ #vk.6 ) )
                        case c_xor
                        by step( solve( !KU( ~k ) @ #vk.8 ) )
                      next
                        case coerce
                        step( solve( !KD( (~k⊕~r1) ) ▶₀ #vk.5 ) )
                          case acceptreader
                          by step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                        next
                          case initiatereader
                          by step( contradiction /* impossible chain */ )
                        next
                          case tag1
                          step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                            case d_0_fst
                            by step( contradiction /* impossible chain */ )
                          next
                            case d_0_snd
                            by step( solve( (#vr.6, 0) ~~> (#vk.5, 0) ) )
                          qed
                        qed
                      qed
                    next
                      case c_xor_case_2
                      by step( solve( !KU( ~k2 ) @ #vk.8 ) )
                    next
                      case c_xor_case_3
                      by step( contradiction /* cyclic */ )
                    next
                      case coerce
                      step( solve( !KD( (~k2⊕r0⊕~r1.1) ) ▶₀ #vk.4 ) )
                        case acceptreader
                        by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                      next
                        case initiatereader
                        by step( contradiction /* impossible chain */ )
                      next
                        case tag1
                        step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                          case d_0_fst
                          by step( contradiction /* impossible chain */ )
                        next
                          case d_0_snd
                          by step( solve( (#vr.6, 0) ~~> (#vk.4, 0) ) )
                        qed
                      qed
                    qed
                  next
                    case c_xor_case_11
                    step( solve( !KU( (~k2⊕~r1.1) ) @ #vk.5 ) )
                      case c_xor
                      by step( contradiction /* cyclic */ )
                    next
                      case coerce
                      step( solve( !KD( (~k2⊕~r1.1) ) ▶₀ #vk.4 ) )
                        case acceptreader
                        by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                      next
                        case initiatereader
                        by step( contradiction /* impossible chain */ )
                      next
                        case tag1
                        step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                          case d_0_fst
                          by step( contradiction /* impossible chain */ )
                        next
                          case d_0_snd
                          by step( solve( (#vr.6, 0) ~~> (#vk.4, 0) ) )
                        qed
                      qed
                    qed
                  next
                    case c_xor_case_12
                    step( solve( !KU( (~r1⊕r0⊕~r1.1) ) @ #vk.5 ) )
                      case c_xor_case_1
                      step( solve( !KU( (~k⊕~k2) ) @ #vk.6 ) )
                        case c_xor
                        by step( solve( !KU( ~k2 ) @ #vk.8 ) )
                      next
                        case coerce
                        step( solve( !KD( (~k⊕~k2) ) ▶₀ #vk.5 ) )
                          case acceptreader
                          by step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                        next
                          case initiatereader
                          by step( contradiction /* impossible chain */ )
                        next
                          case tag1
                          step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                            case d_0_fst
                            by step( contradiction /* impossible chain */ )
                          next
                            case d_0_snd
                            by step( solve( (#vr.6, 0) ~~> (#vk.5, 0) ) )
                          qed
                        qed
                      qed
                    next
                      case c_xor_case_2
                      step( solve( !KU( (~k⊕~k2) ) @ #vk.6 ) )
                        case c_xor
                        by step( solve( !KU( ~k2 ) @ #vk.8 ) )
                      next
                        case coerce
                        step( solve( !KD( (~k⊕~k2) ) ▶₀ #vk.5 ) )
                          case acceptreader
                          by step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                        next
                          case initiatereader
                          by step( contradiction /* impossible chain */ )
                        next
                          case tag1
                          step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                            case d_0_fst
                            by step( contradiction /* impossible chain */ )
                          next
                            case d_0_snd
                            by step( solve( (#vr.6, 0) ~~> (#vk.5, 0) ) )
                          qed
                        qed
                      qed
                    next
                      case c_xor_case_3
                      by step( contradiction /* cyclic */ )
                    next
                      case coerce
                      step( solve( !KD( (~r1⊕r0⊕~r1.1) ) ▶₀ #vk.4 ) )
                        case acceptreader
                        by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                      next
                        case initiatereader
                        by step( contradiction /* impossible chain */ )
                      next
                        case tag1
                        step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                          case d_0_fst
                          by step( contradiction /* impossible chain */ )
                        next
                          case d_0_snd
                          by step( solve( (#vr.6, 0) ~~> (#vk.4, 0) ) )
                        qed
                      qed
                    qed
                  next
                    case c_xor_case_13
                    step( solve( !KU( (~r1⊕~r1.1) ) @ #vk.5 ) )
                      case c_xor
                      by step( contradiction /* cyclic */ )
                    next
                      case coerce
                      step( solve( !KD( (~r1⊕~r1.1) ) ▶₀ #vk.4 ) )
                        case acceptreader
                        by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                      next
                        case initiatereader
                        by step( contradiction /* impossible chain */ )
                      next
                        case tag1
                        step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                          case d_0_fst
                          by step( contradiction /* impossible chain */ )
                        next
                          case d_0_snd
                          by step( solve( (#vr.6, 0) ~~> (#vk.4, 0) ) )
                        qed
                      qed
                    qed
                  next
                    case c_xor_case_14
                    step( solve( !KU( (r0⊕~r1.1) ) @ #vk.5 ) )
                      case c_xor
                      by step( contradiction /* cyclic */ )
                    next
                      case coerce
                      step( solve( !KD( (r0⊕~r1.1) ) ▶₀ #vk.4 ) )
                        case acceptreader
                        by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                      next
                        case initiatereader
                        by step( contradiction /* impossible chain */ )
                      next
                        case tag1
                        step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                          case d_0_fst
                          by step( contradiction /* impossible chain */ )
                        next
                          case d_0_snd
                          by step( solve( (#vr.6, 0) ~~> (#vk.4, 0) ) )
                        qed
                      qed
                    qed
                  next
                    case c_xor_case_15
                    by step( contradiction /* cyclic */ )
                  next
                    case coerce
                    step( solve( !KD( (~k⊕~k2⊕~r1⊕r0⊕~r1.1) ) ▶₀ #vk.3 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                      qed
                    qed
                  qed
                qed
              next
                case split_case_4
                step( solve( !KU( zero ) @ #vk.3 ) )
                  case c_zero
                  step( solve( splitEqs(2) ) )
                    case split
                    step( solve( !KU( (~k⊕~k2⊕~r1⊕~r1.1) ) @ #vk.4 ) )
                      case c_xor_case_1
                      step( solve( !KU( (~k⊕~k2⊕~r1.1) ) @ #vk.5 ) )
                        case c_xor_case_1
                        by step( solve( !KU( ~k2 ) @ #vk.7 ) )
                      next
                        case c_xor_case_2
                        by step( solve( !KU( ~k ) @ #vk.7 ) )
                      next
                        case c_xor_case_3
                        by step( contradiction /* cyclic */ )
                      next
                        case coerce
                        step( solve( !KD( (~k⊕~k2⊕~r1.1) ) ▶₀ #vk.5 ) )
                          case acceptreader
                          by step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                        next
                          case initiatereader
                          by step( contradiction /* impossible chain */ )
                        next
                          case tag1
                          step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                            case d_0_fst
                            by step( contradiction /* impossible chain */ )
                          next
                            case d_0_snd
                            by step( solve( (#vr.6, 0) ~~> (#vk.5, 0) ) )
                          qed
                        qed
                      qed
                    next
                      case c_xor_case_2
                      by step( solve( !KU( ~k2 ) @ #vk.6 ) )
                    next
                      case c_xor_case_3
                      step( solve( !KU( (~k⊕~r1.1) ) @ #vk.5 ) )
                        case c_xor
                        by step( contradiction /* cyclic */ )
                      next
                        case coerce
                        step( solve( !KD( (~k⊕~r1.1) ) ▶₀ #vk.5 ) )
                          case acceptreader
                          by step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                        next
                          case initiatereader
                          by step( contradiction /* impossible chain */ )
                        next
                          case tag1
                          step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                            case d_0_fst
                            by step( contradiction /* impossible chain */ )
                          next
                            case d_0_snd
                            by step( solve( (#vr.6, 0) ~~> (#vk.5, 0) ) )
                          qed
                        qed
                      qed
                    next
                      case c_xor_case_4
                      by step( solve( !KU( ~k ) @ #vk.6 ) )
                    next
                      case c_xor_case_5
                      step( solve( !KU( (~k2⊕~r1.1) ) @ #vk.5 ) )
                        case c_xor
                        by step( contradiction /* cyclic */ )
                      next
                        case coerce
                        step( solve( !KD( (~k2⊕~r1.1) ) ▶₀ #vk.5 ) )
                          case acceptreader
                          by step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                        next
                          case initiatereader
                          by step( contradiction /* impossible chain */ )
                        next
                          case tag1
                          step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                            case d_0_fst
                            by step( contradiction /* impossible chain */ )
                          next
                            case d_0_snd
                            by step( solve( (#vr.6, 0) ~~> (#vk.5, 0) ) )
                          qed
                        qed
                      qed
                    next
                      case c_xor_case_6
                      step( solve( !KU( (~r1⊕~r1.1) ) @ #vk.5 ) )
                        case c_xor
                        by step( contradiction /* cyclic */ )
                      next
                        case coerce
                        step( solve( !KD( (~r1⊕~r1.1) ) ▶₀ #vk.5 ) )
                          case acceptreader
                          by step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                        next
                          case initiatereader
                          by step( contradiction /* impossible chain */ )
                        next
                          case tag1
                          step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                            case d_0_fst
                            by step( contradiction /* impossible chain */ )
                          next
                            case d_0_snd
                            by step( solve( (#vr.6, 0) ~~> (#vk.5, 0) ) )
                          qed
                        qed
                      qed
                    next
                      case c_xor_case_7
                      by step( contradiction /* cyclic */ )
                    next
                      case coerce
                      step( solve( !KD( (~k⊕~k2⊕~r1⊕~r1.1) ) ▶₀ #vk.4 ) )
                        case acceptreader
                        by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                      next
                        case initiatereader
                        by step( contradiction /* impossible chain */ )
                      next
                        case tag1
                        step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                          case d_0_fst
                          by step( contradiction /* impossible chain */ )
                        next
                          case d_0_snd
                          by step( solve( (#vr.6, 0) ~~> (#vk.4, 0) ) )
                        qed
                      qed
                    qed
                  qed
                next
                  case coerce
                  step( solve( !KD( zero ) ▶₀ #vk.3 ) )
                    case acceptreader
                    by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_5
                step( solve( !KU( (~k⊕~r1) ) @ #vk.3 ) )
                  case c_xor
                  by step( contradiction /* cyclic */ )
                next
                  case coerce
                  step( solve( !KD( (~k⊕~r1) ) ▶₀ #vk.3 ) )
                    case acceptreader
                    by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_6
                step( solve( !KU( (~k⊕~r1⊕z) ) @ #vk.3 ) )
                  case c_xor_case_1
                  by step( contradiction /* cyclic */ )
                next
                  case c_xor_case_2
                  by step( solve( !KU( ~k ) @ #vk.6 ) )
                next
                  case c_xor_case_3
                  step( solve( !KU( (~k⊕~r1) ) @ #vk.6 ) )
                    case c_xor
                    by step( contradiction /* cyclic */ )
                  next
                    case coerce
                    step( solve( !KD( (~k⊕~r1) ) ▶₀ #vk.4 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.4, 0) ) )
                      qed
                    qed
                  qed
                next
                  case coerce
                  step( solve( !KD( (~k⊕~r1⊕z) ) ▶₀ #vk.3 ) )
                    case acceptreader
                    by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_7
                step( solve( !KU( (~r1⊕x) ) @ #vk.3 ) )
                  case c_xor
                  by step( contradiction /* cyclic */ )
                next
                  case coerce
                  step( solve( !KD( (~r1⊕x) ) ▶₀ #vk.3 ) )
                    case acceptreader
                    by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_8
                step( solve( !KU( (~k⊕x) ) @ #vk.3 ) )
                  case c_xor
                  by step( solve( !KU( ~k ) @ #vk.6 ) )
                next
                  case coerce
                  step( solve( !KD( (~k⊕x) ) ▶₀ #vk.3 ) )
                    case acceptreader
                    by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                    qed
                  qed
                qed
              qed
            next
              case tag1_case_3
              step( solve( splitEqs(0) ) )
                case split_case_1
                by step( solve( !KU( ~k ) @ #vk.3 ) )
              next
                case split_case_2
                by step( contradiction /* cyclic */ )
              next
                case split_case_3
                step( solve( splitEqs(2) ) )
                  case split_case_1
                  by step( contradiction /* cyclic */ )
                next
                  case split_case_2
                  step( solve( !KU( (~r1⊕r0⊕~r1.1) ) @ #vk.4 ) )
                    case c_xor_case_1
                    step( solve( !KU( (~r1⊕~r1.1) ) @ #vk.5 ) )
                      case c_xor
                      by step( contradiction /* cyclic */ )
                    next
                      case coerce
                      step( solve( !KD( (~r1⊕~r1.1) ) ▶₀ #vk.4 ) )
                        case acceptreader
                        by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                      next
                        case initiatereader
                        by step( contradiction /* impossible chain */ )
                      next
                        case tag1
                        step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                          case d_0_fst
                          by step( contradiction /* impossible chain */ )
                        next
                          case d_0_snd
                          by step( solve( (#vr.6, 0) ~~> (#vk.4, 0) ) )
                        qed
                      qed
                    qed
                  next
                    case c_xor_case_2
                    step( solve( !KU( (r0⊕~r1.1) ) @ #vk.5 ) )
                      case c_xor
                      by step( contradiction /* cyclic */ )
                    next
                      case coerce
                      step( solve( !KD( (r0⊕~r1.1) ) ▶₀ #vk.4 ) )
                        case acceptreader
                        by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                      next
                        case initiatereader
                        by step( contradiction /* impossible chain */ )
                      next
                        case tag1
                        step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                          case d_0_fst
                          by step( contradiction /* impossible chain */ )
                        next
                          case d_0_snd
                          by step( solve( (#vr.6, 0) ~~> (#vk.4, 0) ) )
                        qed
                      qed
                    qed
                  next
                    case c_xor_case_3
                    by step( contradiction /* cyclic */ )
                  next
                    case coerce
                    step( solve( !KD( (~r1⊕r0⊕~r1.1) ) ▶₀ #vk.3 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_3
                  step( solve( !KU( (x⊕~r1.1) ) @ #vk.3 ) )
                    case c_xor
                    step( solve( !KU( (~r1⊕x) ) @ #vk.4 ) )
                      case c_xor
                      by step( contradiction /* cyclic */ )
                    next
                      case coerce
                      step( solve( !KD( (~r1⊕x) ) ▶₀ #vk.4 ) )
                        case acceptreader
                        by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                      next
                        case initiatereader
                        by step( contradiction /* impossible chain */ )
                      next
                        case tag1
                        step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                          case d_0_fst
                          by step( contradiction /* impossible chain */ )
                        next
                          case d_0_snd
                          by step( solve( (#vr.6, 0) ~~> (#vk.4, 0) ) )
                        qed
                      qed
                    qed
                  next
                    case coerce
                    step( solve( !KD( (x⊕~r1.1) ) ▶₀ #vk.3 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                      qed
                    qed
                  qed
                qed
              next
                case split_case_4
                step( solve( !KU( zero ) @ #vk.3 ) )
                  case c_zero
                  step( solve( splitEqs(2) ) )
                    case split
                    step( solve( !KU( (~r1⊕~r1.1) ) @ #vk.4 ) )
                      case c_xor
                      by step( contradiction /* cyclic */ )
                    next
                      case coerce
                      step( solve( !KD( (~r1⊕~r1.1) ) ▶₀ #vk.4 ) )
                        case acceptreader
                        by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                      next
                        case initiatereader
                        by step( contradiction /* impossible chain */ )
                      next
                        case tag1
                        step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                          case d_0_fst
                          by step( contradiction /* impossible chain */ )
                        next
                          case d_0_snd
                          by step( solve( (#vr.6, 0) ~~> (#vk.4, 0) ) )
                        qed
                      qed
                    qed
                  qed
                next
                  case coerce
                  step( solve( !KD( zero ) ▶₀ #vk.3 ) )
                    case acceptreader
                    by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_5
                step( solve( !KU( (~k⊕~r1) ) @ #vk.3 ) )
                  case c_xor
                  by step( contradiction /* cyclic */ )
                next
                  case coerce
                  step( solve( !KD( (~k⊕~r1) ) ▶₀ #vk.3 ) )
                    case acceptreader
                    by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_6
                step( solve( !KU( (~k⊕~r1⊕z) ) @ #vk.3 ) )
                  case c_xor_case_1
                  by step( contradiction /* cyclic */ )
                next
                  case c_xor_case_2
                  by step( solve( !KU( ~k ) @ #vk.6 ) )
                next
                  case c_xor_case_3
                  step( solve( !KU( (~k⊕~r1) ) @ #vk.6 ) )
                    case c_xor
                    by step( contradiction /* cyclic */ )
                  next
                    case coerce
                    step( solve( !KD( (~k⊕~r1) ) ▶₀ #vk.4 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.4, 0) ) )
                      qed
                    qed
                  qed
                next
                  case coerce
                  step( solve( !KD( (~k⊕~r1⊕z) ) ▶₀ #vk.3 ) )
                    case acceptreader
                    by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_7
                step( solve( !KU( (~r1⊕x) ) @ #vk.3 ) )
                  case c_xor
                  by step( contradiction /* cyclic */ )
                next
                  case coerce
                  step( solve( !KD( (~r1⊕x) ) ▶₀ #vk.3 ) )
                    case acceptreader
                    by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_8
                step( solve( !KU( (~k⊕x) ) @ #vk.3 ) )
                  case c_xor
                  by step( solve( !KU( ~k ) @ #vk.6 ) )
                next
                  case coerce
                  step( solve( !KD( (~k⊕x) ) ▶₀ #vk.3 ) )
                    case acceptreader
                    by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                    qed
                  qed
                qed
              qed
            qed
          qed
        next
          case setup_case_2
          step( solve( !KU( ~r1 ) @ #vk.2 ) )
            case tag1
            step( solve( !KU( h(z) ) @ #vk.3 ) )
              case c_h
              step( solve( splitEqs(0) ) )
                case split_case_1
                by step( solve( !KU( ~k ) @ #vk.3 ) )
              next
                case split_case_2
                by step( contradiction /* cyclic */ )
              next
                case split_case_3
                step( solve( !KU( (~k⊕~r1⊕r0) ) @ #vk.4 ) )
                  case c_xor_case_1
                  step( solve( !KU( (~k⊕r0) ) @ #vk.5 ) )
                    case c_xor
                    by step( solve( !KU( ~k ) @ #vk.6 ) )
                  next
                    case coerce
                    step( solve( !KD( (~k⊕r0) ) ▶₀ #vk.4 ) )
                      case acceptreader
                      by step( solve( (#vl.1, 0) ~~> (#vk.4, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.1, 0) ~~> (#vk.4, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.4, 0) ~~> (#vk.4, 0) ) )
                      qed
                    qed
                  qed
                next
                  case c_xor_case_2
                  by step( solve( !KU( ~k ) @ #vk.6 ) )
                next
                  case c_xor_case_3
                  step( solve( !KU( (~k⊕~r1) ) @ #vk.5 ) )
                    case c_xor
                    by step( solve( !KU( ~k ) @ #vk.6 ) )
                  next
                    case coerce
                    step( solve( !KD( (~k⊕~r1) ) ▶₀ #vk.4 ) )
                      case acceptreader
                      by step( solve( (#vl.1, 0) ~~> (#vk.4, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.1, 0) ~~> (#vk.4, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.4, 0) ~~> (#vk.4, 0) ) )
                      qed
                    qed
                  qed
                next
                  case coerce
                  step( solve( !KD( (~k⊕~r1⊕r0) ) ▶₀ #vk.3 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.4, 0) ~~> (#vk.3, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_4
                step( solve( !KU( (~k⊕~r1) ) @ #vk.4 ) )
                  case c_xor
                  by step( solve( !KU( ~k ) @ #vk.5 ) )
                next
                  case coerce
                  step( solve( !KD( (~k⊕~r1) ) ▶₀ #vk.3 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.4, 0) ~~> (#vk.3, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_5
                step( solve( !KU( (~k⊕~r1) ) @ #vk.3 ) )
                  case c_xor
                  by step( contradiction /* cyclic */ )
                next
                  case coerce
                  step( solve( !KD( (~k⊕~r1) ) ▶₀ #vk.3 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.4, 0) ~~> (#vk.3, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_6
                step( solve( !KU( (~k⊕~r1⊕z) ) @ #vk.3 ) )
                  case c_xor_case_1
                  by step( contradiction /* cyclic */ )
                next
                  case c_xor_case_2
                  by step( solve( !KU( ~k ) @ #vk.6 ) )
                next
                  case c_xor_case_3
                  step( solve( !KU( (~k⊕~r1) ) @ #vk.5 ) )
                    case c_xor
                    by step( contradiction /* cyclic */ )
                  next
                    case coerce
                    step( solve( !KD( (~k⊕~r1) ) ▶₀ #vk.4 ) )
                      case acceptreader
                      by step( solve( (#vl.1, 0) ~~> (#vk.4, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.1, 0) ~~> (#vk.4, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.4, 0) ~~> (#vk.4, 0) ) )
                      qed
                    qed
                  qed
                next
                  case coerce
                  step( solve( !KD( (~k⊕~r1⊕z) ) ▶₀ #vk.3 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.4, 0) ~~> (#vk.3, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_7
                step( solve( !KU( (~r1⊕x) ) @ #vk.3 ) )
                  case c_xor
                  by step( contradiction /* cyclic */ )
                next
                  case coerce
                  step( solve( !KD( (~r1⊕x) ) ▶₀ #vk.3 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.4, 0) ~~> (#vk.3, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_8
                step( solve( !KU( (~k⊕x) ) @ #vk.3 ) )
                  case c_xor
                  by step( solve( !KU( ~k ) @ #vk.6 ) )
                next
                  case coerce
                  step( solve( !KD( (~k⊕x) ) ▶₀ #vk.3 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.4, 0) ~~> (#vk.3, 0) ) )
                    qed
                  qed
                qed
              qed
            next
              case tag1_case_1
              step( solve( splitEqs(0) ) )
                case split_case_1
                by step( solve( !KU( ~k ) @ #vk.3 ) )
              next
                case split_case_2
                by step( contradiction /* cyclic */ )
              next
                case split_case_3
                step( solve( splitEqs(2) ) )
                  case split_case_1
                  by step( solve( !KU( ~k1 ) @ #vk.3 ) )
                next
                  case split_case_2
                  step( solve( !KU( (~k⊕~k1⊕~r1) ) @ #vk.4 ) )
                    case c_xor_case_1
                    by step( solve( !KU( ~k1 ) @ #vk.6 ) )
                  next
                    case c_xor_case_2
                    by step( solve( !KU( ~k ) @ #vk.6 ) )
                  next
                    case c_xor_case_3
                    by step( contradiction /* cyclic */ )
                  next
                    case coerce
                    step( solve( !KD( (~k⊕~k1⊕~r1) ) ▶₀ #vk.3 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_3
                  step( solve( !KU( (~k1⊕~r1.1) ) @ #vk.3 ) )
                    case c_xor
                    by step( solve( !KU( ~k1 ) @ #vk.6 ) )
                  next
                    case coerce
                    step( solve( !KD( (~k1⊕~r1.1) ) ▶₀ #vk.3 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_4
                  step( solve( !KU( (~k1⊕x⊕~r1.1) ) @ #vk.3 ) )
                    case c_xor_case_1
                    step( solve( !KU( (~k⊕~r1⊕x) ) @ #vk.4 ) )
                      case c_xor_case_1
                      step( solve( !KU( (~k1⊕~r1.1) ) @ #vk.5 ) )
                        case c_xor
                        by step( contradiction /* cyclic */ )
                      next
                        case coerce
                        step( solve( !KD( (~k1⊕~r1.1) ) ▶₀ #vk.5 ) )
                          case acceptreader
                          by step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                        next
                          case initiatereader
                          by step( contradiction /* impossible chain */ )
                        next
                          case tag1
                          step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                            case d_0_fst
                            by step( contradiction /* impossible chain */ )
                          next
                            case d_0_snd
                            by step( solve( (#vr.6, 0) ~~> (#vk.5, 0) ) )
                          qed
                        qed
                      qed
                    next
                      case c_xor_case_2
                      by step( solve( !KU( ~k ) @ #vk.8 ) )
                    next
                      case c_xor_case_3
                      step( solve( !KU( (~k1⊕~r1.1) ) @ #vk.5 ) )
                        case c_xor
                        by step( solve( !KU( ~k1 ) @ #vk.9 ) )
                      next
                        case coerce
                        step( solve( !KD( (~k1⊕~r1.1) ) ▶₀ #vk.5 ) )
                          case acceptreader
                          by step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                        next
                          case initiatereader
                          by step( contradiction /* impossible chain */ )
                        next
                          case tag1
                          step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                            case d_0_fst
                            by step( contradiction /* impossible chain */ )
                          next
                            case d_0_snd
                            by step( solve( (#vr.6, 0) ~~> (#vk.5, 0) ) )
                          qed
                        qed
                      qed
                    next
                      case coerce
                      step( solve( !KD( (~k⊕~r1⊕x) ) ▶₀ #vk.4 ) )
                        case acceptreader
                        by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                      next
                        case initiatereader
                        by step( contradiction /* impossible chain */ )
                      next
                        case tag1
                        step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                          case d_0_fst
                          by step( contradiction /* impossible chain */ )
                        next
                          case d_0_snd
                          by step( solve( (#vr.6, 0) ~~> (#vk.4, 0) ) )
                        qed
                      qed
                    qed
                  next
                    case c_xor_case_2
                    by step( solve( !KU( ~k1 ) @ #vk.6 ) )
                  next
                    case c_xor_case_3
                    step( solve( !KU( (~k⊕~r1⊕x) ) @ #vk.4 ) )
                      case c_xor_case_1
                      by step( contradiction /* cyclic */ )
                    next
                      case c_xor_case_2
                      by step( solve( !KU( ~k ) @ #vk.8 ) )
                    next
                      case c_xor_case_3
                      step( solve( !KU( (~k1⊕x) ) @ #vk.6 ) )
                        case c_xor
                        by step( solve( !KU( ~k1 ) @ #vk.9 ) )
                      next
                        case coerce
                        step( solve( !KD( (~k1⊕x) ) ▶₀ #vk.5 ) )
                          case acceptreader
                          by step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                        next
                          case initiatereader
                          by step( contradiction /* impossible chain */ )
                        next
                          case tag1
                          step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                            case d_0_fst
                            by step( contradiction /* impossible chain */ )
                          next
                            case d_0_snd
                            by step( solve( (#vr.6, 0) ~~> (#vk.5, 0) ) )
                          qed
                        qed
                      qed
                    next
                      case coerce
                      step( solve( !KD( (~k⊕~r1⊕x) ) ▶₀ #vk.4 ) )
                        case acceptreader
                        by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                      next
                        case initiatereader
                        by step( contradiction /* impossible chain */ )
                      next
                        case tag1
                        step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                          case d_0_fst
                          by step( contradiction /* impossible chain */ )
                        next
                          case d_0_snd
                          by step( solve( (#vr.6, 0) ~~> (#vk.4, 0) ) )
                        qed
                      qed
                    qed
                  next
                    case coerce
                    step( solve( !KD( (~k1⊕x⊕~r1.1) ) ▶₀ #vk.3 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_5
                  step( solve( !KU( (~k1⊕x) ) @ #vk.3 ) )
                    case c_xor
                    by step( solve( !KU( ~k1 ) @ #vk.6 ) )
                  next
                    case coerce
                    step( solve( !KD( (~k1⊕x) ) ▶₀ #vk.3 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_6
                  step( solve( !KU( (x⊕~r1.1) ) @ #vk.3 ) )
                    case c_xor
                    step( solve( !KU( (~k⊕~k1⊕~r1⊕x) ) @ #vk.4 ) )
                      case c_xor_case_1
                      by step( contradiction /* cyclic */ )
                    next
                      case c_xor_case_2
                      by step( solve( !KU( ~k1 ) @ #vk.8 ) )
                    next
                      case c_xor_case_3
                      step( solve( !KU( (~k⊕x) ) @ #vk.7 ) )
                        case c_xor
                        by step( solve( !KU( ~k ) @ #vk.9 ) )
                      next
                        case coerce
                        step( solve( !KD( (~k⊕x) ) ▶₀ #vk.5 ) )
                          case acceptreader
                          by step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                        next
                          case initiatereader
                          by step( contradiction /* impossible chain */ )
                        next
                          case tag1
                          step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                            case d_0_fst
                            by step( contradiction /* impossible chain */ )
                          next
                            case d_0_snd
                            by step( solve( (#vr.6, 0) ~~> (#vk.5, 0) ) )
                          qed
                        qed
                      qed
                    next
                      case c_xor_case_4
                      by step( solve( !KU( ~k ) @ #vk.8 ) )
                    next
                      case c_xor_case_5
                      step( solve( !KU( (~k1⊕x) ) @ #vk.7 ) )
                        case c_xor
                        by step( solve( !KU( ~k1 ) @ #vk.9 ) )
                      next
                        case coerce
                        step( solve( !KD( (~k1⊕x) ) ▶₀ #vk.5 ) )
                          case acceptreader
                          by step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                        next
                          case initiatereader
                          by step( contradiction /* impossible chain */ )
                        next
                          case tag1
                          step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                            case d_0_fst
                            by step( contradiction /* impossible chain */ )
                          next
                            case d_0_snd
                            by step( solve( (#vr.6, 0) ~~> (#vk.5, 0) ) )
                          qed
                        qed
                      qed
                    next
                      case c_xor_case_6
                      step( solve( !KU( (~r1⊕x) ) @ #vk.7 ) )
                        case c_xor
                        by step( contradiction /* cyclic */ )
                      next
                        case coerce
                        step( solve( !KD( (~r1⊕x) ) ▶₀ #vk.5 ) )
                          case acceptreader
                          by step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                        next
                          case initiatereader
                          by step( contradiction /* impossible chain */ )
                        next
                          case tag1
                          step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                            case d_0_fst
                            by step( contradiction /* impossible chain */ )
                          next
                            case d_0_snd
                            by step( solve( (#vr.6, 0) ~~> (#vk.5, 0) ) )
                          qed
                        qed
                      qed
                    next
                      case c_xor_case_7
                      step( solve( !KU( (~k⊕~k1⊕~r1) ) @ #vk.7 ) )
                        case c_xor_case_1
                        by step( solve( !KU( ~k1 ) @ #vk.9 ) )
                      next
                        case c_xor_case_2
                        by step( solve( !KU( ~k ) @ #vk.9 ) )
                      next
                        case c_xor_case_3
                        by step( contradiction /* cyclic */ )
                      next
                        case coerce
                        step( solve( !KD( (~k⊕~k1⊕~r1) ) ▶₀ #vk.5 ) )
                          case acceptreader
                          by step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                        next
                          case initiatereader
                          by step( contradiction /* impossible chain */ )
                        next
                          case tag1
                          step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                            case d_0_fst
                            by step( contradiction /* impossible chain */ )
                          next
                            case d_0_snd
                            by step( solve( (#vr.6, 0) ~~> (#vk.5, 0) ) )
                          qed
                        qed
                      qed
                    next
                      case coerce
                      step( solve( !KD( (~k⊕~k1⊕~r1⊕x) ) ▶₀ #vk.4 ) )
                        case acceptreader
                        by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                      next
                        case initiatereader
                        by step( contradiction /* impossible chain */ )
                      next
                        case tag1
                        step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                          case d_0_fst
                          by step( contradiction /* impossible chain */ )
                        next
                          case d_0_snd
                          by step( solve( (#vr.6, 0) ~~> (#vk.4, 0) ) )
                        qed
                      qed
                    qed
                  next
                    case coerce
                    step( solve( !KD( (x⊕~r1.1) ) ▶₀ #vk.3 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_7
                  step( solve( !KU( (~k⊕~k1⊕~r1⊕r0⊕~r1.1) ) @ #vk.4 ) )
                    case c_xor_case_01
                    step( solve( !KU( (~k⊕~k1⊕~r1⊕~r1.1) ) @ #vk.5 ) )
                      case c_xor_case_1
                      step( solve( !KU( (~k⊕~k1⊕~r1.1) ) @ #vk.6 ) )
                        case c_xor_case_1
                        by step( solve( !KU( ~k1 ) @ #vk.8 ) )
                      next
                        case c_xor_case_2
                        by step( solve( !KU( ~k ) @ #vk.8 ) )
                      next
                        case c_xor_case_3
                        by step( contradiction /* cyclic */ )
                      next
                        case coerce
                        step( solve( !KD( (~k⊕~k1⊕~r1.1) ) ▶₀ #vk.5 ) )
                          case acceptreader
                          by step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                        next
                          case initiatereader
                          by step( contradiction /* impossible chain */ )
                        next
                          case tag1
                          step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                            case d_0_fst
                            by step( contradiction /* impossible chain */ )
                          next
                            case d_0_snd
                            by step( solve( (#vr.6, 0) ~~> (#vk.5, 0) ) )
                          qed
                        qed
                      qed
                    next
                      case c_xor_case_2
                      by step( solve( !KU( ~k1 ) @ #vk.7 ) )
                    next
                      case c_xor_case_3
                      step( solve( !KU( (~k⊕~r1.1) ) @ #vk.6 ) )
                        case c_xor
                        by step( contradiction /* cyclic */ )
                      next
                        case coerce
                        step( solve( !KD( (~k⊕~r1.1) ) ▶₀ #vk.5 ) )
                          case acceptreader
                          by step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                        next
                          case initiatereader
                          by step( contradiction /* impossible chain */ )
                        next
                          case tag1
                          step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                            case d_0_fst
                            by step( contradiction /* impossible chain */ )
                          next
                            case d_0_snd
                            by step( solve( (#vr.6, 0) ~~> (#vk.5, 0) ) )
                          qed
                        qed
                      qed
                    next
                      case c_xor_case_4
                      by step( solve( !KU( ~k ) @ #vk.7 ) )
                    next
                      case c_xor_case_5
                      step( solve( !KU( (~k1⊕~r1.1) ) @ #vk.6 ) )
                        case c_xor
                        by step( contradiction /* cyclic */ )
                      next
                        case coerce
                        step( solve( !KD( (~k1⊕~r1.1) ) ▶₀ #vk.5 ) )
                          case acceptreader
                          by step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                        next
                          case initiatereader
                          by step( contradiction /* impossible chain */ )
                        next
                          case tag1
                          step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                            case d_0_fst
                            by step( contradiction /* impossible chain */ )
                          next
                            case d_0_snd
                            by step( solve( (#vr.6, 0) ~~> (#vk.5, 0) ) )
                          qed
                        qed
                      qed
                    next
                      case c_xor_case_6
                      step( solve( !KU( (~r1⊕~r1.1) ) @ #vk.6 ) )
                        case c_xor
                        by step( contradiction /* cyclic */ )
                      next
                        case coerce
                        step( solve( !KD( (~r1⊕~r1.1) ) ▶₀ #vk.5 ) )
                          case acceptreader
                          by step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                        next
                          case initiatereader
                          by step( contradiction /* impossible chain */ )
                        next
                          case tag1
                          step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                            case d_0_fst
                            by step( contradiction /* impossible chain */ )
                          next
                            case d_0_snd
                            by step( solve( (#vr.6, 0) ~~> (#vk.5, 0) ) )
                          qed
                        qed
                      qed
                    next
                      case c_xor_case_7
                      by step( contradiction /* cyclic */ )
                    next
                      case coerce
                      step( solve( !KD( (~k⊕~k1⊕~r1⊕~r1.1) ) ▶₀ #vk.4 ) )
                        case acceptreader
                        by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                      next
                        case initiatereader
                        by step( contradiction /* impossible chain */ )
                      next
                        case tag1
                        step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                          case d_0_fst
                          by step( contradiction /* impossible chain */ )
                        next
                          case d_0_snd
                          by step( solve( (#vr.6, 0) ~~> (#vk.4, 0) ) )
                        qed
                      qed
                    qed
                  next
                    case c_xor_case_02
                    step( solve( !KU( (~k⊕~k1⊕r0⊕~r1.1) ) @ #vk.5 ) )
                      case c_xor_case_1
                      step( solve( !KU( (~k⊕~k1⊕~r1.1) ) @ #vk.6 ) )
                        case c_xor_case_1
                        by step( solve( !KU( ~k1 ) @ #vk.8 ) )
                      next
                        case c_xor_case_2
                        by step( solve( !KU( ~k ) @ #vk.8 ) )
                      next
                        case c_xor_case_3
                        by step( contradiction /* cyclic */ )
                      next
                        case coerce
                        step( solve( !KD( (~k⊕~k1⊕~r1.1) ) ▶₀ #vk.5 ) )
                          case acceptreader
                          by step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                        next
                          case initiatereader
                          by step( contradiction /* impossible chain */ )
                        next
                          case tag1
                          step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                            case d_0_fst
                            by step( contradiction /* impossible chain */ )
                          next
                            case d_0_snd
                            by step( solve( (#vr.6, 0) ~~> (#vk.5, 0) ) )
                          qed
                        qed
                      qed
                    next
                      case c_xor_case_2
                      by step( solve( !KU( ~k1 ) @ #vk.7 ) )
                    next
                      case c_xor_case_3
                      step( solve( !KU( (~k⊕~r1.1) ) @ #vk.6 ) )
                        case c_xor
                        by step( contradiction /* cyclic */ )
                      next
                        case coerce
                        step( solve( !KD( (~k⊕~r1.1) ) ▶₀ #vk.5 ) )
                          case acceptreader
                          by step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                        next
                          case initiatereader
                          by step( contradiction /* impossible chain */ )
                        next
                          case tag1
                          step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                            case d_0_fst
                            by step( contradiction /* impossible chain */ )
                          next
                            case d_0_snd
                            by step( solve( (#vr.6, 0) ~~> (#vk.5, 0) ) )
                          qed
                        qed
                      qed
                    next
                      case c_xor_case_4
                      by step( solve( !KU( ~k ) @ #vk.7 ) )
                    next
                      case c_xor_case_5
                      step( solve( !KU( (~k1⊕~r1.1) ) @ #vk.6 ) )
                        case c_xor
                        by step( contradiction /* cyclic */ )
                      next
                        case coerce
                        step( solve( !KD( (~k1⊕~r1.1) ) ▶₀ #vk.5 ) )
                          case acceptreader
                          by step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                        next
                          case initiatereader
                          by step( contradiction /* impossible chain */ )
                        next
                          case tag1
                          step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                            case d_0_fst
                            by step( contradiction /* impossible chain */ )
                          next
                            case d_0_snd
                            by step( solve( (#vr.6, 0) ~~> (#vk.5, 0) ) )
                          qed
                        qed
                      qed
                    next
                      case c_xor_case_6
                      step( solve( !KU( (r0⊕~r1.1) ) @ #vk.6 ) )
                        case c_xor
                        by step( contradiction /* cyclic */ )
                      next
                        case coerce
                        step( solve( !KD( (r0⊕~r1.1) ) ▶₀ #vk.5 ) )
                          case acceptreader
                          by step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                        next
                          case initiatereader
                          by step( contradiction /* impossible chain */ )
                        next
                          case tag1
                          step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                            case d_0_fst
                            by step( contradiction /* impossible chain */ )
                          next
                            case d_0_snd
                            by step( solve( (#vr.6, 0) ~~> (#vk.5, 0) ) )
                          qed
                        qed
                      qed
                    next
                      case c_xor_case_7
                      by step( contradiction /* cyclic */ )
                    next
                      case coerce
                      step( solve( !KD( (~k⊕~k1⊕r0⊕~r1.1) ) ▶₀ #vk.4 ) )
                        case acceptreader
                        by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                      next
                        case initiatereader
                        by step( contradiction /* impossible chain */ )
                      next
                        case tag1
                        step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                          case d_0_fst
                          by step( contradiction /* impossible chain */ )
                        next
                          case d_0_snd
                          by step( solve( (#vr.6, 0) ~~> (#vk.4, 0) ) )
                        qed
                      qed
                    qed
                  next
                    case c_xor_case_03
                    step( solve( !KU( (~k⊕~k1⊕~r1.1) ) @ #vk.5 ) )
                      case c_xor_case_1
                      by step( solve( !KU( ~k1 ) @ #vk.8 ) )
                    next
                      case c_xor_case_2
                      by step( solve( !KU( ~k ) @ #vk.8 ) )
                    next
                      case c_xor_case_3
                      by step( contradiction /* cyclic */ )
                    next
                      case coerce
                      step( solve( !KD( (~k⊕~k1⊕~r1.1) ) ▶₀ #vk.4 ) )
                        case acceptreader
                        by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                      next
                        case initiatereader
                        by step( contradiction /* impossible chain */ )
                      next
                        case tag1
                        step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                          case d_0_fst
                          by step( contradiction /* impossible chain */ )
                        next
                          case d_0_snd
                          by step( solve( (#vr.6, 0) ~~> (#vk.4, 0) ) )
                        qed
                      qed
                    qed
                  next
                    case c_xor_case_04
                    by step( solve( !KU( ~k1 ) @ #vk.6 ) )
                  next
                    case c_xor_case_05
                    step( solve( !KU( (~k⊕~r1⊕~r1.1) ) @ #vk.5 ) )
                      case c_xor_case_1
                      step( solve( !KU( (~k1⊕r0) ) @ #vk.6 ) )
                        case c_xor
                        by step( solve( !KU( ~k1 ) @ #vk.8 ) )
                      next
                        case coerce
                        step( solve( !KD( (~k1⊕r0) ) ▶₀ #vk.5 ) )
                          case acceptreader
                          by step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                        next
                          case initiatereader
                          by step( contradiction /* impossible chain */ )
                        next
                          case tag1
                          step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                            case d_0_fst
                            by step( contradiction /* impossible chain */ )
                          next
                            case d_0_snd
                            by step( solve( (#vr.6, 0) ~~> (#vk.5, 0) ) )
                          qed
                        qed
                      qed
                    next
                      case c_xor_case_2
                      by step( solve( !KU( ~k ) @ #vk.8 ) )
                    next
                      case c_xor_case_3
                      by step( contradiction /* cyclic */ )
                    next
                      case coerce
                      step( solve( !KD( (~k⊕~r1⊕~r1.1) ) ▶₀ #vk.4 ) )
                        case acceptreader
                        by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                      next
                        case initiatereader
                        by step( contradiction /* impossible chain */ )
                      next
                        case tag1
                        step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                          case d_0_fst
                          by step( contradiction /* impossible chain */ )
                        next
                          case d_0_snd
                          by step( solve( (#vr.6, 0) ~~> (#vk.4, 0) ) )
                        qed
                      qed
                    qed
                  next
                    case c_xor_case_06
                    step( solve( !KU( (~k⊕r0⊕~r1.1) ) @ #vk.5 ) )
                      case c_xor_case_1
                      step( solve( !KU( (~k1⊕~r1) ) @ #vk.6 ) )
                        case c_xor
                        by step( solve( !KU( ~k1 ) @ #vk.8 ) )
                      next
                        case coerce
                        step( solve( !KD( (~k1⊕~r1) ) ▶₀ #vk.5 ) )
                          case acceptreader
                          by step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                        next
                          case initiatereader
                          by step( contradiction /* impossible chain */ )
                        next
                          case tag1
                          step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                            case d_0_fst
                            by step( contradiction /* impossible chain */ )
                          next
                            case d_0_snd
                            by step( solve( (#vr.6, 0) ~~> (#vk.5, 0) ) )
                          qed
                        qed
                      qed
                    next
                      case c_xor_case_2
                      by step( solve( !KU( ~k ) @ #vk.8 ) )
                    next
                      case c_xor_case_3
                      by step( contradiction /* cyclic */ )
                    next
                      case coerce
                      step( solve( !KD( (~k⊕r0⊕~r1.1) ) ▶₀ #vk.4 ) )
                        case acceptreader
                        by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                      next
                        case initiatereader
                        by step( contradiction /* impossible chain */ )
                      next
                        case tag1
                        step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                          case d_0_fst
                          by step( contradiction /* impossible chain */ )
                        next
                          case d_0_snd
                          by step( solve( (#vr.6, 0) ~~> (#vk.4, 0) ) )
                        qed
                      qed
                    qed
                  next
                    case c_xor_case_07
                    step( solve( !KU( (~k⊕~r1.1) ) @ #vk.5 ) )
                      case c_xor
                      by step( contradiction /* cyclic */ )
                    next
                      case coerce
                      step( solve( !KD( (~k⊕~r1.1) ) ▶₀ #vk.4 ) )
                        case acceptreader
                        by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                      next
                        case initiatereader
                        by step( contradiction /* impossible chain */ )
                      next
                        case tag1
                        step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                          case d_0_fst
                          by step( contradiction /* impossible chain */ )
                        next
                          case d_0_snd
                          by step( solve( (#vr.6, 0) ~~> (#vk.4, 0) ) )
                        qed
                      qed
                    qed
                  next
                    case c_xor_case_08
                    by step( solve( !KU( ~k ) @ #vk.6 ) )
                  next
                    case c_xor_case_09
                    step( solve( !KU( (~k1⊕~r1⊕~r1.1) ) @ #vk.5 ) )
                      case c_xor_case_1
                      step( solve( !KU( (~k⊕r0) ) @ #vk.6 ) )
                        case c_xor
                        by step( solve( !KU( ~k ) @ #vk.8 ) )
                      next
                        case coerce
                        step( solve( !KD( (~k⊕r0) ) ▶₀ #vk.5 ) )
                          case acceptreader
                          by step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                        next
                          case initiatereader
                          by step( contradiction /* impossible chain */ )
                        next
                          case tag1
                          step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                            case d_0_fst
                            by step( contradiction /* impossible chain */ )
                          next
                            case d_0_snd
                            by step( solve( (#vr.6, 0) ~~> (#vk.5, 0) ) )
                          qed
                        qed
                      qed
                    next
                      case c_xor_case_2
                      by step( solve( !KU( ~k1 ) @ #vk.8 ) )
                    next
                      case c_xor_case_3
                      by step( contradiction /* cyclic */ )
                    next
                      case coerce
                      step( solve( !KD( (~k1⊕~r1⊕~r1.1) ) ▶₀ #vk.4 ) )
                        case acceptreader
                        by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                      next
                        case initiatereader
                        by step( contradiction /* impossible chain */ )
                      next
                        case tag1
                        step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                          case d_0_fst
                          by step( contradiction /* impossible chain */ )
                        next
                          case d_0_snd
                          by step( solve( (#vr.6, 0) ~~> (#vk.4, 0) ) )
                        qed
                      qed
                    qed
                  next
                    case c_xor_case_10
                    step( solve( !KU( (~k1⊕r0⊕~r1.1) ) @ #vk.5 ) )
                      case c_xor_case_1
                      step( solve( !KU( (~k⊕~r1) ) @ #vk.6 ) )
                        case c_xor
                        by step( solve( !KU( ~k ) @ #vk.8 ) )
                      next
                        case coerce
                        step( solve( !KD( (~k⊕~r1) ) ▶₀ #vk.5 ) )
                          case acceptreader
                          by step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                        next
                          case initiatereader
                          by step( contradiction /* impossible chain */ )
                        next
                          case tag1
                          step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                            case d_0_fst
                            by step( contradiction /* impossible chain */ )
                          next
                            case d_0_snd
                            by step( solve( (#vr.6, 0) ~~> (#vk.5, 0) ) )
                          qed
                        qed
                      qed
                    next
                      case c_xor_case_2
                      by step( solve( !KU( ~k1 ) @ #vk.8 ) )
                    next
                      case c_xor_case_3
                      by step( contradiction /* cyclic */ )
                    next
                      case coerce
                      step( solve( !KD( (~k1⊕r0⊕~r1.1) ) ▶₀ #vk.4 ) )
                        case acceptreader
                        by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                      next
                        case initiatereader
                        by step( contradiction /* impossible chain */ )
                      next
                        case tag1
                        step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                          case d_0_fst
                          by step( contradiction /* impossible chain */ )
                        next
                          case d_0_snd
                          by step( solve( (#vr.6, 0) ~~> (#vk.4, 0) ) )
                        qed
                      qed
                    qed
                  next
                    case c_xor_case_11
                    step( solve( !KU( (~k1⊕~r1.1) ) @ #vk.5 ) )
                      case c_xor
                      by step( contradiction /* cyclic */ )
                    next
                      case coerce
                      step( solve( !KD( (~k1⊕~r1.1) ) ▶₀ #vk.4 ) )
                        case acceptreader
                        by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                      next
                        case initiatereader
                        by step( contradiction /* impossible chain */ )
                      next
                        case tag1
                        step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                          case d_0_fst
                          by step( contradiction /* impossible chain */ )
                        next
                          case d_0_snd
                          by step( solve( (#vr.6, 0) ~~> (#vk.4, 0) ) )
                        qed
                      qed
                    qed
                  next
                    case c_xor_case_12
                    step( solve( !KU( (~r1⊕r0⊕~r1.1) ) @ #vk.5 ) )
                      case c_xor_case_1
                      step( solve( !KU( (~k⊕~k1) ) @ #vk.6 ) )
                        case c_xor
                        by step( solve( !KU( ~k1 ) @ #vk.8 ) )
                      next
                        case coerce
                        step( solve( !KD( (~k⊕~k1) ) ▶₀ #vk.5 ) )
                          case acceptreader
                          by step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                        next
                          case initiatereader
                          by step( contradiction /* impossible chain */ )
                        next
                          case tag1
                          step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                            case d_0_fst
                            by step( contradiction /* impossible chain */ )
                          next
                            case d_0_snd
                            by step( solve( (#vr.6, 0) ~~> (#vk.5, 0) ) )
                          qed
                        qed
                      qed
                    next
                      case c_xor_case_2
                      step( solve( !KU( (~k⊕~k1) ) @ #vk.6 ) )
                        case c_xor
                        by step( solve( !KU( ~k1 ) @ #vk.8 ) )
                      next
                        case coerce
                        step( solve( !KD( (~k⊕~k1) ) ▶₀ #vk.5 ) )
                          case acceptreader
                          by step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                        next
                          case initiatereader
                          by step( contradiction /* impossible chain */ )
                        next
                          case tag1
                          step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                            case d_0_fst
                            by step( contradiction /* impossible chain */ )
                          next
                            case d_0_snd
                            by step( solve( (#vr.6, 0) ~~> (#vk.5, 0) ) )
                          qed
                        qed
                      qed
                    next
                      case c_xor_case_3
                      by step( contradiction /* cyclic */ )
                    next
                      case coerce
                      step( solve( !KD( (~r1⊕r0⊕~r1.1) ) ▶₀ #vk.4 ) )
                        case acceptreader
                        by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                      next
                        case initiatereader
                        by step( contradiction /* impossible chain */ )
                      next
                        case tag1
                        step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                          case d_0_fst
                          by step( contradiction /* impossible chain */ )
                        next
                          case d_0_snd
                          by step( solve( (#vr.6, 0) ~~> (#vk.4, 0) ) )
                        qed
                      qed
                    qed
                  next
                    case c_xor_case_13
                    step( solve( !KU( (~r1⊕~r1.1) ) @ #vk.5 ) )
                      case c_xor
                      by step( contradiction /* cyclic */ )
                    next
                      case coerce
                      step( solve( !KD( (~r1⊕~r1.1) ) ▶₀ #vk.4 ) )
                        case acceptreader
                        by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                      next
                        case initiatereader
                        by step( contradiction /* impossible chain */ )
                      next
                        case tag1
                        step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                          case d_0_fst
                          by step( contradiction /* impossible chain */ )
                        next
                          case d_0_snd
                          by step( solve( (#vr.6, 0) ~~> (#vk.4, 0) ) )
                        qed
                      qed
                    qed
                  next
                    case c_xor_case_14
                    step( solve( !KU( (r0⊕~r1.1) ) @ #vk.5 ) )
                      case c_xor
                      by step( contradiction /* cyclic */ )
                    next
                      case coerce
                      step( solve( !KD( (r0⊕~r1.1) ) ▶₀ #vk.4 ) )
                        case acceptreader
                        by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                      next
                        case initiatereader
                        by step( contradiction /* impossible chain */ )
                      next
                        case tag1
                        step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                          case d_0_fst
                          by step( contradiction /* impossible chain */ )
                        next
                          case d_0_snd
                          by step( solve( (#vr.6, 0) ~~> (#vk.4, 0) ) )
                        qed
                      qed
                    qed
                  next
                    case c_xor_case_15
                    by step( contradiction /* cyclic */ )
                  next
                    case coerce
                    step( solve( !KD( (~k⊕~k1⊕~r1⊕r0⊕~r1.1) ) ▶₀ #vk.3 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                      qed
                    qed
                  qed
                qed
              next
                case split_case_4
                step( solve( !KU( zero ) @ #vk.3 ) )
                  case c_zero
                  step( solve( splitEqs(2) ) )
                    case split
                    step( solve( !KU( (~k⊕~k1⊕~r1⊕~r1.1) ) @ #vk.4 ) )
                      case c_xor_case_1
                      step( solve( !KU( (~k⊕~k1⊕~r1.1) ) @ #vk.5 ) )
                        case c_xor_case_1
                        by step( solve( !KU( ~k1 ) @ #vk.7 ) )
                      next
                        case c_xor_case_2
                        by step( solve( !KU( ~k ) @ #vk.7 ) )
                      next
                        case c_xor_case_3
                        by step( contradiction /* cyclic */ )
                      next
                        case coerce
                        step( solve( !KD( (~k⊕~k1⊕~r1.1) ) ▶₀ #vk.5 ) )
                          case acceptreader
                          by step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                        next
                          case initiatereader
                          by step( contradiction /* impossible chain */ )
                        next
                          case tag1
                          step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                            case d_0_fst
                            by step( contradiction /* impossible chain */ )
                          next
                            case d_0_snd
                            by step( solve( (#vr.6, 0) ~~> (#vk.5, 0) ) )
                          qed
                        qed
                      qed
                    next
                      case c_xor_case_2
                      by step( solve( !KU( ~k1 ) @ #vk.6 ) )
                    next
                      case c_xor_case_3
                      step( solve( !KU( (~k⊕~r1.1) ) @ #vk.5 ) )
                        case c_xor
                        by step( contradiction /* cyclic */ )
                      next
                        case coerce
                        step( solve( !KD( (~k⊕~r1.1) ) ▶₀ #vk.5 ) )
                          case acceptreader
                          by step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                        next
                          case initiatereader
                          by step( contradiction /* impossible chain */ )
                        next
                          case tag1
                          step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                            case d_0_fst
                            by step( contradiction /* impossible chain */ )
                          next
                            case d_0_snd
                            by step( solve( (#vr.6, 0) ~~> (#vk.5, 0) ) )
                          qed
                        qed
                      qed
                    next
                      case c_xor_case_4
                      by step( solve( !KU( ~k ) @ #vk.6 ) )
                    next
                      case c_xor_case_5
                      step( solve( !KU( (~k1⊕~r1.1) ) @ #vk.5 ) )
                        case c_xor
                        by step( contradiction /* cyclic */ )
                      next
                        case coerce
                        step( solve( !KD( (~k1⊕~r1.1) ) ▶₀ #vk.5 ) )
                          case acceptreader
                          by step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                        next
                          case initiatereader
                          by step( contradiction /* impossible chain */ )
                        next
                          case tag1
                          step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                            case d_0_fst
                            by step( contradiction /* impossible chain */ )
                          next
                            case d_0_snd
                            by step( solve( (#vr.6, 0) ~~> (#vk.5, 0) ) )
                          qed
                        qed
                      qed
                    next
                      case c_xor_case_6
                      step( solve( !KU( (~r1⊕~r1.1) ) @ #vk.5 ) )
                        case c_xor
                        by step( contradiction /* cyclic */ )
                      next
                        case coerce
                        step( solve( !KD( (~r1⊕~r1.1) ) ▶₀ #vk.5 ) )
                          case acceptreader
                          by step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                        next
                          case initiatereader
                          by step( contradiction /* impossible chain */ )
                        next
                          case tag1
                          step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                            case d_0_fst
                            by step( contradiction /* impossible chain */ )
                          next
                            case d_0_snd
                            by step( solve( (#vr.6, 0) ~~> (#vk.5, 0) ) )
                          qed
                        qed
                      qed
                    next
                      case c_xor_case_7
                      by step( contradiction /* cyclic */ )
                    next
                      case coerce
                      step( solve( !KD( (~k⊕~k1⊕~r1⊕~r1.1) ) ▶₀ #vk.4 ) )
                        case acceptreader
                        by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                      next
                        case initiatereader
                        by step( contradiction /* impossible chain */ )
                      next
                        case tag1
                        step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                          case d_0_fst
                          by step( contradiction /* impossible chain */ )
                        next
                          case d_0_snd
                          by step( solve( (#vr.6, 0) ~~> (#vk.4, 0) ) )
                        qed
                      qed
                    qed
                  qed
                next
                  case coerce
                  step( solve( !KD( zero ) ▶₀ #vk.3 ) )
                    case acceptreader
                    by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_5
                step( solve( !KU( (~k⊕~r1) ) @ #vk.3 ) )
                  case c_xor
                  by step( contradiction /* cyclic */ )
                next
                  case coerce
                  step( solve( !KD( (~k⊕~r1) ) ▶₀ #vk.3 ) )
                    case acceptreader
                    by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_6
                step( solve( !KU( (~k⊕~r1⊕z) ) @ #vk.3 ) )
                  case c_xor_case_1
                  by step( contradiction /* cyclic */ )
                next
                  case c_xor_case_2
                  by step( solve( !KU( ~k ) @ #vk.6 ) )
                next
                  case c_xor_case_3
                  step( solve( !KU( (~k⊕~r1) ) @ #vk.6 ) )
                    case c_xor
                    by step( contradiction /* cyclic */ )
                  next
                    case coerce
                    step( solve( !KD( (~k⊕~r1) ) ▶₀ #vk.4 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.4, 0) ) )
                      qed
                    qed
                  qed
                next
                  case coerce
                  step( solve( !KD( (~k⊕~r1⊕z) ) ▶₀ #vk.3 ) )
                    case acceptreader
                    by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_7
                step( solve( !KU( (~r1⊕x) ) @ #vk.3 ) )
                  case c_xor
                  by step( contradiction /* cyclic */ )
                next
                  case coerce
                  step( solve( !KD( (~r1⊕x) ) ▶₀ #vk.3 ) )
                    case acceptreader
                    by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_8
                step( solve( !KU( (~k⊕x) ) @ #vk.3 ) )
                  case c_xor
                  by step( solve( !KU( ~k ) @ #vk.6 ) )
                next
                  case coerce
                  step( solve( !KD( (~k⊕x) ) ▶₀ #vk.3 ) )
                    case acceptreader
                    by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                    qed
                  qed
                qed
              qed
            next
              case tag1_case_2
              step( solve( splitEqs(0) ) )
                case split_case_1
                by step( solve( !KU( ~k ) @ #vk.3 ) )
              next
                case split_case_2
                MIRRORED
              next
                case split_case_3
                MIRRORED
              next
                case split_case_4
                step( solve( !KU( zero ) @ #vk.3 ) )
                  case c_zero
                  MIRRORED
                next
                  case coerce
                  step( solve( !KD( zero ) ▶₀ #vk.3 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.5, 0) ~~> (#vk.3, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_5
                step( solve( !KU( (~k⊕~r1) ) @ #vk.3 ) )
                  case c_xor
                  by step( contradiction /* cyclic */ )
                next
                  case coerce
                  step( solve( !KD( (~k⊕~r1) ) ▶₀ #vk.3 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.5, 0) ~~> (#vk.3, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_6
                step( solve( !KU( (~k⊕~r1⊕z) ) @ #vk.3 ) )
                  case c_xor_case_1
                  by step( contradiction /* cyclic */ )
                next
                  case c_xor_case_2
                  by step( solve( !KU( ~k ) @ #vk.5 ) )
                next
                  case c_xor_case_3
                  step( solve( !KU( (~k⊕~r1) ) @ #vk.5 ) )
                    case c_xor
                    by step( contradiction /* cyclic */ )
                  next
                    case coerce
                    step( solve( !KD( (~k⊕~r1) ) ▶₀ #vk.4 ) )
                      case acceptreader
                      by step( solve( (#vl.1, 0) ~~> (#vk.4, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.1, 0) ~~> (#vk.4, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.5, 0) ~~> (#vk.4, 0) ) )
                      qed
                    qed
                  qed
                next
                  case coerce
                  step( solve( !KD( (~k⊕~r1⊕z) ) ▶₀ #vk.3 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.5, 0) ~~> (#vk.3, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_7
                step( solve( !KU( (~r1⊕x) ) @ #vk.3 ) )
                  case c_xor
                  by step( contradiction /* cyclic */ )
                next
                  case coerce
                  step( solve( !KD( (~r1⊕x) ) ▶₀ #vk.3 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.5, 0) ~~> (#vk.3, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_8
                step( solve( !KU( (~k⊕x) ) @ #vk.3 ) )
                  case c_xor
                  by step( solve( !KU( ~k ) @ #vk.5 ) )
                next
                  case coerce
                  step( solve( !KD( (~k⊕x) ) ▶₀ #vk.3 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.5, 0) ~~> (#vk.3, 0) ) )
                    qed
                  qed
                qed
              qed
            next
              case tag1_case_3
              step( solve( splitEqs(0) ) )
                case split_case_1
                by step( solve( !KU( ~k ) @ #vk.3 ) )
              next
                case split_case_2
                by step( contradiction /* cyclic */ )
              next
                case split_case_3
                step( solve( splitEqs(2) ) )
                  case split_case_1
                  by step( solve( !KU( ~k1 ) @ #vk.3 ) )
                next
                  case split_case_2
                  step( solve( !KU( (~k⊕~k1⊕~r1) ) @ #vk.4 ) )
                    case c_xor_case_1
                    by step( solve( !KU( ~k1 ) @ #vk.6 ) )
                  next
                    case c_xor_case_2
                    by step( solve( !KU( ~k ) @ #vk.6 ) )
                  next
                    case c_xor_case_3
                    by step( contradiction /* cyclic */ )
                  next
                    case coerce
                    step( solve( !KD( (~k⊕~k1⊕~r1) ) ▶₀ #vk.3 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_3
                  step( solve( !KU( (~k1⊕~r1.1) ) @ #vk.3 ) )
                    case c_xor
                    by step( solve( !KU( ~k1 ) @ #vk.6 ) )
                  next
                    case coerce
                    step( solve( !KD( (~k1⊕~r1.1) ) ▶₀ #vk.3 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_4
                  step( solve( !KU( (~k1⊕x⊕~r1.1) ) @ #vk.3 ) )
                    case c_xor_case_1
                    step( solve( !KU( (~k⊕~r1⊕x) ) @ #vk.4 ) )
                      case c_xor_case_1
                      step( solve( !KU( (~k1⊕~r1.1) ) @ #vk.5 ) )
                        case c_xor
                        by step( contradiction /* cyclic */ )
                      next
                        case coerce
                        step( solve( !KD( (~k1⊕~r1.1) ) ▶₀ #vk.5 ) )
                          case acceptreader
                          by step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                        next
                          case initiatereader
                          by step( contradiction /* impossible chain */ )
                        next
                          case tag1
                          step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                            case d_0_fst
                            by step( contradiction /* impossible chain */ )
                          next
                            case d_0_snd
                            by step( solve( (#vr.6, 0) ~~> (#vk.5, 0) ) )
                          qed
                        qed
                      qed
                    next
                      case c_xor_case_2
                      by step( solve( !KU( ~k ) @ #vk.8 ) )
                    next
                      case c_xor_case_3
                      step( solve( !KU( (~k1⊕~r1.1) ) @ #vk.5 ) )
                        case c_xor
                        by step( solve( !KU( ~k1 ) @ #vk.9 ) )
                      next
                        case coerce
                        step( solve( !KD( (~k1⊕~r1.1) ) ▶₀ #vk.5 ) )
                          case acceptreader
                          by step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                        next
                          case initiatereader
                          by step( contradiction /* impossible chain */ )
                        next
                          case tag1
                          step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                            case d_0_fst
                            by step( contradiction /* impossible chain */ )
                          next
                            case d_0_snd
                            by step( solve( (#vr.6, 0) ~~> (#vk.5, 0) ) )
                          qed
                        qed
                      qed
                    next
                      case coerce
                      step( solve( !KD( (~k⊕~r1⊕x) ) ▶₀ #vk.4 ) )
                        case acceptreader
                        by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                      next
                        case initiatereader
                        by step( contradiction /* impossible chain */ )
                      next
                        case tag1
                        step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                          case d_0_fst
                          by step( contradiction /* impossible chain */ )
                        next
                          case d_0_snd
                          by step( solve( (#vr.6, 0) ~~> (#vk.4, 0) ) )
                        qed
                      qed
                    qed
                  next
                    case c_xor_case_2
                    by step( solve( !KU( ~k1 ) @ #vk.6 ) )
                  next
                    case c_xor_case_3
                    step( solve( !KU( (~k⊕~r1⊕x) ) @ #vk.4 ) )
                      case c_xor_case_1
                      by step( contradiction /* cyclic */ )
                    next
                      case c_xor_case_2
                      by step( solve( !KU( ~k ) @ #vk.8 ) )
                    next
                      case c_xor_case_3
                      step( solve( !KU( (~k1⊕x) ) @ #vk.6 ) )
                        case c_xor
                        by step( solve( !KU( ~k1 ) @ #vk.9 ) )
                      next
                        case coerce
                        step( solve( !KD( (~k1⊕x) ) ▶₀ #vk.5 ) )
                          case acceptreader
                          by step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                        next
                          case initiatereader
                          by step( contradiction /* impossible chain */ )
                        next
                          case tag1
                          step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                            case d_0_fst
                            by step( contradiction /* impossible chain */ )
                          next
                            case d_0_snd
                            by step( solve( (#vr.6, 0) ~~> (#vk.5, 0) ) )
                          qed
                        qed
                      qed
                    next
                      case coerce
                      step( solve( !KD( (~k⊕~r1⊕x) ) ▶₀ #vk.4 ) )
                        case acceptreader
                        by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                      next
                        case initiatereader
                        by step( contradiction /* impossible chain */ )
                      next
                        case tag1
                        step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                          case d_0_fst
                          by step( contradiction /* impossible chain */ )
                        next
                          case d_0_snd
                          by step( solve( (#vr.6, 0) ~~> (#vk.4, 0) ) )
                        qed
                      qed
                    qed
                  next
                    case coerce
                    step( solve( !KD( (~k1⊕x⊕~r1.1) ) ▶₀ #vk.3 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_5
                  step( solve( !KU( (~k1⊕x) ) @ #vk.3 ) )
                    case c_xor
                    by step( solve( !KU( ~k1 ) @ #vk.6 ) )
                  next
                    case coerce
                    step( solve( !KD( (~k1⊕x) ) ▶₀ #vk.3 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_6
                  step( solve( !KU( (x⊕~r1.1) ) @ #vk.3 ) )
                    case c_xor
                    step( solve( !KU( (~k⊕~k1⊕~r1⊕x) ) @ #vk.4 ) )
                      case c_xor_case_1
                      by step( contradiction /* cyclic */ )
                    next
                      case c_xor_case_2
                      by step( solve( !KU( ~k1 ) @ #vk.8 ) )
                    next
                      case c_xor_case_3
                      step( solve( !KU( (~k⊕x) ) @ #vk.7 ) )
                        case c_xor
                        by step( solve( !KU( ~k ) @ #vk.9 ) )
                      next
                        case coerce
                        step( solve( !KD( (~k⊕x) ) ▶₀ #vk.5 ) )
                          case acceptreader
                          by step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                        next
                          case initiatereader
                          by step( contradiction /* impossible chain */ )
                        next
                          case tag1
                          step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                            case d_0_fst
                            by step( contradiction /* impossible chain */ )
                          next
                            case d_0_snd
                            by step( solve( (#vr.6, 0) ~~> (#vk.5, 0) ) )
                          qed
                        qed
                      qed
                    next
                      case c_xor_case_4
                      by step( solve( !KU( ~k ) @ #vk.8 ) )
                    next
                      case c_xor_case_5
                      step( solve( !KU( (~k1⊕x) ) @ #vk.7 ) )
                        case c_xor
                        by step( solve( !KU( ~k1 ) @ #vk.9 ) )
                      next
                        case coerce
                        step( solve( !KD( (~k1⊕x) ) ▶₀ #vk.5 ) )
                          case acceptreader
                          by step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                        next
                          case initiatereader
                          by step( contradiction /* impossible chain */ )
                        next
                          case tag1
                          step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                            case d_0_fst
                            by step( contradiction /* impossible chain */ )
                          next
                            case d_0_snd
                            by step( solve( (#vr.6, 0) ~~> (#vk.5, 0) ) )
                          qed
                        qed
                      qed
                    next
                      case c_xor_case_6
                      step( solve( !KU( (~r1⊕x) ) @ #vk.7 ) )
                        case c_xor
                        by step( contradiction /* cyclic */ )
                      next
                        case coerce
                        step( solve( !KD( (~r1⊕x) ) ▶₀ #vk.5 ) )
                          case acceptreader
                          by step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                        next
                          case initiatereader
                          by step( contradiction /* impossible chain */ )
                        next
                          case tag1
                          step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                            case d_0_fst
                            by step( contradiction /* impossible chain */ )
                          next
                            case d_0_snd
                            by step( solve( (#vr.6, 0) ~~> (#vk.5, 0) ) )
                          qed
                        qed
                      qed
                    next
                      case c_xor_case_7
                      step( solve( !KU( (~k⊕~k1⊕~r1) ) @ #vk.7 ) )
                        case c_xor_case_1
                        by step( solve( !KU( ~k1 ) @ #vk.9 ) )
                      next
                        case c_xor_case_2
                        by step( solve( !KU( ~k ) @ #vk.9 ) )
                      next
                        case c_xor_case_3
                        by step( contradiction /* cyclic */ )
                      next
                        case coerce
                        step( solve( !KD( (~k⊕~k1⊕~r1) ) ▶₀ #vk.5 ) )
                          case acceptreader
                          by step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                        next
                          case initiatereader
                          by step( contradiction /* impossible chain */ )
                        next
                          case tag1
                          step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                            case d_0_fst
                            by step( contradiction /* impossible chain */ )
                          next
                            case d_0_snd
                            by step( solve( (#vr.6, 0) ~~> (#vk.5, 0) ) )
                          qed
                        qed
                      qed
                    next
                      case coerce
                      step( solve( !KD( (~k⊕~k1⊕~r1⊕x) ) ▶₀ #vk.4 ) )
                        case acceptreader
                        by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                      next
                        case initiatereader
                        by step( contradiction /* impossible chain */ )
                      next
                        case tag1
                        step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                          case d_0_fst
                          by step( contradiction /* impossible chain */ )
                        next
                          case d_0_snd
                          by step( solve( (#vr.6, 0) ~~> (#vk.4, 0) ) )
                        qed
                      qed
                    qed
                  next
                    case coerce
                    step( solve( !KD( (x⊕~r1.1) ) ▶₀ #vk.3 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_7
                  step( solve( !KU( (~k⊕~k1⊕~r1⊕r0⊕~r1.1) ) @ #vk.4 ) )
                    case c_xor_case_01
                    step( solve( !KU( (~k⊕~k1⊕~r1⊕~r1.1) ) @ #vk.5 ) )
                      case c_xor_case_1
                      step( solve( !KU( (~k⊕~k1⊕~r1.1) ) @ #vk.6 ) )
                        case c_xor_case_1
                        by step( solve( !KU( ~k1 ) @ #vk.8 ) )
                      next
                        case c_xor_case_2
                        by step( solve( !KU( ~k ) @ #vk.8 ) )
                      next
                        case c_xor_case_3
                        by step( contradiction /* cyclic */ )
                      next
                        case coerce
                        step( solve( !KD( (~k⊕~k1⊕~r1.1) ) ▶₀ #vk.5 ) )
                          case acceptreader
                          by step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                        next
                          case initiatereader
                          by step( contradiction /* impossible chain */ )
                        next
                          case tag1
                          step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                            case d_0_fst
                            by step( contradiction /* impossible chain */ )
                          next
                            case d_0_snd
                            by step( solve( (#vr.6, 0) ~~> (#vk.5, 0) ) )
                          qed
                        qed
                      qed
                    next
                      case c_xor_case_2
                      by step( solve( !KU( ~k1 ) @ #vk.7 ) )
                    next
                      case c_xor_case_3
                      step( solve( !KU( (~k⊕~r1.1) ) @ #vk.6 ) )
                        case c_xor
                        by step( contradiction /* cyclic */ )
                      next
                        case coerce
                        step( solve( !KD( (~k⊕~r1.1) ) ▶₀ #vk.5 ) )
                          case acceptreader
                          by step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                        next
                          case initiatereader
                          by step( contradiction /* impossible chain */ )
                        next
                          case tag1
                          step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                            case d_0_fst
                            by step( contradiction /* impossible chain */ )
                          next
                            case d_0_snd
                            by step( solve( (#vr.6, 0) ~~> (#vk.5, 0) ) )
                          qed
                        qed
                      qed
                    next
                      case c_xor_case_4
                      by step( solve( !KU( ~k ) @ #vk.7 ) )
                    next
                      case c_xor_case_5
                      step( solve( !KU( (~k1⊕~r1.1) ) @ #vk.6 ) )
                        case c_xor
                        by step( contradiction /* cyclic */ )
                      next
                        case coerce
                        step( solve( !KD( (~k1⊕~r1.1) ) ▶₀ #vk.5 ) )
                          case acceptreader
                          by step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                        next
                          case initiatereader
                          by step( contradiction /* impossible chain */ )
                        next
                          case tag1
                          step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                            case d_0_fst
                            by step( contradiction /* impossible chain */ )
                          next
                            case d_0_snd
                            by step( solve( (#vr.6, 0) ~~> (#vk.5, 0) ) )
                          qed
                        qed
                      qed
                    next
                      case c_xor_case_6
                      step( solve( !KU( (~r1⊕~r1.1) ) @ #vk.6 ) )
                        case c_xor
                        by step( contradiction /* cyclic */ )
                      next
                        case coerce
                        step( solve( !KD( (~r1⊕~r1.1) ) ▶₀ #vk.5 ) )
                          case acceptreader
                          by step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                        next
                          case initiatereader
                          by step( contradiction /* impossible chain */ )
                        next
                          case tag1
                          step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                            case d_0_fst
                            by step( contradiction /* impossible chain */ )
                          next
                            case d_0_snd
                            by step( solve( (#vr.6, 0) ~~> (#vk.5, 0) ) )
                          qed
                        qed
                      qed
                    next
                      case c_xor_case_7
                      by step( contradiction /* cyclic */ )
                    next
                      case coerce
                      step( solve( !KD( (~k⊕~k1⊕~r1⊕~r1.1) ) ▶₀ #vk.4 ) )
                        case acceptreader
                        by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                      next
                        case initiatereader
                        by step( contradiction /* impossible chain */ )
                      next
                        case tag1
                        step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                          case d_0_fst
                          by step( contradiction /* impossible chain */ )
                        next
                          case d_0_snd
                          by step( solve( (#vr.6, 0) ~~> (#vk.4, 0) ) )
                        qed
                      qed
                    qed
                  next
                    case c_xor_case_02
                    step( solve( !KU( (~k⊕~k1⊕r0⊕~r1.1) ) @ #vk.5 ) )
                      case c_xor_case_1
                      step( solve( !KU( (~k⊕~k1⊕~r1.1) ) @ #vk.6 ) )
                        case c_xor_case_1
                        by step( solve( !KU( ~k1 ) @ #vk.8 ) )
                      next
                        case c_xor_case_2
                        by step( solve( !KU( ~k ) @ #vk.8 ) )
                      next
                        case c_xor_case_3
                        by step( contradiction /* cyclic */ )
                      next
                        case coerce
                        step( solve( !KD( (~k⊕~k1⊕~r1.1) ) ▶₀ #vk.5 ) )
                          case acceptreader
                          by step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                        next
                          case initiatereader
                          by step( contradiction /* impossible chain */ )
                        next
                          case tag1
                          step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                            case d_0_fst
                            by step( contradiction /* impossible chain */ )
                          next
                            case d_0_snd
                            by step( solve( (#vr.6, 0) ~~> (#vk.5, 0) ) )
                          qed
                        qed
                      qed
                    next
                      case c_xor_case_2
                      by step( solve( !KU( ~k1 ) @ #vk.7 ) )
                    next
                      case c_xor_case_3
                      step( solve( !KU( (~k⊕~r1.1) ) @ #vk.6 ) )
                        case c_xor
                        by step( contradiction /* cyclic */ )
                      next
                        case coerce
                        step( solve( !KD( (~k⊕~r1.1) ) ▶₀ #vk.5 ) )
                          case acceptreader
                          by step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                        next
                          case initiatereader
                          by step( contradiction /* impossible chain */ )
                        next
                          case tag1
                          step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                            case d_0_fst
                            by step( contradiction /* impossible chain */ )
                          next
                            case d_0_snd
                            by step( solve( (#vr.6, 0) ~~> (#vk.5, 0) ) )
                          qed
                        qed
                      qed
                    next
                      case c_xor_case_4
                      by step( solve( !KU( ~k ) @ #vk.7 ) )
                    next
                      case c_xor_case_5
                      step( solve( !KU( (~k1⊕~r1.1) ) @ #vk.6 ) )
                        case c_xor
                        by step( contradiction /* cyclic */ )
                      next
                        case coerce
                        step( solve( !KD( (~k1⊕~r1.1) ) ▶₀ #vk.5 ) )
                          case acceptreader
                          by step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                        next
                          case initiatereader
                          by step( contradiction /* impossible chain */ )
                        next
                          case tag1
                          step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                            case d_0_fst
                            by step( contradiction /* impossible chain */ )
                          next
                            case d_0_snd
                            by step( solve( (#vr.6, 0) ~~> (#vk.5, 0) ) )
                          qed
                        qed
                      qed
                    next
                      case c_xor_case_6
                      step( solve( !KU( (r0⊕~r1.1) ) @ #vk.6 ) )
                        case c_xor
                        by step( contradiction /* cyclic */ )
                      next
                        case coerce
                        step( solve( !KD( (r0⊕~r1.1) ) ▶₀ #vk.5 ) )
                          case acceptreader
                          by step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                        next
                          case initiatereader
                          by step( contradiction /* impossible chain */ )
                        next
                          case tag1
                          step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                            case d_0_fst
                            by step( contradiction /* impossible chain */ )
                          next
                            case d_0_snd
                            by step( solve( (#vr.6, 0) ~~> (#vk.5, 0) ) )
                          qed
                        qed
                      qed
                    next
                      case c_xor_case_7
                      by step( contradiction /* cyclic */ )
                    next
                      case coerce
                      step( solve( !KD( (~k⊕~k1⊕r0⊕~r1.1) ) ▶₀ #vk.4 ) )
                        case acceptreader
                        by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                      next
                        case initiatereader
                        by step( contradiction /* impossible chain */ )
                      next
                        case tag1
                        step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                          case d_0_fst
                          by step( contradiction /* impossible chain */ )
                        next
                          case d_0_snd
                          by step( solve( (#vr.6, 0) ~~> (#vk.4, 0) ) )
                        qed
                      qed
                    qed
                  next
                    case c_xor_case_03
                    step( solve( !KU( (~k⊕~k1⊕~r1.1) ) @ #vk.5 ) )
                      case c_xor_case_1
                      by step( solve( !KU( ~k1 ) @ #vk.8 ) )
                    next
                      case c_xor_case_2
                      by step( solve( !KU( ~k ) @ #vk.8 ) )
                    next
                      case c_xor_case_3
                      by step( contradiction /* cyclic */ )
                    next
                      case coerce
                      step( solve( !KD( (~k⊕~k1⊕~r1.1) ) ▶₀ #vk.4 ) )
                        case acceptreader
                        by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                      next
                        case initiatereader
                        by step( contradiction /* impossible chain */ )
                      next
                        case tag1
                        step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                          case d_0_fst
                          by step( contradiction /* impossible chain */ )
                        next
                          case d_0_snd
                          by step( solve( (#vr.6, 0) ~~> (#vk.4, 0) ) )
                        qed
                      qed
                    qed
                  next
                    case c_xor_case_04
                    by step( solve( !KU( ~k1 ) @ #vk.6 ) )
                  next
                    case c_xor_case_05
                    step( solve( !KU( (~k⊕~r1⊕~r1.1) ) @ #vk.5 ) )
                      case c_xor_case_1
                      step( solve( !KU( (~k1⊕r0) ) @ #vk.6 ) )
                        case c_xor
                        by step( solve( !KU( ~k1 ) @ #vk.8 ) )
                      next
                        case coerce
                        step( solve( !KD( (~k1⊕r0) ) ▶₀ #vk.5 ) )
                          case acceptreader
                          by step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                        next
                          case initiatereader
                          by step( contradiction /* impossible chain */ )
                        next
                          case tag1
                          step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                            case d_0_fst
                            by step( contradiction /* impossible chain */ )
                          next
                            case d_0_snd
                            by step( solve( (#vr.6, 0) ~~> (#vk.5, 0) ) )
                          qed
                        qed
                      qed
                    next
                      case c_xor_case_2
                      by step( solve( !KU( ~k ) @ #vk.8 ) )
                    next
                      case c_xor_case_3
                      by step( contradiction /* cyclic */ )
                    next
                      case coerce
                      step( solve( !KD( (~k⊕~r1⊕~r1.1) ) ▶₀ #vk.4 ) )
                        case acceptreader
                        by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                      next
                        case initiatereader
                        by step( contradiction /* impossible chain */ )
                      next
                        case tag1
                        step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                          case d_0_fst
                          by step( contradiction /* impossible chain */ )
                        next
                          case d_0_snd
                          by step( solve( (#vr.6, 0) ~~> (#vk.4, 0) ) )
                        qed
                      qed
                    qed
                  next
                    case c_xor_case_06
                    step( solve( !KU( (~k⊕r0⊕~r1.1) ) @ #vk.5 ) )
                      case c_xor_case_1
                      step( solve( !KU( (~k1⊕~r1) ) @ #vk.6 ) )
                        case c_xor
                        by step( solve( !KU( ~k1 ) @ #vk.8 ) )
                      next
                        case coerce
                        step( solve( !KD( (~k1⊕~r1) ) ▶₀ #vk.5 ) )
                          case acceptreader
                          by step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                        next
                          case initiatereader
                          by step( contradiction /* impossible chain */ )
                        next
                          case tag1
                          step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                            case d_0_fst
                            by step( contradiction /* impossible chain */ )
                          next
                            case d_0_snd
                            by step( solve( (#vr.6, 0) ~~> (#vk.5, 0) ) )
                          qed
                        qed
                      qed
                    next
                      case c_xor_case_2
                      by step( solve( !KU( ~k ) @ #vk.8 ) )
                    next
                      case c_xor_case_3
                      by step( contradiction /* cyclic */ )
                    next
                      case coerce
                      step( solve( !KD( (~k⊕r0⊕~r1.1) ) ▶₀ #vk.4 ) )
                        case acceptreader
                        by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                      next
                        case initiatereader
                        by step( contradiction /* impossible chain */ )
                      next
                        case tag1
                        step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                          case d_0_fst
                          by step( contradiction /* impossible chain */ )
                        next
                          case d_0_snd
                          by step( solve( (#vr.6, 0) ~~> (#vk.4, 0) ) )
                        qed
                      qed
                    qed
                  next
                    case c_xor_case_07
                    step( solve( !KU( (~k⊕~r1.1) ) @ #vk.5 ) )
                      case c_xor
                      by step( contradiction /* cyclic */ )
                    next
                      case coerce
                      step( solve( !KD( (~k⊕~r1.1) ) ▶₀ #vk.4 ) )
                        case acceptreader
                        by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                      next
                        case initiatereader
                        by step( contradiction /* impossible chain */ )
                      next
                        case tag1
                        step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                          case d_0_fst
                          by step( contradiction /* impossible chain */ )
                        next
                          case d_0_snd
                          by step( solve( (#vr.6, 0) ~~> (#vk.4, 0) ) )
                        qed
                      qed
                    qed
                  next
                    case c_xor_case_08
                    by step( solve( !KU( ~k ) @ #vk.6 ) )
                  next
                    case c_xor_case_09
                    step( solve( !KU( (~k1⊕~r1⊕~r1.1) ) @ #vk.5 ) )
                      case c_xor_case_1
                      step( solve( !KU( (~k⊕r0) ) @ #vk.6 ) )
                        case c_xor
                        by step( solve( !KU( ~k ) @ #vk.8 ) )
                      next
                        case coerce
                        step( solve( !KD( (~k⊕r0) ) ▶₀ #vk.5 ) )
                          case acceptreader
                          by step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                        next
                          case initiatereader
                          by step( contradiction /* impossible chain */ )
                        next
                          case tag1
                          step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                            case d_0_fst
                            by step( contradiction /* impossible chain */ )
                          next
                            case d_0_snd
                            by step( solve( (#vr.6, 0) ~~> (#vk.5, 0) ) )
                          qed
                        qed
                      qed
                    next
                      case c_xor_case_2
                      by step( solve( !KU( ~k1 ) @ #vk.8 ) )
                    next
                      case c_xor_case_3
                      by step( contradiction /* cyclic */ )
                    next
                      case coerce
                      step( solve( !KD( (~k1⊕~r1⊕~r1.1) ) ▶₀ #vk.4 ) )
                        case acceptreader
                        by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                      next
                        case initiatereader
                        by step( contradiction /* impossible chain */ )
                      next
                        case tag1
                        step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                          case d_0_fst
                          by step( contradiction /* impossible chain */ )
                        next
                          case d_0_snd
                          by step( solve( (#vr.6, 0) ~~> (#vk.4, 0) ) )
                        qed
                      qed
                    qed
                  next
                    case c_xor_case_10
                    step( solve( !KU( (~k1⊕r0⊕~r1.1) ) @ #vk.5 ) )
                      case c_xor_case_1
                      step( solve( !KU( (~k⊕~r1) ) @ #vk.6 ) )
                        case c_xor
                        by step( solve( !KU( ~k ) @ #vk.8 ) )
                      next
                        case coerce
                        step( solve( !KD( (~k⊕~r1) ) ▶₀ #vk.5 ) )
                          case acceptreader
                          by step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                        next
                          case initiatereader
                          by step( contradiction /* impossible chain */ )
                        next
                          case tag1
                          step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                            case d_0_fst
                            by step( contradiction /* impossible chain */ )
                          next
                            case d_0_snd
                            by step( solve( (#vr.6, 0) ~~> (#vk.5, 0) ) )
                          qed
                        qed
                      qed
                    next
                      case c_xor_case_2
                      by step( solve( !KU( ~k1 ) @ #vk.8 ) )
                    next
                      case c_xor_case_3
                      by step( contradiction /* cyclic */ )
                    next
                      case coerce
                      step( solve( !KD( (~k1⊕r0⊕~r1.1) ) ▶₀ #vk.4 ) )
                        case acceptreader
                        by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                      next
                        case initiatereader
                        by step( contradiction /* impossible chain */ )
                      next
                        case tag1
                        step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                          case d_0_fst
                          by step( contradiction /* impossible chain */ )
                        next
                          case d_0_snd
                          by step( solve( (#vr.6, 0) ~~> (#vk.4, 0) ) )
                        qed
                      qed
                    qed
                  next
                    case c_xor_case_11
                    step( solve( !KU( (~k1⊕~r1.1) ) @ #vk.5 ) )
                      case c_xor
                      by step( contradiction /* cyclic */ )
                    next
                      case coerce
                      step( solve( !KD( (~k1⊕~r1.1) ) ▶₀ #vk.4 ) )
                        case acceptreader
                        by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                      next
                        case initiatereader
                        by step( contradiction /* impossible chain */ )
                      next
                        case tag1
                        step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                          case d_0_fst
                          by step( contradiction /* impossible chain */ )
                        next
                          case d_0_snd
                          by step( solve( (#vr.6, 0) ~~> (#vk.4, 0) ) )
                        qed
                      qed
                    qed
                  next
                    case c_xor_case_12
                    step( solve( !KU( (~r1⊕r0⊕~r1.1) ) @ #vk.5 ) )
                      case c_xor_case_1
                      step( solve( !KU( (~k⊕~k1) ) @ #vk.6 ) )
                        case c_xor
                        by step( solve( !KU( ~k1 ) @ #vk.8 ) )
                      next
                        case coerce
                        step( solve( !KD( (~k⊕~k1) ) ▶₀ #vk.5 ) )
                          case acceptreader
                          by step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                        next
                          case initiatereader
                          by step( contradiction /* impossible chain */ )
                        next
                          case tag1
                          step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                            case d_0_fst
                            by step( contradiction /* impossible chain */ )
                          next
                            case d_0_snd
                            by step( solve( (#vr.6, 0) ~~> (#vk.5, 0) ) )
                          qed
                        qed
                      qed
                    next
                      case c_xor_case_2
                      step( solve( !KU( (~k⊕~k1) ) @ #vk.6 ) )
                        case c_xor
                        by step( solve( !KU( ~k1 ) @ #vk.8 ) )
                      next
                        case coerce
                        step( solve( !KD( (~k⊕~k1) ) ▶₀ #vk.5 ) )
                          case acceptreader
                          by step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                        next
                          case initiatereader
                          by step( contradiction /* impossible chain */ )
                        next
                          case tag1
                          step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                            case d_0_fst
                            by step( contradiction /* impossible chain */ )
                          next
                            case d_0_snd
                            by step( solve( (#vr.6, 0) ~~> (#vk.5, 0) ) )
                          qed
                        qed
                      qed
                    next
                      case c_xor_case_3
                      by step( contradiction /* cyclic */ )
                    next
                      case coerce
                      step( solve( !KD( (~r1⊕r0⊕~r1.1) ) ▶₀ #vk.4 ) )
                        case acceptreader
                        by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                      next
                        case initiatereader
                        by step( contradiction /* impossible chain */ )
                      next
                        case tag1
                        step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                          case d_0_fst
                          by step( contradiction /* impossible chain */ )
                        next
                          case d_0_snd
                          by step( solve( (#vr.6, 0) ~~> (#vk.4, 0) ) )
                        qed
                      qed
                    qed
                  next
                    case c_xor_case_13
                    step( solve( !KU( (~r1⊕~r1.1) ) @ #vk.5 ) )
                      case c_xor
                      by step( contradiction /* cyclic */ )
                    next
                      case coerce
                      step( solve( !KD( (~r1⊕~r1.1) ) ▶₀ #vk.4 ) )
                        case acceptreader
                        by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                      next
                        case initiatereader
                        by step( contradiction /* impossible chain */ )
                      next
                        case tag1
                        step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                          case d_0_fst
                          by step( contradiction /* impossible chain */ )
                        next
                          case d_0_snd
                          by step( solve( (#vr.6, 0) ~~> (#vk.4, 0) ) )
                        qed
                      qed
                    qed
                  next
                    case c_xor_case_14
                    step( solve( !KU( (r0⊕~r1.1) ) @ #vk.5 ) )
                      case c_xor
                      by step( contradiction /* cyclic */ )
                    next
                      case coerce
                      step( solve( !KD( (r0⊕~r1.1) ) ▶₀ #vk.4 ) )
                        case acceptreader
                        by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                      next
                        case initiatereader
                        by step( contradiction /* impossible chain */ )
                      next
                        case tag1
                        step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                          case d_0_fst
                          by step( contradiction /* impossible chain */ )
                        next
                          case d_0_snd
                          by step( solve( (#vr.6, 0) ~~> (#vk.4, 0) ) )
                        qed
                      qed
                    qed
                  next
                    case c_xor_case_15
                    by step( contradiction /* cyclic */ )
                  next
                    case coerce
                    step( solve( !KD( (~k⊕~k1⊕~r1⊕r0⊕~r1.1) ) ▶₀ #vk.3 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                      qed
                    qed
                  qed
                qed
              next
                case split_case_4
                step( solve( !KU( zero ) @ #vk.3 ) )
                  case c_zero
                  step( solve( splitEqs(2) ) )
                    case split
                    step( solve( !KU( (~k⊕~k1⊕~r1⊕~r1.1) ) @ #vk.4 ) )
                      case c_xor_case_1
                      step( solve( !KU( (~k⊕~k1⊕~r1.1) ) @ #vk.5 ) )
                        case c_xor_case_1
                        by step( solve( !KU( ~k1 ) @ #vk.7 ) )
                      next
                        case c_xor_case_2
                        by step( solve( !KU( ~k ) @ #vk.7 ) )
                      next
                        case c_xor_case_3
                        by step( contradiction /* cyclic */ )
                      next
                        case coerce
                        step( solve( !KD( (~k⊕~k1⊕~r1.1) ) ▶₀ #vk.5 ) )
                          case acceptreader
                          by step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                        next
                          case initiatereader
                          by step( contradiction /* impossible chain */ )
                        next
                          case tag1
                          step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                            case d_0_fst
                            by step( contradiction /* impossible chain */ )
                          next
                            case d_0_snd
                            by step( solve( (#vr.6, 0) ~~> (#vk.5, 0) ) )
                          qed
                        qed
                      qed
                    next
                      case c_xor_case_2
                      by step( solve( !KU( ~k1 ) @ #vk.6 ) )
                    next
                      case c_xor_case_3
                      step( solve( !KU( (~k⊕~r1.1) ) @ #vk.5 ) )
                        case c_xor
                        by step( contradiction /* cyclic */ )
                      next
                        case coerce
                        step( solve( !KD( (~k⊕~r1.1) ) ▶₀ #vk.5 ) )
                          case acceptreader
                          by step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                        next
                          case initiatereader
                          by step( contradiction /* impossible chain */ )
                        next
                          case tag1
                          step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                            case d_0_fst
                            by step( contradiction /* impossible chain */ )
                          next
                            case d_0_snd
                            by step( solve( (#vr.6, 0) ~~> (#vk.5, 0) ) )
                          qed
                        qed
                      qed
                    next
                      case c_xor_case_4
                      by step( solve( !KU( ~k ) @ #vk.6 ) )
                    next
                      case c_xor_case_5
                      step( solve( !KU( (~k1⊕~r1.1) ) @ #vk.5 ) )
                        case c_xor
                        by step( contradiction /* cyclic */ )
                      next
                        case coerce
                        step( solve( !KD( (~k1⊕~r1.1) ) ▶₀ #vk.5 ) )
                          case acceptreader
                          by step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                        next
                          case initiatereader
                          by step( contradiction /* impossible chain */ )
                        next
                          case tag1
                          step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                            case d_0_fst
                            by step( contradiction /* impossible chain */ )
                          next
                            case d_0_snd
                            by step( solve( (#vr.6, 0) ~~> (#vk.5, 0) ) )
                          qed
                        qed
                      qed
                    next
                      case c_xor_case_6
                      step( solve( !KU( (~r1⊕~r1.1) ) @ #vk.5 ) )
                        case c_xor
                        by step( contradiction /* cyclic */ )
                      next
                        case coerce
                        step( solve( !KD( (~r1⊕~r1.1) ) ▶₀ #vk.5 ) )
                          case acceptreader
                          by step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                        next
                          case initiatereader
                          by step( contradiction /* impossible chain */ )
                        next
                          case tag1
                          step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                            case d_0_fst
                            by step( contradiction /* impossible chain */ )
                          next
                            case d_0_snd
                            by step( solve( (#vr.6, 0) ~~> (#vk.5, 0) ) )
                          qed
                        qed
                      qed
                    next
                      case c_xor_case_7
                      by step( contradiction /* cyclic */ )
                    next
                      case coerce
                      step( solve( !KD( (~k⊕~k1⊕~r1⊕~r1.1) ) ▶₀ #vk.4 ) )
                        case acceptreader
                        by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                      next
                        case initiatereader
                        by step( contradiction /* impossible chain */ )
                      next
                        case tag1
                        step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                          case d_0_fst
                          by step( contradiction /* impossible chain */ )
                        next
                          case d_0_snd
                          by step( solve( (#vr.6, 0) ~~> (#vk.4, 0) ) )
                        qed
                      qed
                    qed
                  qed
                next
                  case coerce
                  step( solve( !KD( zero ) ▶₀ #vk.3 ) )
                    case acceptreader
                    by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_5
                step( solve( !KU( (~k⊕~r1) ) @ #vk.3 ) )
                  case c_xor
                  by step( contradiction /* cyclic */ )
                next
                  case coerce
                  step( solve( !KD( (~k⊕~r1) ) ▶₀ #vk.3 ) )
                    case acceptreader
                    by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_6
                step( solve( !KU( (~k⊕~r1⊕z) ) @ #vk.3 ) )
                  case c_xor_case_1
                  by step( contradiction /* cyclic */ )
                next
                  case c_xor_case_2
                  by step( solve( !KU( ~k ) @ #vk.6 ) )
                next
                  case c_xor_case_3
                  step( solve( !KU( (~k⊕~r1) ) @ #vk.6 ) )
                    case c_xor
                    by step( contradiction /* cyclic */ )
                  next
                    case coerce
                    step( solve( !KD( (~k⊕~r1) ) ▶₀ #vk.4 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.4, 0) ) )
                      qed
                    qed
                  qed
                next
                  case coerce
                  step( solve( !KD( (~k⊕~r1⊕z) ) ▶₀ #vk.3 ) )
                    case acceptreader
                    by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_7
                step( solve( !KU( (~r1⊕x) ) @ #vk.3 ) )
                  case c_xor
                  by step( contradiction /* cyclic */ )
                next
                  case coerce
                  step( solve( !KD( (~r1⊕x) ) ▶₀ #vk.3 ) )
                    case acceptreader
                    by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_8
                step( solve( !KU( (~k⊕x) ) @ #vk.3 ) )
                  case c_xor
                  by step( solve( !KU( ~k ) @ #vk.6 ) )
                next
                  case coerce
                  step( solve( !KD( (~k⊕x) ) ▶₀ #vk.3 ) )
                    case acceptreader
                    by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                    qed
                  qed
                qed
              qed
            qed
          qed
        next
          case setup_case_3
          step( solve( !KU( ~r1 ) @ #vk.2 ) )
            case tag1
            step( solve( !KU( h(z) ) @ #vk.3 ) )
              case c_h
              step( solve( splitEqs(0) ) )
                case split_case_1
                by step( solve( !KU( ~k ) @ #vk.3 ) )
              next
                case split_case_2
                by step( contradiction /* cyclic */ )
              next
                case split_case_3
                step( solve( !KU( (~k⊕~r1⊕r0) ) @ #vk.4 ) )
                  case c_xor_case_1
                  step( solve( !KU( (~k⊕r0) ) @ #vk.5 ) )
                    case c_xor
                    by step( solve( !KU( ~k ) @ #vk.6 ) )
                  next
                    case coerce
                    step( solve( !KD( (~k⊕r0) ) ▶₀ #vk.4 ) )
                      case acceptreader
                      by step( solve( (#vl.1, 0) ~~> (#vk.4, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.1, 0) ~~> (#vk.4, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.4, 0) ~~> (#vk.4, 0) ) )
                      qed
                    qed
                  qed
                next
                  case c_xor_case_2
                  by step( solve( !KU( ~k ) @ #vk.6 ) )
                next
                  case c_xor_case_3
                  step( solve( !KU( (~k⊕~r1) ) @ #vk.5 ) )
                    case c_xor
                    by step( solve( !KU( ~k ) @ #vk.6 ) )
                  next
                    case coerce
                    step( solve( !KD( (~k⊕~r1) ) ▶₀ #vk.4 ) )
                      case acceptreader
                      by step( solve( (#vl.1, 0) ~~> (#vk.4, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.1, 0) ~~> (#vk.4, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.4, 0) ~~> (#vk.4, 0) ) )
                      qed
                    qed
                  qed
                next
                  case coerce
                  step( solve( !KD( (~k⊕~r1⊕r0) ) ▶₀ #vk.3 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.4, 0) ~~> (#vk.3, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_4
                step( solve( !KU( (~k⊕~r1) ) @ #vk.4 ) )
                  case c_xor
                  by step( solve( !KU( ~k ) @ #vk.5 ) )
                next
                  case coerce
                  step( solve( !KD( (~k⊕~r1) ) ▶₀ #vk.3 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.4, 0) ~~> (#vk.3, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_5
                step( solve( !KU( (~k⊕~r1) ) @ #vk.3 ) )
                  case c_xor
                  by step( contradiction /* cyclic */ )
                next
                  case coerce
                  step( solve( !KD( (~k⊕~r1) ) ▶₀ #vk.3 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.4, 0) ~~> (#vk.3, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_6
                step( solve( !KU( (~k⊕~r1⊕z) ) @ #vk.3 ) )
                  case c_xor_case_1
                  by step( contradiction /* cyclic */ )
                next
                  case c_xor_case_2
                  by step( solve( !KU( ~k ) @ #vk.6 ) )
                next
                  case c_xor_case_3
                  step( solve( !KU( (~k⊕~r1) ) @ #vk.5 ) )
                    case c_xor
                    by step( contradiction /* cyclic */ )
                  next
                    case coerce
                    step( solve( !KD( (~k⊕~r1) ) ▶₀ #vk.4 ) )
                      case acceptreader
                      by step( solve( (#vl.1, 0) ~~> (#vk.4, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.1, 0) ~~> (#vk.4, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.4, 0) ~~> (#vk.4, 0) ) )
                      qed
                    qed
                  qed
                next
                  case coerce
                  step( solve( !KD( (~k⊕~r1⊕z) ) ▶₀ #vk.3 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.4, 0) ~~> (#vk.3, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_7
                step( solve( !KU( (~r1⊕x) ) @ #vk.3 ) )
                  case c_xor
                  by step( contradiction /* cyclic */ )
                next
                  case coerce
                  step( solve( !KD( (~r1⊕x) ) ▶₀ #vk.3 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.4, 0) ~~> (#vk.3, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_8
                step( solve( !KU( (~k⊕x) ) @ #vk.3 ) )
                  case c_xor
                  by step( solve( !KU( ~k ) @ #vk.6 ) )
                next
                  case coerce
                  step( solve( !KD( (~k⊕x) ) ▶₀ #vk.3 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.4, 0) ~~> (#vk.3, 0) ) )
                    qed
                  qed
                qed
              qed
            next
              case tag1_case_1
              step( solve( splitEqs(0) ) )
                case split_case_1
                by step( solve( !KU( ~k ) @ #vk.3 ) )
              next
                case split_case_2
                by step( contradiction /* cyclic */ )
              next
                case split_case_3
                step( solve( splitEqs(2) ) )
                  case split_case_1
                  by step( contradiction /* cyclic */ )
                next
                  case split_case_2
                  step( solve( !KU( (~r1⊕r0⊕~r1.1) ) @ #vk.4 ) )
                    case c_xor_case_1
                    step( solve( !KU( (~r1⊕~r1.1) ) @ #vk.5 ) )
                      case c_xor
                      by step( contradiction /* cyclic */ )
                    next
                      case coerce
                      step( solve( !KD( (~r1⊕~r1.1) ) ▶₀ #vk.4 ) )
                        case acceptreader
                        by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                      next
                        case initiatereader
                        by step( contradiction /* impossible chain */ )
                      next
                        case tag1
                        step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                          case d_0_fst
                          by step( contradiction /* impossible chain */ )
                        next
                          case d_0_snd
                          by step( solve( (#vr.6, 0) ~~> (#vk.4, 0) ) )
                        qed
                      qed
                    qed
                  next
                    case c_xor_case_2
                    step( solve( !KU( (r0⊕~r1.1) ) @ #vk.5 ) )
                      case c_xor
                      by step( contradiction /* cyclic */ )
                    next
                      case coerce
                      step( solve( !KD( (r0⊕~r1.1) ) ▶₀ #vk.4 ) )
                        case acceptreader
                        by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                      next
                        case initiatereader
                        by step( contradiction /* impossible chain */ )
                      next
                        case tag1
                        step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                          case d_0_fst
                          by step( contradiction /* impossible chain */ )
                        next
                          case d_0_snd
                          by step( solve( (#vr.6, 0) ~~> (#vk.4, 0) ) )
                        qed
                      qed
                    qed
                  next
                    case c_xor_case_3
                    by step( contradiction /* cyclic */ )
                  next
                    case coerce
                    step( solve( !KD( (~r1⊕r0⊕~r1.1) ) ▶₀ #vk.3 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_3
                  step( solve( !KU( (x⊕~r1.1) ) @ #vk.3 ) )
                    case c_xor
                    step( solve( !KU( (~r1⊕x) ) @ #vk.4 ) )
                      case c_xor
                      by step( contradiction /* cyclic */ )
                    next
                      case coerce
                      step( solve( !KD( (~r1⊕x) ) ▶₀ #vk.4 ) )
                        case acceptreader
                        by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                      next
                        case initiatereader
                        by step( contradiction /* impossible chain */ )
                      next
                        case tag1
                        step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                          case d_0_fst
                          by step( contradiction /* impossible chain */ )
                        next
                          case d_0_snd
                          by step( solve( (#vr.6, 0) ~~> (#vk.4, 0) ) )
                        qed
                      qed
                    qed
                  next
                    case coerce
                    step( solve( !KD( (x⊕~r1.1) ) ▶₀ #vk.3 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                      qed
                    qed
                  qed
                qed
              next
                case split_case_4
                step( solve( !KU( zero ) @ #vk.3 ) )
                  case c_zero
                  step( solve( splitEqs(2) ) )
                    case split
                    step( solve( !KU( (~r1⊕~r1.1) ) @ #vk.4 ) )
                      case c_xor
                      by step( contradiction /* cyclic */ )
                    next
                      case coerce
                      step( solve( !KD( (~r1⊕~r1.1) ) ▶₀ #vk.4 ) )
                        case acceptreader
                        by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                      next
                        case initiatereader
                        by step( contradiction /* impossible chain */ )
                      next
                        case tag1
                        step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                          case d_0_fst
                          by step( contradiction /* impossible chain */ )
                        next
                          case d_0_snd
                          by step( solve( (#vr.6, 0) ~~> (#vk.4, 0) ) )
                        qed
                      qed
                    qed
                  qed
                next
                  case coerce
                  step( solve( !KD( zero ) ▶₀ #vk.3 ) )
                    case acceptreader
                    by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_5
                step( solve( !KU( (~k⊕~r1) ) @ #vk.3 ) )
                  case c_xor
                  by step( contradiction /* cyclic */ )
                next
                  case coerce
                  step( solve( !KD( (~k⊕~r1) ) ▶₀ #vk.3 ) )
                    case acceptreader
                    by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_6
                step( solve( !KU( (~k⊕~r1⊕z) ) @ #vk.3 ) )
                  case c_xor_case_1
                  by step( contradiction /* cyclic */ )
                next
                  case c_xor_case_2
                  by step( solve( !KU( ~k ) @ #vk.6 ) )
                next
                  case c_xor_case_3
                  step( solve( !KU( (~k⊕~r1) ) @ #vk.6 ) )
                    case c_xor
                    by step( contradiction /* cyclic */ )
                  next
                    case coerce
                    step( solve( !KD( (~k⊕~r1) ) ▶₀ #vk.4 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.4, 0) ) )
                      qed
                    qed
                  qed
                next
                  case coerce
                  step( solve( !KD( (~k⊕~r1⊕z) ) ▶₀ #vk.3 ) )
                    case acceptreader
                    by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_7
                step( solve( !KU( (~r1⊕x) ) @ #vk.3 ) )
                  case c_xor
                  by step( contradiction /* cyclic */ )
                next
                  case coerce
                  step( solve( !KD( (~r1⊕x) ) ▶₀ #vk.3 ) )
                    case acceptreader
                    by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_8
                step( solve( !KU( (~k⊕x) ) @ #vk.3 ) )
                  case c_xor
                  by step( solve( !KU( ~k ) @ #vk.6 ) )
                next
                  case coerce
                  step( solve( !KD( (~k⊕x) ) ▶₀ #vk.3 ) )
                    case acceptreader
                    by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                    qed
                  qed
                qed
              qed
            next
              case tag1_case_2
              step( solve( splitEqs(0) ) )
                case split_case_1
                by step( solve( !KU( ~k ) @ #vk.3 ) )
              next
                case split_case_2
                by step( contradiction /* cyclic */ )
              next
                case split_case_3
                step( solve( splitEqs(2) ) )
                  case split_case_1
                  by step( solve( !KU( ~k2 ) @ #vk.3 ) )
                next
                  case split_case_2
                  step( solve( !KU( (~k⊕~k2⊕~r1) ) @ #vk.4 ) )
                    case c_xor_case_1
                    by step( solve( !KU( ~k2 ) @ #vk.6 ) )
                  next
                    case c_xor_case_2
                    by step( solve( !KU( ~k ) @ #vk.6 ) )
                  next
                    case c_xor_case_3
                    by step( contradiction /* cyclic */ )
                  next
                    case coerce
                    step( solve( !KD( (~k⊕~k2⊕~r1) ) ▶₀ #vk.3 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_3
                  step( solve( !KU( (~k2⊕~r1.1) ) @ #vk.3 ) )
                    case c_xor
                    by step( solve( !KU( ~k2 ) @ #vk.6 ) )
                  next
                    case coerce
                    step( solve( !KD( (~k2⊕~r1.1) ) ▶₀ #vk.3 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_4
                  step( solve( !KU( (~k2⊕x⊕~r1.1) ) @ #vk.3 ) )
                    case c_xor_case_1
                    step( solve( !KU( (~k⊕~r1⊕x) ) @ #vk.4 ) )
                      case c_xor_case_1
                      step( solve( !KU( (~k2⊕~r1.1) ) @ #vk.5 ) )
                        case c_xor
                        by step( contradiction /* cyclic */ )
                      next
                        case coerce
                        step( solve( !KD( (~k2⊕~r1.1) ) ▶₀ #vk.5 ) )
                          case acceptreader
                          by step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                        next
                          case initiatereader
                          by step( contradiction /* impossible chain */ )
                        next
                          case tag1
                          step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                            case d_0_fst
                            by step( contradiction /* impossible chain */ )
                          next
                            case d_0_snd
                            by step( solve( (#vr.6, 0) ~~> (#vk.5, 0) ) )
                          qed
                        qed
                      qed
                    next
                      case c_xor_case_2
                      by step( solve( !KU( ~k ) @ #vk.8 ) )
                    next
                      case c_xor_case_3
                      step( solve( !KU( (~k2⊕~r1.1) ) @ #vk.5 ) )
                        case c_xor
                        by step( solve( !KU( ~k2 ) @ #vk.9 ) )
                      next
                        case coerce
                        step( solve( !KD( (~k2⊕~r1.1) ) ▶₀ #vk.5 ) )
                          case acceptreader
                          by step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                        next
                          case initiatereader
                          by step( contradiction /* impossible chain */ )
                        next
                          case tag1
                          step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                            case d_0_fst
                            by step( contradiction /* impossible chain */ )
                          next
                            case d_0_snd
                            by step( solve( (#vr.6, 0) ~~> (#vk.5, 0) ) )
                          qed
                        qed
                      qed
                    next
                      case coerce
                      step( solve( !KD( (~k⊕~r1⊕x) ) ▶₀ #vk.4 ) )
                        case acceptreader
                        by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                      next
                        case initiatereader
                        by step( contradiction /* impossible chain */ )
                      next
                        case tag1
                        step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                          case d_0_fst
                          by step( contradiction /* impossible chain */ )
                        next
                          case d_0_snd
                          by step( solve( (#vr.6, 0) ~~> (#vk.4, 0) ) )
                        qed
                      qed
                    qed
                  next
                    case c_xor_case_2
                    by step( solve( !KU( ~k2 ) @ #vk.6 ) )
                  next
                    case c_xor_case_3
                    step( solve( !KU( (~k⊕~r1⊕x) ) @ #vk.4 ) )
                      case c_xor_case_1
                      by step( contradiction /* cyclic */ )
                    next
                      case c_xor_case_2
                      by step( solve( !KU( ~k ) @ #vk.8 ) )
                    next
                      case c_xor_case_3
                      step( solve( !KU( (~k2⊕x) ) @ #vk.6 ) )
                        case c_xor
                        by step( solve( !KU( ~k2 ) @ #vk.9 ) )
                      next
                        case coerce
                        step( solve( !KD( (~k2⊕x) ) ▶₀ #vk.5 ) )
                          case acceptreader
                          by step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                        next
                          case initiatereader
                          by step( contradiction /* impossible chain */ )
                        next
                          case tag1
                          step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                            case d_0_fst
                            by step( contradiction /* impossible chain */ )
                          next
                            case d_0_snd
                            by step( solve( (#vr.6, 0) ~~> (#vk.5, 0) ) )
                          qed
                        qed
                      qed
                    next
                      case coerce
                      step( solve( !KD( (~k⊕~r1⊕x) ) ▶₀ #vk.4 ) )
                        case acceptreader
                        by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                      next
                        case initiatereader
                        by step( contradiction /* impossible chain */ )
                      next
                        case tag1
                        step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                          case d_0_fst
                          by step( contradiction /* impossible chain */ )
                        next
                          case d_0_snd
                          by step( solve( (#vr.6, 0) ~~> (#vk.4, 0) ) )
                        qed
                      qed
                    qed
                  next
                    case coerce
                    step( solve( !KD( (~k2⊕x⊕~r1.1) ) ▶₀ #vk.3 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_5
                  step( solve( !KU( (~k2⊕x) ) @ #vk.3 ) )
                    case c_xor
                    by step( solve( !KU( ~k2 ) @ #vk.6 ) )
                  next
                    case coerce
                    step( solve( !KD( (~k2⊕x) ) ▶₀ #vk.3 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_6
                  step( solve( !KU( (x⊕~r1.1) ) @ #vk.3 ) )
                    case c_xor
                    step( solve( !KU( (~k⊕~k2⊕~r1⊕x) ) @ #vk.4 ) )
                      case c_xor_case_1
                      by step( contradiction /* cyclic */ )
                    next
                      case c_xor_case_2
                      by step( solve( !KU( ~k2 ) @ #vk.8 ) )
                    next
                      case c_xor_case_3
                      step( solve( !KU( (~k⊕x) ) @ #vk.7 ) )
                        case c_xor
                        by step( solve( !KU( ~k ) @ #vk.9 ) )
                      next
                        case coerce
                        step( solve( !KD( (~k⊕x) ) ▶₀ #vk.5 ) )
                          case acceptreader
                          by step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                        next
                          case initiatereader
                          by step( contradiction /* impossible chain */ )
                        next
                          case tag1
                          step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                            case d_0_fst
                            by step( contradiction /* impossible chain */ )
                          next
                            case d_0_snd
                            by step( solve( (#vr.6, 0) ~~> (#vk.5, 0) ) )
                          qed
                        qed
                      qed
                    next
                      case c_xor_case_4
                      by step( solve( !KU( ~k ) @ #vk.8 ) )
                    next
                      case c_xor_case_5
                      step( solve( !KU( (~k2⊕x) ) @ #vk.7 ) )
                        case c_xor
                        by step( solve( !KU( ~k2 ) @ #vk.9 ) )
                      next
                        case coerce
                        step( solve( !KD( (~k2⊕x) ) ▶₀ #vk.5 ) )
                          case acceptreader
                          by step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                        next
                          case initiatereader
                          by step( contradiction /* impossible chain */ )
                        next
                          case tag1
                          step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                            case d_0_fst
                            by step( contradiction /* impossible chain */ )
                          next
                            case d_0_snd
                            by step( solve( (#vr.6, 0) ~~> (#vk.5, 0) ) )
                          qed
                        qed
                      qed
                    next
                      case c_xor_case_6
                      step( solve( !KU( (~r1⊕x) ) @ #vk.7 ) )
                        case c_xor
                        by step( contradiction /* cyclic */ )
                      next
                        case coerce
                        step( solve( !KD( (~r1⊕x) ) ▶₀ #vk.5 ) )
                          case acceptreader
                          by step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                        next
                          case initiatereader
                          by step( contradiction /* impossible chain */ )
                        next
                          case tag1
                          step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                            case d_0_fst
                            by step( contradiction /* impossible chain */ )
                          next
                            case d_0_snd
                            by step( solve( (#vr.6, 0) ~~> (#vk.5, 0) ) )
                          qed
                        qed
                      qed
                    next
                      case c_xor_case_7
                      step( solve( !KU( (~k⊕~k2⊕~r1) ) @ #vk.7 ) )
                        case c_xor_case_1
                        by step( solve( !KU( ~k2 ) @ #vk.9 ) )
                      next
                        case c_xor_case_2
                        by step( solve( !KU( ~k ) @ #vk.9 ) )
                      next
                        case c_xor_case_3
                        by step( contradiction /* cyclic */ )
                      next
                        case coerce
                        step( solve( !KD( (~k⊕~k2⊕~r1) ) ▶₀ #vk.5 ) )
                          case acceptreader
                          by step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                        next
                          case initiatereader
                          by step( contradiction /* impossible chain */ )
                        next
                          case tag1
                          step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                            case d_0_fst
                            by step( contradiction /* impossible chain */ )
                          next
                            case d_0_snd
                            by step( solve( (#vr.6, 0) ~~> (#vk.5, 0) ) )
                          qed
                        qed
                      qed
                    next
                      case coerce
                      step( solve( !KD( (~k⊕~k2⊕~r1⊕x) ) ▶₀ #vk.4 ) )
                        case acceptreader
                        by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                      next
                        case initiatereader
                        by step( contradiction /* impossible chain */ )
                      next
                        case tag1
                        step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                          case d_0_fst
                          by step( contradiction /* impossible chain */ )
                        next
                          case d_0_snd
                          by step( solve( (#vr.6, 0) ~~> (#vk.4, 0) ) )
                        qed
                      qed
                    qed
                  next
                    case coerce
                    step( solve( !KD( (x⊕~r1.1) ) ▶₀ #vk.3 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_7
                  step( solve( !KU( (~k⊕~k2⊕~r1⊕r0⊕~r1.1) ) @ #vk.4 ) )
                    case c_xor_case_01
                    step( solve( !KU( (~k⊕~k2⊕~r1⊕~r1.1) ) @ #vk.5 ) )
                      case c_xor_case_1
                      step( solve( !KU( (~k⊕~k2⊕~r1.1) ) @ #vk.6 ) )
                        case c_xor_case_1
                        by step( solve( !KU( ~k2 ) @ #vk.8 ) )
                      next
                        case c_xor_case_2
                        by step( solve( !KU( ~k ) @ #vk.8 ) )
                      next
                        case c_xor_case_3
                        by step( contradiction /* cyclic */ )
                      next
                        case coerce
                        step( solve( !KD( (~k⊕~k2⊕~r1.1) ) ▶₀ #vk.5 ) )
                          case acceptreader
                          by step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                        next
                          case initiatereader
                          by step( contradiction /* impossible chain */ )
                        next
                          case tag1
                          step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                            case d_0_fst
                            by step( contradiction /* impossible chain */ )
                          next
                            case d_0_snd
                            by step( solve( (#vr.6, 0) ~~> (#vk.5, 0) ) )
                          qed
                        qed
                      qed
                    next
                      case c_xor_case_2
                      by step( solve( !KU( ~k2 ) @ #vk.7 ) )
                    next
                      case c_xor_case_3
                      step( solve( !KU( (~k⊕~r1.1) ) @ #vk.6 ) )
                        case c_xor
                        by step( contradiction /* cyclic */ )
                      next
                        case coerce
                        step( solve( !KD( (~k⊕~r1.1) ) ▶₀ #vk.5 ) )
                          case acceptreader
                          by step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                        next
                          case initiatereader
                          by step( contradiction /* impossible chain */ )
                        next
                          case tag1
                          step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                            case d_0_fst
                            by step( contradiction /* impossible chain */ )
                          next
                            case d_0_snd
                            by step( solve( (#vr.6, 0) ~~> (#vk.5, 0) ) )
                          qed
                        qed
                      qed
                    next
                      case c_xor_case_4
                      by step( solve( !KU( ~k ) @ #vk.7 ) )
                    next
                      case c_xor_case_5
                      step( solve( !KU( (~k2⊕~r1.1) ) @ #vk.6 ) )
                        case c_xor
                        by step( contradiction /* cyclic */ )
                      next
                        case coerce
                        step( solve( !KD( (~k2⊕~r1.1) ) ▶₀ #vk.5 ) )
                          case acceptreader
                          by step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                        next
                          case initiatereader
                          by step( contradiction /* impossible chain */ )
                        next
                          case tag1
                          step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                            case d_0_fst
                            by step( contradiction /* impossible chain */ )
                          next
                            case d_0_snd
                            by step( solve( (#vr.6, 0) ~~> (#vk.5, 0) ) )
                          qed
                        qed
                      qed
                    next
                      case c_xor_case_6
                      step( solve( !KU( (~r1⊕~r1.1) ) @ #vk.6 ) )
                        case c_xor
                        by step( contradiction /* cyclic */ )
                      next
                        case coerce
                        step( solve( !KD( (~r1⊕~r1.1) ) ▶₀ #vk.5 ) )
                          case acceptreader
                          by step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                        next
                          case initiatereader
                          by step( contradiction /* impossible chain */ )
                        next
                          case tag1
                          step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                            case d_0_fst
                            by step( contradiction /* impossible chain */ )
                          next
                            case d_0_snd
                            by step( solve( (#vr.6, 0) ~~> (#vk.5, 0) ) )
                          qed
                        qed
                      qed
                    next
                      case c_xor_case_7
                      by step( contradiction /* cyclic */ )
                    next
                      case coerce
                      step( solve( !KD( (~k⊕~k2⊕~r1⊕~r1.1) ) ▶₀ #vk.4 ) )
                        case acceptreader
                        by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                      next
                        case initiatereader
                        by step( contradiction /* impossible chain */ )
                      next
                        case tag1
                        step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                          case d_0_fst
                          by step( contradiction /* impossible chain */ )
                        next
                          case d_0_snd
                          by step( solve( (#vr.6, 0) ~~> (#vk.4, 0) ) )
                        qed
                      qed
                    qed
                  next
                    case c_xor_case_02
                    step( solve( !KU( (~k⊕~k2⊕r0⊕~r1.1) ) @ #vk.5 ) )
                      case c_xor_case_1
                      step( solve( !KU( (~k⊕~k2⊕~r1.1) ) @ #vk.6 ) )
                        case c_xor_case_1
                        by step( solve( !KU( ~k2 ) @ #vk.8 ) )
                      next
                        case c_xor_case_2
                        by step( solve( !KU( ~k ) @ #vk.8 ) )
                      next
                        case c_xor_case_3
                        by step( contradiction /* cyclic */ )
                      next
                        case coerce
                        step( solve( !KD( (~k⊕~k2⊕~r1.1) ) ▶₀ #vk.5 ) )
                          case acceptreader
                          by step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                        next
                          case initiatereader
                          by step( contradiction /* impossible chain */ )
                        next
                          case tag1
                          step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                            case d_0_fst
                            by step( contradiction /* impossible chain */ )
                          next
                            case d_0_snd
                            by step( solve( (#vr.6, 0) ~~> (#vk.5, 0) ) )
                          qed
                        qed
                      qed
                    next
                      case c_xor_case_2
                      by step( solve( !KU( ~k2 ) @ #vk.7 ) )
                    next
                      case c_xor_case_3
                      step( solve( !KU( (~k⊕~r1.1) ) @ #vk.6 ) )
                        case c_xor
                        by step( contradiction /* cyclic */ )
                      next
                        case coerce
                        step( solve( !KD( (~k⊕~r1.1) ) ▶₀ #vk.5 ) )
                          case acceptreader
                          by step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                        next
                          case initiatereader
                          by step( contradiction /* impossible chain */ )
                        next
                          case tag1
                          step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                            case d_0_fst
                            by step( contradiction /* impossible chain */ )
                          next
                            case d_0_snd
                            by step( solve( (#vr.6, 0) ~~> (#vk.5, 0) ) )
                          qed
                        qed
                      qed
                    next
                      case c_xor_case_4
                      by step( solve( !KU( ~k ) @ #vk.7 ) )
                    next
                      case c_xor_case_5
                      step( solve( !KU( (~k2⊕~r1.1) ) @ #vk.6 ) )
                        case c_xor
                        by step( contradiction /* cyclic */ )
                      next
                        case coerce
                        step( solve( !KD( (~k2⊕~r1.1) ) ▶₀ #vk.5 ) )
                          case acceptreader
                          by step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                        next
                          case initiatereader
                          by step( contradiction /* impossible chain */ )
                        next
                          case tag1
                          step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                            case d_0_fst
                            by step( contradiction /* impossible chain */ )
                          next
                            case d_0_snd
                            by step( solve( (#vr.6, 0) ~~> (#vk.5, 0) ) )
                          qed
                        qed
                      qed
                    next
                      case c_xor_case_6
                      step( solve( !KU( (r0⊕~r1.1) ) @ #vk.6 ) )
                        case c_xor
                        by step( contradiction /* cyclic */ )
                      next
                        case coerce
                        step( solve( !KD( (r0⊕~r1.1) ) ▶₀ #vk.5 ) )
                          case acceptreader
                          by step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                        next
                          case initiatereader
                          by step( contradiction /* impossible chain */ )
                        next
                          case tag1
                          step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                            case d_0_fst
                            by step( contradiction /* impossible chain */ )
                          next
                            case d_0_snd
                            by step( solve( (#vr.6, 0) ~~> (#vk.5, 0) ) )
                          qed
                        qed
                      qed
                    next
                      case c_xor_case_7
                      by step( contradiction /* cyclic */ )
                    next
                      case coerce
                      step( solve( !KD( (~k⊕~k2⊕r0⊕~r1.1) ) ▶₀ #vk.4 ) )
                        case acceptreader
                        by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                      next
                        case initiatereader
                        by step( contradiction /* impossible chain */ )
                      next
                        case tag1
                        step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                          case d_0_fst
                          by step( contradiction /* impossible chain */ )
                        next
                          case d_0_snd
                          by step( solve( (#vr.6, 0) ~~> (#vk.4, 0) ) )
                        qed
                      qed
                    qed
                  next
                    case c_xor_case_03
                    step( solve( !KU( (~k⊕~k2⊕~r1.1) ) @ #vk.5 ) )
                      case c_xor_case_1
                      by step( solve( !KU( ~k2 ) @ #vk.8 ) )
                    next
                      case c_xor_case_2
                      by step( solve( !KU( ~k ) @ #vk.8 ) )
                    next
                      case c_xor_case_3
                      by step( contradiction /* cyclic */ )
                    next
                      case coerce
                      step( solve( !KD( (~k⊕~k2⊕~r1.1) ) ▶₀ #vk.4 ) )
                        case acceptreader
                        by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                      next
                        case initiatereader
                        by step( contradiction /* impossible chain */ )
                      next
                        case tag1
                        step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                          case d_0_fst
                          by step( contradiction /* impossible chain */ )
                        next
                          case d_0_snd
                          by step( solve( (#vr.6, 0) ~~> (#vk.4, 0) ) )
                        qed
                      qed
                    qed
                  next
                    case c_xor_case_04
                    by step( solve( !KU( ~k2 ) @ #vk.6 ) )
                  next
                    case c_xor_case_05
                    step( solve( !KU( (~k⊕~r1⊕~r1.1) ) @ #vk.5 ) )
                      case c_xor_case_1
                      step( solve( !KU( (~k2⊕r0) ) @ #vk.6 ) )
                        case c_xor
                        by step( solve( !KU( ~k2 ) @ #vk.8 ) )
                      next
                        case coerce
                        step( solve( !KD( (~k2⊕r0) ) ▶₀ #vk.5 ) )
                          case acceptreader
                          by step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                        next
                          case initiatereader
                          by step( contradiction /* impossible chain */ )
                        next
                          case tag1
                          step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                            case d_0_fst
                            by step( contradiction /* impossible chain */ )
                          next
                            case d_0_snd
                            by step( solve( (#vr.6, 0) ~~> (#vk.5, 0) ) )
                          qed
                        qed
                      qed
                    next
                      case c_xor_case_2
                      by step( solve( !KU( ~k ) @ #vk.8 ) )
                    next
                      case c_xor_case_3
                      by step( contradiction /* cyclic */ )
                    next
                      case coerce
                      step( solve( !KD( (~k⊕~r1⊕~r1.1) ) ▶₀ #vk.4 ) )
                        case acceptreader
                        by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                      next
                        case initiatereader
                        by step( contradiction /* impossible chain */ )
                      next
                        case tag1
                        step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                          case d_0_fst
                          by step( contradiction /* impossible chain */ )
                        next
                          case d_0_snd
                          by step( solve( (#vr.6, 0) ~~> (#vk.4, 0) ) )
                        qed
                      qed
                    qed
                  next
                    case c_xor_case_06
                    step( solve( !KU( (~k⊕r0⊕~r1.1) ) @ #vk.5 ) )
                      case c_xor_case_1
                      step( solve( !KU( (~k2⊕~r1) ) @ #vk.6 ) )
                        case c_xor
                        by step( solve( !KU( ~k2 ) @ #vk.8 ) )
                      next
                        case coerce
                        step( solve( !KD( (~k2⊕~r1) ) ▶₀ #vk.5 ) )
                          case acceptreader
                          by step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                        next
                          case initiatereader
                          by step( contradiction /* impossible chain */ )
                        next
                          case tag1
                          step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                            case d_0_fst
                            by step( contradiction /* impossible chain */ )
                          next
                            case d_0_snd
                            by step( solve( (#vr.6, 0) ~~> (#vk.5, 0) ) )
                          qed
                        qed
                      qed
                    next
                      case c_xor_case_2
                      by step( solve( !KU( ~k ) @ #vk.8 ) )
                    next
                      case c_xor_case_3
                      by step( contradiction /* cyclic */ )
                    next
                      case coerce
                      step( solve( !KD( (~k⊕r0⊕~r1.1) ) ▶₀ #vk.4 ) )
                        case acceptreader
                        by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                      next
                        case initiatereader
                        by step( contradiction /* impossible chain */ )
                      next
                        case tag1
                        step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                          case d_0_fst
                          by step( contradiction /* impossible chain */ )
                        next
                          case d_0_snd
                          by step( solve( (#vr.6, 0) ~~> (#vk.4, 0) ) )
                        qed
                      qed
                    qed
                  next
                    case c_xor_case_07
                    step( solve( !KU( (~k⊕~r1.1) ) @ #vk.5 ) )
                      case c_xor
                      by step( contradiction /* cyclic */ )
                    next
                      case coerce
                      step( solve( !KD( (~k⊕~r1.1) ) ▶₀ #vk.4 ) )
                        case acceptreader
                        by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                      next
                        case initiatereader
                        by step( contradiction /* impossible chain */ )
                      next
                        case tag1
                        step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                          case d_0_fst
                          by step( contradiction /* impossible chain */ )
                        next
                          case d_0_snd
                          by step( solve( (#vr.6, 0) ~~> (#vk.4, 0) ) )
                        qed
                      qed
                    qed
                  next
                    case c_xor_case_08
                    by step( solve( !KU( ~k ) @ #vk.6 ) )
                  next
                    case c_xor_case_09
                    step( solve( !KU( (~k2⊕~r1⊕~r1.1) ) @ #vk.5 ) )
                      case c_xor_case_1
                      step( solve( !KU( (~k⊕r0) ) @ #vk.6 ) )
                        case c_xor
                        by step( solve( !KU( ~k ) @ #vk.8 ) )
                      next
                        case coerce
                        step( solve( !KD( (~k⊕r0) ) ▶₀ #vk.5 ) )
                          case acceptreader
                          by step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                        next
                          case initiatereader
                          by step( contradiction /* impossible chain */ )
                        next
                          case tag1
                          step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                            case d_0_fst
                            by step( contradiction /* impossible chain */ )
                          next
                            case d_0_snd
                            by step( solve( (#vr.6, 0) ~~> (#vk.5, 0) ) )
                          qed
                        qed
                      qed
                    next
                      case c_xor_case_2
                      by step( solve( !KU( ~k2 ) @ #vk.8 ) )
                    next
                      case c_xor_case_3
                      by step( contradiction /* cyclic */ )
                    next
                      case coerce
                      step( solve( !KD( (~k2⊕~r1⊕~r1.1) ) ▶₀ #vk.4 ) )
                        case acceptreader
                        by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                      next
                        case initiatereader
                        by step( contradiction /* impossible chain */ )
                      next
                        case tag1
                        step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                          case d_0_fst
                          by step( contradiction /* impossible chain */ )
                        next
                          case d_0_snd
                          by step( solve( (#vr.6, 0) ~~> (#vk.4, 0) ) )
                        qed
                      qed
                    qed
                  next
                    case c_xor_case_10
                    step( solve( !KU( (~k2⊕r0⊕~r1.1) ) @ #vk.5 ) )
                      case c_xor_case_1
                      step( solve( !KU( (~k⊕~r1) ) @ #vk.6 ) )
                        case c_xor
                        by step( solve( !KU( ~k ) @ #vk.8 ) )
                      next
                        case coerce
                        step( solve( !KD( (~k⊕~r1) ) ▶₀ #vk.5 ) )
                          case acceptreader
                          by step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                        next
                          case initiatereader
                          by step( contradiction /* impossible chain */ )
                        next
                          case tag1
                          step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                            case d_0_fst
                            by step( contradiction /* impossible chain */ )
                          next
                            case d_0_snd
                            by step( solve( (#vr.6, 0) ~~> (#vk.5, 0) ) )
                          qed
                        qed
                      qed
                    next
                      case c_xor_case_2
                      by step( solve( !KU( ~k2 ) @ #vk.8 ) )
                    next
                      case c_xor_case_3
                      by step( contradiction /* cyclic */ )
                    next
                      case coerce
                      step( solve( !KD( (~k2⊕r0⊕~r1.1) ) ▶₀ #vk.4 ) )
                        case acceptreader
                        by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                      next
                        case initiatereader
                        by step( contradiction /* impossible chain */ )
                      next
                        case tag1
                        step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                          case d_0_fst
                          by step( contradiction /* impossible chain */ )
                        next
                          case d_0_snd
                          by step( solve( (#vr.6, 0) ~~> (#vk.4, 0) ) )
                        qed
                      qed
                    qed
                  next
                    case c_xor_case_11
                    step( solve( !KU( (~k2⊕~r1.1) ) @ #vk.5 ) )
                      case c_xor
                      by step( contradiction /* cyclic */ )
                    next
                      case coerce
                      step( solve( !KD( (~k2⊕~r1.1) ) ▶₀ #vk.4 ) )
                        case acceptreader
                        by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                      next
                        case initiatereader
                        by step( contradiction /* impossible chain */ )
                      next
                        case tag1
                        step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                          case d_0_fst
                          by step( contradiction /* impossible chain */ )
                        next
                          case d_0_snd
                          by step( solve( (#vr.6, 0) ~~> (#vk.4, 0) ) )
                        qed
                      qed
                    qed
                  next
                    case c_xor_case_12
                    step( solve( !KU( (~r1⊕r0⊕~r1.1) ) @ #vk.5 ) )
                      case c_xor_case_1
                      step( solve( !KU( (~k⊕~k2) ) @ #vk.6 ) )
                        case c_xor
                        by step( solve( !KU( ~k2 ) @ #vk.8 ) )
                      next
                        case coerce
                        step( solve( !KD( (~k⊕~k2) ) ▶₀ #vk.5 ) )
                          case acceptreader
                          by step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                        next
                          case initiatereader
                          by step( contradiction /* impossible chain */ )
                        next
                          case tag1
                          step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                            case d_0_fst
                            by step( contradiction /* impossible chain */ )
                          next
                            case d_0_snd
                            by step( solve( (#vr.6, 0) ~~> (#vk.5, 0) ) )
                          qed
                        qed
                      qed
                    next
                      case c_xor_case_2
                      step( solve( !KU( (~k⊕~k2) ) @ #vk.6 ) )
                        case c_xor
                        by step( solve( !KU( ~k2 ) @ #vk.8 ) )
                      next
                        case coerce
                        step( solve( !KD( (~k⊕~k2) ) ▶₀ #vk.5 ) )
                          case acceptreader
                          by step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                        next
                          case initiatereader
                          by step( contradiction /* impossible chain */ )
                        next
                          case tag1
                          step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                            case d_0_fst
                            by step( contradiction /* impossible chain */ )
                          next
                            case d_0_snd
                            by step( solve( (#vr.6, 0) ~~> (#vk.5, 0) ) )
                          qed
                        qed
                      qed
                    next
                      case c_xor_case_3
                      by step( contradiction /* cyclic */ )
                    next
                      case coerce
                      step( solve( !KD( (~r1⊕r0⊕~r1.1) ) ▶₀ #vk.4 ) )
                        case acceptreader
                        by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                      next
                        case initiatereader
                        by step( contradiction /* impossible chain */ )
                      next
                        case tag1
                        step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                          case d_0_fst
                          by step( contradiction /* impossible chain */ )
                        next
                          case d_0_snd
                          by step( solve( (#vr.6, 0) ~~> (#vk.4, 0) ) )
                        qed
                      qed
                    qed
                  next
                    case c_xor_case_13
                    step( solve( !KU( (~r1⊕~r1.1) ) @ #vk.5 ) )
                      case c_xor
                      by step( contradiction /* cyclic */ )
                    next
                      case coerce
                      step( solve( !KD( (~r1⊕~r1.1) ) ▶₀ #vk.4 ) )
                        case acceptreader
                        by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                      next
                        case initiatereader
                        by step( contradiction /* impossible chain */ )
                      next
                        case tag1
                        step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                          case d_0_fst
                          by step( contradiction /* impossible chain */ )
                        next
                          case d_0_snd
                          by step( solve( (#vr.6, 0) ~~> (#vk.4, 0) ) )
                        qed
                      qed
                    qed
                  next
                    case c_xor_case_14
                    step( solve( !KU( (r0⊕~r1.1) ) @ #vk.5 ) )
                      case c_xor
                      by step( contradiction /* cyclic */ )
                    next
                      case coerce
                      step( solve( !KD( (r0⊕~r1.1) ) ▶₀ #vk.4 ) )
                        case acceptreader
                        by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                      next
                        case initiatereader
                        by step( contradiction /* impossible chain */ )
                      next
                        case tag1
                        step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                          case d_0_fst
                          by step( contradiction /* impossible chain */ )
                        next
                          case d_0_snd
                          by step( solve( (#vr.6, 0) ~~> (#vk.4, 0) ) )
                        qed
                      qed
                    qed
                  next
                    case c_xor_case_15
                    by step( contradiction /* cyclic */ )
                  next
                    case coerce
                    step( solve( !KD( (~k⊕~k2⊕~r1⊕r0⊕~r1.1) ) ▶₀ #vk.3 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                      qed
                    qed
                  qed
                qed
              next
                case split_case_4
                step( solve( !KU( zero ) @ #vk.3 ) )
                  case c_zero
                  step( solve( splitEqs(2) ) )
                    case split
                    step( solve( !KU( (~k⊕~k2⊕~r1⊕~r1.1) ) @ #vk.4 ) )
                      case c_xor_case_1
                      step( solve( !KU( (~k⊕~k2⊕~r1.1) ) @ #vk.5 ) )
                        case c_xor_case_1
                        by step( solve( !KU( ~k2 ) @ #vk.7 ) )
                      next
                        case c_xor_case_2
                        by step( solve( !KU( ~k ) @ #vk.7 ) )
                      next
                        case c_xor_case_3
                        by step( contradiction /* cyclic */ )
                      next
                        case coerce
                        step( solve( !KD( (~k⊕~k2⊕~r1.1) ) ▶₀ #vk.5 ) )
                          case acceptreader
                          by step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                        next
                          case initiatereader
                          by step( contradiction /* impossible chain */ )
                        next
                          case tag1
                          step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                            case d_0_fst
                            by step( contradiction /* impossible chain */ )
                          next
                            case d_0_snd
                            by step( solve( (#vr.6, 0) ~~> (#vk.5, 0) ) )
                          qed
                        qed
                      qed
                    next
                      case c_xor_case_2
                      by step( solve( !KU( ~k2 ) @ #vk.6 ) )
                    next
                      case c_xor_case_3
                      step( solve( !KU( (~k⊕~r1.1) ) @ #vk.5 ) )
                        case c_xor
                        by step( contradiction /* cyclic */ )
                      next
                        case coerce
                        step( solve( !KD( (~k⊕~r1.1) ) ▶₀ #vk.5 ) )
                          case acceptreader
                          by step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                        next
                          case initiatereader
                          by step( contradiction /* impossible chain */ )
                        next
                          case tag1
                          step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                            case d_0_fst
                            by step( contradiction /* impossible chain */ )
                          next
                            case d_0_snd
                            by step( solve( (#vr.6, 0) ~~> (#vk.5, 0) ) )
                          qed
                        qed
                      qed
                    next
                      case c_xor_case_4
                      by step( solve( !KU( ~k ) @ #vk.6 ) )
                    next
                      case c_xor_case_5
                      step( solve( !KU( (~k2⊕~r1.1) ) @ #vk.5 ) )
                        case c_xor
                        by step( contradiction /* cyclic */ )
                      next
                        case coerce
                        step( solve( !KD( (~k2⊕~r1.1) ) ▶₀ #vk.5 ) )
                          case acceptreader
                          by step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                        next
                          case initiatereader
                          by step( contradiction /* impossible chain */ )
                        next
                          case tag1
                          step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                            case d_0_fst
                            by step( contradiction /* impossible chain */ )
                          next
                            case d_0_snd
                            by step( solve( (#vr.6, 0) ~~> (#vk.5, 0) ) )
                          qed
                        qed
                      qed
                    next
                      case c_xor_case_6
                      step( solve( !KU( (~r1⊕~r1.1) ) @ #vk.5 ) )
                        case c_xor
                        by step( contradiction /* cyclic */ )
                      next
                        case coerce
                        step( solve( !KD( (~r1⊕~r1.1) ) ▶₀ #vk.5 ) )
                          case acceptreader
                          by step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                        next
                          case initiatereader
                          by step( contradiction /* impossible chain */ )
                        next
                          case tag1
                          step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                            case d_0_fst
                            by step( contradiction /* impossible chain */ )
                          next
                            case d_0_snd
                            by step( solve( (#vr.6, 0) ~~> (#vk.5, 0) ) )
                          qed
                        qed
                      qed
                    next
                      case c_xor_case_7
                      by step( contradiction /* cyclic */ )
                    next
                      case coerce
                      step( solve( !KD( (~k⊕~k2⊕~r1⊕~r1.1) ) ▶₀ #vk.4 ) )
                        case acceptreader
                        by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                      next
                        case initiatereader
                        by step( contradiction /* impossible chain */ )
                      next
                        case tag1
                        step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                          case d_0_fst
                          by step( contradiction /* impossible chain */ )
                        next
                          case d_0_snd
                          by step( solve( (#vr.6, 0) ~~> (#vk.4, 0) ) )
                        qed
                      qed
                    qed
                  qed
                next
                  case coerce
                  step( solve( !KD( zero ) ▶₀ #vk.3 ) )
                    case acceptreader
                    by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_5
                step( solve( !KU( (~k⊕~r1) ) @ #vk.3 ) )
                  case c_xor
                  by step( contradiction /* cyclic */ )
                next
                  case coerce
                  step( solve( !KD( (~k⊕~r1) ) ▶₀ #vk.3 ) )
                    case acceptreader
                    by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_6
                step( solve( !KU( (~k⊕~r1⊕z) ) @ #vk.3 ) )
                  case c_xor_case_1
                  by step( contradiction /* cyclic */ )
                next
                  case c_xor_case_2
                  by step( solve( !KU( ~k ) @ #vk.6 ) )
                next
                  case c_xor_case_3
                  step( solve( !KU( (~k⊕~r1) ) @ #vk.6 ) )
                    case c_xor
                    by step( contradiction /* cyclic */ )
                  next
                    case coerce
                    step( solve( !KD( (~k⊕~r1) ) ▶₀ #vk.4 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.4, 0) ) )
                      qed
                    qed
                  qed
                next
                  case coerce
                  step( solve( !KD( (~k⊕~r1⊕z) ) ▶₀ #vk.3 ) )
                    case acceptreader
                    by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_7
                step( solve( !KU( (~r1⊕x) ) @ #vk.3 ) )
                  case c_xor
                  by step( contradiction /* cyclic */ )
                next
                  case coerce
                  step( solve( !KD( (~r1⊕x) ) ▶₀ #vk.3 ) )
                    case acceptreader
                    by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_8
                step( solve( !KU( (~k⊕x) ) @ #vk.3 ) )
                  case c_xor
                  by step( solve( !KU( ~k ) @ #vk.6 ) )
                next
                  case coerce
                  step( solve( !KD( (~k⊕x) ) ▶₀ #vk.3 ) )
                    case acceptreader
                    by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                    qed
                  qed
                qed
              qed
            next
              case tag1_case_3
              step( solve( splitEqs(0) ) )
                case split_case_1
                by step( solve( !KU( ~k ) @ #vk.3 ) )
              next
                case split_case_2
                MIRRORED
              next
                case split_case_3
                MIRRORED
              next
                case split_case_4
                step( solve( !KU( zero ) @ #vk.3 ) )
                  case c_zero
                  MIRRORED
                next
                  case coerce
                  step( solve( !KD( zero ) ▶₀ #vk.3 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.5, 0) ~~> (#vk.3, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_5
                step( solve( !KU( (~k⊕~r1) ) @ #vk.3 ) )
                  case c_xor
                  by step( contradiction /* cyclic */ )
                next
                  case coerce
                  step( solve( !KD( (~k⊕~r1) ) ▶₀ #vk.3 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.5, 0) ~~> (#vk.3, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_6
                step( solve( !KU( (~k⊕~r1⊕z) ) @ #vk.3 ) )
                  case c_xor_case_1
                  by step( contradiction /* cyclic */ )
                next
                  case c_xor_case_2
                  by step( solve( !KU( ~k ) @ #vk.5 ) )
                next
                  case c_xor_case_3
                  step( solve( !KU( (~k⊕~r1) ) @ #vk.5 ) )
                    case c_xor
                    by step( contradiction /* cyclic */ )
                  next
                    case coerce
                    step( solve( !KD( (~k⊕~r1) ) ▶₀ #vk.4 ) )
                      case acceptreader
                      by step( solve( (#vl.1, 0) ~~> (#vk.4, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.1, 0) ~~> (#vk.4, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.5, 0) ~~> (#vk.4, 0) ) )
                      qed
                    qed
                  qed
                next
                  case coerce
                  step( solve( !KD( (~k⊕~r1⊕z) ) ▶₀ #vk.3 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.5, 0) ~~> (#vk.3, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_7
                step( solve( !KU( (~r1⊕x) ) @ #vk.3 ) )
                  case c_xor
                  by step( contradiction /* cyclic */ )
                next
                  case coerce
                  step( solve( !KD( (~r1⊕x) ) ▶₀ #vk.3 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.5, 0) ~~> (#vk.3, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_8
                step( solve( !KU( (~k⊕x) ) @ #vk.3 ) )
                  case c_xor
                  by step( solve( !KU( ~k ) @ #vk.5 ) )
                next
                  case coerce
                  step( solve( !KD( (~k⊕x) ) ▶₀ #vk.3 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.5, 0) ~~> (#vk.3, 0) ) )
                    qed
                  qed
                qed
              qed
            qed
          qed
        qed
      qed
    qed
  next
    case RHS
    step( simplify )
    step( solve( !KD( x ) ▶₁ #i ) )
      case acceptreader
      step( solve( (#vl, 0) ~~> (#i, 1) ) )
        case h
        by step( solve( ReaderState1( ~k, ~r0, phase ) ▶₀ #vr ) )
      qed
    next
      case initiatereader
      step( solve( (#vl, 0) ~~> (#i, 1) ) )
        case Var_fresh_r0
        by step( solve( ReaderRun( ~k, phase ) ▶₀ #vr ) )
      qed
    next
      case tag1
      step( solve( (#vl, 0) ~~> (#i, 1) ) )
        case d_0_fst
        step( solve( (#vr.1, 0) ~~> (#i, 1) ) )
          case Var_fresh_r1
          step( solve( TagRun( ~k, phase ) ▶₀ #vr ) )
            case setup_case_1
            step( solve( !KU( ~r1 ) @ #vk ) )
              case tag1
              step( solve( splitEqs(0) ) )
                case split_case_1
                by step( solve( !KU( ~k ) @ #vk.1 ) )
              next
                case split_case_2
                MIRRORED
              next
                case split_case_3
                MIRRORED
              next
                case split_case_4
                step( solve( !KU( zero ) @ #vk.1 ) )
                  case c_zero
                  MIRRORED
                next
                  case coerce
                  step( solve( !KD( zero ) ▶₀ #vk.1 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.5, 0) ~~> (#vk.1, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_5
                step( solve( !KU( (~k⊕~r1) ) @ #vk.1 ) )
                  case c_xor
                  by step( contradiction /* cyclic */ )
                next
                  case coerce
                  step( solve( !KD( (~k⊕~r1) ) ▶₀ #vk.1 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.5, 0) ~~> (#vk.1, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_6
                step( solve( !KU( (~k⊕~r1⊕z) ) @ #vk.1 ) )
                  case c_xor_case_1
                  by step( contradiction /* cyclic */ )
                next
                  case c_xor_case_2
                  by step( solve( !KU( ~k ) @ #vk.3 ) )
                next
                  case c_xor_case_3
                  step( solve( !KU( (~k⊕~r1) ) @ #vk.3 ) )
                    case c_xor
                    by step( contradiction /* cyclic */ )
                  next
                    case coerce
                    step( solve( !KD( (~k⊕~r1) ) ▶₀ #vk.2 ) )
                      case acceptreader
                      by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.5, 0) ~~> (#vk.2, 0) ) )
                      qed
                    qed
                  qed
                next
                  case coerce
                  step( solve( !KD( (~k⊕~r1⊕z) ) ▶₀ #vk.1 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.5, 0) ~~> (#vk.1, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_7
                step( solve( !KU( (~r1⊕x) ) @ #vk.1 ) )
                  case c_xor
                  by step( contradiction /* cyclic */ )
                next
                  case coerce
                  step( solve( !KD( (~r1⊕x) ) ▶₀ #vk.1 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.5, 0) ~~> (#vk.1, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_8
                step( solve( !KU( (~k⊕x) ) @ #vk.1 ) )
                  case c_xor
                  by step( solve( !KU( ~k ) @ #vk.3 ) )
                next
                  case coerce
                  step( solve( !KD( (~k⊕x) ) ▶₀ #vk.1 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.5, 0) ~~> (#vk.1, 0) ) )
                    qed
                  qed
                qed
              qed
            qed
          next
            case setup_case_2
            step( solve( !KU( ~r1 ) @ #vk ) )
              case tag1
              step( solve( splitEqs(0) ) )
                case split_case_1
                by step( solve( !KU( ~k ) @ #vk.1 ) )
              next
                case split_case_2
                MIRRORED
              next
                case split_case_3
                MIRRORED
              next
                case split_case_4
                step( solve( !KU( zero ) @ #vk.1 ) )
                  case c_zero
                  MIRRORED
                next
                  case coerce
                  step( solve( !KD( zero ) ▶₀ #vk.1 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.5, 0) ~~> (#vk.1, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_5
                step( solve( !KU( (~k⊕~r1) ) @ #vk.1 ) )
                  case c_xor
                  by step( contradiction /* cyclic */ )
                next
                  case coerce
                  step( solve( !KD( (~k⊕~r1) ) ▶₀ #vk.1 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.5, 0) ~~> (#vk.1, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_6
                step( solve( !KU( (~k⊕~r1⊕z) ) @ #vk.1 ) )
                  case c_xor_case_1
                  by step( contradiction /* cyclic */ )
                next
                  case c_xor_case_2
                  by step( solve( !KU( ~k ) @ #vk.3 ) )
                next
                  case c_xor_case_3
                  step( solve( !KU( (~k⊕~r1) ) @ #vk.3 ) )
                    case c_xor
                    by step( contradiction /* cyclic */ )
                  next
                    case coerce
                    step( solve( !KD( (~k⊕~r1) ) ▶₀ #vk.2 ) )
                      case acceptreader
                      by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.5, 0) ~~> (#vk.2, 0) ) )
                      qed
                    qed
                  qed
                next
                  case coerce
                  step( solve( !KD( (~k⊕~r1⊕z) ) ▶₀ #vk.1 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.5, 0) ~~> (#vk.1, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_7
                step( solve( !KU( (~r1⊕x) ) @ #vk.1 ) )
                  case c_xor
                  by step( contradiction /* cyclic */ )
                next
                  case coerce
                  step( solve( !KD( (~r1⊕x) ) ▶₀ #vk.1 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.5, 0) ~~> (#vk.1, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_8
                step( solve( !KU( (~k⊕x) ) @ #vk.1 ) )
                  case c_xor
                  by step( solve( !KU( ~k ) @ #vk.3 ) )
                next
                  case coerce
                  step( solve( !KD( (~k⊕x) ) ▶₀ #vk.1 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.5, 0) ~~> (#vk.1, 0) ) )
                    qed
                  qed
                qed
              qed
            qed
          next
            case setup_case_3
            step( solve( !KU( ~r1 ) @ #vk ) )
              case tag1
              step( solve( splitEqs(0) ) )
                case split_case_1
                by step( solve( !KU( ~k ) @ #vk.1 ) )
              next
                case split_case_2
                MIRRORED
              next
                case split_case_3
                MIRRORED
              next
                case split_case_4
                step( solve( !KU( zero ) @ #vk.1 ) )
                  case c_zero
                  MIRRORED
                next
                  case coerce
                  step( solve( !KD( zero ) ▶₀ #vk.1 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.5, 0) ~~> (#vk.1, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_5
                step( solve( !KU( (~k⊕~r1) ) @ #vk.1 ) )
                  case c_xor
                  by step( contradiction /* cyclic */ )
                next
                  case coerce
                  step( solve( !KD( (~k⊕~r1) ) ▶₀ #vk.1 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.5, 0) ~~> (#vk.1, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_6
                step( solve( !KU( (~k⊕~r1⊕z) ) @ #vk.1 ) )
                  case c_xor_case_1
                  by step( contradiction /* cyclic */ )
                next
                  case c_xor_case_2
                  by step( solve( !KU( ~k ) @ #vk.3 ) )
                next
                  case c_xor_case_3
                  step( solve( !KU( (~k⊕~r1) ) @ #vk.3 ) )
                    case c_xor
                    by step( contradiction /* cyclic */ )
                  next
                    case coerce
                    step( solve( !KD( (~k⊕~r1) ) ▶₀ #vk.2 ) )
                      case acceptreader
                      by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.5, 0) ~~> (#vk.2, 0) ) )
                      qed
                    qed
                  qed
                next
                  case coerce
                  step( solve( !KD( (~k⊕~r1⊕z) ) ▶₀ #vk.1 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.5, 0) ~~> (#vk.1, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_7
                step( solve( !KU( (~r1⊕x) ) @ #vk.1 ) )
                  case c_xor
                  by step( contradiction /* cyclic */ )
                next
                  case coerce
                  step( solve( !KD( (~r1⊕x) ) ▶₀ #vk.1 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.5, 0) ~~> (#vk.1, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_8
                step( solve( !KU( (~k⊕x) ) @ #vk.1 ) )
                  case c_xor
                  by step( solve( !KU( ~k ) @ #vk.3 ) )
                next
                  case coerce
                  step( solve( !KD( (~k⊕x) ) ▶₀ #vk.1 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.5, 0) ~~> (#vk.1, 0) ) )
                    qed
                  qed
                qed
              qed
            qed
          qed
        qed
      next
        case d_0_snd
        step( solve( (#vr.1, 0) ~~> (#i, 1) ) )
          case h
          step( solve( TagRun( ~k, phase ) ▶₀ #vr ) )
            case setup_case_1
            step( solve( !KU( h(z) ) @ #vk ) )
              case c_h
              step( solve( splitEqs(0) ) )
                case split_case_1
                by step( solve( !KU( ~k ) @ #vk.1 ) )
              next
                case split_case_2
                by step( contradiction /* cyclic */ )
              next
                case split_case_3
                step( solve( !KU( (~k⊕~r1⊕r0) ) @ #vk.2 ) )
                  case c_xor_case_1
                  step( solve( !KU( (~k⊕r0) ) @ #vk.3 ) )
                    case c_xor
                    by step( solve( !KU( ~k ) @ #vk.5 ) )
                  next
                    case coerce
                    step( solve( !KD( (~k⊕r0) ) ▶₀ #vk.2 ) )
                      case acceptreader
                      by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.4, 0) ~~> (#vk.2, 0) ) )
                      qed
                    qed
                  qed
                next
                  case c_xor_case_2
                  by step( solve( !KU( ~k ) @ #vk.4 ) )
                next
                  case c_xor_case_3
                  step( solve( !KU( (~k⊕~r1) ) @ #vk.3 ) )
                    case c_xor
                    by step( solve( !KU( ~k ) @ #vk.5 ) )
                  next
                    case coerce
                    step( solve( !KD( (~k⊕~r1) ) ▶₀ #vk.2 ) )
                      case acceptreader
                      by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.4, 0) ~~> (#vk.2, 0) ) )
                      qed
                    qed
                  qed
                next
                  case coerce
                  step( solve( !KD( (~k⊕~r1⊕r0) ) ▶₀ #vk.1 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.4, 0) ~~> (#vk.1, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_4
                step( solve( !KU( (~k⊕~r1) ) @ #vk.2 ) )
                  case c_xor
                  by step( solve( !KU( ~k ) @ #vk.4 ) )
                next
                  case coerce
                  step( solve( !KD( (~k⊕~r1) ) ▶₀ #vk.1 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.4, 0) ~~> (#vk.1, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_5
                step( solve( !KU( (~k⊕~r1) ) @ #vk.1 ) )
                  case c_xor
                  by step( contradiction /* cyclic */ )
                next
                  case coerce
                  step( solve( !KD( (~k⊕~r1) ) ▶₀ #vk.1 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.4, 0) ~~> (#vk.1, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_6
                step( solve( !KU( (~k⊕~r1⊕z) ) @ #vk.1 ) )
                  case c_xor_case_1
                  by step( contradiction /* cyclic */ )
                next
                  case c_xor_case_2
                  by step( solve( !KU( ~k ) @ #vk.4 ) )
                next
                  case c_xor_case_3
                  step( solve( !KU( (~k⊕~r1) ) @ #vk.3 ) )
                    case c_xor
                    by step( contradiction /* cyclic */ )
                  next
                    case coerce
                    step( solve( !KD( (~k⊕~r1) ) ▶₀ #vk.2 ) )
                      case acceptreader
                      by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.4, 0) ~~> (#vk.2, 0) ) )
                      qed
                    qed
                  qed
                next
                  case coerce
                  step( solve( !KD( (~k⊕~r1⊕z) ) ▶₀ #vk.1 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.4, 0) ~~> (#vk.1, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_7
                step( solve( !KU( (~r1⊕x) ) @ #vk.1 ) )
                  case c_xor
                  by step( contradiction /* cyclic */ )
                next
                  case coerce
                  step( solve( !KD( (~r1⊕x) ) ▶₀ #vk.1 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.4, 0) ~~> (#vk.1, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_8
                step( solve( !KU( (~k⊕x) ) @ #vk.1 ) )
                  case c_xor
                  by step( solve( !KU( ~k ) @ #vk.4 ) )
                next
                  case coerce
                  step( solve( !KD( (~k⊕x) ) ▶₀ #vk.1 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.4, 0) ~~> (#vk.1, 0) ) )
                    qed
                  qed
                qed
              qed
            next
              case tag1_case_1
              step( solve( splitEqs(0) ) )
                case split_case_1
                by step( solve( !KU( ~k ) @ #vk.1 ) )
              next
                case split_case_2
                by step( contradiction /* cyclic */ )
              next
                case split_case_3
                MIRRORED
              next
                case split_case_4
                step( solve( !KU( zero ) @ #vk.1 ) )
                  case c_zero
                  MIRRORED
                next
                  case coerce
                  step( solve( !KD( zero ) ▶₀ #vk.1 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.5, 0) ~~> (#vk.1, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_5
                step( solve( !KU( (~k⊕~r1) ) @ #vk.1 ) )
                  case c_xor
                  by step( contradiction /* cyclic */ )
                next
                  case coerce
                  step( solve( !KD( (~k⊕~r1) ) ▶₀ #vk.1 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.5, 0) ~~> (#vk.1, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_6
                step( solve( !KU( (~k⊕~r1⊕z) ) @ #vk.1 ) )
                  case c_xor_case_1
                  by step( contradiction /* cyclic */ )
                next
                  case c_xor_case_2
                  by step( solve( !KU( ~k ) @ #vk.3 ) )
                next
                  case c_xor_case_3
                  step( solve( !KU( (~k⊕~r1) ) @ #vk.3 ) )
                    case c_xor
                    by step( contradiction /* cyclic */ )
                  next
                    case coerce
                    step( solve( !KD( (~k⊕~r1) ) ▶₀ #vk.2 ) )
                      case acceptreader
                      by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.5, 0) ~~> (#vk.2, 0) ) )
                      qed
                    qed
                  qed
                next
                  case coerce
                  step( solve( !KD( (~k⊕~r1⊕z) ) ▶₀ #vk.1 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.5, 0) ~~> (#vk.1, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_7
                step( solve( !KU( (~r1⊕x) ) @ #vk.1 ) )
                  case c_xor
                  by step( contradiction /* cyclic */ )
                next
                  case coerce
                  step( solve( !KD( (~r1⊕x) ) ▶₀ #vk.1 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.5, 0) ~~> (#vk.1, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_8
                step( solve( !KU( (~k⊕x) ) @ #vk.1 ) )
                  case c_xor
                  by step( solve( !KU( ~k ) @ #vk.3 ) )
                next
                  case coerce
                  step( solve( !KD( (~k⊕x) ) ▶₀ #vk.1 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.5, 0) ~~> (#vk.1, 0) ) )
                    qed
                  qed
                qed
              qed
            next
              case tag1_case_2
              step( solve( splitEqs(0) ) )
                case split_case_1
                by step( solve( !KU( ~k ) @ #vk.1 ) )
              next
                case split_case_2
                by step( contradiction /* cyclic */ )
              next
                case split_case_3
                step( solve( splitEqs(1) ) )
                  case split_case_1
                  step( solve( !KU( (~k2⊕~r1.1) ) @ #vk.1 ) )
                    case c_xor
                    by step( solve( !KU( ~k2 ) @ #vk.4 ) )
                  next
                    case coerce
                    step( solve( !KD( (~k2⊕~r1.1) ) ▶₀ #vk.1 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.1, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_2
                  step( solve( !KU( (~k⊕~k2⊕~r1⊕r0⊕~r1.1) ) @ #vk.2 ) )
                    case c_xor_case_01
                    step( solve( !KU( (~k⊕~k2⊕~r1⊕~r1.1) ) @ #vk.3 ) )
                      case c_xor_case_1
                      step( solve( !KU( (~k⊕~k2⊕~r1.1) ) @ #vk.4 ) )
                        case c_xor_case_1
                        by step( solve( !KU( ~k2 ) @ #vk.7 ) )
                      next
                        case c_xor_case_2
                        by step( solve( !KU( ~k ) @ #vk.7 ) )
                      next
                        case c_xor_case_3
                        by step( contradiction /* cyclic */ )
                      next
                        case coerce
                        step( solve( !KD( (~k⊕~k2⊕~r1.1) ) ▶₀ #vk.3 ) )
                          case acceptreader
                          by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                        next
                          case initiatereader
                          by step( contradiction /* impossible chain */ )
                        next
                          case tag1
                          step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                            case d_0_fst
                            by step( contradiction /* impossible chain */ )
                          next
                            case d_0_snd
                            by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                          qed
                        qed
                      qed
                    next
                      case c_xor_case_2
                      by step( solve( !KU( ~k2 ) @ #vk.5 ) )
                    next
                      case c_xor_case_3
                      step( solve( !KU( (~k⊕~r1.1) ) @ #vk.4 ) )
                        case c_xor
                        by step( contradiction /* cyclic */ )
                      next
                        case coerce
                        step( solve( !KD( (~k⊕~r1.1) ) ▶₀ #vk.3 ) )
                          case acceptreader
                          by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                        next
                          case initiatereader
                          by step( contradiction /* impossible chain */ )
                        next
                          case tag1
                          step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                            case d_0_fst
                            by step( contradiction /* impossible chain */ )
                          next
                            case d_0_snd
                            by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                          qed
                        qed
                      qed
                    next
                      case c_xor_case_4
                      by step( solve( !KU( ~k ) @ #vk.5 ) )
                    next
                      case c_xor_case_5
                      step( solve( !KU( (~k2⊕~r1.1) ) @ #vk.4 ) )
                        case c_xor
                        by step( contradiction /* cyclic */ )
                      next
                        case coerce
                        step( solve( !KD( (~k2⊕~r1.1) ) ▶₀ #vk.3 ) )
                          case acceptreader
                          by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                        next
                          case initiatereader
                          by step( contradiction /* impossible chain */ )
                        next
                          case tag1
                          step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                            case d_0_fst
                            by step( contradiction /* impossible chain */ )
                          next
                            case d_0_snd
                            by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                          qed
                        qed
                      qed
                    next
                      case c_xor_case_6
                      step( solve( !KU( (~r1⊕~r1.1) ) @ #vk.4 ) )
                        case c_xor
                        by step( contradiction /* cyclic */ )
                      next
                        case coerce
                        step( solve( !KD( (~r1⊕~r1.1) ) ▶₀ #vk.3 ) )
                          case acceptreader
                          by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                        next
                          case initiatereader
                          by step( contradiction /* impossible chain */ )
                        next
                          case tag1
                          step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                            case d_0_fst
                            by step( contradiction /* impossible chain */ )
                          next
                            case d_0_snd
                            by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                          qed
                        qed
                      qed
                    next
                      case c_xor_case_7
                      by step( contradiction /* cyclic */ )
                    next
                      case coerce
                      step( solve( !KD( (~k⊕~k2⊕~r1⊕~r1.1) ) ▶₀ #vk.2 ) )
                        case acceptreader
                        by step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                      next
                        case initiatereader
                        by step( contradiction /* impossible chain */ )
                      next
                        case tag1
                        step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                          case d_0_fst
                          by step( contradiction /* impossible chain */ )
                        next
                          case d_0_snd
                          by step( solve( (#vr.6, 0) ~~> (#vk.2, 0) ) )
                        qed
                      qed
                    qed
                  next
                    case c_xor_case_02
                    step( solve( !KU( (~k⊕~k2⊕r0⊕~r1.1) ) @ #vk.3 ) )
                      case c_xor_case_1
                      step( solve( !KU( (~k⊕~k2⊕~r1.1) ) @ #vk.5 ) )
                        case c_xor_case_1
                        by step( solve( !KU( ~k2 ) @ #vk.7 ) )
                      next
                        case c_xor_case_2
                        by step( solve( !KU( ~k ) @ #vk.7 ) )
                      next
                        case c_xor_case_3
                        by step( contradiction /* cyclic */ )
                      next
                        case coerce
                        step( solve( !KD( (~k⊕~k2⊕~r1.1) ) ▶₀ #vk.3 ) )
                          case acceptreader
                          by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                        next
                          case initiatereader
                          by step( contradiction /* impossible chain */ )
                        next
                          case tag1
                          step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                            case d_0_fst
                            by step( contradiction /* impossible chain */ )
                          next
                            case d_0_snd
                            by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                          qed
                        qed
                      qed
                    next
                      case c_xor_case_2
                      by step( solve( !KU( ~k2 ) @ #vk.6 ) )
                    next
                      case c_xor_case_3
                      step( solve( !KU( (~k⊕~r1.1) ) @ #vk.5 ) )
                        case c_xor
                        by step( contradiction /* cyclic */ )
                      next
                        case coerce
                        step( solve( !KD( (~k⊕~r1.1) ) ▶₀ #vk.3 ) )
                          case acceptreader
                          by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                        next
                          case initiatereader
                          by step( contradiction /* impossible chain */ )
                        next
                          case tag1
                          step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                            case d_0_fst
                            by step( contradiction /* impossible chain */ )
                          next
                            case d_0_snd
                            by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                          qed
                        qed
                      qed
                    next
                      case c_xor_case_4
                      by step( solve( !KU( ~k ) @ #vk.6 ) )
                    next
                      case c_xor_case_5
                      step( solve( !KU( (~k2⊕~r1.1) ) @ #vk.5 ) )
                        case c_xor
                        by step( contradiction /* cyclic */ )
                      next
                        case coerce
                        step( solve( !KD( (~k2⊕~r1.1) ) ▶₀ #vk.3 ) )
                          case acceptreader
                          by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                        next
                          case initiatereader
                          by step( contradiction /* impossible chain */ )
                        next
                          case tag1
                          step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                            case d_0_fst
                            by step( contradiction /* impossible chain */ )
                          next
                            case d_0_snd
                            by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                          qed
                        qed
                      qed
                    next
                      case c_xor_case_6
                      step( solve( !KU( (r0⊕~r1.1) ) @ #vk.5 ) )
                        case c_xor
                        by step( contradiction /* cyclic */ )
                      next
                        case coerce
                        step( solve( !KD( (r0⊕~r1.1) ) ▶₀ #vk.3 ) )
                          case acceptreader
                          by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                        next
                          case initiatereader
                          by step( contradiction /* impossible chain */ )
                        next
                          case tag1
                          step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                            case d_0_fst
                            by step( contradiction /* impossible chain */ )
                          next
                            case d_0_snd
                            by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                          qed
                        qed
                      qed
                    next
                      case c_xor_case_7
                      by step( contradiction /* cyclic */ )
                    next
                      case coerce
                      step( solve( !KD( (~k⊕~k2⊕r0⊕~r1.1) ) ▶₀ #vk.2 ) )
                        case acceptreader
                        by step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                      next
                        case initiatereader
                        by step( contradiction /* impossible chain */ )
                      next
                        case tag1
                        step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                          case d_0_fst
                          by step( contradiction /* impossible chain */ )
                        next
                          case d_0_snd
                          by step( solve( (#vr.6, 0) ~~> (#vk.2, 0) ) )
                        qed
                      qed
                    qed
                  next
                    case c_xor_case_03
                    step( solve( !KU( (~k⊕~k2⊕~r1.1) ) @ #vk.3 ) )
                      case c_xor_case_1
                      by step( solve( !KU( ~k2 ) @ #vk.6 ) )
                    next
                      case c_xor_case_2
                      by step( solve( !KU( ~k ) @ #vk.6 ) )
                    next
                      case c_xor_case_3
                      by step( contradiction /* cyclic */ )
                    next
                      case coerce
                      step( solve( !KD( (~k⊕~k2⊕~r1.1) ) ▶₀ #vk.2 ) )
                        case acceptreader
                        by step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                      next
                        case initiatereader
                        by step( contradiction /* impossible chain */ )
                      next
                        case tag1
                        step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                          case d_0_fst
                          by step( contradiction /* impossible chain */ )
                        next
                          case d_0_snd
                          by step( solve( (#vr.6, 0) ~~> (#vk.2, 0) ) )
                        qed
                      qed
                    qed
                  next
                    case c_xor_case_04
                    by step( solve( !KU( ~k2 ) @ #vk.4 ) )
                  next
                    case c_xor_case_05
                    step( solve( !KU( (~k⊕~r1⊕~r1.1) ) @ #vk.3 ) )
                      case c_xor_case_1
                      step( solve( !KU( (~k2⊕r0) ) @ #vk.4 ) )
                        case c_xor
                        by step( solve( !KU( ~k2 ) @ #vk.7 ) )
                      next
                        case coerce
                        step( solve( !KD( (~k2⊕r0) ) ▶₀ #vk.3 ) )
                          case acceptreader
                          by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                        next
                          case initiatereader
                          by step( contradiction /* impossible chain */ )
                        next
                          case tag1
                          step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                            case d_0_fst
                            by step( contradiction /* impossible chain */ )
                          next
                            case d_0_snd
                            by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                          qed
                        qed
                      qed
                    next
                      case c_xor_case_2
                      by step( solve( !KU( ~k ) @ #vk.6 ) )
                    next
                      case c_xor_case_3
                      by step( contradiction /* cyclic */ )
                    next
                      case coerce
                      step( solve( !KD( (~k⊕~r1⊕~r1.1) ) ▶₀ #vk.2 ) )
                        case acceptreader
                        by step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                      next
                        case initiatereader
                        by step( contradiction /* impossible chain */ )
                      next
                        case tag1
                        step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                          case d_0_fst
                          by step( contradiction /* impossible chain */ )
                        next
                          case d_0_snd
                          by step( solve( (#vr.6, 0) ~~> (#vk.2, 0) ) )
                        qed
                      qed
                    qed
                  next
                    case c_xor_case_06
                    step( solve( !KU( (~k⊕r0⊕~r1.1) ) @ #vk.3 ) )
                      case c_xor_case_1
                      step( solve( !KU( (~k2⊕~r1) ) @ #vk.4 ) )
                        case c_xor
                        by step( solve( !KU( ~k2 ) @ #vk.7 ) )
                      next
                        case coerce
                        step( solve( !KD( (~k2⊕~r1) ) ▶₀ #vk.3 ) )
                          case acceptreader
                          by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                        next
                          case initiatereader
                          by step( contradiction /* impossible chain */ )
                        next
                          case tag1
                          step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                            case d_0_fst
                            by step( contradiction /* impossible chain */ )
                          next
                            case d_0_snd
                            by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                          qed
                        qed
                      qed
                    next
                      case c_xor_case_2
                      by step( solve( !KU( ~k ) @ #vk.6 ) )
                    next
                      case c_xor_case_3
                      by step( contradiction /* cyclic */ )
                    next
                      case coerce
                      step( solve( !KD( (~k⊕r0⊕~r1.1) ) ▶₀ #vk.2 ) )
                        case acceptreader
                        by step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                      next
                        case initiatereader
                        by step( contradiction /* impossible chain */ )
                      next
                        case tag1
                        step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                          case d_0_fst
                          by step( contradiction /* impossible chain */ )
                        next
                          case d_0_snd
                          by step( solve( (#vr.6, 0) ~~> (#vk.2, 0) ) )
                        qed
                      qed
                    qed
                  next
                    case c_xor_case_07
                    step( solve( !KU( (~k⊕~r1.1) ) @ #vk.3 ) )
                      case c_xor
                      by step( contradiction /* cyclic */ )
                    next
                      case coerce
                      step( solve( !KD( (~k⊕~r1.1) ) ▶₀ #vk.2 ) )
                        case acceptreader
                        by step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                      next
                        case initiatereader
                        by step( contradiction /* impossible chain */ )
                      next
                        case tag1
                        step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                          case d_0_fst
                          by step( contradiction /* impossible chain */ )
                        next
                          case d_0_snd
                          by step( solve( (#vr.6, 0) ~~> (#vk.2, 0) ) )
                        qed
                      qed
                    qed
                  next
                    case c_xor_case_08
                    by step( solve( !KU( ~k ) @ #vk.4 ) )
                  next
                    case c_xor_case_09
                    step( solve( !KU( (~k2⊕~r1⊕~r1.1) ) @ #vk.3 ) )
                      case c_xor_case_1
                      step( solve( !KU( (~k⊕r0) ) @ #vk.4 ) )
                        case c_xor
                        by step( solve( !KU( ~k ) @ #vk.7 ) )
                      next
                        case coerce
                        step( solve( !KD( (~k⊕r0) ) ▶₀ #vk.3 ) )
                          case acceptreader
                          by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                        next
                          case initiatereader
                          by step( contradiction /* impossible chain */ )
                        next
                          case tag1
                          step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                            case d_0_fst
                            by step( contradiction /* impossible chain */ )
                          next
                            case d_0_snd
                            by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                          qed
                        qed
                      qed
                    next
                      case c_xor_case_2
                      by step( solve( !KU( ~k2 ) @ #vk.6 ) )
                    next
                      case c_xor_case_3
                      by step( contradiction /* cyclic */ )
                    next
                      case coerce
                      step( solve( !KD( (~k2⊕~r1⊕~r1.1) ) ▶₀ #vk.2 ) )
                        case acceptreader
                        by step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                      next
                        case initiatereader
                        by step( contradiction /* impossible chain */ )
                      next
                        case tag1
                        step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                          case d_0_fst
                          by step( contradiction /* impossible chain */ )
                        next
                          case d_0_snd
                          by step( solve( (#vr.6, 0) ~~> (#vk.2, 0) ) )
                        qed
                      qed
                    qed
                  next
                    case c_xor_case_10
                    step( solve( !KU( (~k2⊕r0⊕~r1.1) ) @ #vk.3 ) )
                      case c_xor_case_1
                      step( solve( !KU( (~k⊕~r1) ) @ #vk.4 ) )
                        case c_xor
                        by step( solve( !KU( ~k ) @ #vk.7 ) )
                      next
                        case coerce
                        step( solve( !KD( (~k⊕~r1) ) ▶₀ #vk.3 ) )
                          case acceptreader
                          by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                        next
                          case initiatereader
                          by step( contradiction /* impossible chain */ )
                        next
                          case tag1
                          step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                            case d_0_fst
                            by step( contradiction /* impossible chain */ )
                          next
                            case d_0_snd
                            by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                          qed
                        qed
                      qed
                    next
                      case c_xor_case_2
                      by step( solve( !KU( ~k2 ) @ #vk.6 ) )
                    next
                      case c_xor_case_3
                      by step( contradiction /* cyclic */ )
                    next
                      case coerce
                      step( solve( !KD( (~k2⊕r0⊕~r1.1) ) ▶₀ #vk.2 ) )
                        case acceptreader
                        by step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                      next
                        case initiatereader
                        by step( contradiction /* impossible chain */ )
                      next
                        case tag1
                        step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                          case d_0_fst
                          by step( contradiction /* impossible chain */ )
                        next
                          case d_0_snd
                          by step( solve( (#vr.6, 0) ~~> (#vk.2, 0) ) )
                        qed
                      qed
                    qed
                  next
                    case c_xor_case_11
                    step( solve( !KU( (~k2⊕~r1.1) ) @ #vk.3 ) )
                      case c_xor
                      by step( contradiction /* cyclic */ )
                    next
                      case coerce
                      step( solve( !KD( (~k2⊕~r1.1) ) ▶₀ #vk.2 ) )
                        case acceptreader
                        by step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                      next
                        case initiatereader
                        by step( contradiction /* impossible chain */ )
                      next
                        case tag1
                        step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                          case d_0_fst
                          by step( contradiction /* impossible chain */ )
                        next
                          case d_0_snd
                          by step( solve( (#vr.6, 0) ~~> (#vk.2, 0) ) )
                        qed
                      qed
                    qed
                  next
                    case c_xor_case_12
                    step( solve( !KU( (~r1⊕r0⊕~r1.1) ) @ #vk.3 ) )
                      case c_xor_case_1
                      step( solve( !KU( (~k⊕~k2) ) @ #vk.4 ) )
                        case c_xor
                        by step( solve( !KU( ~k2 ) @ #vk.6 ) )
                      next
                        case coerce
                        step( solve( !KD( (~k⊕~k2) ) ▶₀ #vk.3 ) )
                          case acceptreader
                          by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                        next
                          case initiatereader
                          by step( contradiction /* impossible chain */ )
                        next
                          case tag1
                          step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                            case d_0_fst
                            by step( contradiction /* impossible chain */ )
                          next
                            case d_0_snd
                            by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                          qed
                        qed
                      qed
                    next
                      case c_xor_case_2
                      step( solve( !KU( (~k⊕~k2) ) @ #vk.4 ) )
                        case c_xor
                        by step( solve( !KU( ~k2 ) @ #vk.7 ) )
                      next
                        case coerce
                        step( solve( !KD( (~k⊕~k2) ) ▶₀ #vk.3 ) )
                          case acceptreader
                          by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                        next
                          case initiatereader
                          by step( contradiction /* impossible chain */ )
                        next
                          case tag1
                          step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                            case d_0_fst
                            by step( contradiction /* impossible chain */ )
                          next
                            case d_0_snd
                            by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                          qed
                        qed
                      qed
                    next
                      case c_xor_case_3
                      by step( contradiction /* cyclic */ )
                    next
                      case coerce
                      step( solve( !KD( (~r1⊕r0⊕~r1.1) ) ▶₀ #vk.2 ) )
                        case acceptreader
                        by step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                      next
                        case initiatereader
                        by step( contradiction /* impossible chain */ )
                      next
                        case tag1
                        step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                          case d_0_fst
                          by step( contradiction /* impossible chain */ )
                        next
                          case d_0_snd
                          by step( solve( (#vr.6, 0) ~~> (#vk.2, 0) ) )
                        qed
                      qed
                    qed
                  next
                    case c_xor_case_13
                    step( solve( !KU( (~r1⊕~r1.1) ) @ #vk.3 ) )
                      case c_xor
                      by step( contradiction /* cyclic */ )
                    next
                      case coerce
                      step( solve( !KD( (~r1⊕~r1.1) ) ▶₀ #vk.2 ) )
                        case acceptreader
                        by step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                      next
                        case initiatereader
                        by step( contradiction /* impossible chain */ )
                      next
                        case tag1
                        step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                          case d_0_fst
                          by step( contradiction /* impossible chain */ )
                        next
                          case d_0_snd
                          by step( solve( (#vr.6, 0) ~~> (#vk.2, 0) ) )
                        qed
                      qed
                    qed
                  next
                    case c_xor_case_14
                    step( solve( !KU( (r0⊕~r1.1) ) @ #vk.3 ) )
                      case c_xor
                      by step( contradiction /* cyclic */ )
                    next
                      case coerce
                      step( solve( !KD( (r0⊕~r1.1) ) ▶₀ #vk.2 ) )
                        case acceptreader
                        by step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                      next
                        case initiatereader
                        by step( contradiction /* impossible chain */ )
                      next
                        case tag1
                        step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                          case d_0_fst
                          by step( contradiction /* impossible chain */ )
                        next
                          case d_0_snd
                          by step( solve( (#vr.6, 0) ~~> (#vk.2, 0) ) )
                        qed
                      qed
                    qed
                  next
                    case c_xor_case_15
                    by step( contradiction /* cyclic */ )
                  next
                    case coerce
                    step( solve( !KD( (~k⊕~k2⊕~r1⊕r0⊕~r1.1) ) ▶₀ #vk.1 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.1, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_3
                  step( solve( !KU( (~k2⊕x⊕~r1.1) ) @ #vk.1 ) )
                    case c_xor_case_1
                    step( solve( !KU( (~k⊕~r1⊕x) ) @ #vk.2 ) )
                      case c_xor_case_1
                      step( solve( !KU( (~k2⊕~r1.1) ) @ #vk.3 ) )
                        case c_xor
                        by step( contradiction /* cyclic */ )
                      next
                        case coerce
                        step( solve( !KD( (~k2⊕~r1.1) ) ▶₀ #vk.3 ) )
                          case acceptreader
                          by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                        next
                          case initiatereader
                          by step( contradiction /* impossible chain */ )
                        next
                          case tag1
                          step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                            case d_0_fst
                            by step( contradiction /* impossible chain */ )
                          next
                            case d_0_snd
                            by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                          qed
                        qed
                      qed
                    next
                      case c_xor_case_2
                      by step( solve( !KU( ~k ) @ #vk.6 ) )
                    next
                      case c_xor_case_3
                      step( solve( !KU( (~k2⊕~r1.1) ) @ #vk.3 ) )
                        case c_xor
                        by step( solve( !KU( ~k2 ) @ #vk.7 ) )
                      next
                        case coerce
                        step( solve( !KD( (~k2⊕~r1.1) ) ▶₀ #vk.3 ) )
                          case acceptreader
                          by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                        next
                          case initiatereader
                          by step( contradiction /* impossible chain */ )
                        next
                          case tag1
                          step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                            case d_0_fst
                            by step( contradiction /* impossible chain */ )
                          next
                            case d_0_snd
                            by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                          qed
                        qed
                      qed
                    next
                      case coerce
                      step( solve( !KD( (~k⊕~r1⊕x) ) ▶₀ #vk.2 ) )
                        case acceptreader
                        by step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                      next
                        case initiatereader
                        by step( contradiction /* impossible chain */ )
                      next
                        case tag1
                        step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                          case d_0_fst
                          by step( contradiction /* impossible chain */ )
                        next
                          case d_0_snd
                          by step( solve( (#vr.6, 0) ~~> (#vk.2, 0) ) )
                        qed
                      qed
                    qed
                  next
                    case c_xor_case_2
                    by step( solve( !KU( ~k2 ) @ #vk.4 ) )
                  next
                    case c_xor_case_3
                    step( solve( !KU( (~k⊕~r1⊕x) ) @ #vk.2 ) )
                      case c_xor_case_1
                      by step( contradiction /* cyclic */ )
                    next
                      case c_xor_case_2
                      by step( solve( !KU( ~k ) @ #vk.6 ) )
                    next
                      case c_xor_case_3
                      step( solve( !KU( (~k2⊕x) ) @ #vk.4 ) )
                        case c_xor
                        by step( solve( !KU( ~k2 ) @ #vk.7 ) )
                      next
                        case coerce
                        step( solve( !KD( (~k2⊕x) ) ▶₀ #vk.3 ) )
                          case acceptreader
                          by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                        next
                          case initiatereader
                          by step( contradiction /* impossible chain */ )
                        next
                          case tag1
                          step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                            case d_0_fst
                            by step( contradiction /* impossible chain */ )
                          next
                            case d_0_snd
                            by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                          qed
                        qed
                      qed
                    next
                      case coerce
                      step( solve( !KD( (~k⊕~r1⊕x) ) ▶₀ #vk.2 ) )
                        case acceptreader
                        by step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                      next
                        case initiatereader
                        by step( contradiction /* impossible chain */ )
                      next
                        case tag1
                        step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                          case d_0_fst
                          by step( contradiction /* impossible chain */ )
                        next
                          case d_0_snd
                          by step( solve( (#vr.6, 0) ~~> (#vk.2, 0) ) )
                        qed
                      qed
                    qed
                  next
                    case coerce
                    step( solve( !KD( (~k2⊕x⊕~r1.1) ) ▶₀ #vk.1 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.1, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_4
                  by step( solve( !KU( ~k2 ) @ #vk.1 ) )
                next
                  case split_case_5
                  step( solve( !KU( (~k2⊕x) ) @ #vk.1 ) )
                    case c_xor
                    by step( solve( !KU( ~k2 ) @ #vk.4 ) )
                  next
                    case coerce
                    step( solve( !KD( (~k2⊕x) ) ▶₀ #vk.1 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.1, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_6
                  step( solve( !KU( (~k⊕~k2⊕~r1) ) @ #vk.2 ) )
                    case c_xor_case_1
                    by step( solve( !KU( ~k2 ) @ #vk.4 ) )
                  next
                    case c_xor_case_2
                    by step( solve( !KU( ~k ) @ #vk.4 ) )
                  next
                    case c_xor_case_3
                    by step( contradiction /* cyclic */ )
                  next
                    case coerce
                    step( solve( !KD( (~k⊕~k2⊕~r1) ) ▶₀ #vk.1 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.1, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_7
                  step( solve( !KU( (x⊕~r1.1) ) @ #vk.1 ) )
                    case c_xor
                    step( solve( !KU( (~k⊕~k2⊕~r1⊕x) ) @ #vk.2 ) )
                      case c_xor_case_1
                      by step( contradiction /* cyclic */ )
                    next
                      case c_xor_case_2
                      by step( solve( !KU( ~k2 ) @ #vk.6 ) )
                    next
                      case c_xor_case_3
                      step( solve( !KU( (~k⊕x) ) @ #vk.5 ) )
                        case c_xor
                        by step( solve( !KU( ~k ) @ #vk.7 ) )
                      next
                        case coerce
                        step( solve( !KD( (~k⊕x) ) ▶₀ #vk.3 ) )
                          case acceptreader
                          by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                        next
                          case initiatereader
                          by step( contradiction /* impossible chain */ )
                        next
                          case tag1
                          step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                            case d_0_fst
                            by step( contradiction /* impossible chain */ )
                          next
                            case d_0_snd
                            by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                          qed
                        qed
                      qed
                    next
                      case c_xor_case_4
                      by step( solve( !KU( ~k ) @ #vk.6 ) )
                    next
                      case c_xor_case_5
                      step( solve( !KU( (~k2⊕x) ) @ #vk.5 ) )
                        case c_xor
                        by step( solve( !KU( ~k2 ) @ #vk.7 ) )
                      next
                        case coerce
                        step( solve( !KD( (~k2⊕x) ) ▶₀ #vk.3 ) )
                          case acceptreader
                          by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                        next
                          case initiatereader
                          by step( contradiction /* impossible chain */ )
                        next
                          case tag1
                          step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                            case d_0_fst
                            by step( contradiction /* impossible chain */ )
                          next
                            case d_0_snd
                            by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                          qed
                        qed
                      qed
                    next
                      case c_xor_case_6
                      step( solve( !KU( (~r1⊕x) ) @ #vk.5 ) )
                        case c_xor
                        by step( contradiction /* cyclic */ )
                      next
                        case coerce
                        step( solve( !KD( (~r1⊕x) ) ▶₀ #vk.3 ) )
                          case acceptreader
                          by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                        next
                          case initiatereader
                          by step( contradiction /* impossible chain */ )
                        next
                          case tag1
                          step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                            case d_0_fst
                            by step( contradiction /* impossible chain */ )
                          next
                            case d_0_snd
                            by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                          qed
                        qed
                      qed
                    next
                      case c_xor_case_7
                      step( solve( !KU( (~k⊕~k2⊕~r1) ) @ #vk.5 ) )
                        case c_xor_case_1
                        by step( solve( !KU( ~k2 ) @ #vk.7 ) )
                      next
                        case c_xor_case_2
                        by step( solve( !KU( ~k ) @ #vk.7 ) )
                      next
                        case c_xor_case_3
                        by step( contradiction /* cyclic */ )
                      next
                        case coerce
                        step( solve( !KD( (~k⊕~k2⊕~r1) ) ▶₀ #vk.3 ) )
                          case acceptreader
                          by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                        next
                          case initiatereader
                          by step( contradiction /* impossible chain */ )
                        next
                          case tag1
                          step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                            case d_0_fst
                            by step( contradiction /* impossible chain */ )
                          next
                            case d_0_snd
                            by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                          qed
                        qed
                      qed
                    next
                      case coerce
                      step( solve( !KD( (~k⊕~k2⊕~r1⊕x) ) ▶₀ #vk.2 ) )
                        case acceptreader
                        by step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                      next
                        case initiatereader
                        by step( contradiction /* impossible chain */ )
                      next
                        case tag1
                        step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                          case d_0_fst
                          by step( contradiction /* impossible chain */ )
                        next
                          case d_0_snd
                          by step( solve( (#vr.6, 0) ~~> (#vk.2, 0) ) )
                        qed
                      qed
                    qed
                  next
                    case coerce
                    step( solve( !KD( (x⊕~r1.1) ) ▶₀ #vk.1 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.1, 0) ) )
                      qed
                    qed
                  qed
                qed
              next
                case split_case_4
                step( solve( !KU( zero ) @ #vk.1 ) )
                  case c_zero
                  step( solve( splitEqs(1) ) )
                    case split
                    step( solve( !KU( (~k⊕~k2⊕~r1⊕~r1.1) ) @ #vk.2 ) )
                      case c_xor_case_1
                      step( solve( !KU( (~k⊕~k2⊕~r1.1) ) @ #vk.3 ) )
                        case c_xor_case_1
                        by step( solve( !KU( ~k2 ) @ #vk.6 ) )
                      next
                        case c_xor_case_2
                        by step( solve( !KU( ~k ) @ #vk.6 ) )
                      next
                        case c_xor_case_3
                        by step( contradiction /* cyclic */ )
                      next
                        case coerce
                        step( solve( !KD( (~k⊕~k2⊕~r1.1) ) ▶₀ #vk.3 ) )
                          case acceptreader
                          by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                        next
                          case initiatereader
                          by step( contradiction /* impossible chain */ )
                        next
                          case tag1
                          step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                            case d_0_fst
                            by step( contradiction /* impossible chain */ )
                          next
                            case d_0_snd
                            by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                          qed
                        qed
                      qed
                    next
                      case c_xor_case_2
                      by step( solve( !KU( ~k2 ) @ #vk.4 ) )
                    next
                      case c_xor_case_3
                      step( solve( !KU( (~k⊕~r1.1) ) @ #vk.3 ) )
                        case c_xor
                        by step( contradiction /* cyclic */ )
                      next
                        case coerce
                        step( solve( !KD( (~k⊕~r1.1) ) ▶₀ #vk.3 ) )
                          case acceptreader
                          by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                        next
                          case initiatereader
                          by step( contradiction /* impossible chain */ )
                        next
                          case tag1
                          step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                            case d_0_fst
                            by step( contradiction /* impossible chain */ )
                          next
                            case d_0_snd
                            by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                          qed
                        qed
                      qed
                    next
                      case c_xor_case_4
                      by step( solve( !KU( ~k ) @ #vk.4 ) )
                    next
                      case c_xor_case_5
                      step( solve( !KU( (~k2⊕~r1.1) ) @ #vk.3 ) )
                        case c_xor
                        by step( contradiction /* cyclic */ )
                      next
                        case coerce
                        step( solve( !KD( (~k2⊕~r1.1) ) ▶₀ #vk.3 ) )
                          case acceptreader
                          by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                        next
                          case initiatereader
                          by step( contradiction /* impossible chain */ )
                        next
                          case tag1
                          step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                            case d_0_fst
                            by step( contradiction /* impossible chain */ )
                          next
                            case d_0_snd
                            by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                          qed
                        qed
                      qed
                    next
                      case c_xor_case_6
                      step( solve( !KU( (~r1⊕~r1.1) ) @ #vk.3 ) )
                        case c_xor
                        by step( contradiction /* cyclic */ )
                      next
                        case coerce
                        step( solve( !KD( (~r1⊕~r1.1) ) ▶₀ #vk.3 ) )
                          case acceptreader
                          by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                        next
                          case initiatereader
                          by step( contradiction /* impossible chain */ )
                        next
                          case tag1
                          step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                            case d_0_fst
                            by step( contradiction /* impossible chain */ )
                          next
                            case d_0_snd
                            by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                          qed
                        qed
                      qed
                    next
                      case c_xor_case_7
                      by step( contradiction /* cyclic */ )
                    next
                      case coerce
                      step( solve( !KD( (~k⊕~k2⊕~r1⊕~r1.1) ) ▶₀ #vk.2 ) )
                        case acceptreader
                        by step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                      next
                        case initiatereader
                        by step( contradiction /* impossible chain */ )
                      next
                        case tag1
                        step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                          case d_0_fst
                          by step( contradiction /* impossible chain */ )
                        next
                          case d_0_snd
                          by step( solve( (#vr.6, 0) ~~> (#vk.2, 0) ) )
                        qed
                      qed
                    qed
                  qed
                next
                  case coerce
                  step( solve( !KD( zero ) ▶₀ #vk.1 ) )
                    case acceptreader
                    by step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.6, 0) ~~> (#vk.1, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_5
                step( solve( !KU( (~k⊕~r1) ) @ #vk.1 ) )
                  case c_xor
                  by step( contradiction /* cyclic */ )
                next
                  case coerce
                  step( solve( !KD( (~k⊕~r1) ) ▶₀ #vk.1 ) )
                    case acceptreader
                    by step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.6, 0) ~~> (#vk.1, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_6
                step( solve( !KU( (~k⊕~r1⊕z) ) @ #vk.1 ) )
                  case c_xor_case_1
                  by step( contradiction /* cyclic */ )
                next
                  case c_xor_case_2
                  by step( solve( !KU( ~k ) @ #vk.4 ) )
                next
                  case c_xor_case_3
                  step( solve( !KU( (~k⊕~r1) ) @ #vk.4 ) )
                    case c_xor
                    by step( contradiction /* cyclic */ )
                  next
                    case coerce
                    step( solve( !KD( (~k⊕~r1) ) ▶₀ #vk.2 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.2, 0) ) )
                      qed
                    qed
                  qed
                next
                  case coerce
                  step( solve( !KD( (~k⊕~r1⊕z) ) ▶₀ #vk.1 ) )
                    case acceptreader
                    by step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.6, 0) ~~> (#vk.1, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_7
                step( solve( !KU( (~r1⊕x) ) @ #vk.1 ) )
                  case c_xor
                  by step( contradiction /* cyclic */ )
                next
                  case coerce
                  step( solve( !KD( (~r1⊕x) ) ▶₀ #vk.1 ) )
                    case acceptreader
                    by step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.6, 0) ~~> (#vk.1, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_8
                step( solve( !KU( (~k⊕x) ) @ #vk.1 ) )
                  case c_xor
                  by step( solve( !KU( ~k ) @ #vk.4 ) )
                next
                  case coerce
                  step( solve( !KD( (~k⊕x) ) ▶₀ #vk.1 ) )
                    case acceptreader
                    by step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.6, 0) ~~> (#vk.1, 0) ) )
                    qed
                  qed
                qed
              qed
            next
              case tag1_case_3
              step( solve( splitEqs(0) ) )
                case split_case_1
                by step( solve( !KU( ~k ) @ #vk.1 ) )
              next
                case split_case_2
                by step( contradiction /* cyclic */ )
              next
                case split_case_3
                step( solve( splitEqs(1) ) )
                  case split_case_1
                  step( solve( !KU( (~k2⊕~r1.1) ) @ #vk.1 ) )
                    case c_xor
                    by step( solve( !KU( ~k2 ) @ #vk.4 ) )
                  next
                    case coerce
                    step( solve( !KD( (~k2⊕~r1.1) ) ▶₀ #vk.1 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.1, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_2
                  step( solve( !KU( (~k⊕~k2⊕~r1⊕r0⊕~r1.1) ) @ #vk.2 ) )
                    case c_xor_case_01
                    step( solve( !KU( (~k⊕~k2⊕~r1⊕~r1.1) ) @ #vk.3 ) )
                      case c_xor_case_1
                      step( solve( !KU( (~k⊕~k2⊕~r1.1) ) @ #vk.4 ) )
                        case c_xor_case_1
                        by step( solve( !KU( ~k2 ) @ #vk.7 ) )
                      next
                        case c_xor_case_2
                        by step( solve( !KU( ~k ) @ #vk.7 ) )
                      next
                        case c_xor_case_3
                        by step( contradiction /* cyclic */ )
                      next
                        case coerce
                        step( solve( !KD( (~k⊕~k2⊕~r1.1) ) ▶₀ #vk.3 ) )
                          case acceptreader
                          by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                        next
                          case initiatereader
                          by step( contradiction /* impossible chain */ )
                        next
                          case tag1
                          step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                            case d_0_fst
                            by step( contradiction /* impossible chain */ )
                          next
                            case d_0_snd
                            by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                          qed
                        qed
                      qed
                    next
                      case c_xor_case_2
                      by step( solve( !KU( ~k2 ) @ #vk.5 ) )
                    next
                      case c_xor_case_3
                      step( solve( !KU( (~k⊕~r1.1) ) @ #vk.4 ) )
                        case c_xor
                        by step( contradiction /* cyclic */ )
                      next
                        case coerce
                        step( solve( !KD( (~k⊕~r1.1) ) ▶₀ #vk.3 ) )
                          case acceptreader
                          by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                        next
                          case initiatereader
                          by step( contradiction /* impossible chain */ )
                        next
                          case tag1
                          step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                            case d_0_fst
                            by step( contradiction /* impossible chain */ )
                          next
                            case d_0_snd
                            by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                          qed
                        qed
                      qed
                    next
                      case c_xor_case_4
                      by step( solve( !KU( ~k ) @ #vk.5 ) )
                    next
                      case c_xor_case_5
                      step( solve( !KU( (~k2⊕~r1.1) ) @ #vk.4 ) )
                        case c_xor
                        by step( contradiction /* cyclic */ )
                      next
                        case coerce
                        step( solve( !KD( (~k2⊕~r1.1) ) ▶₀ #vk.3 ) )
                          case acceptreader
                          by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                        next
                          case initiatereader
                          by step( contradiction /* impossible chain */ )
                        next
                          case tag1
                          step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                            case d_0_fst
                            by step( contradiction /* impossible chain */ )
                          next
                            case d_0_snd
                            by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                          qed
                        qed
                      qed
                    next
                      case c_xor_case_6
                      step( solve( !KU( (~r1⊕~r1.1) ) @ #vk.4 ) )
                        case c_xor
                        by step( contradiction /* cyclic */ )
                      next
                        case coerce
                        step( solve( !KD( (~r1⊕~r1.1) ) ▶₀ #vk.3 ) )
                          case acceptreader
                          by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                        next
                          case initiatereader
                          by step( contradiction /* impossible chain */ )
                        next
                          case tag1
                          step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                            case d_0_fst
                            by step( contradiction /* impossible chain */ )
                          next
                            case d_0_snd
                            by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                          qed
                        qed
                      qed
                    next
                      case c_xor_case_7
                      by step( contradiction /* cyclic */ )
                    next
                      case coerce
                      step( solve( !KD( (~k⊕~k2⊕~r1⊕~r1.1) ) ▶₀ #vk.2 ) )
                        case acceptreader
                        by step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                      next
                        case initiatereader
                        by step( contradiction /* impossible chain */ )
                      next
                        case tag1
                        step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                          case d_0_fst
                          by step( contradiction /* impossible chain */ )
                        next
                          case d_0_snd
                          by step( solve( (#vr.6, 0) ~~> (#vk.2, 0) ) )
                        qed
                      qed
                    qed
                  next
                    case c_xor_case_02
                    step( solve( !KU( (~k⊕~k2⊕r0⊕~r1.1) ) @ #vk.3 ) )
                      case c_xor_case_1
                      step( solve( !KU( (~k⊕~k2⊕~r1.1) ) @ #vk.5 ) )
                        case c_xor_case_1
                        by step( solve( !KU( ~k2 ) @ #vk.7 ) )
                      next
                        case c_xor_case_2
                        by step( solve( !KU( ~k ) @ #vk.7 ) )
                      next
                        case c_xor_case_3
                        by step( contradiction /* cyclic */ )
                      next
                        case coerce
                        step( solve( !KD( (~k⊕~k2⊕~r1.1) ) ▶₀ #vk.3 ) )
                          case acceptreader
                          by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                        next
                          case initiatereader
                          by step( contradiction /* impossible chain */ )
                        next
                          case tag1
                          step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                            case d_0_fst
                            by step( contradiction /* impossible chain */ )
                          next
                            case d_0_snd
                            by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                          qed
                        qed
                      qed
                    next
                      case c_xor_case_2
                      by step( solve( !KU( ~k2 ) @ #vk.6 ) )
                    next
                      case c_xor_case_3
                      step( solve( !KU( (~k⊕~r1.1) ) @ #vk.5 ) )
                        case c_xor
                        by step( contradiction /* cyclic */ )
                      next
                        case coerce
                        step( solve( !KD( (~k⊕~r1.1) ) ▶₀ #vk.3 ) )
                          case acceptreader
                          by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                        next
                          case initiatereader
                          by step( contradiction /* impossible chain */ )
                        next
                          case tag1
                          step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                            case d_0_fst
                            by step( contradiction /* impossible chain */ )
                          next
                            case d_0_snd
                            by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                          qed
                        qed
                      qed
                    next
                      case c_xor_case_4
                      by step( solve( !KU( ~k ) @ #vk.6 ) )
                    next
                      case c_xor_case_5
                      step( solve( !KU( (~k2⊕~r1.1) ) @ #vk.5 ) )
                        case c_xor
                        by step( contradiction /* cyclic */ )
                      next
                        case coerce
                        step( solve( !KD( (~k2⊕~r1.1) ) ▶₀ #vk.3 ) )
                          case acceptreader
                          by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                        next
                          case initiatereader
                          by step( contradiction /* impossible chain */ )
                        next
                          case tag1
                          step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                            case d_0_fst
                            by step( contradiction /* impossible chain */ )
                          next
                            case d_0_snd
                            by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                          qed
                        qed
                      qed
                    next
                      case c_xor_case_6
                      step( solve( !KU( (r0⊕~r1.1) ) @ #vk.5 ) )
                        case c_xor
                        by step( contradiction /* cyclic */ )
                      next
                        case coerce
                        step( solve( !KD( (r0⊕~r1.1) ) ▶₀ #vk.3 ) )
                          case acceptreader
                          by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                        next
                          case initiatereader
                          by step( contradiction /* impossible chain */ )
                        next
                          case tag1
                          step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                            case d_0_fst
                            by step( contradiction /* impossible chain */ )
                          next
                            case d_0_snd
                            by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                          qed
                        qed
                      qed
                    next
                      case c_xor_case_7
                      by step( contradiction /* cyclic */ )
                    next
                      case coerce
                      step( solve( !KD( (~k⊕~k2⊕r0⊕~r1.1) ) ▶₀ #vk.2 ) )
                        case acceptreader
                        by step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                      next
                        case initiatereader
                        by step( contradiction /* impossible chain */ )
                      next
                        case tag1
                        step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                          case d_0_fst
                          by step( contradiction /* impossible chain */ )
                        next
                          case d_0_snd
                          by step( solve( (#vr.6, 0) ~~> (#vk.2, 0) ) )
                        qed
                      qed
                    qed
                  next
                    case c_xor_case_03
                    step( solve( !KU( (~k⊕~k2⊕~r1.1) ) @ #vk.3 ) )
                      case c_xor_case_1
                      by step( solve( !KU( ~k2 ) @ #vk.6 ) )
                    next
                      case c_xor_case_2
                      by step( solve( !KU( ~k ) @ #vk.6 ) )
                    next
                      case c_xor_case_3
                      by step( contradiction /* cyclic */ )
                    next
                      case coerce
                      step( solve( !KD( (~k⊕~k2⊕~r1.1) ) ▶₀ #vk.2 ) )
                        case acceptreader
                        by step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                      next
                        case initiatereader
                        by step( contradiction /* impossible chain */ )
                      next
                        case tag1
                        step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                          case d_0_fst
                          by step( contradiction /* impossible chain */ )
                        next
                          case d_0_snd
                          by step( solve( (#vr.6, 0) ~~> (#vk.2, 0) ) )
                        qed
                      qed
                    qed
                  next
                    case c_xor_case_04
                    by step( solve( !KU( ~k2 ) @ #vk.4 ) )
                  next
                    case c_xor_case_05
                    step( solve( !KU( (~k⊕~r1⊕~r1.1) ) @ #vk.3 ) )
                      case c_xor_case_1
                      step( solve( !KU( (~k2⊕r0) ) @ #vk.4 ) )
                        case c_xor
                        by step( solve( !KU( ~k2 ) @ #vk.7 ) )
                      next
                        case coerce
                        step( solve( !KD( (~k2⊕r0) ) ▶₀ #vk.3 ) )
                          case acceptreader
                          by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                        next
                          case initiatereader
                          by step( contradiction /* impossible chain */ )
                        next
                          case tag1
                          step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                            case d_0_fst
                            by step( contradiction /* impossible chain */ )
                          next
                            case d_0_snd
                            by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                          qed
                        qed
                      qed
                    next
                      case c_xor_case_2
                      by step( solve( !KU( ~k ) @ #vk.6 ) )
                    next
                      case c_xor_case_3
                      by step( contradiction /* cyclic */ )
                    next
                      case coerce
                      step( solve( !KD( (~k⊕~r1⊕~r1.1) ) ▶₀ #vk.2 ) )
                        case acceptreader
                        by step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                      next
                        case initiatereader
                        by step( contradiction /* impossible chain */ )
                      next
                        case tag1
                        step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                          case d_0_fst
                          by step( contradiction /* impossible chain */ )
                        next
                          case d_0_snd
                          by step( solve( (#vr.6, 0) ~~> (#vk.2, 0) ) )
                        qed
                      qed
                    qed
                  next
                    case c_xor_case_06
                    step( solve( !KU( (~k⊕r0⊕~r1.1) ) @ #vk.3 ) )
                      case c_xor_case_1
                      step( solve( !KU( (~k2⊕~r1) ) @ #vk.4 ) )
                        case c_xor
                        by step( solve( !KU( ~k2 ) @ #vk.7 ) )
                      next
                        case coerce
                        step( solve( !KD( (~k2⊕~r1) ) ▶₀ #vk.3 ) )
                          case acceptreader
                          by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                        next
                          case initiatereader
                          by step( contradiction /* impossible chain */ )
                        next
                          case tag1
                          step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                            case d_0_fst
                            by step( contradiction /* impossible chain */ )
                          next
                            case d_0_snd
                            by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                          qed
                        qed
                      qed
                    next
                      case c_xor_case_2
                      by step( solve( !KU( ~k ) @ #vk.6 ) )
                    next
                      case c_xor_case_3
                      by step( contradiction /* cyclic */ )
                    next
                      case coerce
                      step( solve( !KD( (~k⊕r0⊕~r1.1) ) ▶₀ #vk.2 ) )
                        case acceptreader
                        by step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                      next
                        case initiatereader
                        by step( contradiction /* impossible chain */ )
                      next
                        case tag1
                        step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                          case d_0_fst
                          by step( contradiction /* impossible chain */ )
                        next
                          case d_0_snd
                          by step( solve( (#vr.6, 0) ~~> (#vk.2, 0) ) )
                        qed
                      qed
                    qed
                  next
                    case c_xor_case_07
                    step( solve( !KU( (~k⊕~r1.1) ) @ #vk.3 ) )
                      case c_xor
                      by step( contradiction /* cyclic */ )
                    next
                      case coerce
                      step( solve( !KD( (~k⊕~r1.1) ) ▶₀ #vk.2 ) )
                        case acceptreader
                        by step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                      next
                        case initiatereader
                        by step( contradiction /* impossible chain */ )
                      next
                        case tag1
                        step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                          case d_0_fst
                          by step( contradiction /* impossible chain */ )
                        next
                          case d_0_snd
                          by step( solve( (#vr.6, 0) ~~> (#vk.2, 0) ) )
                        qed
                      qed
                    qed
                  next
                    case c_xor_case_08
                    by step( solve( !KU( ~k ) @ #vk.4 ) )
                  next
                    case c_xor_case_09
                    step( solve( !KU( (~k2⊕~r1⊕~r1.1) ) @ #vk.3 ) )
                      case c_xor_case_1
                      step( solve( !KU( (~k⊕r0) ) @ #vk.4 ) )
                        case c_xor
                        by step( solve( !KU( ~k ) @ #vk.7 ) )
                      next
                        case coerce
                        step( solve( !KD( (~k⊕r0) ) ▶₀ #vk.3 ) )
                          case acceptreader
                          by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                        next
                          case initiatereader
                          by step( contradiction /* impossible chain */ )
                        next
                          case tag1
                          step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                            case d_0_fst
                            by step( contradiction /* impossible chain */ )
                          next
                            case d_0_snd
                            by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                          qed
                        qed
                      qed
                    next
                      case c_xor_case_2
                      by step( solve( !KU( ~k2 ) @ #vk.6 ) )
                    next
                      case c_xor_case_3
                      by step( contradiction /* cyclic */ )
                    next
                      case coerce
                      step( solve( !KD( (~k2⊕~r1⊕~r1.1) ) ▶₀ #vk.2 ) )
                        case acceptreader
                        by step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                      next
                        case initiatereader
                        by step( contradiction /* impossible chain */ )
                      next
                        case tag1
                        step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                          case d_0_fst
                          by step( contradiction /* impossible chain */ )
                        next
                          case d_0_snd
                          by step( solve( (#vr.6, 0) ~~> (#vk.2, 0) ) )
                        qed
                      qed
                    qed
                  next
                    case c_xor_case_10
                    step( solve( !KU( (~k2⊕r0⊕~r1.1) ) @ #vk.3 ) )
                      case c_xor_case_1
                      step( solve( !KU( (~k⊕~r1) ) @ #vk.4 ) )
                        case c_xor
                        by step( solve( !KU( ~k ) @ #vk.7 ) )
                      next
                        case coerce
                        step( solve( !KD( (~k⊕~r1) ) ▶₀ #vk.3 ) )
                          case acceptreader
                          by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                        next
                          case initiatereader
                          by step( contradiction /* impossible chain */ )
                        next
                          case tag1
                          step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                            case d_0_fst
                            by step( contradiction /* impossible chain */ )
                          next
                            case d_0_snd
                            by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                          qed
                        qed
                      qed
                    next
                      case c_xor_case_2
                      by step( solve( !KU( ~k2 ) @ #vk.6 ) )
                    next
                      case c_xor_case_3
                      by step( contradiction /* cyclic */ )
                    next
                      case coerce
                      step( solve( !KD( (~k2⊕r0⊕~r1.1) ) ▶₀ #vk.2 ) )
                        case acceptreader
                        by step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                      next
                        case initiatereader
                        by step( contradiction /* impossible chain */ )
                      next
                        case tag1
                        step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                          case d_0_fst
                          by step( contradiction /* impossible chain */ )
                        next
                          case d_0_snd
                          by step( solve( (#vr.6, 0) ~~> (#vk.2, 0) ) )
                        qed
                      qed
                    qed
                  next
                    case c_xor_case_11
                    step( solve( !KU( (~k2⊕~r1.1) ) @ #vk.3 ) )
                      case c_xor
                      by step( contradiction /* cyclic */ )
                    next
                      case coerce
                      step( solve( !KD( (~k2⊕~r1.1) ) ▶₀ #vk.2 ) )
                        case acceptreader
                        by step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                      next
                        case initiatereader
                        by step( contradiction /* impossible chain */ )
                      next
                        case tag1
                        step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                          case d_0_fst
                          by step( contradiction /* impossible chain */ )
                        next
                          case d_0_snd
                          by step( solve( (#vr.6, 0) ~~> (#vk.2, 0) ) )
                        qed
                      qed
                    qed
                  next
                    case c_xor_case_12
                    step( solve( !KU( (~r1⊕r0⊕~r1.1) ) @ #vk.3 ) )
                      case c_xor_case_1
                      step( solve( !KU( (~k⊕~k2) ) @ #vk.4 ) )
                        case c_xor
                        by step( solve( !KU( ~k2 ) @ #vk.6 ) )
                      next
                        case coerce
                        step( solve( !KD( (~k⊕~k2) ) ▶₀ #vk.3 ) )
                          case acceptreader
                          by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                        next
                          case initiatereader
                          by step( contradiction /* impossible chain */ )
                        next
                          case tag1
                          step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                            case d_0_fst
                            by step( contradiction /* impossible chain */ )
                          next
                            case d_0_snd
                            by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                          qed
                        qed
                      qed
                    next
                      case c_xor_case_2
                      step( solve( !KU( (~k⊕~k2) ) @ #vk.4 ) )
                        case c_xor
                        by step( solve( !KU( ~k2 ) @ #vk.7 ) )
                      next
                        case coerce
                        step( solve( !KD( (~k⊕~k2) ) ▶₀ #vk.3 ) )
                          case acceptreader
                          by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                        next
                          case initiatereader
                          by step( contradiction /* impossible chain */ )
                        next
                          case tag1
                          step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                            case d_0_fst
                            by step( contradiction /* impossible chain */ )
                          next
                            case d_0_snd
                            by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                          qed
                        qed
                      qed
                    next
                      case c_xor_case_3
                      by step( contradiction /* cyclic */ )
                    next
                      case coerce
                      step( solve( !KD( (~r1⊕r0⊕~r1.1) ) ▶₀ #vk.2 ) )
                        case acceptreader
                        by step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                      next
                        case initiatereader
                        by step( contradiction /* impossible chain */ )
                      next
                        case tag1
                        step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                          case d_0_fst
                          by step( contradiction /* impossible chain */ )
                        next
                          case d_0_snd
                          by step( solve( (#vr.6, 0) ~~> (#vk.2, 0) ) )
                        qed
                      qed
                    qed
                  next
                    case c_xor_case_13
                    step( solve( !KU( (~r1⊕~r1.1) ) @ #vk.3 ) )
                      case c_xor
                      by step( contradiction /* cyclic */ )
                    next
                      case coerce
                      step( solve( !KD( (~r1⊕~r1.1) ) ▶₀ #vk.2 ) )
                        case acceptreader
                        by step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                      next
                        case initiatereader
                        by step( contradiction /* impossible chain */ )
                      next
                        case tag1
                        step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                          case d_0_fst
                          by step( contradiction /* impossible chain */ )
                        next
                          case d_0_snd
                          by step( solve( (#vr.6, 0) ~~> (#vk.2, 0) ) )
                        qed
                      qed
                    qed
                  next
                    case c_xor_case_14
                    step( solve( !KU( (r0⊕~r1.1) ) @ #vk.3 ) )
                      case c_xor
                      by step( contradiction /* cyclic */ )
                    next
                      case coerce
                      step( solve( !KD( (r0⊕~r1.1) ) ▶₀ #vk.2 ) )
                        case acceptreader
                        by step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                      next
                        case initiatereader
                        by step( contradiction /* impossible chain */ )
                      next
                        case tag1
                        step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                          case d_0_fst
                          by step( contradiction /* impossible chain */ )
                        next
                          case d_0_snd
                          by step( solve( (#vr.6, 0) ~~> (#vk.2, 0) ) )
                        qed
                      qed
                    qed
                  next
                    case c_xor_case_15
                    by step( contradiction /* cyclic */ )
                  next
                    case coerce
                    step( solve( !KD( (~k⊕~k2⊕~r1⊕r0⊕~r1.1) ) ▶₀ #vk.1 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.1, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_3
                  step( solve( !KU( (~k2⊕x⊕~r1.1) ) @ #vk.1 ) )
                    case c_xor_case_1
                    step( solve( !KU( (~k⊕~r1⊕x) ) @ #vk.2 ) )
                      case c_xor_case_1
                      step( solve( !KU( (~k2⊕~r1.1) ) @ #vk.3 ) )
                        case c_xor
                        by step( contradiction /* cyclic */ )
                      next
                        case coerce
                        step( solve( !KD( (~k2⊕~r1.1) ) ▶₀ #vk.3 ) )
                          case acceptreader
                          by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                        next
                          case initiatereader
                          by step( contradiction /* impossible chain */ )
                        next
                          case tag1
                          step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                            case d_0_fst
                            by step( contradiction /* impossible chain */ )
                          next
                            case d_0_snd
                            by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                          qed
                        qed
                      qed
                    next
                      case c_xor_case_2
                      by step( solve( !KU( ~k ) @ #vk.6 ) )
                    next
                      case c_xor_case_3
                      step( solve( !KU( (~k2⊕~r1.1) ) @ #vk.3 ) )
                        case c_xor
                        by step( solve( !KU( ~k2 ) @ #vk.7 ) )
                      next
                        case coerce
                        step( solve( !KD( (~k2⊕~r1.1) ) ▶₀ #vk.3 ) )
                          case acceptreader
                          by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                        next
                          case initiatereader
                          by step( contradiction /* impossible chain */ )
                        next
                          case tag1
                          step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                            case d_0_fst
                            by step( contradiction /* impossible chain */ )
                          next
                            case d_0_snd
                            by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                          qed
                        qed
                      qed
                    next
                      case coerce
                      step( solve( !KD( (~k⊕~r1⊕x) ) ▶₀ #vk.2 ) )
                        case acceptreader
                        by step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                      next
                        case initiatereader
                        by step( contradiction /* impossible chain */ )
                      next
                        case tag1
                        step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                          case d_0_fst
                          by step( contradiction /* impossible chain */ )
                        next
                          case d_0_snd
                          by step( solve( (#vr.6, 0) ~~> (#vk.2, 0) ) )
                        qed
                      qed
                    qed
                  next
                    case c_xor_case_2
                    by step( solve( !KU( ~k2 ) @ #vk.4 ) )
                  next
                    case c_xor_case_3
                    step( solve( !KU( (~k⊕~r1⊕x) ) @ #vk.2 ) )
                      case c_xor_case_1
                      by step( contradiction /* cyclic */ )
                    next
                      case c_xor_case_2
                      by step( solve( !KU( ~k ) @ #vk.6 ) )
                    next
                      case c_xor_case_3
                      step( solve( !KU( (~k2⊕x) ) @ #vk.4 ) )
                        case c_xor
                        by step( solve( !KU( ~k2 ) @ #vk.7 ) )
                      next
                        case coerce
                        step( solve( !KD( (~k2⊕x) ) ▶₀ #vk.3 ) )
                          case acceptreader
                          by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                        next
                          case initiatereader
                          by step( contradiction /* impossible chain */ )
                        next
                          case tag1
                          step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                            case d_0_fst
                            by step( contradiction /* impossible chain */ )
                          next
                            case d_0_snd
                            by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                          qed
                        qed
                      qed
                    next
                      case coerce
                      step( solve( !KD( (~k⊕~r1⊕x) ) ▶₀ #vk.2 ) )
                        case acceptreader
                        by step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                      next
                        case initiatereader
                        by step( contradiction /* impossible chain */ )
                      next
                        case tag1
                        step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                          case d_0_fst
                          by step( contradiction /* impossible chain */ )
                        next
                          case d_0_snd
                          by step( solve( (#vr.6, 0) ~~> (#vk.2, 0) ) )
                        qed
                      qed
                    qed
                  next
                    case coerce
                    step( solve( !KD( (~k2⊕x⊕~r1.1) ) ▶₀ #vk.1 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.1, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_4
                  by step( solve( !KU( ~k2 ) @ #vk.1 ) )
                next
                  case split_case_5
                  step( solve( !KU( (~k2⊕x) ) @ #vk.1 ) )
                    case c_xor
                    by step( solve( !KU( ~k2 ) @ #vk.4 ) )
                  next
                    case coerce
                    step( solve( !KD( (~k2⊕x) ) ▶₀ #vk.1 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.1, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_6
                  step( solve( !KU( (~k⊕~k2⊕~r1) ) @ #vk.2 ) )
                    case c_xor_case_1
                    by step( solve( !KU( ~k2 ) @ #vk.4 ) )
                  next
                    case c_xor_case_2
                    by step( solve( !KU( ~k ) @ #vk.4 ) )
                  next
                    case c_xor_case_3
                    by step( contradiction /* cyclic */ )
                  next
                    case coerce
                    step( solve( !KD( (~k⊕~k2⊕~r1) ) ▶₀ #vk.1 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.1, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_7
                  step( solve( !KU( (x⊕~r1.1) ) @ #vk.1 ) )
                    case c_xor
                    step( solve( !KU( (~k⊕~k2⊕~r1⊕x) ) @ #vk.2 ) )
                      case c_xor_case_1
                      by step( contradiction /* cyclic */ )
                    next
                      case c_xor_case_2
                      by step( solve( !KU( ~k2 ) @ #vk.6 ) )
                    next
                      case c_xor_case_3
                      step( solve( !KU( (~k⊕x) ) @ #vk.5 ) )
                        case c_xor
                        by step( solve( !KU( ~k ) @ #vk.7 ) )
                      next
                        case coerce
                        step( solve( !KD( (~k⊕x) ) ▶₀ #vk.3 ) )
                          case acceptreader
                          by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                        next
                          case initiatereader
                          by step( contradiction /* impossible chain */ )
                        next
                          case tag1
                          step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                            case d_0_fst
                            by step( contradiction /* impossible chain */ )
                          next
                            case d_0_snd
                            by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                          qed
                        qed
                      qed
                    next
                      case c_xor_case_4
                      by step( solve( !KU( ~k ) @ #vk.6 ) )
                    next
                      case c_xor_case_5
                      step( solve( !KU( (~k2⊕x) ) @ #vk.5 ) )
                        case c_xor
                        by step( solve( !KU( ~k2 ) @ #vk.7 ) )
                      next
                        case coerce
                        step( solve( !KD( (~k2⊕x) ) ▶₀ #vk.3 ) )
                          case acceptreader
                          by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                        next
                          case initiatereader
                          by step( contradiction /* impossible chain */ )
                        next
                          case tag1
                          step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                            case d_0_fst
                            by step( contradiction /* impossible chain */ )
                          next
                            case d_0_snd
                            by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                          qed
                        qed
                      qed
                    next
                      case c_xor_case_6
                      step( solve( !KU( (~r1⊕x) ) @ #vk.5 ) )
                        case c_xor
                        by step( contradiction /* cyclic */ )
                      next
                        case coerce
                        step( solve( !KD( (~r1⊕x) ) ▶₀ #vk.3 ) )
                          case acceptreader
                          by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                        next
                          case initiatereader
                          by step( contradiction /* impossible chain */ )
                        next
                          case tag1
                          step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                            case d_0_fst
                            by step( contradiction /* impossible chain */ )
                          next
                            case d_0_snd
                            by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                          qed
                        qed
                      qed
                    next
                      case c_xor_case_7
                      step( solve( !KU( (~k⊕~k2⊕~r1) ) @ #vk.5 ) )
                        case c_xor_case_1
                        by step( solve( !KU( ~k2 ) @ #vk.7 ) )
                      next
                        case c_xor_case_2
                        by step( solve( !KU( ~k ) @ #vk.7 ) )
                      next
                        case c_xor_case_3
                        by step( contradiction /* cyclic */ )
                      next
                        case coerce
                        step( solve( !KD( (~k⊕~k2⊕~r1) ) ▶₀ #vk.3 ) )
                          case acceptreader
                          by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                        next
                          case initiatereader
                          by step( contradiction /* impossible chain */ )
                        next
                          case tag1
                          step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                            case d_0_fst
                            by step( contradiction /* impossible chain */ )
                          next
                            case d_0_snd
                            by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                          qed
                        qed
                      qed
                    next
                      case coerce
                      step( solve( !KD( (~k⊕~k2⊕~r1⊕x) ) ▶₀ #vk.2 ) )
                        case acceptreader
                        by step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                      next
                        case initiatereader
                        by step( contradiction /* impossible chain */ )
                      next
                        case tag1
                        step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                          case d_0_fst
                          by step( contradiction /* impossible chain */ )
                        next
                          case d_0_snd
                          by step( solve( (#vr.6, 0) ~~> (#vk.2, 0) ) )
                        qed
                      qed
                    qed
                  next
                    case coerce
                    step( solve( !KD( (x⊕~r1.1) ) ▶₀ #vk.1 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.1, 0) ) )
                      qed
                    qed
                  qed
                qed
              next
                case split_case_4
                step( solve( !KU( zero ) @ #vk.1 ) )
                  case c_zero
                  step( solve( splitEqs(1) ) )
                    case split
                    step( solve( !KU( (~k⊕~k2⊕~r1⊕~r1.1) ) @ #vk.2 ) )
                      case c_xor_case_1
                      step( solve( !KU( (~k⊕~k2⊕~r1.1) ) @ #vk.3 ) )
                        case c_xor_case_1
                        by step( solve( !KU( ~k2 ) @ #vk.6 ) )
                      next
                        case c_xor_case_2
                        by step( solve( !KU( ~k ) @ #vk.6 ) )
                      next
                        case c_xor_case_3
                        by step( contradiction /* cyclic */ )
                      next
                        case coerce
                        step( solve( !KD( (~k⊕~k2⊕~r1.1) ) ▶₀ #vk.3 ) )
                          case acceptreader
                          by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                        next
                          case initiatereader
                          by step( contradiction /* impossible chain */ )
                        next
                          case tag1
                          step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                            case d_0_fst
                            by step( contradiction /* impossible chain */ )
                          next
                            case d_0_snd
                            by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                          qed
                        qed
                      qed
                    next
                      case c_xor_case_2
                      by step( solve( !KU( ~k2 ) @ #vk.4 ) )
                    next
                      case c_xor_case_3
                      step( solve( !KU( (~k⊕~r1.1) ) @ #vk.3 ) )
                        case c_xor
                        by step( contradiction /* cyclic */ )
                      next
                        case coerce
                        step( solve( !KD( (~k⊕~r1.1) ) ▶₀ #vk.3 ) )
                          case acceptreader
                          by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                        next
                          case initiatereader
                          by step( contradiction /* impossible chain */ )
                        next
                          case tag1
                          step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                            case d_0_fst
                            by step( contradiction /* impossible chain */ )
                          next
                            case d_0_snd
                            by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                          qed
                        qed
                      qed
                    next
                      case c_xor_case_4
                      by step( solve( !KU( ~k ) @ #vk.4 ) )
                    next
                      case c_xor_case_5
                      step( solve( !KU( (~k2⊕~r1.1) ) @ #vk.3 ) )
                        case c_xor
                        by step( contradiction /* cyclic */ )
                      next
                        case coerce
                        step( solve( !KD( (~k2⊕~r1.1) ) ▶₀ #vk.3 ) )
                          case acceptreader
                          by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                        next
                          case initiatereader
                          by step( contradiction /* impossible chain */ )
                        next
                          case tag1
                          step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                            case d_0_fst
                            by step( contradiction /* impossible chain */ )
                          next
                            case d_0_snd
                            by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                          qed
                        qed
                      qed
                    next
                      case c_xor_case_6
                      step( solve( !KU( (~r1⊕~r1.1) ) @ #vk.3 ) )
                        case c_xor
                        by step( contradiction /* cyclic */ )
                      next
                        case coerce
                        step( solve( !KD( (~r1⊕~r1.1) ) ▶₀ #vk.3 ) )
                          case acceptreader
                          by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                        next
                          case initiatereader
                          by step( contradiction /* impossible chain */ )
                        next
                          case tag1
                          step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                            case d_0_fst
                            by step( contradiction /* impossible chain */ )
                          next
                            case d_0_snd
                            by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                          qed
                        qed
                      qed
                    next
                      case c_xor_case_7
                      by step( contradiction /* cyclic */ )
                    next
                      case coerce
                      step( solve( !KD( (~k⊕~k2⊕~r1⊕~r1.1) ) ▶₀ #vk.2 ) )
                        case acceptreader
                        by step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                      next
                        case initiatereader
                        by step( contradiction /* impossible chain */ )
                      next
                        case tag1
                        step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                          case d_0_fst
                          by step( contradiction /* impossible chain */ )
                        next
                          case d_0_snd
                          by step( solve( (#vr.6, 0) ~~> (#vk.2, 0) ) )
                        qed
                      qed
                    qed
                  qed
                next
                  case coerce
                  step( solve( !KD( zero ) ▶₀ #vk.1 ) )
                    case acceptreader
                    by step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.6, 0) ~~> (#vk.1, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_5
                step( solve( !KU( (~k⊕~r1) ) @ #vk.1 ) )
                  case c_xor
                  by step( contradiction /* cyclic */ )
                next
                  case coerce
                  step( solve( !KD( (~k⊕~r1) ) ▶₀ #vk.1 ) )
                    case acceptreader
                    by step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.6, 0) ~~> (#vk.1, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_6
                step( solve( !KU( (~k⊕~r1⊕z) ) @ #vk.1 ) )
                  case c_xor_case_1
                  by step( contradiction /* cyclic */ )
                next
                  case c_xor_case_2
                  by step( solve( !KU( ~k ) @ #vk.4 ) )
                next
                  case c_xor_case_3
                  step( solve( !KU( (~k⊕~r1) ) @ #vk.4 ) )
                    case c_xor
                    by step( contradiction /* cyclic */ )
                  next
                    case coerce
                    step( solve( !KD( (~k⊕~r1) ) ▶₀ #vk.2 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.2, 0) ) )
                      qed
                    qed
                  qed
                next
                  case coerce
                  step( solve( !KD( (~k⊕~r1⊕z) ) ▶₀ #vk.1 ) )
                    case acceptreader
                    by step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.6, 0) ~~> (#vk.1, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_7
                step( solve( !KU( (~r1⊕x) ) @ #vk.1 ) )
                  case c_xor
                  by step( contradiction /* cyclic */ )
                next
                  case coerce
                  step( solve( !KD( (~r1⊕x) ) ▶₀ #vk.1 ) )
                    case acceptreader
                    by step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.6, 0) ~~> (#vk.1, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_8
                step( solve( !KU( (~k⊕x) ) @ #vk.1 ) )
                  case c_xor
                  by step( solve( !KU( ~k ) @ #vk.4 ) )
                next
                  case coerce
                  step( solve( !KD( (~k⊕x) ) ▶₀ #vk.1 ) )
                    case acceptreader
                    by step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.6, 0) ~~> (#vk.1, 0) ) )
                    qed
                  qed
                qed
              qed
            qed
          next
            case setup_case_2
            step( solve( !KU( h(z) ) @ #vk ) )
              case c_h
              step( solve( splitEqs(0) ) )
                case split_case_1
                by step( solve( !KU( ~k ) @ #vk.1 ) )
              next
                case split_case_2
                by step( contradiction /* cyclic */ )
              next
                case split_case_3
                step( solve( !KU( (~k⊕~r1⊕r0) ) @ #vk.2 ) )
                  case c_xor_case_1
                  step( solve( !KU( (~k⊕r0) ) @ #vk.3 ) )
                    case c_xor
                    by step( solve( !KU( ~k ) @ #vk.5 ) )
                  next
                    case coerce
                    step( solve( !KD( (~k⊕r0) ) ▶₀ #vk.2 ) )
                      case acceptreader
                      by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.4, 0) ~~> (#vk.2, 0) ) )
                      qed
                    qed
                  qed
                next
                  case c_xor_case_2
                  by step( solve( !KU( ~k ) @ #vk.4 ) )
                next
                  case c_xor_case_3
                  step( solve( !KU( (~k⊕~r1) ) @ #vk.3 ) )
                    case c_xor
                    by step( solve( !KU( ~k ) @ #vk.5 ) )
                  next
                    case coerce
                    step( solve( !KD( (~k⊕~r1) ) ▶₀ #vk.2 ) )
                      case acceptreader
                      by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.4, 0) ~~> (#vk.2, 0) ) )
                      qed
                    qed
                  qed
                next
                  case coerce
                  step( solve( !KD( (~k⊕~r1⊕r0) ) ▶₀ #vk.1 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.4, 0) ~~> (#vk.1, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_4
                step( solve( !KU( (~k⊕~r1) ) @ #vk.2 ) )
                  case c_xor
                  by step( solve( !KU( ~k ) @ #vk.4 ) )
                next
                  case coerce
                  step( solve( !KD( (~k⊕~r1) ) ▶₀ #vk.1 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.4, 0) ~~> (#vk.1, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_5
                step( solve( !KU( (~k⊕~r1) ) @ #vk.1 ) )
                  case c_xor
                  by step( contradiction /* cyclic */ )
                next
                  case coerce
                  step( solve( !KD( (~k⊕~r1) ) ▶₀ #vk.1 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.4, 0) ~~> (#vk.1, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_6
                step( solve( !KU( (~k⊕~r1⊕z) ) @ #vk.1 ) )
                  case c_xor_case_1
                  by step( contradiction /* cyclic */ )
                next
                  case c_xor_case_2
                  by step( solve( !KU( ~k ) @ #vk.4 ) )
                next
                  case c_xor_case_3
                  step( solve( !KU( (~k⊕~r1) ) @ #vk.3 ) )
                    case c_xor
                    by step( contradiction /* cyclic */ )
                  next
                    case coerce
                    step( solve( !KD( (~k⊕~r1) ) ▶₀ #vk.2 ) )
                      case acceptreader
                      by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.4, 0) ~~> (#vk.2, 0) ) )
                      qed
                    qed
                  qed
                next
                  case coerce
                  step( solve( !KD( (~k⊕~r1⊕z) ) ▶₀ #vk.1 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.4, 0) ~~> (#vk.1, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_7
                step( solve( !KU( (~r1⊕x) ) @ #vk.1 ) )
                  case c_xor
                  by step( contradiction /* cyclic */ )
                next
                  case coerce
                  step( solve( !KD( (~r1⊕x) ) ▶₀ #vk.1 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.4, 0) ~~> (#vk.1, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_8
                step( solve( !KU( (~k⊕x) ) @ #vk.1 ) )
                  case c_xor
                  by step( solve( !KU( ~k ) @ #vk.4 ) )
                next
                  case coerce
                  step( solve( !KD( (~k⊕x) ) ▶₀ #vk.1 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.4, 0) ~~> (#vk.1, 0) ) )
                    qed
                  qed
                qed
              qed
            next
              case tag1_case_1
              step( solve( splitEqs(0) ) )
                case split_case_1
                by step( solve( !KU( ~k ) @ #vk.1 ) )
              next
                case split_case_2
                by step( contradiction /* cyclic */ )
              next
                case split_case_3
                step( solve( splitEqs(1) ) )
                  case split_case_1
                  step( solve( !KU( (~k1⊕~r1.1) ) @ #vk.1 ) )
                    case c_xor
                    by step( solve( !KU( ~k1 ) @ #vk.4 ) )
                  next
                    case coerce
                    step( solve( !KD( (~k1⊕~r1.1) ) ▶₀ #vk.1 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.1, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_2
                  step( solve( !KU( (~k⊕~k1⊕~r1⊕r0⊕~r1.1) ) @ #vk.2 ) )
                    case c_xor_case_01
                    step( solve( !KU( (~k⊕~k1⊕~r1⊕~r1.1) ) @ #vk.3 ) )
                      case c_xor_case_1
                      step( solve( !KU( (~k⊕~k1⊕~r1.1) ) @ #vk.4 ) )
                        case c_xor_case_1
                        by step( solve( !KU( ~k1 ) @ #vk.7 ) )
                      next
                        case c_xor_case_2
                        by step( solve( !KU( ~k ) @ #vk.7 ) )
                      next
                        case c_xor_case_3
                        by step( contradiction /* cyclic */ )
                      next
                        case coerce
                        step( solve( !KD( (~k⊕~k1⊕~r1.1) ) ▶₀ #vk.3 ) )
                          case acceptreader
                          by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                        next
                          case initiatereader
                          by step( contradiction /* impossible chain */ )
                        next
                          case tag1
                          step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                            case d_0_fst
                            by step( contradiction /* impossible chain */ )
                          next
                            case d_0_snd
                            by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                          qed
                        qed
                      qed
                    next
                      case c_xor_case_2
                      by step( solve( !KU( ~k1 ) @ #vk.5 ) )
                    next
                      case c_xor_case_3
                      step( solve( !KU( (~k⊕~r1.1) ) @ #vk.4 ) )
                        case c_xor
                        by step( contradiction /* cyclic */ )
                      next
                        case coerce
                        step( solve( !KD( (~k⊕~r1.1) ) ▶₀ #vk.3 ) )
                          case acceptreader
                          by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                        next
                          case initiatereader
                          by step( contradiction /* impossible chain */ )
                        next
                          case tag1
                          step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                            case d_0_fst
                            by step( contradiction /* impossible chain */ )
                          next
                            case d_0_snd
                            by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                          qed
                        qed
                      qed
                    next
                      case c_xor_case_4
                      by step( solve( !KU( ~k ) @ #vk.5 ) )
                    next
                      case c_xor_case_5
                      step( solve( !KU( (~k1⊕~r1.1) ) @ #vk.4 ) )
                        case c_xor
                        by step( contradiction /* cyclic */ )
                      next
                        case coerce
                        step( solve( !KD( (~k1⊕~r1.1) ) ▶₀ #vk.3 ) )
                          case acceptreader
                          by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                        next
                          case initiatereader
                          by step( contradiction /* impossible chain */ )
                        next
                          case tag1
                          step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                            case d_0_fst
                            by step( contradiction /* impossible chain */ )
                          next
                            case d_0_snd
                            by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                          qed
                        qed
                      qed
                    next
                      case c_xor_case_6
                      step( solve( !KU( (~r1⊕~r1.1) ) @ #vk.4 ) )
                        case c_xor
                        by step( contradiction /* cyclic */ )
                      next
                        case coerce
                        step( solve( !KD( (~r1⊕~r1.1) ) ▶₀ #vk.3 ) )
                          case acceptreader
                          by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                        next
                          case initiatereader
                          by step( contradiction /* impossible chain */ )
                        next
                          case tag1
                          step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                            case d_0_fst
                            by step( contradiction /* impossible chain */ )
                          next
                            case d_0_snd
                            by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                          qed
                        qed
                      qed
                    next
                      case c_xor_case_7
                      by step( contradiction /* cyclic */ )
                    next
                      case coerce
                      step( solve( !KD( (~k⊕~k1⊕~r1⊕~r1.1) ) ▶₀ #vk.2 ) )
                        case acceptreader
                        by step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                      next
                        case initiatereader
                        by step( contradiction /* impossible chain */ )
                      next
                        case tag1
                        step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                          case d_0_fst
                          by step( contradiction /* impossible chain */ )
                        next
                          case d_0_snd
                          by step( solve( (#vr.6, 0) ~~> (#vk.2, 0) ) )
                        qed
                      qed
                    qed
                  next
                    case c_xor_case_02
                    step( solve( !KU( (~k⊕~k1⊕r0⊕~r1.1) ) @ #vk.3 ) )
                      case c_xor_case_1
                      step( solve( !KU( (~k⊕~k1⊕~r1.1) ) @ #vk.5 ) )
                        case c_xor_case_1
                        by step( solve( !KU( ~k1 ) @ #vk.7 ) )
                      next
                        case c_xor_case_2
                        by step( solve( !KU( ~k ) @ #vk.7 ) )
                      next
                        case c_xor_case_3
                        by step( contradiction /* cyclic */ )
                      next
                        case coerce
                        step( solve( !KD( (~k⊕~k1⊕~r1.1) ) ▶₀ #vk.3 ) )
                          case acceptreader
                          by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                        next
                          case initiatereader
                          by step( contradiction /* impossible chain */ )
                        next
                          case tag1
                          step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                            case d_0_fst
                            by step( contradiction /* impossible chain */ )
                          next
                            case d_0_snd
                            by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                          qed
                        qed
                      qed
                    next
                      case c_xor_case_2
                      by step( solve( !KU( ~k1 ) @ #vk.6 ) )
                    next
                      case c_xor_case_3
                      step( solve( !KU( (~k⊕~r1.1) ) @ #vk.5 ) )
                        case c_xor
                        by step( contradiction /* cyclic */ )
                      next
                        case coerce
                        step( solve( !KD( (~k⊕~r1.1) ) ▶₀ #vk.3 ) )
                          case acceptreader
                          by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                        next
                          case initiatereader
                          by step( contradiction /* impossible chain */ )
                        next
                          case tag1
                          step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                            case d_0_fst
                            by step( contradiction /* impossible chain */ )
                          next
                            case d_0_snd
                            by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                          qed
                        qed
                      qed
                    next
                      case c_xor_case_4
                      by step( solve( !KU( ~k ) @ #vk.6 ) )
                    next
                      case c_xor_case_5
                      step( solve( !KU( (~k1⊕~r1.1) ) @ #vk.5 ) )
                        case c_xor
                        by step( contradiction /* cyclic */ )
                      next
                        case coerce
                        step( solve( !KD( (~k1⊕~r1.1) ) ▶₀ #vk.3 ) )
                          case acceptreader
                          by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                        next
                          case initiatereader
                          by step( contradiction /* impossible chain */ )
                        next
                          case tag1
                          step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                            case d_0_fst
                            by step( contradiction /* impossible chain */ )
                          next
                            case d_0_snd
                            by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                          qed
                        qed
                      qed
                    next
                      case c_xor_case_6
                      step( solve( !KU( (r0⊕~r1.1) ) @ #vk.5 ) )
                        case c_xor
                        by step( contradiction /* cyclic */ )
                      next
                        case coerce
                        step( solve( !KD( (r0⊕~r1.1) ) ▶₀ #vk.3 ) )
                          case acceptreader
                          by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                        next
                          case initiatereader
                          by step( contradiction /* impossible chain */ )
                        next
                          case tag1
                          step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                            case d_0_fst
                            by step( contradiction /* impossible chain */ )
                          next
                            case d_0_snd
                            by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                          qed
                        qed
                      qed
                    next
                      case c_xor_case_7
                      by step( contradiction /* cyclic */ )
                    next
                      case coerce
                      step( solve( !KD( (~k⊕~k1⊕r0⊕~r1.1) ) ▶₀ #vk.2 ) )
                        case acceptreader
                        by step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                      next
                        case initiatereader
                        by step( contradiction /* impossible chain */ )
                      next
                        case tag1
                        step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                          case d_0_fst
                          by step( contradiction /* impossible chain */ )
                        next
                          case d_0_snd
                          by step( solve( (#vr.6, 0) ~~> (#vk.2, 0) ) )
                        qed
                      qed
                    qed
                  next
                    case c_xor_case_03
                    step( solve( !KU( (~k⊕~k1⊕~r1.1) ) @ #vk.3 ) )
                      case c_xor_case_1
                      by step( solve( !KU( ~k1 ) @ #vk.6 ) )
                    next
                      case c_xor_case_2
                      by step( solve( !KU( ~k ) @ #vk.6 ) )
                    next
                      case c_xor_case_3
                      by step( contradiction /* cyclic */ )
                    next
                      case coerce
                      step( solve( !KD( (~k⊕~k1⊕~r1.1) ) ▶₀ #vk.2 ) )
                        case acceptreader
                        by step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                      next
                        case initiatereader
                        by step( contradiction /* impossible chain */ )
                      next
                        case tag1
                        step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                          case d_0_fst
                          by step( contradiction /* impossible chain */ )
                        next
                          case d_0_snd
                          by step( solve( (#vr.6, 0) ~~> (#vk.2, 0) ) )
                        qed
                      qed
                    qed
                  next
                    case c_xor_case_04
                    by step( solve( !KU( ~k1 ) @ #vk.4 ) )
                  next
                    case c_xor_case_05
                    step( solve( !KU( (~k⊕~r1⊕~r1.1) ) @ #vk.3 ) )
                      case c_xor_case_1
                      step( solve( !KU( (~k1⊕r0) ) @ #vk.4 ) )
                        case c_xor
                        by step( solve( !KU( ~k1 ) @ #vk.7 ) )
                      next
                        case coerce
                        step( solve( !KD( (~k1⊕r0) ) ▶₀ #vk.3 ) )
                          case acceptreader
                          by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                        next
                          case initiatereader
                          by step( contradiction /* impossible chain */ )
                        next
                          case tag1
                          step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                            case d_0_fst
                            by step( contradiction /* impossible chain */ )
                          next
                            case d_0_snd
                            by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                          qed
                        qed
                      qed
                    next
                      case c_xor_case_2
                      by step( solve( !KU( ~k ) @ #vk.6 ) )
                    next
                      case c_xor_case_3
                      by step( contradiction /* cyclic */ )
                    next
                      case coerce
                      step( solve( !KD( (~k⊕~r1⊕~r1.1) ) ▶₀ #vk.2 ) )
                        case acceptreader
                        by step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                      next
                        case initiatereader
                        by step( contradiction /* impossible chain */ )
                      next
                        case tag1
                        step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                          case d_0_fst
                          by step( contradiction /* impossible chain */ )
                        next
                          case d_0_snd
                          by step( solve( (#vr.6, 0) ~~> (#vk.2, 0) ) )
                        qed
                      qed
                    qed
                  next
                    case c_xor_case_06
                    step( solve( !KU( (~k⊕r0⊕~r1.1) ) @ #vk.3 ) )
                      case c_xor_case_1
                      step( solve( !KU( (~k1⊕~r1) ) @ #vk.4 ) )
                        case c_xor
                        by step( solve( !KU( ~k1 ) @ #vk.7 ) )
                      next
                        case coerce
                        step( solve( !KD( (~k1⊕~r1) ) ▶₀ #vk.3 ) )
                          case acceptreader
                          by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                        next
                          case initiatereader
                          by step( contradiction /* impossible chain */ )
                        next
                          case tag1
                          step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                            case d_0_fst
                            by step( contradiction /* impossible chain */ )
                          next
                            case d_0_snd
                            by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                          qed
                        qed
                      qed
                    next
                      case c_xor_case_2
                      by step( solve( !KU( ~k ) @ #vk.6 ) )
                    next
                      case c_xor_case_3
                      by step( contradiction /* cyclic */ )
                    next
                      case coerce
                      step( solve( !KD( (~k⊕r0⊕~r1.1) ) ▶₀ #vk.2 ) )
                        case acceptreader
                        by step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                      next
                        case initiatereader
                        by step( contradiction /* impossible chain */ )
                      next
                        case tag1
                        step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                          case d_0_fst
                          by step( contradiction /* impossible chain */ )
                        next
                          case d_0_snd
                          by step( solve( (#vr.6, 0) ~~> (#vk.2, 0) ) )
                        qed
                      qed
                    qed
                  next
                    case c_xor_case_07
                    step( solve( !KU( (~k⊕~r1.1) ) @ #vk.3 ) )
                      case c_xor
                      by step( contradiction /* cyclic */ )
                    next
                      case coerce
                      step( solve( !KD( (~k⊕~r1.1) ) ▶₀ #vk.2 ) )
                        case acceptreader
                        by step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                      next
                        case initiatereader
                        by step( contradiction /* impossible chain */ )
                      next
                        case tag1
                        step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                          case d_0_fst
                          by step( contradiction /* impossible chain */ )
                        next
                          case d_0_snd
                          by step( solve( (#vr.6, 0) ~~> (#vk.2, 0) ) )
                        qed
                      qed
                    qed
                  next
                    case c_xor_case_08
                    by step( solve( !KU( ~k ) @ #vk.4 ) )
                  next
                    case c_xor_case_09
                    step( solve( !KU( (~k1⊕~r1⊕~r1.1) ) @ #vk.3 ) )
                      case c_xor_case_1
                      step( solve( !KU( (~k⊕r0) ) @ #vk.4 ) )
                        case c_xor
                        by step( solve( !KU( ~k ) @ #vk.7 ) )
                      next
                        case coerce
                        step( solve( !KD( (~k⊕r0) ) ▶₀ #vk.3 ) )
                          case acceptreader
                          by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                        next
                          case initiatereader
                          by step( contradiction /* impossible chain */ )
                        next
                          case tag1
                          step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                            case d_0_fst
                            by step( contradiction /* impossible chain */ )
                          next
                            case d_0_snd
                            by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                          qed
                        qed
                      qed
                    next
                      case c_xor_case_2
                      by step( solve( !KU( ~k1 ) @ #vk.6 ) )
                    next
                      case c_xor_case_3
                      by step( contradiction /* cyclic */ )
                    next
                      case coerce
                      step( solve( !KD( (~k1⊕~r1⊕~r1.1) ) ▶₀ #vk.2 ) )
                        case acceptreader
                        by step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                      next
                        case initiatereader
                        by step( contradiction /* impossible chain */ )
                      next
                        case tag1
                        step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                          case d_0_fst
                          by step( contradiction /* impossible chain */ )
                        next
                          case d_0_snd
                          by step( solve( (#vr.6, 0) ~~> (#vk.2, 0) ) )
                        qed
                      qed
                    qed
                  next
                    case c_xor_case_10
                    step( solve( !KU( (~k1⊕r0⊕~r1.1) ) @ #vk.3 ) )
                      case c_xor_case_1
                      step( solve( !KU( (~k⊕~r1) ) @ #vk.4 ) )
                        case c_xor
                        by step( solve( !KU( ~k ) @ #vk.7 ) )
                      next
                        case coerce
                        step( solve( !KD( (~k⊕~r1) ) ▶₀ #vk.3 ) )
                          case acceptreader
                          by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                        next
                          case initiatereader
                          by step( contradiction /* impossible chain */ )
                        next
                          case tag1
                          step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                            case d_0_fst
                            by step( contradiction /* impossible chain */ )
                          next
                            case d_0_snd
                            by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                          qed
                        qed
                      qed
                    next
                      case c_xor_case_2
                      by step( solve( !KU( ~k1 ) @ #vk.6 ) )
                    next
                      case c_xor_case_3
                      by step( contradiction /* cyclic */ )
                    next
                      case coerce
                      step( solve( !KD( (~k1⊕r0⊕~r1.1) ) ▶₀ #vk.2 ) )
                        case acceptreader
                        by step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                      next
                        case initiatereader
                        by step( contradiction /* impossible chain */ )
                      next
                        case tag1
                        step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                          case d_0_fst
                          by step( contradiction /* impossible chain */ )
                        next
                          case d_0_snd
                          by step( solve( (#vr.6, 0) ~~> (#vk.2, 0) ) )
                        qed
                      qed
                    qed
                  next
                    case c_xor_case_11
                    step( solve( !KU( (~k1⊕~r1.1) ) @ #vk.3 ) )
                      case c_xor
                      by step( contradiction /* cyclic */ )
                    next
                      case coerce
                      step( solve( !KD( (~k1⊕~r1.1) ) ▶₀ #vk.2 ) )
                        case acceptreader
                        by step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                      next
                        case initiatereader
                        by step( contradiction /* impossible chain */ )
                      next
                        case tag1
                        step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                          case d_0_fst
                          by step( contradiction /* impossible chain */ )
                        next
                          case d_0_snd
                          by step( solve( (#vr.6, 0) ~~> (#vk.2, 0) ) )
                        qed
                      qed
                    qed
                  next
                    case c_xor_case_12
                    step( solve( !KU( (~r1⊕r0⊕~r1.1) ) @ #vk.3 ) )
                      case c_xor_case_1
                      step( solve( !KU( (~k⊕~k1) ) @ #vk.4 ) )
                        case c_xor
                        by step( solve( !KU( ~k1 ) @ #vk.6 ) )
                      next
                        case coerce
                        step( solve( !KD( (~k⊕~k1) ) ▶₀ #vk.3 ) )
                          case acceptreader
                          by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                        next
                          case initiatereader
                          by step( contradiction /* impossible chain */ )
                        next
                          case tag1
                          step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                            case d_0_fst
                            by step( contradiction /* impossible chain */ )
                          next
                            case d_0_snd
                            by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                          qed
                        qed
                      qed
                    next
                      case c_xor_case_2
                      step( solve( !KU( (~k⊕~k1) ) @ #vk.4 ) )
                        case c_xor
                        by step( solve( !KU( ~k1 ) @ #vk.7 ) )
                      next
                        case coerce
                        step( solve( !KD( (~k⊕~k1) ) ▶₀ #vk.3 ) )
                          case acceptreader
                          by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                        next
                          case initiatereader
                          by step( contradiction /* impossible chain */ )
                        next
                          case tag1
                          step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                            case d_0_fst
                            by step( contradiction /* impossible chain */ )
                          next
                            case d_0_snd
                            by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                          qed
                        qed
                      qed
                    next
                      case c_xor_case_3
                      by step( contradiction /* cyclic */ )
                    next
                      case coerce
                      step( solve( !KD( (~r1⊕r0⊕~r1.1) ) ▶₀ #vk.2 ) )
                        case acceptreader
                        by step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                      next
                        case initiatereader
                        by step( contradiction /* impossible chain */ )
                      next
                        case tag1
                        step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                          case d_0_fst
                          by step( contradiction /* impossible chain */ )
                        next
                          case d_0_snd
                          by step( solve( (#vr.6, 0) ~~> (#vk.2, 0) ) )
                        qed
                      qed
                    qed
                  next
                    case c_xor_case_13
                    step( solve( !KU( (~r1⊕~r1.1) ) @ #vk.3 ) )
                      case c_xor
                      by step( contradiction /* cyclic */ )
                    next
                      case coerce
                      step( solve( !KD( (~r1⊕~r1.1) ) ▶₀ #vk.2 ) )
                        case acceptreader
                        by step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                      next
                        case initiatereader
                        by step( contradiction /* impossible chain */ )
                      next
                        case tag1
                        step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                          case d_0_fst
                          by step( contradiction /* impossible chain */ )
                        next
                          case d_0_snd
                          by step( solve( (#vr.6, 0) ~~> (#vk.2, 0) ) )
                        qed
                      qed
                    qed
                  next
                    case c_xor_case_14
                    step( solve( !KU( (r0⊕~r1.1) ) @ #vk.3 ) )
                      case c_xor
                      by step( contradiction /* cyclic */ )
                    next
                      case coerce
                      step( solve( !KD( (r0⊕~r1.1) ) ▶₀ #vk.2 ) )
                        case acceptreader
                        by step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                      next
                        case initiatereader
                        by step( contradiction /* impossible chain */ )
                      next
                        case tag1
                        step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                          case d_0_fst
                          by step( contradiction /* impossible chain */ )
                        next
                          case d_0_snd
                          by step( solve( (#vr.6, 0) ~~> (#vk.2, 0) ) )
                        qed
                      qed
                    qed
                  next
                    case c_xor_case_15
                    by step( contradiction /* cyclic */ )
                  next
                    case coerce
                    step( solve( !KD( (~k⊕~k1⊕~r1⊕r0⊕~r1.1) ) ▶₀ #vk.1 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.1, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_3
                  step( solve( !KU( (~k1⊕x⊕~r1.1) ) @ #vk.1 ) )
                    case c_xor_case_1
                    step( solve( !KU( (~k⊕~r1⊕x) ) @ #vk.2 ) )
                      case c_xor_case_1
                      step( solve( !KU( (~k1⊕~r1.1) ) @ #vk.3 ) )
                        case c_xor
                        by step( contradiction /* cyclic */ )
                      next
                        case coerce
                        step( solve( !KD( (~k1⊕~r1.1) ) ▶₀ #vk.3 ) )
                          case acceptreader
                          by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                        next
                          case initiatereader
                          by step( contradiction /* impossible chain */ )
                        next
                          case tag1
                          step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                            case d_0_fst
                            by step( contradiction /* impossible chain */ )
                          next
                            case d_0_snd
                            by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                          qed
                        qed
                      qed
                    next
                      case c_xor_case_2
                      by step( solve( !KU( ~k ) @ #vk.6 ) )
                    next
                      case c_xor_case_3
                      step( solve( !KU( (~k1⊕~r1.1) ) @ #vk.3 ) )
                        case c_xor
                        by step( solve( !KU( ~k1 ) @ #vk.7 ) )
                      next
                        case coerce
                        step( solve( !KD( (~k1⊕~r1.1) ) ▶₀ #vk.3 ) )
                          case acceptreader
                          by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                        next
                          case initiatereader
                          by step( contradiction /* impossible chain */ )
                        next
                          case tag1
                          step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                            case d_0_fst
                            by step( contradiction /* impossible chain */ )
                          next
                            case d_0_snd
                            by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                          qed
                        qed
                      qed
                    next
                      case coerce
                      step( solve( !KD( (~k⊕~r1⊕x) ) ▶₀ #vk.2 ) )
                        case acceptreader
                        by step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                      next
                        case initiatereader
                        by step( contradiction /* impossible chain */ )
                      next
                        case tag1
                        step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                          case d_0_fst
                          by step( contradiction /* impossible chain */ )
                        next
                          case d_0_snd
                          by step( solve( (#vr.6, 0) ~~> (#vk.2, 0) ) )
                        qed
                      qed
                    qed
                  next
                    case c_xor_case_2
                    by step( solve( !KU( ~k1 ) @ #vk.4 ) )
                  next
                    case c_xor_case_3
                    step( solve( !KU( (~k⊕~r1⊕x) ) @ #vk.2 ) )
                      case c_xor_case_1
                      by step( contradiction /* cyclic */ )
                    next
                      case c_xor_case_2
                      by step( solve( !KU( ~k ) @ #vk.6 ) )
                    next
                      case c_xor_case_3
                      step( solve( !KU( (~k1⊕x) ) @ #vk.4 ) )
                        case c_xor
                        by step( solve( !KU( ~k1 ) @ #vk.7 ) )
                      next
                        case coerce
                        step( solve( !KD( (~k1⊕x) ) ▶₀ #vk.3 ) )
                          case acceptreader
                          by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                        next
                          case initiatereader
                          by step( contradiction /* impossible chain */ )
                        next
                          case tag1
                          step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                            case d_0_fst
                            by step( contradiction /* impossible chain */ )
                          next
                            case d_0_snd
                            by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                          qed
                        qed
                      qed
                    next
                      case coerce
                      step( solve( !KD( (~k⊕~r1⊕x) ) ▶₀ #vk.2 ) )
                        case acceptreader
                        by step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                      next
                        case initiatereader
                        by step( contradiction /* impossible chain */ )
                      next
                        case tag1
                        step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                          case d_0_fst
                          by step( contradiction /* impossible chain */ )
                        next
                          case d_0_snd
                          by step( solve( (#vr.6, 0) ~~> (#vk.2, 0) ) )
                        qed
                      qed
                    qed
                  next
                    case coerce
                    step( solve( !KD( (~k1⊕x⊕~r1.1) ) ▶₀ #vk.1 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.1, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_4
                  by step( solve( !KU( ~k1 ) @ #vk.1 ) )
                next
                  case split_case_5
                  step( solve( !KU( (~k1⊕x) ) @ #vk.1 ) )
                    case c_xor
                    by step( solve( !KU( ~k1 ) @ #vk.4 ) )
                  next
                    case coerce
                    step( solve( !KD( (~k1⊕x) ) ▶₀ #vk.1 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.1, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_6
                  step( solve( !KU( (~k⊕~k1⊕~r1) ) @ #vk.2 ) )
                    case c_xor_case_1
                    by step( solve( !KU( ~k1 ) @ #vk.4 ) )
                  next
                    case c_xor_case_2
                    by step( solve( !KU( ~k ) @ #vk.4 ) )
                  next
                    case c_xor_case_3
                    by step( contradiction /* cyclic */ )
                  next
                    case coerce
                    step( solve( !KD( (~k⊕~k1⊕~r1) ) ▶₀ #vk.1 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.1, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_7
                  step( solve( !KU( (x⊕~r1.1) ) @ #vk.1 ) )
                    case c_xor
                    step( solve( !KU( (~k⊕~k1⊕~r1⊕x) ) @ #vk.2 ) )
                      case c_xor_case_1
                      by step( contradiction /* cyclic */ )
                    next
                      case c_xor_case_2
                      by step( solve( !KU( ~k1 ) @ #vk.6 ) )
                    next
                      case c_xor_case_3
                      step( solve( !KU( (~k⊕x) ) @ #vk.5 ) )
                        case c_xor
                        by step( solve( !KU( ~k ) @ #vk.7 ) )
                      next
                        case coerce
                        step( solve( !KD( (~k⊕x) ) ▶₀ #vk.3 ) )
                          case acceptreader
                          by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                        next
                          case initiatereader
                          by step( contradiction /* impossible chain */ )
                        next
                          case tag1
                          step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                            case d_0_fst
                            by step( contradiction /* impossible chain */ )
                          next
                            case d_0_snd
                            by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                          qed
                        qed
                      qed
                    next
                      case c_xor_case_4
                      by step( solve( !KU( ~k ) @ #vk.6 ) )
                    next
                      case c_xor_case_5
                      step( solve( !KU( (~k1⊕x) ) @ #vk.5 ) )
                        case c_xor
                        by step( solve( !KU( ~k1 ) @ #vk.7 ) )
                      next
                        case coerce
                        step( solve( !KD( (~k1⊕x) ) ▶₀ #vk.3 ) )
                          case acceptreader
                          by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                        next
                          case initiatereader
                          by step( contradiction /* impossible chain */ )
                        next
                          case tag1
                          step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                            case d_0_fst
                            by step( contradiction /* impossible chain */ )
                          next
                            case d_0_snd
                            by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                          qed
                        qed
                      qed
                    next
                      case c_xor_case_6
                      step( solve( !KU( (~r1⊕x) ) @ #vk.5 ) )
                        case c_xor
                        by step( contradiction /* cyclic */ )
                      next
                        case coerce
                        step( solve( !KD( (~r1⊕x) ) ▶₀ #vk.3 ) )
                          case acceptreader
                          by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                        next
                          case initiatereader
                          by step( contradiction /* impossible chain */ )
                        next
                          case tag1
                          step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                            case d_0_fst
                            by step( contradiction /* impossible chain */ )
                          next
                            case d_0_snd
                            by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                          qed
                        qed
                      qed
                    next
                      case c_xor_case_7
                      step( solve( !KU( (~k⊕~k1⊕~r1) ) @ #vk.5 ) )
                        case c_xor_case_1
                        by step( solve( !KU( ~k1 ) @ #vk.7 ) )
                      next
                        case c_xor_case_2
                        by step( solve( !KU( ~k ) @ #vk.7 ) )
                      next
                        case c_xor_case_3
                        by step( contradiction /* cyclic */ )
                      next
                        case coerce
                        step( solve( !KD( (~k⊕~k1⊕~r1) ) ▶₀ #vk.3 ) )
                          case acceptreader
                          by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                        next
                          case initiatereader
                          by step( contradiction /* impossible chain */ )
                        next
                          case tag1
                          step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                            case d_0_fst
                            by step( contradiction /* impossible chain */ )
                          next
                            case d_0_snd
                            by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                          qed
                        qed
                      qed
                    next
                      case coerce
                      step( solve( !KD( (~k⊕~k1⊕~r1⊕x) ) ▶₀ #vk.2 ) )
                        case acceptreader
                        by step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                      next
                        case initiatereader
                        by step( contradiction /* impossible chain */ )
                      next
                        case tag1
                        step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                          case d_0_fst
                          by step( contradiction /* impossible chain */ )
                        next
                          case d_0_snd
                          by step( solve( (#vr.6, 0) ~~> (#vk.2, 0) ) )
                        qed
                      qed
                    qed
                  next
                    case coerce
                    step( solve( !KD( (x⊕~r1.1) ) ▶₀ #vk.1 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.1, 0) ) )
                      qed
                    qed
                  qed
                qed
              next
                case split_case_4
                step( solve( !KU( zero ) @ #vk.1 ) )
                  case c_zero
                  step( solve( splitEqs(1) ) )
                    case split
                    step( solve( !KU( (~k⊕~k1⊕~r1⊕~r1.1) ) @ #vk.2 ) )
                      case c_xor_case_1
                      step( solve( !KU( (~k⊕~k1⊕~r1.1) ) @ #vk.3 ) )
                        case c_xor_case_1
                        by step( solve( !KU( ~k1 ) @ #vk.6 ) )
                      next
                        case c_xor_case_2
                        by step( solve( !KU( ~k ) @ #vk.6 ) )
                      next
                        case c_xor_case_3
                        by step( contradiction /* cyclic */ )
                      next
                        case coerce
                        step( solve( !KD( (~k⊕~k1⊕~r1.1) ) ▶₀ #vk.3 ) )
                          case acceptreader
                          by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                        next
                          case initiatereader
                          by step( contradiction /* impossible chain */ )
                        next
                          case tag1
                          step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                            case d_0_fst
                            by step( contradiction /* impossible chain */ )
                          next
                            case d_0_snd
                            by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                          qed
                        qed
                      qed
                    next
                      case c_xor_case_2
                      by step( solve( !KU( ~k1 ) @ #vk.4 ) )
                    next
                      case c_xor_case_3
                      step( solve( !KU( (~k⊕~r1.1) ) @ #vk.3 ) )
                        case c_xor
                        by step( contradiction /* cyclic */ )
                      next
                        case coerce
                        step( solve( !KD( (~k⊕~r1.1) ) ▶₀ #vk.3 ) )
                          case acceptreader
                          by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                        next
                          case initiatereader
                          by step( contradiction /* impossible chain */ )
                        next
                          case tag1
                          step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                            case d_0_fst
                            by step( contradiction /* impossible chain */ )
                          next
                            case d_0_snd
                            by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                          qed
                        qed
                      qed
                    next
                      case c_xor_case_4
                      by step( solve( !KU( ~k ) @ #vk.4 ) )
                    next
                      case c_xor_case_5
                      step( solve( !KU( (~k1⊕~r1.1) ) @ #vk.3 ) )
                        case c_xor
                        by step( contradiction /* cyclic */ )
                      next
                        case coerce
                        step( solve( !KD( (~k1⊕~r1.1) ) ▶₀ #vk.3 ) )
                          case acceptreader
                          by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                        next
                          case initiatereader
                          by step( contradiction /* impossible chain */ )
                        next
                          case tag1
                          step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                            case d_0_fst
                            by step( contradiction /* impossible chain */ )
                          next
                            case d_0_snd
                            by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                          qed
                        qed
                      qed
                    next
                      case c_xor_case_6
                      step( solve( !KU( (~r1⊕~r1.1) ) @ #vk.3 ) )
                        case c_xor
                        by step( contradiction /* cyclic */ )
                      next
                        case coerce
                        step( solve( !KD( (~r1⊕~r1.1) ) ▶₀ #vk.3 ) )
                          case acceptreader
                          by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                        next
                          case initiatereader
                          by step( contradiction /* impossible chain */ )
                        next
                          case tag1
                          step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                            case d_0_fst
                            by step( contradiction /* impossible chain */ )
                          next
                            case d_0_snd
                            by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                          qed
                        qed
                      qed
                    next
                      case c_xor_case_7
                      by step( contradiction /* cyclic */ )
                    next
                      case coerce
                      step( solve( !KD( (~k⊕~k1⊕~r1⊕~r1.1) ) ▶₀ #vk.2 ) )
                        case acceptreader
                        by step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                      next
                        case initiatereader
                        by step( contradiction /* impossible chain */ )
                      next
                        case tag1
                        step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                          case d_0_fst
                          by step( contradiction /* impossible chain */ )
                        next
                          case d_0_snd
                          by step( solve( (#vr.6, 0) ~~> (#vk.2, 0) ) )
                        qed
                      qed
                    qed
                  qed
                next
                  case coerce
                  step( solve( !KD( zero ) ▶₀ #vk.1 ) )
                    case acceptreader
                    by step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.6, 0) ~~> (#vk.1, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_5
                step( solve( !KU( (~k⊕~r1) ) @ #vk.1 ) )
                  case c_xor
                  by step( contradiction /* cyclic */ )
                next
                  case coerce
                  step( solve( !KD( (~k⊕~r1) ) ▶₀ #vk.1 ) )
                    case acceptreader
                    by step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.6, 0) ~~> (#vk.1, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_6
                step( solve( !KU( (~k⊕~r1⊕z) ) @ #vk.1 ) )
                  case c_xor_case_1
                  by step( contradiction /* cyclic */ )
                next
                  case c_xor_case_2
                  by step( solve( !KU( ~k ) @ #vk.4 ) )
                next
                  case c_xor_case_3
                  step( solve( !KU( (~k⊕~r1) ) @ #vk.4 ) )
                    case c_xor
                    by step( contradiction /* cyclic */ )
                  next
                    case coerce
                    step( solve( !KD( (~k⊕~r1) ) ▶₀ #vk.2 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.2, 0) ) )
                      qed
                    qed
                  qed
                next
                  case coerce
                  step( solve( !KD( (~k⊕~r1⊕z) ) ▶₀ #vk.1 ) )
                    case acceptreader
                    by step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.6, 0) ~~> (#vk.1, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_7
                step( solve( !KU( (~r1⊕x) ) @ #vk.1 ) )
                  case c_xor
                  by step( contradiction /* cyclic */ )
                next
                  case coerce
                  step( solve( !KD( (~r1⊕x) ) ▶₀ #vk.1 ) )
                    case acceptreader
                    by step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.6, 0) ~~> (#vk.1, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_8
                step( solve( !KU( (~k⊕x) ) @ #vk.1 ) )
                  case c_xor
                  by step( solve( !KU( ~k ) @ #vk.4 ) )
                next
                  case coerce
                  step( solve( !KD( (~k⊕x) ) ▶₀ #vk.1 ) )
                    case acceptreader
                    by step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.6, 0) ~~> (#vk.1, 0) ) )
                    qed
                  qed
                qed
              qed
            next
              case tag1_case_2
              step( solve( splitEqs(0) ) )
                case split_case_1
                by step( solve( !KU( ~k ) @ #vk.1 ) )
              next
                case split_case_2
                by step( contradiction /* cyclic */ )
              next
                case split_case_3
                MIRRORED
              next
                case split_case_4
                step( solve( !KU( zero ) @ #vk.1 ) )
                  case c_zero
                  MIRRORED
                next
                  case coerce
                  step( solve( !KD( zero ) ▶₀ #vk.1 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.5, 0) ~~> (#vk.1, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_5
                step( solve( !KU( (~k⊕~r1) ) @ #vk.1 ) )
                  case c_xor
                  by step( contradiction /* cyclic */ )
                next
                  case coerce
                  step( solve( !KD( (~k⊕~r1) ) ▶₀ #vk.1 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.5, 0) ~~> (#vk.1, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_6
                step( solve( !KU( (~k⊕~r1⊕z) ) @ #vk.1 ) )
                  case c_xor_case_1
                  by step( contradiction /* cyclic */ )
                next
                  case c_xor_case_2
                  by step( solve( !KU( ~k ) @ #vk.3 ) )
                next
                  case c_xor_case_3
                  step( solve( !KU( (~k⊕~r1) ) @ #vk.3 ) )
                    case c_xor
                    by step( contradiction /* cyclic */ )
                  next
                    case coerce
                    step( solve( !KD( (~k⊕~r1) ) ▶₀ #vk.2 ) )
                      case acceptreader
                      by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.5, 0) ~~> (#vk.2, 0) ) )
                      qed
                    qed
                  qed
                next
                  case coerce
                  step( solve( !KD( (~k⊕~r1⊕z) ) ▶₀ #vk.1 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.5, 0) ~~> (#vk.1, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_7
                step( solve( !KU( (~r1⊕x) ) @ #vk.1 ) )
                  case c_xor
                  by step( contradiction /* cyclic */ )
                next
                  case coerce
                  step( solve( !KD( (~r1⊕x) ) ▶₀ #vk.1 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.5, 0) ~~> (#vk.1, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_8
                step( solve( !KU( (~k⊕x) ) @ #vk.1 ) )
                  case c_xor
                  by step( solve( !KU( ~k ) @ #vk.3 ) )
                next
                  case coerce
                  step( solve( !KD( (~k⊕x) ) ▶₀ #vk.1 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.5, 0) ~~> (#vk.1, 0) ) )
                    qed
                  qed
                qed
              qed
            next
              case tag1_case_3
              step( solve( splitEqs(0) ) )
                case split_case_1
                by step( solve( !KU( ~k ) @ #vk.1 ) )
              next
                case split_case_2
                by step( contradiction /* cyclic */ )
              next
                case split_case_3
                step( solve( splitEqs(1) ) )
                  case split_case_1
                  by step( contradiction /* cyclic */ )
                next
                  case split_case_2
                  step( solve( !KU( (x⊕~r1.1) ) @ #vk.1 ) )
                    case c_xor
                    step( solve( !KU( (~r1⊕x) ) @ #vk.2 ) )
                      case c_xor
                      by step( contradiction /* cyclic */ )
                    next
                      case coerce
                      step( solve( !KD( (~r1⊕x) ) ▶₀ #vk.2 ) )
                        case acceptreader
                        by step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                      next
                        case initiatereader
                        by step( contradiction /* impossible chain */ )
                      next
                        case tag1
                        step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                          case d_0_fst
                          by step( contradiction /* impossible chain */ )
                        next
                          case d_0_snd
                          by step( solve( (#vr.6, 0) ~~> (#vk.2, 0) ) )
                        qed
                      qed
                    qed
                  next
                    case coerce
                    step( solve( !KD( (x⊕~r1.1) ) ▶₀ #vk.1 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.1, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_3
                  step( solve( !KU( (~r1⊕r0⊕~r1.1) ) @ #vk.2 ) )
                    case c_xor_case_1
                    step( solve( !KU( (~r1⊕~r1.1) ) @ #vk.3 ) )
                      case c_xor
                      by step( contradiction /* cyclic */ )
                    next
                      case coerce
                      step( solve( !KD( (~r1⊕~r1.1) ) ▶₀ #vk.2 ) )
                        case acceptreader
                        by step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                      next
                        case initiatereader
                        by step( contradiction /* impossible chain */ )
                      next
                        case tag1
                        step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                          case d_0_fst
                          by step( contradiction /* impossible chain */ )
                        next
                          case d_0_snd
                          by step( solve( (#vr.6, 0) ~~> (#vk.2, 0) ) )
                        qed
                      qed
                    qed
                  next
                    case c_xor_case_2
                    step( solve( !KU( (r0⊕~r1.1) ) @ #vk.3 ) )
                      case c_xor
                      by step( contradiction /* cyclic */ )
                    next
                      case coerce
                      step( solve( !KD( (r0⊕~r1.1) ) ▶₀ #vk.2 ) )
                        case acceptreader
                        by step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                      next
                        case initiatereader
                        by step( contradiction /* impossible chain */ )
                      next
                        case tag1
                        step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                          case d_0_fst
                          by step( contradiction /* impossible chain */ )
                        next
                          case d_0_snd
                          by step( solve( (#vr.6, 0) ~~> (#vk.2, 0) ) )
                        qed
                      qed
                    qed
                  next
                    case c_xor_case_3
                    by step( contradiction /* cyclic */ )
                  next
                    case coerce
                    step( solve( !KD( (~r1⊕r0⊕~r1.1) ) ▶₀ #vk.1 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.1, 0) ) )
                      qed
                    qed
                  qed
                qed
              next
                case split_case_4
                step( solve( !KU( zero ) @ #vk.1 ) )
                  case c_zero
                  step( solve( splitEqs(1) ) )
                    case split
                    step( solve( !KU( (~r1⊕~r1.1) ) @ #vk.2 ) )
                      case c_xor
                      by step( contradiction /* cyclic */ )
                    next
                      case coerce
                      step( solve( !KD( (~r1⊕~r1.1) ) ▶₀ #vk.2 ) )
                        case acceptreader
                        by step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                      next
                        case initiatereader
                        by step( contradiction /* impossible chain */ )
                      next
                        case tag1
                        step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                          case d_0_fst
                          by step( contradiction /* impossible chain */ )
                        next
                          case d_0_snd
                          by step( solve( (#vr.6, 0) ~~> (#vk.2, 0) ) )
                        qed
                      qed
                    qed
                  qed
                next
                  case coerce
                  step( solve( !KD( zero ) ▶₀ #vk.1 ) )
                    case acceptreader
                    by step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.6, 0) ~~> (#vk.1, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_5
                step( solve( !KU( (~k⊕~r1) ) @ #vk.1 ) )
                  case c_xor
                  by step( contradiction /* cyclic */ )
                next
                  case coerce
                  step( solve( !KD( (~k⊕~r1) ) ▶₀ #vk.1 ) )
                    case acceptreader
                    by step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.6, 0) ~~> (#vk.1, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_6
                step( solve( !KU( (~k⊕~r1⊕z) ) @ #vk.1 ) )
                  case c_xor_case_1
                  by step( contradiction /* cyclic */ )
                next
                  case c_xor_case_2
                  by step( solve( !KU( ~k ) @ #vk.4 ) )
                next
                  case c_xor_case_3
                  step( solve( !KU( (~k⊕~r1) ) @ #vk.4 ) )
                    case c_xor
                    by step( contradiction /* cyclic */ )
                  next
                    case coerce
                    step( solve( !KD( (~k⊕~r1) ) ▶₀ #vk.2 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.2, 0) ) )
                      qed
                    qed
                  qed
                next
                  case coerce
                  step( solve( !KD( (~k⊕~r1⊕z) ) ▶₀ #vk.1 ) )
                    case acceptreader
                    by step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.6, 0) ~~> (#vk.1, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_7
                step( solve( !KU( (~r1⊕x) ) @ #vk.1 ) )
                  case c_xor
                  by step( contradiction /* cyclic */ )
                next
                  case coerce
                  step( solve( !KD( (~r1⊕x) ) ▶₀ #vk.1 ) )
                    case acceptreader
                    by step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.6, 0) ~~> (#vk.1, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_8
                step( solve( !KU( (~k⊕x) ) @ #vk.1 ) )
                  case c_xor
                  by step( solve( !KU( ~k ) @ #vk.4 ) )
                next
                  case coerce
                  step( solve( !KD( (~k⊕x) ) ▶₀ #vk.1 ) )
                    case acceptreader
                    by step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.6, 0) ~~> (#vk.1, 0) ) )
                    qed
                  qed
                qed
              qed
            qed
          next
            case setup_case_3
            step( solve( !KU( h(z) ) @ #vk ) )
              case c_h
              step( solve( splitEqs(0) ) )
                case split_case_1
                by step( solve( !KU( ~k ) @ #vk.1 ) )
              next
                case split_case_2
                by step( contradiction /* cyclic */ )
              next
                case split_case_3
                step( solve( !KU( (~k⊕~r1⊕r0) ) @ #vk.2 ) )
                  case c_xor_case_1
                  step( solve( !KU( (~k⊕r0) ) @ #vk.3 ) )
                    case c_xor
                    by step( solve( !KU( ~k ) @ #vk.5 ) )
                  next
                    case coerce
                    step( solve( !KD( (~k⊕r0) ) ▶₀ #vk.2 ) )
                      case acceptreader
                      by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.4, 0) ~~> (#vk.2, 0) ) )
                      qed
                    qed
                  qed
                next
                  case c_xor_case_2
                  by step( solve( !KU( ~k ) @ #vk.4 ) )
                next
                  case c_xor_case_3
                  step( solve( !KU( (~k⊕~r1) ) @ #vk.3 ) )
                    case c_xor
                    by step( solve( !KU( ~k ) @ #vk.5 ) )
                  next
                    case coerce
                    step( solve( !KD( (~k⊕~r1) ) ▶₀ #vk.2 ) )
                      case acceptreader
                      by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.4, 0) ~~> (#vk.2, 0) ) )
                      qed
                    qed
                  qed
                next
                  case coerce
                  step( solve( !KD( (~k⊕~r1⊕r0) ) ▶₀ #vk.1 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.4, 0) ~~> (#vk.1, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_4
                step( solve( !KU( (~k⊕~r1) ) @ #vk.2 ) )
                  case c_xor
                  by step( solve( !KU( ~k ) @ #vk.4 ) )
                next
                  case coerce
                  step( solve( !KD( (~k⊕~r1) ) ▶₀ #vk.1 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.4, 0) ~~> (#vk.1, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_5
                step( solve( !KU( (~k⊕~r1) ) @ #vk.1 ) )
                  case c_xor
                  by step( contradiction /* cyclic */ )
                next
                  case coerce
                  step( solve( !KD( (~k⊕~r1) ) ▶₀ #vk.1 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.4, 0) ~~> (#vk.1, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_6
                step( solve( !KU( (~k⊕~r1⊕z) ) @ #vk.1 ) )
                  case c_xor_case_1
                  by step( contradiction /* cyclic */ )
                next
                  case c_xor_case_2
                  by step( solve( !KU( ~k ) @ #vk.4 ) )
                next
                  case c_xor_case_3
                  step( solve( !KU( (~k⊕~r1) ) @ #vk.3 ) )
                    case c_xor
                    by step( contradiction /* cyclic */ )
                  next
                    case coerce
                    step( solve( !KD( (~k⊕~r1) ) ▶₀ #vk.2 ) )
                      case acceptreader
                      by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.4, 0) ~~> (#vk.2, 0) ) )
                      qed
                    qed
                  qed
                next
                  case coerce
                  step( solve( !KD( (~k⊕~r1⊕z) ) ▶₀ #vk.1 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.4, 0) ~~> (#vk.1, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_7
                step( solve( !KU( (~r1⊕x) ) @ #vk.1 ) )
                  case c_xor
                  by step( contradiction /* cyclic */ )
                next
                  case coerce
                  step( solve( !KD( (~r1⊕x) ) ▶₀ #vk.1 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.4, 0) ~~> (#vk.1, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_8
                step( solve( !KU( (~k⊕x) ) @ #vk.1 ) )
                  case c_xor
                  by step( solve( !KU( ~k ) @ #vk.4 ) )
                next
                  case coerce
                  step( solve( !KD( (~k⊕x) ) ▶₀ #vk.1 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.4, 0) ~~> (#vk.1, 0) ) )
                    qed
                  qed
                qed
              qed
            next
              case tag1_case_1
              step( solve( splitEqs(0) ) )
                case split_case_1
                by step( solve( !KU( ~k ) @ #vk.1 ) )
              next
                case split_case_2
                by step( contradiction /* cyclic */ )
              next
                case split_case_3
                step( solve( splitEqs(1) ) )
                  case split_case_1
                  step( solve( !KU( (~k1⊕~r1.1) ) @ #vk.1 ) )
                    case c_xor
                    by step( solve( !KU( ~k1 ) @ #vk.4 ) )
                  next
                    case coerce
                    step( solve( !KD( (~k1⊕~r1.1) ) ▶₀ #vk.1 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.1, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_2
                  step( solve( !KU( (~k⊕~k1⊕~r1⊕r0⊕~r1.1) ) @ #vk.2 ) )
                    case c_xor_case_01
                    step( solve( !KU( (~k⊕~k1⊕~r1⊕~r1.1) ) @ #vk.3 ) )
                      case c_xor_case_1
                      step( solve( !KU( (~k⊕~k1⊕~r1.1) ) @ #vk.4 ) )
                        case c_xor_case_1
                        by step( solve( !KU( ~k1 ) @ #vk.7 ) )
                      next
                        case c_xor_case_2
                        by step( solve( !KU( ~k ) @ #vk.7 ) )
                      next
                        case c_xor_case_3
                        by step( contradiction /* cyclic */ )
                      next
                        case coerce
                        step( solve( !KD( (~k⊕~k1⊕~r1.1) ) ▶₀ #vk.3 ) )
                          case acceptreader
                          by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                        next
                          case initiatereader
                          by step( contradiction /* impossible chain */ )
                        next
                          case tag1
                          step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                            case d_0_fst
                            by step( contradiction /* impossible chain */ )
                          next
                            case d_0_snd
                            by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                          qed
                        qed
                      qed
                    next
                      case c_xor_case_2
                      by step( solve( !KU( ~k1 ) @ #vk.5 ) )
                    next
                      case c_xor_case_3
                      step( solve( !KU( (~k⊕~r1.1) ) @ #vk.4 ) )
                        case c_xor
                        by step( contradiction /* cyclic */ )
                      next
                        case coerce
                        step( solve( !KD( (~k⊕~r1.1) ) ▶₀ #vk.3 ) )
                          case acceptreader
                          by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                        next
                          case initiatereader
                          by step( contradiction /* impossible chain */ )
                        next
                          case tag1
                          step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                            case d_0_fst
                            by step( contradiction /* impossible chain */ )
                          next
                            case d_0_snd
                            by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                          qed
                        qed
                      qed
                    next
                      case c_xor_case_4
                      by step( solve( !KU( ~k ) @ #vk.5 ) )
                    next
                      case c_xor_case_5
                      step( solve( !KU( (~k1⊕~r1.1) ) @ #vk.4 ) )
                        case c_xor
                        by step( contradiction /* cyclic */ )
                      next
                        case coerce
                        step( solve( !KD( (~k1⊕~r1.1) ) ▶₀ #vk.3 ) )
                          case acceptreader
                          by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                        next
                          case initiatereader
                          by step( contradiction /* impossible chain */ )
                        next
                          case tag1
                          step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                            case d_0_fst
                            by step( contradiction /* impossible chain */ )
                          next
                            case d_0_snd
                            by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                          qed
                        qed
                      qed
                    next
                      case c_xor_case_6
                      step( solve( !KU( (~r1⊕~r1.1) ) @ #vk.4 ) )
                        case c_xor
                        by step( contradiction /* cyclic */ )
                      next
                        case coerce
                        step( solve( !KD( (~r1⊕~r1.1) ) ▶₀ #vk.3 ) )
                          case acceptreader
                          by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                        next
                          case initiatereader
                          by step( contradiction /* impossible chain */ )
                        next
                          case tag1
                          step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                            case d_0_fst
                            by step( contradiction /* impossible chain */ )
                          next
                            case d_0_snd
                            by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                          qed
                        qed
                      qed
                    next
                      case c_xor_case_7
                      by step( contradiction /* cyclic */ )
                    next
                      case coerce
                      step( solve( !KD( (~k⊕~k1⊕~r1⊕~r1.1) ) ▶₀ #vk.2 ) )
                        case acceptreader
                        by step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                      next
                        case initiatereader
                        by step( contradiction /* impossible chain */ )
                      next
                        case tag1
                        step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                          case d_0_fst
                          by step( contradiction /* impossible chain */ )
                        next
                          case d_0_snd
                          by step( solve( (#vr.6, 0) ~~> (#vk.2, 0) ) )
                        qed
                      qed
                    qed
                  next
                    case c_xor_case_02
                    step( solve( !KU( (~k⊕~k1⊕r0⊕~r1.1) ) @ #vk.3 ) )
                      case c_xor_case_1
                      step( solve( !KU( (~k⊕~k1⊕~r1.1) ) @ #vk.5 ) )
                        case c_xor_case_1
                        by step( solve( !KU( ~k1 ) @ #vk.7 ) )
                      next
                        case c_xor_case_2
                        by step( solve( !KU( ~k ) @ #vk.7 ) )
                      next
                        case c_xor_case_3
                        by step( contradiction /* cyclic */ )
                      next
                        case coerce
                        step( solve( !KD( (~k⊕~k1⊕~r1.1) ) ▶₀ #vk.3 ) )
                          case acceptreader
                          by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                        next
                          case initiatereader
                          by step( contradiction /* impossible chain */ )
                        next
                          case tag1
                          step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                            case d_0_fst
                            by step( contradiction /* impossible chain */ )
                          next
                            case d_0_snd
                            by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                          qed
                        qed
                      qed
                    next
                      case c_xor_case_2
                      by step( solve( !KU( ~k1 ) @ #vk.6 ) )
                    next
                      case c_xor_case_3
                      step( solve( !KU( (~k⊕~r1.1) ) @ #vk.5 ) )
                        case c_xor
                        by step( contradiction /* cyclic */ )
                      next
                        case coerce
                        step( solve( !KD( (~k⊕~r1.1) ) ▶₀ #vk.3 ) )
                          case acceptreader
                          by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                        next
                          case initiatereader
                          by step( contradiction /* impossible chain */ )
                        next
                          case tag1
                          step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                            case d_0_fst
                            by step( contradiction /* impossible chain */ )
                          next
                            case d_0_snd
                            by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                          qed
                        qed
                      qed
                    next
                      case c_xor_case_4
                      by step( solve( !KU( ~k ) @ #vk.6 ) )
                    next
                      case c_xor_case_5
                      step( solve( !KU( (~k1⊕~r1.1) ) @ #vk.5 ) )
                        case c_xor
                        by step( contradiction /* cyclic */ )
                      next
                        case coerce
                        step( solve( !KD( (~k1⊕~r1.1) ) ▶₀ #vk.3 ) )
                          case acceptreader
                          by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                        next
                          case initiatereader
                          by step( contradiction /* impossible chain */ )
                        next
                          case tag1
                          step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                            case d_0_fst
                            by step( contradiction /* impossible chain */ )
                          next
                            case d_0_snd
                            by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                          qed
                        qed
                      qed
                    next
                      case c_xor_case_6
                      step( solve( !KU( (r0⊕~r1.1) ) @ #vk.5 ) )
                        case c_xor
                        by step( contradiction /* cyclic */ )
                      next
                        case coerce
                        step( solve( !KD( (r0⊕~r1.1) ) ▶₀ #vk.3 ) )
                          case acceptreader
                          by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                        next
                          case initiatereader
                          by step( contradiction /* impossible chain */ )
                        next
                          case tag1
                          step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                            case d_0_fst
                            by step( contradiction /* impossible chain */ )
                          next
                            case d_0_snd
                            by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                          qed
                        qed
                      qed
                    next
                      case c_xor_case_7
                      by step( contradiction /* cyclic */ )
                    next
                      case coerce
                      step( solve( !KD( (~k⊕~k1⊕r0⊕~r1.1) ) ▶₀ #vk.2 ) )
                        case acceptreader
                        by step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                      next
                        case initiatereader
                        by step( contradiction /* impossible chain */ )
                      next
                        case tag1
                        step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                          case d_0_fst
                          by step( contradiction /* impossible chain */ )
                        next
                          case d_0_snd
                          by step( solve( (#vr.6, 0) ~~> (#vk.2, 0) ) )
                        qed
                      qed
                    qed
                  next
                    case c_xor_case_03
                    step( solve( !KU( (~k⊕~k1⊕~r1.1) ) @ #vk.3 ) )
                      case c_xor_case_1
                      by step( solve( !KU( ~k1 ) @ #vk.6 ) )
                    next
                      case c_xor_case_2
                      by step( solve( !KU( ~k ) @ #vk.6 ) )
                    next
                      case c_xor_case_3
                      by step( contradiction /* cyclic */ )
                    next
                      case coerce
                      step( solve( !KD( (~k⊕~k1⊕~r1.1) ) ▶₀ #vk.2 ) )
                        case acceptreader
                        by step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                      next
                        case initiatereader
                        by step( contradiction /* impossible chain */ )
                      next
                        case tag1
                        step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                          case d_0_fst
                          by step( contradiction /* impossible chain */ )
                        next
                          case d_0_snd
                          by step( solve( (#vr.6, 0) ~~> (#vk.2, 0) ) )
                        qed
                      qed
                    qed
                  next
                    case c_xor_case_04
                    by step( solve( !KU( ~k1 ) @ #vk.4 ) )
                  next
                    case c_xor_case_05
                    step( solve( !KU( (~k⊕~r1⊕~r1.1) ) @ #vk.3 ) )
                      case c_xor_case_1
                      step( solve( !KU( (~k1⊕r0) ) @ #vk.4 ) )
                        case c_xor
                        by step( solve( !KU( ~k1 ) @ #vk.7 ) )
                      next
                        case coerce
                        step( solve( !KD( (~k1⊕r0) ) ▶₀ #vk.3 ) )
                          case acceptreader
                          by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                        next
                          case initiatereader
                          by step( contradiction /* impossible chain */ )
                        next
                          case tag1
                          step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                            case d_0_fst
                            by step( contradiction /* impossible chain */ )
                          next
                            case d_0_snd
                            by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                          qed
                        qed
                      qed
                    next
                      case c_xor_case_2
                      by step( solve( !KU( ~k ) @ #vk.6 ) )
                    next
                      case c_xor_case_3
                      by step( contradiction /* cyclic */ )
                    next
                      case coerce
                      step( solve( !KD( (~k⊕~r1⊕~r1.1) ) ▶₀ #vk.2 ) )
                        case acceptreader
                        by step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                      next
                        case initiatereader
                        by step( contradiction /* impossible chain */ )
                      next
                        case tag1
                        step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                          case d_0_fst
                          by step( contradiction /* impossible chain */ )
                        next
                          case d_0_snd
                          by step( solve( (#vr.6, 0) ~~> (#vk.2, 0) ) )
                        qed
                      qed
                    qed
                  next
                    case c_xor_case_06
                    step( solve( !KU( (~k⊕r0⊕~r1.1) ) @ #vk.3 ) )
                      case c_xor_case_1
                      step( solve( !KU( (~k1⊕~r1) ) @ #vk.4 ) )
                        case c_xor
                        by step( solve( !KU( ~k1 ) @ #vk.7 ) )
                      next
                        case coerce
                        step( solve( !KD( (~k1⊕~r1) ) ▶₀ #vk.3 ) )
                          case acceptreader
                          by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                        next
                          case initiatereader
                          by step( contradiction /* impossible chain */ )
                        next
                          case tag1
                          step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                            case d_0_fst
                            by step( contradiction /* impossible chain */ )
                          next
                            case d_0_snd
                            by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                          qed
                        qed
                      qed
                    next
                      case c_xor_case_2
                      by step( solve( !KU( ~k ) @ #vk.6 ) )
                    next
                      case c_xor_case_3
                      by step( contradiction /* cyclic */ )
                    next
                      case coerce
                      step( solve( !KD( (~k⊕r0⊕~r1.1) ) ▶₀ #vk.2 ) )
                        case acceptreader
                        by step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                      next
                        case initiatereader
                        by step( contradiction /* impossible chain */ )
                      next
                        case tag1
                        step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                          case d_0_fst
                          by step( contradiction /* impossible chain */ )
                        next
                          case d_0_snd
                          by step( solve( (#vr.6, 0) ~~> (#vk.2, 0) ) )
                        qed
                      qed
                    qed
                  next
                    case c_xor_case_07
                    step( solve( !KU( (~k⊕~r1.1) ) @ #vk.3 ) )
                      case c_xor
                      by step( contradiction /* cyclic */ )
                    next
                      case coerce
                      step( solve( !KD( (~k⊕~r1.1) ) ▶₀ #vk.2 ) )
                        case acceptreader
                        by step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                      next
                        case initiatereader
                        by step( contradiction /* impossible chain */ )
                      next
                        case tag1
                        step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                          case d_0_fst
                          by step( contradiction /* impossible chain */ )
                        next
                          case d_0_snd
                          by step( solve( (#vr.6, 0) ~~> (#vk.2, 0) ) )
                        qed
                      qed
                    qed
                  next
                    case c_xor_case_08
                    by step( solve( !KU( ~k ) @ #vk.4 ) )
                  next
                    case c_xor_case_09
                    step( solve( !KU( (~k1⊕~r1⊕~r1.1) ) @ #vk.3 ) )
                      case c_xor_case_1
                      step( solve( !KU( (~k⊕r0) ) @ #vk.4 ) )
                        case c_xor
                        by step( solve( !KU( ~k ) @ #vk.7 ) )
                      next
                        case coerce
                        step( solve( !KD( (~k⊕r0) ) ▶₀ #vk.3 ) )
                          case acceptreader
                          by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                        next
                          case initiatereader
                          by step( contradiction /* impossible chain */ )
                        next
                          case tag1
                          step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                            case d_0_fst
                            by step( contradiction /* impossible chain */ )
                          next
                            case d_0_snd
                            by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                          qed
                        qed
                      qed
                    next
                      case c_xor_case_2
                      by step( solve( !KU( ~k1 ) @ #vk.6 ) )
                    next
                      case c_xor_case_3
                      by step( contradiction /* cyclic */ )
                    next
                      case coerce
                      step( solve( !KD( (~k1⊕~r1⊕~r1.1) ) ▶₀ #vk.2 ) )
                        case acceptreader
                        by step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                      next
                        case initiatereader
                        by step( contradiction /* impossible chain */ )
                      next
                        case tag1
                        step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                          case d_0_fst
                          by step( contradiction /* impossible chain */ )
                        next
                          case d_0_snd
                          by step( solve( (#vr.6, 0) ~~> (#vk.2, 0) ) )
                        qed
                      qed
                    qed
                  next
                    case c_xor_case_10
                    step( solve( !KU( (~k1⊕r0⊕~r1.1) ) @ #vk.3 ) )
                      case c_xor_case_1
                      step( solve( !KU( (~k⊕~r1) ) @ #vk.4 ) )
                        case c_xor
                        by step( solve( !KU( ~k ) @ #vk.7 ) )
                      next
                        case coerce
                        step( solve( !KD( (~k⊕~r1) ) ▶₀ #vk.3 ) )
                          case acceptreader
                          by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                        next
                          case initiatereader
                          by step( contradiction /* impossible chain */ )
                        next
                          case tag1
                          step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                            case d_0_fst
                            by step( contradiction /* impossible chain */ )
                          next
                            case d_0_snd
                            by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                          qed
                        qed
                      qed
                    next
                      case c_xor_case_2
                      by step( solve( !KU( ~k1 ) @ #vk.6 ) )
                    next
                      case c_xor_case_3
                      by step( contradiction /* cyclic */ )
                    next
                      case coerce
                      step( solve( !KD( (~k1⊕r0⊕~r1.1) ) ▶₀ #vk.2 ) )
                        case acceptreader
                        by step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                      next
                        case initiatereader
                        by step( contradiction /* impossible chain */ )
                      next
                        case tag1
                        step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                          case d_0_fst
                          by step( contradiction /* impossible chain */ )
                        next
                          case d_0_snd
                          by step( solve( (#vr.6, 0) ~~> (#vk.2, 0) ) )
                        qed
                      qed
                    qed
                  next
                    case c_xor_case_11
                    step( solve( !KU( (~k1⊕~r1.1) ) @ #vk.3 ) )
                      case c_xor
                      by step( contradiction /* cyclic */ )
                    next
                      case coerce
                      step( solve( !KD( (~k1⊕~r1.1) ) ▶₀ #vk.2 ) )
                        case acceptreader
                        by step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                      next
                        case initiatereader
                        by step( contradiction /* impossible chain */ )
                      next
                        case tag1
                        step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                          case d_0_fst
                          by step( contradiction /* impossible chain */ )
                        next
                          case d_0_snd
                          by step( solve( (#vr.6, 0) ~~> (#vk.2, 0) ) )
                        qed
                      qed
                    qed
                  next
                    case c_xor_case_12
                    step( solve( !KU( (~r1⊕r0⊕~r1.1) ) @ #vk.3 ) )
                      case c_xor_case_1
                      step( solve( !KU( (~k⊕~k1) ) @ #vk.4 ) )
                        case c_xor
                        by step( solve( !KU( ~k1 ) @ #vk.6 ) )
                      next
                        case coerce
                        step( solve( !KD( (~k⊕~k1) ) ▶₀ #vk.3 ) )
                          case acceptreader
                          by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                        next
                          case initiatereader
                          by step( contradiction /* impossible chain */ )
                        next
                          case tag1
                          step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                            case d_0_fst
                            by step( contradiction /* impossible chain */ )
                          next
                            case d_0_snd
                            by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                          qed
                        qed
                      qed
                    next
                      case c_xor_case_2
                      step( solve( !KU( (~k⊕~k1) ) @ #vk.4 ) )
                        case c_xor
                        by step( solve( !KU( ~k1 ) @ #vk.7 ) )
                      next
                        case coerce
                        step( solve( !KD( (~k⊕~k1) ) ▶₀ #vk.3 ) )
                          case acceptreader
                          by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                        next
                          case initiatereader
                          by step( contradiction /* impossible chain */ )
                        next
                          case tag1
                          step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                            case d_0_fst
                            by step( contradiction /* impossible chain */ )
                          next
                            case d_0_snd
                            by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                          qed
                        qed
                      qed
                    next
                      case c_xor_case_3
                      by step( contradiction /* cyclic */ )
                    next
                      case coerce
                      step( solve( !KD( (~r1⊕r0⊕~r1.1) ) ▶₀ #vk.2 ) )
                        case acceptreader
                        by step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                      next
                        case initiatereader
                        by step( contradiction /* impossible chain */ )
                      next
                        case tag1
                        step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                          case d_0_fst
                          by step( contradiction /* impossible chain */ )
                        next
                          case d_0_snd
                          by step( solve( (#vr.6, 0) ~~> (#vk.2, 0) ) )
                        qed
                      qed
                    qed
                  next
                    case c_xor_case_13
                    step( solve( !KU( (~r1⊕~r1.1) ) @ #vk.3 ) )
                      case c_xor
                      by step( contradiction /* cyclic */ )
                    next
                      case coerce
                      step( solve( !KD( (~r1⊕~r1.1) ) ▶₀ #vk.2 ) )
                        case acceptreader
                        by step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                      next
                        case initiatereader
                        by step( contradiction /* impossible chain */ )
                      next
                        case tag1
                        step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                          case d_0_fst
                          by step( contradiction /* impossible chain */ )
                        next
                          case d_0_snd
                          by step( solve( (#vr.6, 0) ~~> (#vk.2, 0) ) )
                        qed
                      qed
                    qed
                  next
                    case c_xor_case_14
                    step( solve( !KU( (r0⊕~r1.1) ) @ #vk.3 ) )
                      case c_xor
                      by step( contradiction /* cyclic */ )
                    next
                      case coerce
                      step( solve( !KD( (r0⊕~r1.1) ) ▶₀ #vk.2 ) )
                        case acceptreader
                        by step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                      next
                        case initiatereader
                        by step( contradiction /* impossible chain */ )
                      next
                        case tag1
                        step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                          case d_0_fst
                          by step( contradiction /* impossible chain */ )
                        next
                          case d_0_snd
                          by step( solve( (#vr.6, 0) ~~> (#vk.2, 0) ) )
                        qed
                      qed
                    qed
                  next
                    case c_xor_case_15
                    by step( contradiction /* cyclic */ )
                  next
                    case coerce
                    step( solve( !KD( (~k⊕~k1⊕~r1⊕r0⊕~r1.1) ) ▶₀ #vk.1 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.1, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_3
                  step( solve( !KU( (~k1⊕x⊕~r1.1) ) @ #vk.1 ) )
                    case c_xor_case_1
                    step( solve( !KU( (~k⊕~r1⊕x) ) @ #vk.2 ) )
                      case c_xor_case_1
                      step( solve( !KU( (~k1⊕~r1.1) ) @ #vk.3 ) )
                        case c_xor
                        by step( contradiction /* cyclic */ )
                      next
                        case coerce
                        step( solve( !KD( (~k1⊕~r1.1) ) ▶₀ #vk.3 ) )
                          case acceptreader
                          by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                        next
                          case initiatereader
                          by step( contradiction /* impossible chain */ )
                        next
                          case tag1
                          step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                            case d_0_fst
                            by step( contradiction /* impossible chain */ )
                          next
                            case d_0_snd
                            by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                          qed
                        qed
                      qed
                    next
                      case c_xor_case_2
                      by step( solve( !KU( ~k ) @ #vk.6 ) )
                    next
                      case c_xor_case_3
                      step( solve( !KU( (~k1⊕~r1.1) ) @ #vk.3 ) )
                        case c_xor
                        by step( solve( !KU( ~k1 ) @ #vk.7 ) )
                      next
                        case coerce
                        step( solve( !KD( (~k1⊕~r1.1) ) ▶₀ #vk.3 ) )
                          case acceptreader
                          by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                        next
                          case initiatereader
                          by step( contradiction /* impossible chain */ )
                        next
                          case tag1
                          step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                            case d_0_fst
                            by step( contradiction /* impossible chain */ )
                          next
                            case d_0_snd
                            by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                          qed
                        qed
                      qed
                    next
                      case coerce
                      step( solve( !KD( (~k⊕~r1⊕x) ) ▶₀ #vk.2 ) )
                        case acceptreader
                        by step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                      next
                        case initiatereader
                        by step( contradiction /* impossible chain */ )
                      next
                        case tag1
                        step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                          case d_0_fst
                          by step( contradiction /* impossible chain */ )
                        next
                          case d_0_snd
                          by step( solve( (#vr.6, 0) ~~> (#vk.2, 0) ) )
                        qed
                      qed
                    qed
                  next
                    case c_xor_case_2
                    by step( solve( !KU( ~k1 ) @ #vk.4 ) )
                  next
                    case c_xor_case_3
                    step( solve( !KU( (~k⊕~r1⊕x) ) @ #vk.2 ) )
                      case c_xor_case_1
                      by step( contradiction /* cyclic */ )
                    next
                      case c_xor_case_2
                      by step( solve( !KU( ~k ) @ #vk.6 ) )
                    next
                      case c_xor_case_3
                      step( solve( !KU( (~k1⊕x) ) @ #vk.4 ) )
                        case c_xor
                        by step( solve( !KU( ~k1 ) @ #vk.7 ) )
                      next
                        case coerce
                        step( solve( !KD( (~k1⊕x) ) ▶₀ #vk.3 ) )
                          case acceptreader
                          by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                        next
                          case initiatereader
                          by step( contradiction /* impossible chain */ )
                        next
                          case tag1
                          step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                            case d_0_fst
                            by step( contradiction /* impossible chain */ )
                          next
                            case d_0_snd
                            by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                          qed
                        qed
                      qed
                    next
                      case coerce
                      step( solve( !KD( (~k⊕~r1⊕x) ) ▶₀ #vk.2 ) )
                        case acceptreader
                        by step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                      next
                        case initiatereader
                        by step( contradiction /* impossible chain */ )
                      next
                        case tag1
                        step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                          case d_0_fst
                          by step( contradiction /* impossible chain */ )
                        next
                          case d_0_snd
                          by step( solve( (#vr.6, 0) ~~> (#vk.2, 0) ) )
                        qed
                      qed
                    qed
                  next
                    case coerce
                    step( solve( !KD( (~k1⊕x⊕~r1.1) ) ▶₀ #vk.1 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.1, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_4
                  by step( solve( !KU( ~k1 ) @ #vk.1 ) )
                next
                  case split_case_5
                  step( solve( !KU( (~k1⊕x) ) @ #vk.1 ) )
                    case c_xor
                    by step( solve( !KU( ~k1 ) @ #vk.4 ) )
                  next
                    case coerce
                    step( solve( !KD( (~k1⊕x) ) ▶₀ #vk.1 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.1, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_6
                  step( solve( !KU( (~k⊕~k1⊕~r1) ) @ #vk.2 ) )
                    case c_xor_case_1
                    by step( solve( !KU( ~k1 ) @ #vk.4 ) )
                  next
                    case c_xor_case_2
                    by step( solve( !KU( ~k ) @ #vk.4 ) )
                  next
                    case c_xor_case_3
                    by step( contradiction /* cyclic */ )
                  next
                    case coerce
                    step( solve( !KD( (~k⊕~k1⊕~r1) ) ▶₀ #vk.1 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.1, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_7
                  step( solve( !KU( (x⊕~r1.1) ) @ #vk.1 ) )
                    case c_xor
                    step( solve( !KU( (~k⊕~k1⊕~r1⊕x) ) @ #vk.2 ) )
                      case c_xor_case_1
                      by step( contradiction /* cyclic */ )
                    next
                      case c_xor_case_2
                      by step( solve( !KU( ~k1 ) @ #vk.6 ) )
                    next
                      case c_xor_case_3
                      step( solve( !KU( (~k⊕x) ) @ #vk.5 ) )
                        case c_xor
                        by step( solve( !KU( ~k ) @ #vk.7 ) )
                      next
                        case coerce
                        step( solve( !KD( (~k⊕x) ) ▶₀ #vk.3 ) )
                          case acceptreader
                          by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                        next
                          case initiatereader
                          by step( contradiction /* impossible chain */ )
                        next
                          case tag1
                          step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                            case d_0_fst
                            by step( contradiction /* impossible chain */ )
                          next
                            case d_0_snd
                            by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                          qed
                        qed
                      qed
                    next
                      case c_xor_case_4
                      by step( solve( !KU( ~k ) @ #vk.6 ) )
                    next
                      case c_xor_case_5
                      step( solve( !KU( (~k1⊕x) ) @ #vk.5 ) )
                        case c_xor
                        by step( solve( !KU( ~k1 ) @ #vk.7 ) )
                      next
                        case coerce
                        step( solve( !KD( (~k1⊕x) ) ▶₀ #vk.3 ) )
                          case acceptreader
                          by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                        next
                          case initiatereader
                          by step( contradiction /* impossible chain */ )
                        next
                          case tag1
                          step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                            case d_0_fst
                            by step( contradiction /* impossible chain */ )
                          next
                            case d_0_snd
                            by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                          qed
                        qed
                      qed
                    next
                      case c_xor_case_6
                      step( solve( !KU( (~r1⊕x) ) @ #vk.5 ) )
                        case c_xor
                        by step( contradiction /* cyclic */ )
                      next
                        case coerce
                        step( solve( !KD( (~r1⊕x) ) ▶₀ #vk.3 ) )
                          case acceptreader
                          by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                        next
                          case initiatereader
                          by step( contradiction /* impossible chain */ )
                        next
                          case tag1
                          step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                            case d_0_fst
                            by step( contradiction /* impossible chain */ )
                          next
                            case d_0_snd
                            by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                          qed
                        qed
                      qed
                    next
                      case c_xor_case_7
                      step( solve( !KU( (~k⊕~k1⊕~r1) ) @ #vk.5 ) )
                        case c_xor_case_1
                        by step( solve( !KU( ~k1 ) @ #vk.7 ) )
                      next
                        case c_xor_case_2
                        by step( solve( !KU( ~k ) @ #vk.7 ) )
                      next
                        case c_xor_case_3
                        by step( contradiction /* cyclic */ )
                      next
                        case coerce
                        step( solve( !KD( (~k⊕~k1⊕~r1) ) ▶₀ #vk.3 ) )
                          case acceptreader
                          by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                        next
                          case initiatereader
                          by step( contradiction /* impossible chain */ )
                        next
                          case tag1
                          step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                            case d_0_fst
                            by step( contradiction /* impossible chain */ )
                          next
                            case d_0_snd
                            by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                          qed
                        qed
                      qed
                    next
                      case coerce
                      step( solve( !KD( (~k⊕~k1⊕~r1⊕x) ) ▶₀ #vk.2 ) )
                        case acceptreader
                        by step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                      next
                        case initiatereader
                        by step( contradiction /* impossible chain */ )
                      next
                        case tag1
                        step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                          case d_0_fst
                          by step( contradiction /* impossible chain */ )
                        next
                          case d_0_snd
                          by step( solve( (#vr.6, 0) ~~> (#vk.2, 0) ) )
                        qed
                      qed
                    qed
                  next
                    case coerce
                    step( solve( !KD( (x⊕~r1.1) ) ▶₀ #vk.1 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.1, 0) ) )
                      qed
                    qed
                  qed
                qed
              next
                case split_case_4
                step( solve( !KU( zero ) @ #vk.1 ) )
                  case c_zero
                  step( solve( splitEqs(1) ) )
                    case split
                    step( solve( !KU( (~k⊕~k1⊕~r1⊕~r1.1) ) @ #vk.2 ) )
                      case c_xor_case_1
                      step( solve( !KU( (~k⊕~k1⊕~r1.1) ) @ #vk.3 ) )
                        case c_xor_case_1
                        by step( solve( !KU( ~k1 ) @ #vk.6 ) )
                      next
                        case c_xor_case_2
                        by step( solve( !KU( ~k ) @ #vk.6 ) )
                      next
                        case c_xor_case_3
                        by step( contradiction /* cyclic */ )
                      next
                        case coerce
                        step( solve( !KD( (~k⊕~k1⊕~r1.1) ) ▶₀ #vk.3 ) )
                          case acceptreader
                          by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                        next
                          case initiatereader
                          by step( contradiction /* impossible chain */ )
                        next
                          case tag1
                          step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                            case d_0_fst
                            by step( contradiction /* impossible chain */ )
                          next
                            case d_0_snd
                            by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                          qed
                        qed
                      qed
                    next
                      case c_xor_case_2
                      by step( solve( !KU( ~k1 ) @ #vk.4 ) )
                    next
                      case c_xor_case_3
                      step( solve( !KU( (~k⊕~r1.1) ) @ #vk.3 ) )
                        case c_xor
                        by step( contradiction /* cyclic */ )
                      next
                        case coerce
                        step( solve( !KD( (~k⊕~r1.1) ) ▶₀ #vk.3 ) )
                          case acceptreader
                          by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                        next
                          case initiatereader
                          by step( contradiction /* impossible chain */ )
                        next
                          case tag1
                          step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                            case d_0_fst
                            by step( contradiction /* impossible chain */ )
                          next
                            case d_0_snd
                            by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                          qed
                        qed
                      qed
                    next
                      case c_xor_case_4
                      by step( solve( !KU( ~k ) @ #vk.4 ) )
                    next
                      case c_xor_case_5
                      step( solve( !KU( (~k1⊕~r1.1) ) @ #vk.3 ) )
                        case c_xor
                        by step( contradiction /* cyclic */ )
                      next
                        case coerce
                        step( solve( !KD( (~k1⊕~r1.1) ) ▶₀ #vk.3 ) )
                          case acceptreader
                          by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                        next
                          case initiatereader
                          by step( contradiction /* impossible chain */ )
                        next
                          case tag1
                          step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                            case d_0_fst
                            by step( contradiction /* impossible chain */ )
                          next
                            case d_0_snd
                            by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                          qed
                        qed
                      qed
                    next
                      case c_xor_case_6
                      step( solve( !KU( (~r1⊕~r1.1) ) @ #vk.3 ) )
                        case c_xor
                        by step( contradiction /* cyclic */ )
                      next
                        case coerce
                        step( solve( !KD( (~r1⊕~r1.1) ) ▶₀ #vk.3 ) )
                          case acceptreader
                          by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                        next
                          case initiatereader
                          by step( contradiction /* impossible chain */ )
                        next
                          case tag1
                          step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                            case d_0_fst
                            by step( contradiction /* impossible chain */ )
                          next
                            case d_0_snd
                            by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                          qed
                        qed
                      qed
                    next
                      case c_xor_case_7
                      by step( contradiction /* cyclic */ )
                    next
                      case coerce
                      step( solve( !KD( (~k⊕~k1⊕~r1⊕~r1.1) ) ▶₀ #vk.2 ) )
                        case acceptreader
                        by step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                      next
                        case initiatereader
                        by step( contradiction /* impossible chain */ )
                      next
                        case tag1
                        step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                          case d_0_fst
                          by step( contradiction /* impossible chain */ )
                        next
                          case d_0_snd
                          by step( solve( (#vr.6, 0) ~~> (#vk.2, 0) ) )
                        qed
                      qed
                    qed
                  qed
                next
                  case coerce
                  step( solve( !KD( zero ) ▶₀ #vk.1 ) )
                    case acceptreader
                    by step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.6, 0) ~~> (#vk.1, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_5
                step( solve( !KU( (~k⊕~r1) ) @ #vk.1 ) )
                  case c_xor
                  by step( contradiction /* cyclic */ )
                next
                  case coerce
                  step( solve( !KD( (~k⊕~r1) ) ▶₀ #vk.1 ) )
                    case acceptreader
                    by step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.6, 0) ~~> (#vk.1, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_6
                step( solve( !KU( (~k⊕~r1⊕z) ) @ #vk.1 ) )
                  case c_xor_case_1
                  by step( contradiction /* cyclic */ )
                next
                  case c_xor_case_2
                  by step( solve( !KU( ~k ) @ #vk.4 ) )
                next
                  case c_xor_case_3
                  step( solve( !KU( (~k⊕~r1) ) @ #vk.4 ) )
                    case c_xor
                    by step( contradiction /* cyclic */ )
                  next
                    case coerce
                    step( solve( !KD( (~k⊕~r1) ) ▶₀ #vk.2 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.2, 0) ) )
                      qed
                    qed
                  qed
                next
                  case coerce
                  step( solve( !KD( (~k⊕~r1⊕z) ) ▶₀ #vk.1 ) )
                    case acceptreader
                    by step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.6, 0) ~~> (#vk.1, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_7
                step( solve( !KU( (~r1⊕x) ) @ #vk.1 ) )
                  case c_xor
                  by step( contradiction /* cyclic */ )
                next
                  case coerce
                  step( solve( !KD( (~r1⊕x) ) ▶₀ #vk.1 ) )
                    case acceptreader
                    by step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.6, 0) ~~> (#vk.1, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_8
                step( solve( !KU( (~k⊕x) ) @ #vk.1 ) )
                  case c_xor
                  by step( solve( !KU( ~k ) @ #vk.4 ) )
                next
                  case coerce
                  step( solve( !KD( (~k⊕x) ) ▶₀ #vk.1 ) )
                    case acceptreader
                    by step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.6, 0) ~~> (#vk.1, 0) ) )
                    qed
                  qed
                qed
              qed
            next
              case tag1_case_2
              step( solve( splitEqs(0) ) )
                case split_case_1
                by step( solve( !KU( ~k ) @ #vk.1 ) )
              next
                case split_case_2
                by step( contradiction /* cyclic */ )
              next
                case split_case_3
                step( solve( splitEqs(1) ) )
                  case split_case_1
                  by step( contradiction /* cyclic */ )
                next
                  case split_case_2
                  step( solve( !KU( (x⊕~r1.1) ) @ #vk.1 ) )
                    case c_xor
                    step( solve( !KU( (~r1⊕x) ) @ #vk.2 ) )
                      case c_xor
                      by step( contradiction /* cyclic */ )
                    next
                      case coerce
                      step( solve( !KD( (~r1⊕x) ) ▶₀ #vk.2 ) )
                        case acceptreader
                        by step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                      next
                        case initiatereader
                        by step( contradiction /* impossible chain */ )
                      next
                        case tag1
                        step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                          case d_0_fst
                          by step( contradiction /* impossible chain */ )
                        next
                          case d_0_snd
                          by step( solve( (#vr.6, 0) ~~> (#vk.2, 0) ) )
                        qed
                      qed
                    qed
                  next
                    case coerce
                    step( solve( !KD( (x⊕~r1.1) ) ▶₀ #vk.1 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.1, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_3
                  step( solve( !KU( (~r1⊕r0⊕~r1.1) ) @ #vk.2 ) )
                    case c_xor_case_1
                    step( solve( !KU( (~r1⊕~r1.1) ) @ #vk.3 ) )
                      case c_xor
                      by step( contradiction /* cyclic */ )
                    next
                      case coerce
                      step( solve( !KD( (~r1⊕~r1.1) ) ▶₀ #vk.2 ) )
                        case acceptreader
                        by step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                      next
                        case initiatereader
                        by step( contradiction /* impossible chain */ )
                      next
                        case tag1
                        step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                          case d_0_fst
                          by step( contradiction /* impossible chain */ )
                        next
                          case d_0_snd
                          by step( solve( (#vr.6, 0) ~~> (#vk.2, 0) ) )
                        qed
                      qed
                    qed
                  next
                    case c_xor_case_2
                    step( solve( !KU( (r0⊕~r1.1) ) @ #vk.3 ) )
                      case c_xor
                      by step( contradiction /* cyclic */ )
                    next
                      case coerce
                      step( solve( !KD( (r0⊕~r1.1) ) ▶₀ #vk.2 ) )
                        case acceptreader
                        by step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                      next
                        case initiatereader
                        by step( contradiction /* impossible chain */ )
                      next
                        case tag1
                        step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                          case d_0_fst
                          by step( contradiction /* impossible chain */ )
                        next
                          case d_0_snd
                          by step( solve( (#vr.6, 0) ~~> (#vk.2, 0) ) )
                        qed
                      qed
                    qed
                  next
                    case c_xor_case_3
                    by step( contradiction /* cyclic */ )
                  next
                    case coerce
                    step( solve( !KD( (~r1⊕r0⊕~r1.1) ) ▶₀ #vk.1 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.1, 0) ) )
                      qed
                    qed
                  qed
                qed
              next
                case split_case_4
                step( solve( !KU( zero ) @ #vk.1 ) )
                  case c_zero
                  step( solve( splitEqs(1) ) )
                    case split
                    step( solve( !KU( (~r1⊕~r1.1) ) @ #vk.2 ) )
                      case c_xor
                      by step( contradiction /* cyclic */ )
                    next
                      case coerce
                      step( solve( !KD( (~r1⊕~r1.1) ) ▶₀ #vk.2 ) )
                        case acceptreader
                        by step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                      next
                        case initiatereader
                        by step( contradiction /* impossible chain */ )
                      next
                        case tag1
                        step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                          case d_0_fst
                          by step( contradiction /* impossible chain */ )
                        next
                          case d_0_snd
                          by step( solve( (#vr.6, 0) ~~> (#vk.2, 0) ) )
                        qed
                      qed
                    qed
                  qed
                next
                  case coerce
                  step( solve( !KD( zero ) ▶₀ #vk.1 ) )
                    case acceptreader
                    by step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.6, 0) ~~> (#vk.1, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_5
                step( solve( !KU( (~k⊕~r1) ) @ #vk.1 ) )
                  case c_xor
                  by step( contradiction /* cyclic */ )
                next
                  case coerce
                  step( solve( !KD( (~k⊕~r1) ) ▶₀ #vk.1 ) )
                    case acceptreader
                    by step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.6, 0) ~~> (#vk.1, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_6
                step( solve( !KU( (~k⊕~r1⊕z) ) @ #vk.1 ) )
                  case c_xor_case_1
                  by step( contradiction /* cyclic */ )
                next
                  case c_xor_case_2
                  by step( solve( !KU( ~k ) @ #vk.4 ) )
                next
                  case c_xor_case_3
                  step( solve( !KU( (~k⊕~r1) ) @ #vk.4 ) )
                    case c_xor
                    by step( contradiction /* cyclic */ )
                  next
                    case coerce
                    step( solve( !KD( (~k⊕~r1) ) ▶₀ #vk.2 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.2, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.2, 0) ) )
                      qed
                    qed
                  qed
                next
                  case coerce
                  step( solve( !KD( (~k⊕~r1⊕z) ) ▶₀ #vk.1 ) )
                    case acceptreader
                    by step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.6, 0) ~~> (#vk.1, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_7
                step( solve( !KU( (~r1⊕x) ) @ #vk.1 ) )
                  case c_xor
                  by step( contradiction /* cyclic */ )
                next
                  case coerce
                  step( solve( !KD( (~r1⊕x) ) ▶₀ #vk.1 ) )
                    case acceptreader
                    by step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.6, 0) ~~> (#vk.1, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_8
                step( solve( !KU( (~k⊕x) ) @ #vk.1 ) )
                  case c_xor
                  by step( solve( !KU( ~k ) @ #vk.4 ) )
                next
                  case coerce
                  step( solve( !KD( (~k⊕x) ) ▶₀ #vk.1 ) )
                    case acceptreader
                    by step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.2, 0) ~~> (#vk.1, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.6, 0) ~~> (#vk.1, 0) ) )
                    qed
                  qed
                qed
              qed
            next
              case tag1_case_3
              step( solve( splitEqs(0) ) )
                case split_case_1
                by step( solve( !KU( ~k ) @ #vk.1 ) )
              next
                case split_case_2
                by step( contradiction /* cyclic */ )
              next
                case split_case_3
                MIRRORED
              next
                case split_case_4
                step( solve( !KU( zero ) @ #vk.1 ) )
                  case c_zero
                  MIRRORED
                next
                  case coerce
                  step( solve( !KD( zero ) ▶₀ #vk.1 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.5, 0) ~~> (#vk.1, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_5
                step( solve( !KU( (~k⊕~r1) ) @ #vk.1 ) )
                  case c_xor
                  by step( contradiction /* cyclic */ )
                next
                  case coerce
                  step( solve( !KD( (~k⊕~r1) ) ▶₀ #vk.1 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.5, 0) ~~> (#vk.1, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_6
                step( solve( !KU( (~k⊕~r1⊕z) ) @ #vk.1 ) )
                  case c_xor_case_1
                  by step( contradiction /* cyclic */ )
                next
                  case c_xor_case_2
                  by step( solve( !KU( ~k ) @ #vk.3 ) )
                next
                  case c_xor_case_3
                  step( solve( !KU( (~k⊕~r1) ) @ #vk.3 ) )
                    case c_xor
                    by step( contradiction /* cyclic */ )
                  next
                    case coerce
                    step( solve( !KD( (~k⊕~r1) ) ▶₀ #vk.2 ) )
                      case acceptreader
                      by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.5, 0) ~~> (#vk.2, 0) ) )
                      qed
                    qed
                  qed
                next
                  case coerce
                  step( solve( !KD( (~k⊕~r1⊕z) ) ▶₀ #vk.1 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.5, 0) ~~> (#vk.1, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_7
                step( solve( !KU( (~r1⊕x) ) @ #vk.1 ) )
                  case c_xor
                  by step( contradiction /* cyclic */ )
                next
                  case coerce
                  step( solve( !KD( (~r1⊕x) ) ▶₀ #vk.1 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.5, 0) ~~> (#vk.1, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_8
                step( solve( !KU( (~k⊕x) ) @ #vk.1 ) )
                  case c_xor
                  by step( solve( !KU( ~k ) @ #vk.3 ) )
                next
                  case coerce
                  step( solve( !KD( (~k⊕x) ) ▶₀ #vk.1 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.5, 0) ~~> (#vk.1, 0) ) )
                    qed
                  qed
                qed
              qed
            qed
          qed
        qed
      next
        case pair
        step( solve( TagRun( ~k, phase ) ▶₀ #vr ) )
          case setup_case_1
          step( solve( !KU( ~r1 ) @ #vk.2 ) )
            case tag1
            step( solve( !KU( h(z) ) @ #vk.3 ) )
              case c_h
              step( solve( splitEqs(0) ) )
                case split_case_1
                by step( solve( !KU( ~k ) @ #vk.3 ) )
              next
                case split_case_2
                by step( contradiction /* cyclic */ )
              next
                case split_case_3
                step( solve( !KU( (~k⊕~r1⊕r0) ) @ #vk.4 ) )
                  case c_xor_case_1
                  step( solve( !KU( (~k⊕r0) ) @ #vk.5 ) )
                    case c_xor
                    by step( solve( !KU( ~k ) @ #vk.6 ) )
                  next
                    case coerce
                    step( solve( !KD( (~k⊕r0) ) ▶₀ #vk.4 ) )
                      case acceptreader
                      by step( solve( (#vl.1, 0) ~~> (#vk.4, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.1, 0) ~~> (#vk.4, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.4, 0) ~~> (#vk.4, 0) ) )
                      qed
                    qed
                  qed
                next
                  case c_xor_case_2
                  by step( solve( !KU( ~k ) @ #vk.6 ) )
                next
                  case c_xor_case_3
                  step( solve( !KU( (~k⊕~r1) ) @ #vk.5 ) )
                    case c_xor
                    by step( solve( !KU( ~k ) @ #vk.6 ) )
                  next
                    case coerce
                    step( solve( !KD( (~k⊕~r1) ) ▶₀ #vk.4 ) )
                      case acceptreader
                      by step( solve( (#vl.1, 0) ~~> (#vk.4, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.1, 0) ~~> (#vk.4, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.4, 0) ~~> (#vk.4, 0) ) )
                      qed
                    qed
                  qed
                next
                  case coerce
                  step( solve( !KD( (~k⊕~r1⊕r0) ) ▶₀ #vk.3 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.4, 0) ~~> (#vk.3, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_4
                step( solve( !KU( (~k⊕~r1) ) @ #vk.4 ) )
                  case c_xor
                  by step( solve( !KU( ~k ) @ #vk.5 ) )
                next
                  case coerce
                  step( solve( !KD( (~k⊕~r1) ) ▶₀ #vk.3 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.4, 0) ~~> (#vk.3, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_5
                step( solve( !KU( (~k⊕~r1) ) @ #vk.3 ) )
                  case c_xor
                  by step( contradiction /* cyclic */ )
                next
                  case coerce
                  step( solve( !KD( (~k⊕~r1) ) ▶₀ #vk.3 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.4, 0) ~~> (#vk.3, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_6
                step( solve( !KU( (~k⊕~r1⊕z) ) @ #vk.3 ) )
                  case c_xor_case_1
                  by step( contradiction /* cyclic */ )
                next
                  case c_xor_case_2
                  by step( solve( !KU( ~k ) @ #vk.6 ) )
                next
                  case c_xor_case_3
                  step( solve( !KU( (~k⊕~r1) ) @ #vk.5 ) )
                    case c_xor
                    by step( contradiction /* cyclic */ )
                  next
                    case coerce
                    step( solve( !KD( (~k⊕~r1) ) ▶₀ #vk.4 ) )
                      case acceptreader
                      by step( solve( (#vl.1, 0) ~~> (#vk.4, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.1, 0) ~~> (#vk.4, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.4, 0) ~~> (#vk.4, 0) ) )
                      qed
                    qed
                  qed
                next
                  case coerce
                  step( solve( !KD( (~k⊕~r1⊕z) ) ▶₀ #vk.3 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.4, 0) ~~> (#vk.3, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_7
                step( solve( !KU( (~r1⊕x) ) @ #vk.3 ) )
                  case c_xor
                  by step( contradiction /* cyclic */ )
                next
                  case coerce
                  step( solve( !KD( (~r1⊕x) ) ▶₀ #vk.3 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.4, 0) ~~> (#vk.3, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_8
                step( solve( !KU( (~k⊕x) ) @ #vk.3 ) )
                  case c_xor
                  by step( solve( !KU( ~k ) @ #vk.6 ) )
                next
                  case coerce
                  step( solve( !KD( (~k⊕x) ) ▶₀ #vk.3 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.4, 0) ~~> (#vk.3, 0) ) )
                    qed
                  qed
                qed
              qed
            next
              case tag1_case_1
              step( solve( splitEqs(0) ) )
                case split_case_1
                by step( solve( !KU( ~k ) @ #vk.3 ) )
              next
                case split_case_2
                MIRRORED
              next
                case split_case_3
                MIRRORED
              next
                case split_case_4
                step( solve( !KU( zero ) @ #vk.3 ) )
                  case c_zero
                  MIRRORED
                next
                  case coerce
                  step( solve( !KD( zero ) ▶₀ #vk.3 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.5, 0) ~~> (#vk.3, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_5
                step( solve( !KU( (~k⊕~r1) ) @ #vk.3 ) )
                  case c_xor
                  by step( contradiction /* cyclic */ )
                next
                  case coerce
                  step( solve( !KD( (~k⊕~r1) ) ▶₀ #vk.3 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.5, 0) ~~> (#vk.3, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_6
                step( solve( !KU( (~k⊕~r1⊕z) ) @ #vk.3 ) )
                  case c_xor_case_1
                  by step( contradiction /* cyclic */ )
                next
                  case c_xor_case_2
                  by step( solve( !KU( ~k ) @ #vk.5 ) )
                next
                  case c_xor_case_3
                  step( solve( !KU( (~k⊕~r1) ) @ #vk.5 ) )
                    case c_xor
                    by step( contradiction /* cyclic */ )
                  next
                    case coerce
                    step( solve( !KD( (~k⊕~r1) ) ▶₀ #vk.4 ) )
                      case acceptreader
                      by step( solve( (#vl.1, 0) ~~> (#vk.4, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.1, 0) ~~> (#vk.4, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.5, 0) ~~> (#vk.4, 0) ) )
                      qed
                    qed
                  qed
                next
                  case coerce
                  step( solve( !KD( (~k⊕~r1⊕z) ) ▶₀ #vk.3 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.5, 0) ~~> (#vk.3, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_7
                step( solve( !KU( (~r1⊕x) ) @ #vk.3 ) )
                  case c_xor
                  by step( contradiction /* cyclic */ )
                next
                  case coerce
                  step( solve( !KD( (~r1⊕x) ) ▶₀ #vk.3 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.5, 0) ~~> (#vk.3, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_8
                step( solve( !KU( (~k⊕x) ) @ #vk.3 ) )
                  case c_xor
                  by step( solve( !KU( ~k ) @ #vk.5 ) )
                next
                  case coerce
                  step( solve( !KD( (~k⊕x) ) ▶₀ #vk.3 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.5, 0) ~~> (#vk.3, 0) ) )
                    qed
                  qed
                qed
              qed
            next
              case tag1_case_2
              step( solve( splitEqs(0) ) )
                case split_case_1
                by step( solve( !KU( ~k ) @ #vk.3 ) )
              next
                case split_case_2
                by step( contradiction /* cyclic */ )
              next
                case split_case_3
                step( solve( splitEqs(2) ) )
                  case split_case_1
                  by step( solve( !KU( ~k2 ) @ #vk.3 ) )
                next
                  case split_case_2
                  step( solve( !KU( (~k⊕~k2⊕~r1) ) @ #vk.4 ) )
                    case c_xor_case_1
                    by step( solve( !KU( ~k2 ) @ #vk.6 ) )
                  next
                    case c_xor_case_2
                    by step( solve( !KU( ~k ) @ #vk.6 ) )
                  next
                    case c_xor_case_3
                    by step( contradiction /* cyclic */ )
                  next
                    case coerce
                    step( solve( !KD( (~k⊕~k2⊕~r1) ) ▶₀ #vk.3 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_3
                  step( solve( !KU( (~k2⊕~r1.1) ) @ #vk.3 ) )
                    case c_xor
                    by step( solve( !KU( ~k2 ) @ #vk.6 ) )
                  next
                    case coerce
                    step( solve( !KD( (~k2⊕~r1.1) ) ▶₀ #vk.3 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_4
                  step( solve( !KU( (~k2⊕x⊕~r1.1) ) @ #vk.3 ) )
                    case c_xor_case_1
                    step( solve( !KU( (~k⊕~r1⊕x) ) @ #vk.4 ) )
                      case c_xor_case_1
                      step( solve( !KU( (~k2⊕~r1.1) ) @ #vk.5 ) )
                        case c_xor
                        by step( contradiction /* cyclic */ )
                      next
                        case coerce
                        step( solve( !KD( (~k2⊕~r1.1) ) ▶₀ #vk.5 ) )
                          case acceptreader
                          by step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                        next
                          case initiatereader
                          by step( contradiction /* impossible chain */ )
                        next
                          case tag1
                          step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                            case d_0_fst
                            by step( contradiction /* impossible chain */ )
                          next
                            case d_0_snd
                            by step( solve( (#vr.6, 0) ~~> (#vk.5, 0) ) )
                          qed
                        qed
                      qed
                    next
                      case c_xor_case_2
                      by step( solve( !KU( ~k ) @ #vk.8 ) )
                    next
                      case c_xor_case_3
                      step( solve( !KU( (~k2⊕~r1.1) ) @ #vk.5 ) )
                        case c_xor
                        by step( solve( !KU( ~k2 ) @ #vk.9 ) )
                      next
                        case coerce
                        step( solve( !KD( (~k2⊕~r1.1) ) ▶₀ #vk.5 ) )
                          case acceptreader
                          by step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                        next
                          case initiatereader
                          by step( contradiction /* impossible chain */ )
                        next
                          case tag1
                          step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                            case d_0_fst
                            by step( contradiction /* impossible chain */ )
                          next
                            case d_0_snd
                            by step( solve( (#vr.6, 0) ~~> (#vk.5, 0) ) )
                          qed
                        qed
                      qed
                    next
                      case coerce
                      step( solve( !KD( (~k⊕~r1⊕x) ) ▶₀ #vk.4 ) )
                        case acceptreader
                        by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                      next
                        case initiatereader
                        by step( contradiction /* impossible chain */ )
                      next
                        case tag1
                        step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                          case d_0_fst
                          by step( contradiction /* impossible chain */ )
                        next
                          case d_0_snd
                          by step( solve( (#vr.6, 0) ~~> (#vk.4, 0) ) )
                        qed
                      qed
                    qed
                  next
                    case c_xor_case_2
                    by step( solve( !KU( ~k2 ) @ #vk.6 ) )
                  next
                    case c_xor_case_3
                    step( solve( !KU( (~k⊕~r1⊕x) ) @ #vk.4 ) )
                      case c_xor_case_1
                      by step( contradiction /* cyclic */ )
                    next
                      case c_xor_case_2
                      by step( solve( !KU( ~k ) @ #vk.8 ) )
                    next
                      case c_xor_case_3
                      step( solve( !KU( (~k2⊕x) ) @ #vk.6 ) )
                        case c_xor
                        by step( solve( !KU( ~k2 ) @ #vk.9 ) )
                      next
                        case coerce
                        step( solve( !KD( (~k2⊕x) ) ▶₀ #vk.5 ) )
                          case acceptreader
                          by step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                        next
                          case initiatereader
                          by step( contradiction /* impossible chain */ )
                        next
                          case tag1
                          step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                            case d_0_fst
                            by step( contradiction /* impossible chain */ )
                          next
                            case d_0_snd
                            by step( solve( (#vr.6, 0) ~~> (#vk.5, 0) ) )
                          qed
                        qed
                      qed
                    next
                      case coerce
                      step( solve( !KD( (~k⊕~r1⊕x) ) ▶₀ #vk.4 ) )
                        case acceptreader
                        by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                      next
                        case initiatereader
                        by step( contradiction /* impossible chain */ )
                      next
                        case tag1
                        step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                          case d_0_fst
                          by step( contradiction /* impossible chain */ )
                        next
                          case d_0_snd
                          by step( solve( (#vr.6, 0) ~~> (#vk.4, 0) ) )
                        qed
                      qed
                    qed
                  next
                    case coerce
                    step( solve( !KD( (~k2⊕x⊕~r1.1) ) ▶₀ #vk.3 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_5
                  step( solve( !KU( (~k2⊕x) ) @ #vk.3 ) )
                    case c_xor
                    by step( solve( !KU( ~k2 ) @ #vk.6 ) )
                  next
                    case coerce
                    step( solve( !KD( (~k2⊕x) ) ▶₀ #vk.3 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_6
                  step( solve( !KU( (x⊕~r1.1) ) @ #vk.3 ) )
                    case c_xor
                    step( solve( !KU( (~k⊕~k2⊕~r1⊕x) ) @ #vk.4 ) )
                      case c_xor_case_1
                      by step( contradiction /* cyclic */ )
                    next
                      case c_xor_case_2
                      by step( solve( !KU( ~k2 ) @ #vk.8 ) )
                    next
                      case c_xor_case_3
                      step( solve( !KU( (~k⊕x) ) @ #vk.7 ) )
                        case c_xor
                        by step( solve( !KU( ~k ) @ #vk.9 ) )
                      next
                        case coerce
                        step( solve( !KD( (~k⊕x) ) ▶₀ #vk.5 ) )
                          case acceptreader
                          by step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                        next
                          case initiatereader
                          by step( contradiction /* impossible chain */ )
                        next
                          case tag1
                          step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                            case d_0_fst
                            by step( contradiction /* impossible chain */ )
                          next
                            case d_0_snd
                            by step( solve( (#vr.6, 0) ~~> (#vk.5, 0) ) )
                          qed
                        qed
                      qed
                    next
                      case c_xor_case_4
                      by step( solve( !KU( ~k ) @ #vk.8 ) )
                    next
                      case c_xor_case_5
                      step( solve( !KU( (~k2⊕x) ) @ #vk.7 ) )
                        case c_xor
                        by step( solve( !KU( ~k2 ) @ #vk.9 ) )
                      next
                        case coerce
                        step( solve( !KD( (~k2⊕x) ) ▶₀ #vk.5 ) )
                          case acceptreader
                          by step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                        next
                          case initiatereader
                          by step( contradiction /* impossible chain */ )
                        next
                          case tag1
                          step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                            case d_0_fst
                            by step( contradiction /* impossible chain */ )
                          next
                            case d_0_snd
                            by step( solve( (#vr.6, 0) ~~> (#vk.5, 0) ) )
                          qed
                        qed
                      qed
                    next
                      case c_xor_case_6
                      step( solve( !KU( (~r1⊕x) ) @ #vk.7 ) )
                        case c_xor
                        by step( contradiction /* cyclic */ )
                      next
                        case coerce
                        step( solve( !KD( (~r1⊕x) ) ▶₀ #vk.5 ) )
                          case acceptreader
                          by step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                        next
                          case initiatereader
                          by step( contradiction /* impossible chain */ )
                        next
                          case tag1
                          step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                            case d_0_fst
                            by step( contradiction /* impossible chain */ )
                          next
                            case d_0_snd
                            by step( solve( (#vr.6, 0) ~~> (#vk.5, 0) ) )
                          qed
                        qed
                      qed
                    next
                      case c_xor_case_7
                      step( solve( !KU( (~k⊕~k2⊕~r1) ) @ #vk.7 ) )
                        case c_xor_case_1
                        by step( solve( !KU( ~k2 ) @ #vk.9 ) )
                      next
                        case c_xor_case_2
                        by step( solve( !KU( ~k ) @ #vk.9 ) )
                      next
                        case c_xor_case_3
                        by step( contradiction /* cyclic */ )
                      next
                        case coerce
                        step( solve( !KD( (~k⊕~k2⊕~r1) ) ▶₀ #vk.5 ) )
                          case acceptreader
                          by step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                        next
                          case initiatereader
                          by step( contradiction /* impossible chain */ )
                        next
                          case tag1
                          step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                            case d_0_fst
                            by step( contradiction /* impossible chain */ )
                          next
                            case d_0_snd
                            by step( solve( (#vr.6, 0) ~~> (#vk.5, 0) ) )
                          qed
                        qed
                      qed
                    next
                      case coerce
                      step( solve( !KD( (~k⊕~k2⊕~r1⊕x) ) ▶₀ #vk.4 ) )
                        case acceptreader
                        by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                      next
                        case initiatereader
                        by step( contradiction /* impossible chain */ )
                      next
                        case tag1
                        step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                          case d_0_fst
                          by step( contradiction /* impossible chain */ )
                        next
                          case d_0_snd
                          by step( solve( (#vr.6, 0) ~~> (#vk.4, 0) ) )
                        qed
                      qed
                    qed
                  next
                    case coerce
                    step( solve( !KD( (x⊕~r1.1) ) ▶₀ #vk.3 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_7
                  step( solve( !KU( (~k⊕~k2⊕~r1⊕r0⊕~r1.1) ) @ #vk.4 ) )
                    case c_xor_case_01
                    step( solve( !KU( (~k⊕~k2⊕~r1⊕~r1.1) ) @ #vk.5 ) )
                      case c_xor_case_1
                      step( solve( !KU( (~k⊕~k2⊕~r1.1) ) @ #vk.6 ) )
                        case c_xor_case_1
                        by step( solve( !KU( ~k2 ) @ #vk.8 ) )
                      next
                        case c_xor_case_2
                        by step( solve( !KU( ~k ) @ #vk.8 ) )
                      next
                        case c_xor_case_3
                        by step( contradiction /* cyclic */ )
                      next
                        case coerce
                        step( solve( !KD( (~k⊕~k2⊕~r1.1) ) ▶₀ #vk.5 ) )
                          case acceptreader
                          by step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                        next
                          case initiatereader
                          by step( contradiction /* impossible chain */ )
                        next
                          case tag1
                          step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                            case d_0_fst
                            by step( contradiction /* impossible chain */ )
                          next
                            case d_0_snd
                            by step( solve( (#vr.6, 0) ~~> (#vk.5, 0) ) )
                          qed
                        qed
                      qed
                    next
                      case c_xor_case_2
                      by step( solve( !KU( ~k2 ) @ #vk.7 ) )
                    next
                      case c_xor_case_3
                      step( solve( !KU( (~k⊕~r1.1) ) @ #vk.6 ) )
                        case c_xor
                        by step( contradiction /* cyclic */ )
                      next
                        case coerce
                        step( solve( !KD( (~k⊕~r1.1) ) ▶₀ #vk.5 ) )
                          case acceptreader
                          by step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                        next
                          case initiatereader
                          by step( contradiction /* impossible chain */ )
                        next
                          case tag1
                          step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                            case d_0_fst
                            by step( contradiction /* impossible chain */ )
                          next
                            case d_0_snd
                            by step( solve( (#vr.6, 0) ~~> (#vk.5, 0) ) )
                          qed
                        qed
                      qed
                    next
                      case c_xor_case_4
                      by step( solve( !KU( ~k ) @ #vk.7 ) )
                    next
                      case c_xor_case_5
                      step( solve( !KU( (~k2⊕~r1.1) ) @ #vk.6 ) )
                        case c_xor
                        by step( contradiction /* cyclic */ )
                      next
                        case coerce
                        step( solve( !KD( (~k2⊕~r1.1) ) ▶₀ #vk.5 ) )
                          case acceptreader
                          by step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                        next
                          case initiatereader
                          by step( contradiction /* impossible chain */ )
                        next
                          case tag1
                          step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                            case d_0_fst
                            by step( contradiction /* impossible chain */ )
                          next
                            case d_0_snd
                            by step( solve( (#vr.6, 0) ~~> (#vk.5, 0) ) )
                          qed
                        qed
                      qed
                    next
                      case c_xor_case_6
                      step( solve( !KU( (~r1⊕~r1.1) ) @ #vk.6 ) )
                        case c_xor
                        by step( contradiction /* cyclic */ )
                      next
                        case coerce
                        step( solve( !KD( (~r1⊕~r1.1) ) ▶₀ #vk.5 ) )
                          case acceptreader
                          by step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                        next
                          case initiatereader
                          by step( contradiction /* impossible chain */ )
                        next
                          case tag1
                          step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                            case d_0_fst
                            by step( contradiction /* impossible chain */ )
                          next
                            case d_0_snd
                            by step( solve( (#vr.6, 0) ~~> (#vk.5, 0) ) )
                          qed
                        qed
                      qed
                    next
                      case c_xor_case_7
                      by step( contradiction /* cyclic */ )
                    next
                      case coerce
                      step( solve( !KD( (~k⊕~k2⊕~r1⊕~r1.1) ) ▶₀ #vk.4 ) )
                        case acceptreader
                        by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                      next
                        case initiatereader
                        by step( contradiction /* impossible chain */ )
                      next
                        case tag1
                        step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                          case d_0_fst
                          by step( contradiction /* impossible chain */ )
                        next
                          case d_0_snd
                          by step( solve( (#vr.6, 0) ~~> (#vk.4, 0) ) )
                        qed
                      qed
                    qed
                  next
                    case c_xor_case_02
                    step( solve( !KU( (~k⊕~k2⊕r0⊕~r1.1) ) @ #vk.5 ) )
                      case c_xor_case_1
                      step( solve( !KU( (~k⊕~k2⊕~r1.1) ) @ #vk.6 ) )
                        case c_xor_case_1
                        by step( solve( !KU( ~k2 ) @ #vk.8 ) )
                      next
                        case c_xor_case_2
                        by step( solve( !KU( ~k ) @ #vk.8 ) )
                      next
                        case c_xor_case_3
                        by step( contradiction /* cyclic */ )
                      next
                        case coerce
                        step( solve( !KD( (~k⊕~k2⊕~r1.1) ) ▶₀ #vk.5 ) )
                          case acceptreader
                          by step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                        next
                          case initiatereader
                          by step( contradiction /* impossible chain */ )
                        next
                          case tag1
                          step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                            case d_0_fst
                            by step( contradiction /* impossible chain */ )
                          next
                            case d_0_snd
                            by step( solve( (#vr.6, 0) ~~> (#vk.5, 0) ) )
                          qed
                        qed
                      qed
                    next
                      case c_xor_case_2
                      by step( solve( !KU( ~k2 ) @ #vk.7 ) )
                    next
                      case c_xor_case_3
                      step( solve( !KU( (~k⊕~r1.1) ) @ #vk.6 ) )
                        case c_xor
                        by step( contradiction /* cyclic */ )
                      next
                        case coerce
                        step( solve( !KD( (~k⊕~r1.1) ) ▶₀ #vk.5 ) )
                          case acceptreader
                          by step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                        next
                          case initiatereader
                          by step( contradiction /* impossible chain */ )
                        next
                          case tag1
                          step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                            case d_0_fst
                            by step( contradiction /* impossible chain */ )
                          next
                            case d_0_snd
                            by step( solve( (#vr.6, 0) ~~> (#vk.5, 0) ) )
                          qed
                        qed
                      qed
                    next
                      case c_xor_case_4
                      by step( solve( !KU( ~k ) @ #vk.7 ) )
                    next
                      case c_xor_case_5
                      step( solve( !KU( (~k2⊕~r1.1) ) @ #vk.6 ) )
                        case c_xor
                        by step( contradiction /* cyclic */ )
                      next
                        case coerce
                        step( solve( !KD( (~k2⊕~r1.1) ) ▶₀ #vk.5 ) )
                          case acceptreader
                          by step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                        next
                          case initiatereader
                          by step( contradiction /* impossible chain */ )
                        next
                          case tag1
                          step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                            case d_0_fst
                            by step( contradiction /* impossible chain */ )
                          next
                            case d_0_snd
                            by step( solve( (#vr.6, 0) ~~> (#vk.5, 0) ) )
                          qed
                        qed
                      qed
                    next
                      case c_xor_case_6
                      step( solve( !KU( (r0⊕~r1.1) ) @ #vk.6 ) )
                        case c_xor
                        by step( contradiction /* cyclic */ )
                      next
                        case coerce
                        step( solve( !KD( (r0⊕~r1.1) ) ▶₀ #vk.5 ) )
                          case acceptreader
                          by step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                        next
                          case initiatereader
                          by step( contradiction /* impossible chain */ )
                        next
                          case tag1
                          step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                            case d_0_fst
                            by step( contradiction /* impossible chain */ )
                          next
                            case d_0_snd
                            by step( solve( (#vr.6, 0) ~~> (#vk.5, 0) ) )
                          qed
                        qed
                      qed
                    next
                      case c_xor_case_7
                      by step( contradiction /* cyclic */ )
                    next
                      case coerce
                      step( solve( !KD( (~k⊕~k2⊕r0⊕~r1.1) ) ▶₀ #vk.4 ) )
                        case acceptreader
                        by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                      next
                        case initiatereader
                        by step( contradiction /* impossible chain */ )
                      next
                        case tag1
                        step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                          case d_0_fst
                          by step( contradiction /* impossible chain */ )
                        next
                          case d_0_snd
                          by step( solve( (#vr.6, 0) ~~> (#vk.4, 0) ) )
                        qed
                      qed
                    qed
                  next
                    case c_xor_case_03
                    step( solve( !KU( (~k⊕~k2⊕~r1.1) ) @ #vk.5 ) )
                      case c_xor_case_1
                      by step( solve( !KU( ~k2 ) @ #vk.8 ) )
                    next
                      case c_xor_case_2
                      by step( solve( !KU( ~k ) @ #vk.8 ) )
                    next
                      case c_xor_case_3
                      by step( contradiction /* cyclic */ )
                    next
                      case coerce
                      step( solve( !KD( (~k⊕~k2⊕~r1.1) ) ▶₀ #vk.4 ) )
                        case acceptreader
                        by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                      next
                        case initiatereader
                        by step( contradiction /* impossible chain */ )
                      next
                        case tag1
                        step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                          case d_0_fst
                          by step( contradiction /* impossible chain */ )
                        next
                          case d_0_snd
                          by step( solve( (#vr.6, 0) ~~> (#vk.4, 0) ) )
                        qed
                      qed
                    qed
                  next
                    case c_xor_case_04
                    by step( solve( !KU( ~k2 ) @ #vk.6 ) )
                  next
                    case c_xor_case_05
                    step( solve( !KU( (~k⊕~r1⊕~r1.1) ) @ #vk.5 ) )
                      case c_xor_case_1
                      step( solve( !KU( (~k2⊕r0) ) @ #vk.6 ) )
                        case c_xor
                        by step( solve( !KU( ~k2 ) @ #vk.8 ) )
                      next
                        case coerce
                        step( solve( !KD( (~k2⊕r0) ) ▶₀ #vk.5 ) )
                          case acceptreader
                          by step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                        next
                          case initiatereader
                          by step( contradiction /* impossible chain */ )
                        next
                          case tag1
                          step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                            case d_0_fst
                            by step( contradiction /* impossible chain */ )
                          next
                            case d_0_snd
                            by step( solve( (#vr.6, 0) ~~> (#vk.5, 0) ) )
                          qed
                        qed
                      qed
                    next
                      case c_xor_case_2
                      by step( solve( !KU( ~k ) @ #vk.8 ) )
                    next
                      case c_xor_case_3
                      by step( contradiction /* cyclic */ )
                    next
                      case coerce
                      step( solve( !KD( (~k⊕~r1⊕~r1.1) ) ▶₀ #vk.4 ) )
                        case acceptreader
                        by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                      next
                        case initiatereader
                        by step( contradiction /* impossible chain */ )
                      next
                        case tag1
                        step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                          case d_0_fst
                          by step( contradiction /* impossible chain */ )
                        next
                          case d_0_snd
                          by step( solve( (#vr.6, 0) ~~> (#vk.4, 0) ) )
                        qed
                      qed
                    qed
                  next
                    case c_xor_case_06
                    step( solve( !KU( (~k⊕r0⊕~r1.1) ) @ #vk.5 ) )
                      case c_xor_case_1
                      step( solve( !KU( (~k2⊕~r1) ) @ #vk.6 ) )
                        case c_xor
                        by step( solve( !KU( ~k2 ) @ #vk.8 ) )
                      next
                        case coerce
                        step( solve( !KD( (~k2⊕~r1) ) ▶₀ #vk.5 ) )
                          case acceptreader
                          by step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                        next
                          case initiatereader
                          by step( contradiction /* impossible chain */ )
                        next
                          case tag1
                          step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                            case d_0_fst
                            by step( contradiction /* impossible chain */ )
                          next
                            case d_0_snd
                            by step( solve( (#vr.6, 0) ~~> (#vk.5, 0) ) )
                          qed
                        qed
                      qed
                    next
                      case c_xor_case_2
                      by step( solve( !KU( ~k ) @ #vk.8 ) )
                    next
                      case c_xor_case_3
                      by step( contradiction /* cyclic */ )
                    next
                      case coerce
                      step( solve( !KD( (~k⊕r0⊕~r1.1) ) ▶₀ #vk.4 ) )
                        case acceptreader
                        by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                      next
                        case initiatereader
                        by step( contradiction /* impossible chain */ )
                      next
                        case tag1
                        step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                          case d_0_fst
                          by step( contradiction /* impossible chain */ )
                        next
                          case d_0_snd
                          by step( solve( (#vr.6, 0) ~~> (#vk.4, 0) ) )
                        qed
                      qed
                    qed
                  next
                    case c_xor_case_07
                    step( solve( !KU( (~k⊕~r1.1) ) @ #vk.5 ) )
                      case c_xor
                      by step( contradiction /* cyclic */ )
                    next
                      case coerce
                      step( solve( !KD( (~k⊕~r1.1) ) ▶₀ #vk.4 ) )
                        case acceptreader
                        by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                      next
                        case initiatereader
                        by step( contradiction /* impossible chain */ )
                      next
                        case tag1
                        step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                          case d_0_fst
                          by step( contradiction /* impossible chain */ )
                        next
                          case d_0_snd
                          by step( solve( (#vr.6, 0) ~~> (#vk.4, 0) ) )
                        qed
                      qed
                    qed
                  next
                    case c_xor_case_08
                    by step( solve( !KU( ~k ) @ #vk.6 ) )
                  next
                    case c_xor_case_09
                    step( solve( !KU( (~k2⊕~r1⊕~r1.1) ) @ #vk.5 ) )
                      case c_xor_case_1
                      step( solve( !KU( (~k⊕r0) ) @ #vk.6 ) )
                        case c_xor
                        by step( solve( !KU( ~k ) @ #vk.8 ) )
                      next
                        case coerce
                        step( solve( !KD( (~k⊕r0) ) ▶₀ #vk.5 ) )
                          case acceptreader
                          by step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                        next
                          case initiatereader
                          by step( contradiction /* impossible chain */ )
                        next
                          case tag1
                          step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                            case d_0_fst
                            by step( contradiction /* impossible chain */ )
                          next
                            case d_0_snd
                            by step( solve( (#vr.6, 0) ~~> (#vk.5, 0) ) )
                          qed
                        qed
                      qed
                    next
                      case c_xor_case_2
                      by step( solve( !KU( ~k2 ) @ #vk.8 ) )
                    next
                      case c_xor_case_3
                      by step( contradiction /* cyclic */ )
                    next
                      case coerce
                      step( solve( !KD( (~k2⊕~r1⊕~r1.1) ) ▶₀ #vk.4 ) )
                        case acceptreader
                        by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                      next
                        case initiatereader
                        by step( contradiction /* impossible chain */ )
                      next
                        case tag1
                        step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                          case d_0_fst
                          by step( contradiction /* impossible chain */ )
                        next
                          case d_0_snd
                          by step( solve( (#vr.6, 0) ~~> (#vk.4, 0) ) )
                        qed
                      qed
                    qed
                  next
                    case c_xor_case_10
                    step( solve( !KU( (~k2⊕r0⊕~r1.1) ) @ #vk.5 ) )
                      case c_xor_case_1
                      step( solve( !KU( (~k⊕~r1) ) @ #vk.6 ) )
                        case c_xor
                        by step( solve( !KU( ~k ) @ #vk.8 ) )
                      next
                        case coerce
                        step( solve( !KD( (~k⊕~r1) ) ▶₀ #vk.5 ) )
                          case acceptreader
                          by step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                        next
                          case initiatereader
                          by step( contradiction /* impossible chain */ )
                        next
                          case tag1
                          step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                            case d_0_fst
                            by step( contradiction /* impossible chain */ )
                          next
                            case d_0_snd
                            by step( solve( (#vr.6, 0) ~~> (#vk.5, 0) ) )
                          qed
                        qed
                      qed
                    next
                      case c_xor_case_2
                      by step( solve( !KU( ~k2 ) @ #vk.8 ) )
                    next
                      case c_xor_case_3
                      by step( contradiction /* cyclic */ )
                    next
                      case coerce
                      step( solve( !KD( (~k2⊕r0⊕~r1.1) ) ▶₀ #vk.4 ) )
                        case acceptreader
                        by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                      next
                        case initiatereader
                        by step( contradiction /* impossible chain */ )
                      next
                        case tag1
                        step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                          case d_0_fst
                          by step( contradiction /* impossible chain */ )
                        next
                          case d_0_snd
                          by step( solve( (#vr.6, 0) ~~> (#vk.4, 0) ) )
                        qed
                      qed
                    qed
                  next
                    case c_xor_case_11
                    step( solve( !KU( (~k2⊕~r1.1) ) @ #vk.5 ) )
                      case c_xor
                      by step( contradiction /* cyclic */ )
                    next
                      case coerce
                      step( solve( !KD( (~k2⊕~r1.1) ) ▶₀ #vk.4 ) )
                        case acceptreader
                        by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                      next
                        case initiatereader
                        by step( contradiction /* impossible chain */ )
                      next
                        case tag1
                        step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                          case d_0_fst
                          by step( contradiction /* impossible chain */ )
                        next
                          case d_0_snd
                          by step( solve( (#vr.6, 0) ~~> (#vk.4, 0) ) )
                        qed
                      qed
                    qed
                  next
                    case c_xor_case_12
                    step( solve( !KU( (~r1⊕r0⊕~r1.1) ) @ #vk.5 ) )
                      case c_xor_case_1
                      step( solve( !KU( (~k⊕~k2) ) @ #vk.6 ) )
                        case c_xor
                        by step( solve( !KU( ~k2 ) @ #vk.8 ) )
                      next
                        case coerce
                        step( solve( !KD( (~k⊕~k2) ) ▶₀ #vk.5 ) )
                          case acceptreader
                          by step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                        next
                          case initiatereader
                          by step( contradiction /* impossible chain */ )
                        next
                          case tag1
                          step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                            case d_0_fst
                            by step( contradiction /* impossible chain */ )
                          next
                            case d_0_snd
                            by step( solve( (#vr.6, 0) ~~> (#vk.5, 0) ) )
                          qed
                        qed
                      qed
                    next
                      case c_xor_case_2
                      step( solve( !KU( (~k⊕~k2) ) @ #vk.6 ) )
                        case c_xor
                        by step( solve( !KU( ~k2 ) @ #vk.8 ) )
                      next
                        case coerce
                        step( solve( !KD( (~k⊕~k2) ) ▶₀ #vk.5 ) )
                          case acceptreader
                          by step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                        next
                          case initiatereader
                          by step( contradiction /* impossible chain */ )
                        next
                          case tag1
                          step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                            case d_0_fst
                            by step( contradiction /* impossible chain */ )
                          next
                            case d_0_snd
                            by step( solve( (#vr.6, 0) ~~> (#vk.5, 0) ) )
                          qed
                        qed
                      qed
                    next
                      case c_xor_case_3
                      by step( contradiction /* cyclic */ )
                    next
                      case coerce
                      step( solve( !KD( (~r1⊕r0⊕~r1.1) ) ▶₀ #vk.4 ) )
                        case acceptreader
                        by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                      next
                        case initiatereader
                        by step( contradiction /* impossible chain */ )
                      next
                        case tag1
                        step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                          case d_0_fst
                          by step( contradiction /* impossible chain */ )
                        next
                          case d_0_snd
                          by step( solve( (#vr.6, 0) ~~> (#vk.4, 0) ) )
                        qed
                      qed
                    qed
                  next
                    case c_xor_case_13
                    step( solve( !KU( (~r1⊕~r1.1) ) @ #vk.5 ) )
                      case c_xor
                      by step( contradiction /* cyclic */ )
                    next
                      case coerce
                      step( solve( !KD( (~r1⊕~r1.1) ) ▶₀ #vk.4 ) )
                        case acceptreader
                        by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                      next
                        case initiatereader
                        by step( contradiction /* impossible chain */ )
                      next
                        case tag1
                        step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                          case d_0_fst
                          by step( contradiction /* impossible chain */ )
                        next
                          case d_0_snd
                          by step( solve( (#vr.6, 0) ~~> (#vk.4, 0) ) )
                        qed
                      qed
                    qed
                  next
                    case c_xor_case_14
                    step( solve( !KU( (r0⊕~r1.1) ) @ #vk.5 ) )
                      case c_xor
                      by step( contradiction /* cyclic */ )
                    next
                      case coerce
                      step( solve( !KD( (r0⊕~r1.1) ) ▶₀ #vk.4 ) )
                        case acceptreader
                        by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                      next
                        case initiatereader
                        by step( contradiction /* impossible chain */ )
                      next
                        case tag1
                        step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                          case d_0_fst
                          by step( contradiction /* impossible chain */ )
                        next
                          case d_0_snd
                          by step( solve( (#vr.6, 0) ~~> (#vk.4, 0) ) )
                        qed
                      qed
                    qed
                  next
                    case c_xor_case_15
                    by step( contradiction /* cyclic */ )
                  next
                    case coerce
                    step( solve( !KD( (~k⊕~k2⊕~r1⊕r0⊕~r1.1) ) ▶₀ #vk.3 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                      qed
                    qed
                  qed
                qed
              next
                case split_case_4
                step( solve( !KU( zero ) @ #vk.3 ) )
                  case c_zero
                  step( solve( splitEqs(2) ) )
                    case split
                    step( solve( !KU( (~k⊕~k2⊕~r1⊕~r1.1) ) @ #vk.4 ) )
                      case c_xor_case_1
                      step( solve( !KU( (~k⊕~k2⊕~r1.1) ) @ #vk.5 ) )
                        case c_xor_case_1
                        by step( solve( !KU( ~k2 ) @ #vk.7 ) )
                      next
                        case c_xor_case_2
                        by step( solve( !KU( ~k ) @ #vk.7 ) )
                      next
                        case c_xor_case_3
                        by step( contradiction /* cyclic */ )
                      next
                        case coerce
                        step( solve( !KD( (~k⊕~k2⊕~r1.1) ) ▶₀ #vk.5 ) )
                          case acceptreader
                          by step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                        next
                          case initiatereader
                          by step( contradiction /* impossible chain */ )
                        next
                          case tag1
                          step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                            case d_0_fst
                            by step( contradiction /* impossible chain */ )
                          next
                            case d_0_snd
                            by step( solve( (#vr.6, 0) ~~> (#vk.5, 0) ) )
                          qed
                        qed
                      qed
                    next
                      case c_xor_case_2
                      by step( solve( !KU( ~k2 ) @ #vk.6 ) )
                    next
                      case c_xor_case_3
                      step( solve( !KU( (~k⊕~r1.1) ) @ #vk.5 ) )
                        case c_xor
                        by step( contradiction /* cyclic */ )
                      next
                        case coerce
                        step( solve( !KD( (~k⊕~r1.1) ) ▶₀ #vk.5 ) )
                          case acceptreader
                          by step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                        next
                          case initiatereader
                          by step( contradiction /* impossible chain */ )
                        next
                          case tag1
                          step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                            case d_0_fst
                            by step( contradiction /* impossible chain */ )
                          next
                            case d_0_snd
                            by step( solve( (#vr.6, 0) ~~> (#vk.5, 0) ) )
                          qed
                        qed
                      qed
                    next
                      case c_xor_case_4
                      by step( solve( !KU( ~k ) @ #vk.6 ) )
                    next
                      case c_xor_case_5
                      step( solve( !KU( (~k2⊕~r1.1) ) @ #vk.5 ) )
                        case c_xor
                        by step( contradiction /* cyclic */ )
                      next
                        case coerce
                        step( solve( !KD( (~k2⊕~r1.1) ) ▶₀ #vk.5 ) )
                          case acceptreader
                          by step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                        next
                          case initiatereader
                          by step( contradiction /* impossible chain */ )
                        next
                          case tag1
                          step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                            case d_0_fst
                            by step( contradiction /* impossible chain */ )
                          next
                            case d_0_snd
                            by step( solve( (#vr.6, 0) ~~> (#vk.5, 0) ) )
                          qed
                        qed
                      qed
                    next
                      case c_xor_case_6
                      step( solve( !KU( (~r1⊕~r1.1) ) @ #vk.5 ) )
                        case c_xor
                        by step( contradiction /* cyclic */ )
                      next
                        case coerce
                        step( solve( !KD( (~r1⊕~r1.1) ) ▶₀ #vk.5 ) )
                          case acceptreader
                          by step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                        next
                          case initiatereader
                          by step( contradiction /* impossible chain */ )
                        next
                          case tag1
                          step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                            case d_0_fst
                            by step( contradiction /* impossible chain */ )
                          next
                            case d_0_snd
                            by step( solve( (#vr.6, 0) ~~> (#vk.5, 0) ) )
                          qed
                        qed
                      qed
                    next
                      case c_xor_case_7
                      by step( contradiction /* cyclic */ )
                    next
                      case coerce
                      step( solve( !KD( (~k⊕~k2⊕~r1⊕~r1.1) ) ▶₀ #vk.4 ) )
                        case acceptreader
                        by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                      next
                        case initiatereader
                        by step( contradiction /* impossible chain */ )
                      next
                        case tag1
                        step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                          case d_0_fst
                          by step( contradiction /* impossible chain */ )
                        next
                          case d_0_snd
                          by step( solve( (#vr.6, 0) ~~> (#vk.4, 0) ) )
                        qed
                      qed
                    qed
                  qed
                next
                  case coerce
                  step( solve( !KD( zero ) ▶₀ #vk.3 ) )
                    case acceptreader
                    by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_5
                step( solve( !KU( (~k⊕~r1) ) @ #vk.3 ) )
                  case c_xor
                  by step( contradiction /* cyclic */ )
                next
                  case coerce
                  step( solve( !KD( (~k⊕~r1) ) ▶₀ #vk.3 ) )
                    case acceptreader
                    by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_6
                step( solve( !KU( (~k⊕~r1⊕z) ) @ #vk.3 ) )
                  case c_xor_case_1
                  by step( contradiction /* cyclic */ )
                next
                  case c_xor_case_2
                  by step( solve( !KU( ~k ) @ #vk.6 ) )
                next
                  case c_xor_case_3
                  step( solve( !KU( (~k⊕~r1) ) @ #vk.6 ) )
                    case c_xor
                    by step( contradiction /* cyclic */ )
                  next
                    case coerce
                    step( solve( !KD( (~k⊕~r1) ) ▶₀ #vk.4 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.4, 0) ) )
                      qed
                    qed
                  qed
                next
                  case coerce
                  step( solve( !KD( (~k⊕~r1⊕z) ) ▶₀ #vk.3 ) )
                    case acceptreader
                    by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_7
                step( solve( !KU( (~r1⊕x) ) @ #vk.3 ) )
                  case c_xor
                  by step( contradiction /* cyclic */ )
                next
                  case coerce
                  step( solve( !KD( (~r1⊕x) ) ▶₀ #vk.3 ) )
                    case acceptreader
                    by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_8
                step( solve( !KU( (~k⊕x) ) @ #vk.3 ) )
                  case c_xor
                  by step( solve( !KU( ~k ) @ #vk.6 ) )
                next
                  case coerce
                  step( solve( !KD( (~k⊕x) ) ▶₀ #vk.3 ) )
                    case acceptreader
                    by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                    qed
                  qed
                qed
              qed
            next
              case tag1_case_3
              step( solve( splitEqs(0) ) )
                case split_case_1
                by step( solve( !KU( ~k ) @ #vk.3 ) )
              next
                case split_case_2
                by step( contradiction /* cyclic */ )
              next
                case split_case_3
                step( solve( splitEqs(2) ) )
                  case split_case_1
                  by step( solve( !KU( ~k2 ) @ #vk.3 ) )
                next
                  case split_case_2
                  step( solve( !KU( (~k⊕~k2⊕~r1) ) @ #vk.4 ) )
                    case c_xor_case_1
                    by step( solve( !KU( ~k2 ) @ #vk.6 ) )
                  next
                    case c_xor_case_2
                    by step( solve( !KU( ~k ) @ #vk.6 ) )
                  next
                    case c_xor_case_3
                    by step( contradiction /* cyclic */ )
                  next
                    case coerce
                    step( solve( !KD( (~k⊕~k2⊕~r1) ) ▶₀ #vk.3 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_3
                  step( solve( !KU( (~k2⊕~r1.1) ) @ #vk.3 ) )
                    case c_xor
                    by step( solve( !KU( ~k2 ) @ #vk.6 ) )
                  next
                    case coerce
                    step( solve( !KD( (~k2⊕~r1.1) ) ▶₀ #vk.3 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_4
                  step( solve( !KU( (~k2⊕x⊕~r1.1) ) @ #vk.3 ) )
                    case c_xor_case_1
                    step( solve( !KU( (~k⊕~r1⊕x) ) @ #vk.4 ) )
                      case c_xor_case_1
                      step( solve( !KU( (~k2⊕~r1.1) ) @ #vk.5 ) )
                        case c_xor
                        by step( contradiction /* cyclic */ )
                      next
                        case coerce
                        step( solve( !KD( (~k2⊕~r1.1) ) ▶₀ #vk.5 ) )
                          case acceptreader
                          by step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                        next
                          case initiatereader
                          by step( contradiction /* impossible chain */ )
                        next
                          case tag1
                          step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                            case d_0_fst
                            by step( contradiction /* impossible chain */ )
                          next
                            case d_0_snd
                            by step( solve( (#vr.6, 0) ~~> (#vk.5, 0) ) )
                          qed
                        qed
                      qed
                    next
                      case c_xor_case_2
                      by step( solve( !KU( ~k ) @ #vk.8 ) )
                    next
                      case c_xor_case_3
                      step( solve( !KU( (~k2⊕~r1.1) ) @ #vk.5 ) )
                        case c_xor
                        by step( solve( !KU( ~k2 ) @ #vk.9 ) )
                      next
                        case coerce
                        step( solve( !KD( (~k2⊕~r1.1) ) ▶₀ #vk.5 ) )
                          case acceptreader
                          by step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                        next
                          case initiatereader
                          by step( contradiction /* impossible chain */ )
                        next
                          case tag1
                          step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                            case d_0_fst
                            by step( contradiction /* impossible chain */ )
                          next
                            case d_0_snd
                            by step( solve( (#vr.6, 0) ~~> (#vk.5, 0) ) )
                          qed
                        qed
                      qed
                    next
                      case coerce
                      step( solve( !KD( (~k⊕~r1⊕x) ) ▶₀ #vk.4 ) )
                        case acceptreader
                        by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                      next
                        case initiatereader
                        by step( contradiction /* impossible chain */ )
                      next
                        case tag1
                        step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                          case d_0_fst
                          by step( contradiction /* impossible chain */ )
                        next
                          case d_0_snd
                          by step( solve( (#vr.6, 0) ~~> (#vk.4, 0) ) )
                        qed
                      qed
                    qed
                  next
                    case c_xor_case_2
                    by step( solve( !KU( ~k2 ) @ #vk.6 ) )
                  next
                    case c_xor_case_3
                    step( solve( !KU( (~k⊕~r1⊕x) ) @ #vk.4 ) )
                      case c_xor_case_1
                      by step( contradiction /* cyclic */ )
                    next
                      case c_xor_case_2
                      by step( solve( !KU( ~k ) @ #vk.8 ) )
                    next
                      case c_xor_case_3
                      step( solve( !KU( (~k2⊕x) ) @ #vk.6 ) )
                        case c_xor
                        by step( solve( !KU( ~k2 ) @ #vk.9 ) )
                      next
                        case coerce
                        step( solve( !KD( (~k2⊕x) ) ▶₀ #vk.5 ) )
                          case acceptreader
                          by step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                        next
                          case initiatereader
                          by step( contradiction /* impossible chain */ )
                        next
                          case tag1
                          step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                            case d_0_fst
                            by step( contradiction /* impossible chain */ )
                          next
                            case d_0_snd
                            by step( solve( (#vr.6, 0) ~~> (#vk.5, 0) ) )
                          qed
                        qed
                      qed
                    next
                      case coerce
                      step( solve( !KD( (~k⊕~r1⊕x) ) ▶₀ #vk.4 ) )
                        case acceptreader
                        by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                      next
                        case initiatereader
                        by step( contradiction /* impossible chain */ )
                      next
                        case tag1
                        step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                          case d_0_fst
                          by step( contradiction /* impossible chain */ )
                        next
                          case d_0_snd
                          by step( solve( (#vr.6, 0) ~~> (#vk.4, 0) ) )
                        qed
                      qed
                    qed
                  next
                    case coerce
                    step( solve( !KD( (~k2⊕x⊕~r1.1) ) ▶₀ #vk.3 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_5
                  step( solve( !KU( (~k2⊕x) ) @ #vk.3 ) )
                    case c_xor
                    by step( solve( !KU( ~k2 ) @ #vk.6 ) )
                  next
                    case coerce
                    step( solve( !KD( (~k2⊕x) ) ▶₀ #vk.3 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_6
                  step( solve( !KU( (x⊕~r1.1) ) @ #vk.3 ) )
                    case c_xor
                    step( solve( !KU( (~k⊕~k2⊕~r1⊕x) ) @ #vk.4 ) )
                      case c_xor_case_1
                      by step( contradiction /* cyclic */ )
                    next
                      case c_xor_case_2
                      by step( solve( !KU( ~k2 ) @ #vk.8 ) )
                    next
                      case c_xor_case_3
                      step( solve( !KU( (~k⊕x) ) @ #vk.7 ) )
                        case c_xor
                        by step( solve( !KU( ~k ) @ #vk.9 ) )
                      next
                        case coerce
                        step( solve( !KD( (~k⊕x) ) ▶₀ #vk.5 ) )
                          case acceptreader
                          by step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                        next
                          case initiatereader
                          by step( contradiction /* impossible chain */ )
                        next
                          case tag1
                          step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                            case d_0_fst
                            by step( contradiction /* impossible chain */ )
                          next
                            case d_0_snd
                            by step( solve( (#vr.6, 0) ~~> (#vk.5, 0) ) )
                          qed
                        qed
                      qed
                    next
                      case c_xor_case_4
                      by step( solve( !KU( ~k ) @ #vk.8 ) )
                    next
                      case c_xor_case_5
                      step( solve( !KU( (~k2⊕x) ) @ #vk.7 ) )
                        case c_xor
                        by step( solve( !KU( ~k2 ) @ #vk.9 ) )
                      next
                        case coerce
                        step( solve( !KD( (~k2⊕x) ) ▶₀ #vk.5 ) )
                          case acceptreader
                          by step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                        next
                          case initiatereader
                          by step( contradiction /* impossible chain */ )
                        next
                          case tag1
                          step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                            case d_0_fst
                            by step( contradiction /* impossible chain */ )
                          next
                            case d_0_snd
                            by step( solve( (#vr.6, 0) ~~> (#vk.5, 0) ) )
                          qed
                        qed
                      qed
                    next
                      case c_xor_case_6
                      step( solve( !KU( (~r1⊕x) ) @ #vk.7 ) )
                        case c_xor
                        by step( contradiction /* cyclic */ )
                      next
                        case coerce
                        step( solve( !KD( (~r1⊕x) ) ▶₀ #vk.5 ) )
                          case acceptreader
                          by step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                        next
                          case initiatereader
                          by step( contradiction /* impossible chain */ )
                        next
                          case tag1
                          step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                            case d_0_fst
                            by step( contradiction /* impossible chain */ )
                          next
                            case d_0_snd
                            by step( solve( (#vr.6, 0) ~~> (#vk.5, 0) ) )
                          qed
                        qed
                      qed
                    next
                      case c_xor_case_7
                      step( solve( !KU( (~k⊕~k2⊕~r1) ) @ #vk.7 ) )
                        case c_xor_case_1
                        by step( solve( !KU( ~k2 ) @ #vk.9 ) )
                      next
                        case c_xor_case_2
                        by step( solve( !KU( ~k ) @ #vk.9 ) )
                      next
                        case c_xor_case_3
                        by step( contradiction /* cyclic */ )
                      next
                        case coerce
                        step( solve( !KD( (~k⊕~k2⊕~r1) ) ▶₀ #vk.5 ) )
                          case acceptreader
                          by step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                        next
                          case initiatereader
                          by step( contradiction /* impossible chain */ )
                        next
                          case tag1
                          step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                            case d_0_fst
                            by step( contradiction /* impossible chain */ )
                          next
                            case d_0_snd
                            by step( solve( (#vr.6, 0) ~~> (#vk.5, 0) ) )
                          qed
                        qed
                      qed
                    next
                      case coerce
                      step( solve( !KD( (~k⊕~k2⊕~r1⊕x) ) ▶₀ #vk.4 ) )
                        case acceptreader
                        by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                      next
                        case initiatereader
                        by step( contradiction /* impossible chain */ )
                      next
                        case tag1
                        step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                          case d_0_fst
                          by step( contradiction /* impossible chain */ )
                        next
                          case d_0_snd
                          by step( solve( (#vr.6, 0) ~~> (#vk.4, 0) ) )
                        qed
                      qed
                    qed
                  next
                    case coerce
                    step( solve( !KD( (x⊕~r1.1) ) ▶₀ #vk.3 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_7
                  step( solve( !KU( (~k⊕~k2⊕~r1⊕r0⊕~r1.1) ) @ #vk.4 ) )
                    case c_xor_case_01
                    step( solve( !KU( (~k⊕~k2⊕~r1⊕~r1.1) ) @ #vk.5 ) )
                      case c_xor_case_1
                      step( solve( !KU( (~k⊕~k2⊕~r1.1) ) @ #vk.6 ) )
                        case c_xor_case_1
                        by step( solve( !KU( ~k2 ) @ #vk.8 ) )
                      next
                        case c_xor_case_2
                        by step( solve( !KU( ~k ) @ #vk.8 ) )
                      next
                        case c_xor_case_3
                        by step( contradiction /* cyclic */ )
                      next
                        case coerce
                        step( solve( !KD( (~k⊕~k2⊕~r1.1) ) ▶₀ #vk.5 ) )
                          case acceptreader
                          by step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                        next
                          case initiatereader
                          by step( contradiction /* impossible chain */ )
                        next
                          case tag1
                          step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                            case d_0_fst
                            by step( contradiction /* impossible chain */ )
                          next
                            case d_0_snd
                            by step( solve( (#vr.6, 0) ~~> (#vk.5, 0) ) )
                          qed
                        qed
                      qed
                    next
                      case c_xor_case_2
                      by step( solve( !KU( ~k2 ) @ #vk.7 ) )
                    next
                      case c_xor_case_3
                      step( solve( !KU( (~k⊕~r1.1) ) @ #vk.6 ) )
                        case c_xor
                        by step( contradiction /* cyclic */ )
                      next
                        case coerce
                        step( solve( !KD( (~k⊕~r1.1) ) ▶₀ #vk.5 ) )
                          case acceptreader
                          by step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                        next
                          case initiatereader
                          by step( contradiction /* impossible chain */ )
                        next
                          case tag1
                          step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                            case d_0_fst
                            by step( contradiction /* impossible chain */ )
                          next
                            case d_0_snd
                            by step( solve( (#vr.6, 0) ~~> (#vk.5, 0) ) )
                          qed
                        qed
                      qed
                    next
                      case c_xor_case_4
                      by step( solve( !KU( ~k ) @ #vk.7 ) )
                    next
                      case c_xor_case_5
                      step( solve( !KU( (~k2⊕~r1.1) ) @ #vk.6 ) )
                        case c_xor
                        by step( contradiction /* cyclic */ )
                      next
                        case coerce
                        step( solve( !KD( (~k2⊕~r1.1) ) ▶₀ #vk.5 ) )
                          case acceptreader
                          by step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                        next
                          case initiatereader
                          by step( contradiction /* impossible chain */ )
                        next
                          case tag1
                          step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                            case d_0_fst
                            by step( contradiction /* impossible chain */ )
                          next
                            case d_0_snd
                            by step( solve( (#vr.6, 0) ~~> (#vk.5, 0) ) )
                          qed
                        qed
                      qed
                    next
                      case c_xor_case_6
                      step( solve( !KU( (~r1⊕~r1.1) ) @ #vk.6 ) )
                        case c_xor
                        by step( contradiction /* cyclic */ )
                      next
                        case coerce
                        step( solve( !KD( (~r1⊕~r1.1) ) ▶₀ #vk.5 ) )
                          case acceptreader
                          by step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                        next
                          case initiatereader
                          by step( contradiction /* impossible chain */ )
                        next
                          case tag1
                          step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                            case d_0_fst
                            by step( contradiction /* impossible chain */ )
                          next
                            case d_0_snd
                            by step( solve( (#vr.6, 0) ~~> (#vk.5, 0) ) )
                          qed
                        qed
                      qed
                    next
                      case c_xor_case_7
                      by step( contradiction /* cyclic */ )
                    next
                      case coerce
                      step( solve( !KD( (~k⊕~k2⊕~r1⊕~r1.1) ) ▶₀ #vk.4 ) )
                        case acceptreader
                        by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                      next
                        case initiatereader
                        by step( contradiction /* impossible chain */ )
                      next
                        case tag1
                        step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                          case d_0_fst
                          by step( contradiction /* impossible chain */ )
                        next
                          case d_0_snd
                          by step( solve( (#vr.6, 0) ~~> (#vk.4, 0) ) )
                        qed
                      qed
                    qed
                  next
                    case c_xor_case_02
                    step( solve( !KU( (~k⊕~k2⊕r0⊕~r1.1) ) @ #vk.5 ) )
                      case c_xor_case_1
                      step( solve( !KU( (~k⊕~k2⊕~r1.1) ) @ #vk.6 ) )
                        case c_xor_case_1
                        by step( solve( !KU( ~k2 ) @ #vk.8 ) )
                      next
                        case c_xor_case_2
                        by step( solve( !KU( ~k ) @ #vk.8 ) )
                      next
                        case c_xor_case_3
                        by step( contradiction /* cyclic */ )
                      next
                        case coerce
                        step( solve( !KD( (~k⊕~k2⊕~r1.1) ) ▶₀ #vk.5 ) )
                          case acceptreader
                          by step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                        next
                          case initiatereader
                          by step( contradiction /* impossible chain */ )
                        next
                          case tag1
                          step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                            case d_0_fst
                            by step( contradiction /* impossible chain */ )
                          next
                            case d_0_snd
                            by step( solve( (#vr.6, 0) ~~> (#vk.5, 0) ) )
                          qed
                        qed
                      qed
                    next
                      case c_xor_case_2
                      by step( solve( !KU( ~k2 ) @ #vk.7 ) )
                    next
                      case c_xor_case_3
                      step( solve( !KU( (~k⊕~r1.1) ) @ #vk.6 ) )
                        case c_xor
                        by step( contradiction /* cyclic */ )
                      next
                        case coerce
                        step( solve( !KD( (~k⊕~r1.1) ) ▶₀ #vk.5 ) )
                          case acceptreader
                          by step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                        next
                          case initiatereader
                          by step( contradiction /* impossible chain */ )
                        next
                          case tag1
                          step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                            case d_0_fst
                            by step( contradiction /* impossible chain */ )
                          next
                            case d_0_snd
                            by step( solve( (#vr.6, 0) ~~> (#vk.5, 0) ) )
                          qed
                        qed
                      qed
                    next
                      case c_xor_case_4
                      by step( solve( !KU( ~k ) @ #vk.7 ) )
                    next
                      case c_xor_case_5
                      step( solve( !KU( (~k2⊕~r1.1) ) @ #vk.6 ) )
                        case c_xor
                        by step( contradiction /* cyclic */ )
                      next
                        case coerce
                        step( solve( !KD( (~k2⊕~r1.1) ) ▶₀ #vk.5 ) )
                          case acceptreader
                          by step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                        next
                          case initiatereader
                          by step( contradiction /* impossible chain */ )
                        next
                          case tag1
                          step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                            case d_0_fst
                            by step( contradiction /* impossible chain */ )
                          next
                            case d_0_snd
                            by step( solve( (#vr.6, 0) ~~> (#vk.5, 0) ) )
                          qed
                        qed
                      qed
                    next
                      case c_xor_case_6
                      step( solve( !KU( (r0⊕~r1.1) ) @ #vk.6 ) )
                        case c_xor
                        by step( contradiction /* cyclic */ )
                      next
                        case coerce
                        step( solve( !KD( (r0⊕~r1.1) ) ▶₀ #vk.5 ) )
                          case acceptreader
                          by step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                        next
                          case initiatereader
                          by step( contradiction /* impossible chain */ )
                        next
                          case tag1
                          step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                            case d_0_fst
                            by step( contradiction /* impossible chain */ )
                          next
                            case d_0_snd
                            by step( solve( (#vr.6, 0) ~~> (#vk.5, 0) ) )
                          qed
                        qed
                      qed
                    next
                      case c_xor_case_7
                      by step( contradiction /* cyclic */ )
                    next
                      case coerce
                      step( solve( !KD( (~k⊕~k2⊕r0⊕~r1.1) ) ▶₀ #vk.4 ) )
                        case acceptreader
                        by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                      next
                        case initiatereader
                        by step( contradiction /* impossible chain */ )
                      next
                        case tag1
                        step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                          case d_0_fst
                          by step( contradiction /* impossible chain */ )
                        next
                          case d_0_snd
                          by step( solve( (#vr.6, 0) ~~> (#vk.4, 0) ) )
                        qed
                      qed
                    qed
                  next
                    case c_xor_case_03
                    step( solve( !KU( (~k⊕~k2⊕~r1.1) ) @ #vk.5 ) )
                      case c_xor_case_1
                      by step( solve( !KU( ~k2 ) @ #vk.8 ) )
                    next
                      case c_xor_case_2
                      by step( solve( !KU( ~k ) @ #vk.8 ) )
                    next
                      case c_xor_case_3
                      by step( contradiction /* cyclic */ )
                    next
                      case coerce
                      step( solve( !KD( (~k⊕~k2⊕~r1.1) ) ▶₀ #vk.4 ) )
                        case acceptreader
                        by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                      next
                        case initiatereader
                        by step( contradiction /* impossible chain */ )
                      next
                        case tag1
                        step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                          case d_0_fst
                          by step( contradiction /* impossible chain */ )
                        next
                          case d_0_snd
                          by step( solve( (#vr.6, 0) ~~> (#vk.4, 0) ) )
                        qed
                      qed
                    qed
                  next
                    case c_xor_case_04
                    by step( solve( !KU( ~k2 ) @ #vk.6 ) )
                  next
                    case c_xor_case_05
                    step( solve( !KU( (~k⊕~r1⊕~r1.1) ) @ #vk.5 ) )
                      case c_xor_case_1
                      step( solve( !KU( (~k2⊕r0) ) @ #vk.6 ) )
                        case c_xor
                        by step( solve( !KU( ~k2 ) @ #vk.8 ) )
                      next
                        case coerce
                        step( solve( !KD( (~k2⊕r0) ) ▶₀ #vk.5 ) )
                          case acceptreader
                          by step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                        next
                          case initiatereader
                          by step( contradiction /* impossible chain */ )
                        next
                          case tag1
                          step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                            case d_0_fst
                            by step( contradiction /* impossible chain */ )
                          next
                            case d_0_snd
                            by step( solve( (#vr.6, 0) ~~> (#vk.5, 0) ) )
                          qed
                        qed
                      qed
                    next
                      case c_xor_case_2
                      by step( solve( !KU( ~k ) @ #vk.8 ) )
                    next
                      case c_xor_case_3
                      by step( contradiction /* cyclic */ )
                    next
                      case coerce
                      step( solve( !KD( (~k⊕~r1⊕~r1.1) ) ▶₀ #vk.4 ) )
                        case acceptreader
                        by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                      next
                        case initiatereader
                        by step( contradiction /* impossible chain */ )
                      next
                        case tag1
                        step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                          case d_0_fst
                          by step( contradiction /* impossible chain */ )
                        next
                          case d_0_snd
                          by step( solve( (#vr.6, 0) ~~> (#vk.4, 0) ) )
                        qed
                      qed
                    qed
                  next
                    case c_xor_case_06
                    step( solve( !KU( (~k⊕r0⊕~r1.1) ) @ #vk.5 ) )
                      case c_xor_case_1
                      step( solve( !KU( (~k2⊕~r1) ) @ #vk.6 ) )
                        case c_xor
                        by step( solve( !KU( ~k2 ) @ #vk.8 ) )
                      next
                        case coerce
                        step( solve( !KD( (~k2⊕~r1) ) ▶₀ #vk.5 ) )
                          case acceptreader
                          by step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                        next
                          case initiatereader
                          by step( contradiction /* impossible chain */ )
                        next
                          case tag1
                          step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                            case d_0_fst
                            by step( contradiction /* impossible chain */ )
                          next
                            case d_0_snd
                            by step( solve( (#vr.6, 0) ~~> (#vk.5, 0) ) )
                          qed
                        qed
                      qed
                    next
                      case c_xor_case_2
                      by step( solve( !KU( ~k ) @ #vk.8 ) )
                    next
                      case c_xor_case_3
                      by step( contradiction /* cyclic */ )
                    next
                      case coerce
                      step( solve( !KD( (~k⊕r0⊕~r1.1) ) ▶₀ #vk.4 ) )
                        case acceptreader
                        by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                      next
                        case initiatereader
                        by step( contradiction /* impossible chain */ )
                      next
                        case tag1
                        step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                          case d_0_fst
                          by step( contradiction /* impossible chain */ )
                        next
                          case d_0_snd
                          by step( solve( (#vr.6, 0) ~~> (#vk.4, 0) ) )
                        qed
                      qed
                    qed
                  next
                    case c_xor_case_07
                    step( solve( !KU( (~k⊕~r1.1) ) @ #vk.5 ) )
                      case c_xor
                      by step( contradiction /* cyclic */ )
                    next
                      case coerce
                      step( solve( !KD( (~k⊕~r1.1) ) ▶₀ #vk.4 ) )
                        case acceptreader
                        by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                      next
                        case initiatereader
                        by step( contradiction /* impossible chain */ )
                      next
                        case tag1
                        step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                          case d_0_fst
                          by step( contradiction /* impossible chain */ )
                        next
                          case d_0_snd
                          by step( solve( (#vr.6, 0) ~~> (#vk.4, 0) ) )
                        qed
                      qed
                    qed
                  next
                    case c_xor_case_08
                    by step( solve( !KU( ~k ) @ #vk.6 ) )
                  next
                    case c_xor_case_09
                    step( solve( !KU( (~k2⊕~r1⊕~r1.1) ) @ #vk.5 ) )
                      case c_xor_case_1
                      step( solve( !KU( (~k⊕r0) ) @ #vk.6 ) )
                        case c_xor
                        by step( solve( !KU( ~k ) @ #vk.8 ) )
                      next
                        case coerce
                        step( solve( !KD( (~k⊕r0) ) ▶₀ #vk.5 ) )
                          case acceptreader
                          by step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                        next
                          case initiatereader
                          by step( contradiction /* impossible chain */ )
                        next
                          case tag1
                          step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                            case d_0_fst
                            by step( contradiction /* impossible chain */ )
                          next
                            case d_0_snd
                            by step( solve( (#vr.6, 0) ~~> (#vk.5, 0) ) )
                          qed
                        qed
                      qed
                    next
                      case c_xor_case_2
                      by step( solve( !KU( ~k2 ) @ #vk.8 ) )
                    next
                      case c_xor_case_3
                      by step( contradiction /* cyclic */ )
                    next
                      case coerce
                      step( solve( !KD( (~k2⊕~r1⊕~r1.1) ) ▶₀ #vk.4 ) )
                        case acceptreader
                        by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                      next
                        case initiatereader
                        by step( contradiction /* impossible chain */ )
                      next
                        case tag1
                        step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                          case d_0_fst
                          by step( contradiction /* impossible chain */ )
                        next
                          case d_0_snd
                          by step( solve( (#vr.6, 0) ~~> (#vk.4, 0) ) )
                        qed
                      qed
                    qed
                  next
                    case c_xor_case_10
                    step( solve( !KU( (~k2⊕r0⊕~r1.1) ) @ #vk.5 ) )
                      case c_xor_case_1
                      step( solve( !KU( (~k⊕~r1) ) @ #vk.6 ) )
                        case c_xor
                        by step( solve( !KU( ~k ) @ #vk.8 ) )
                      next
                        case coerce
                        step( solve( !KD( (~k⊕~r1) ) ▶₀ #vk.5 ) )
                          case acceptreader
                          by step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                        next
                          case initiatereader
                          by step( contradiction /* impossible chain */ )
                        next
                          case tag1
                          step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                            case d_0_fst
                            by step( contradiction /* impossible chain */ )
                          next
                            case d_0_snd
                            by step( solve( (#vr.6, 0) ~~> (#vk.5, 0) ) )
                          qed
                        qed
                      qed
                    next
                      case c_xor_case_2
                      by step( solve( !KU( ~k2 ) @ #vk.8 ) )
                    next
                      case c_xor_case_3
                      by step( contradiction /* cyclic */ )
                    next
                      case coerce
                      step( solve( !KD( (~k2⊕r0⊕~r1.1) ) ▶₀ #vk.4 ) )
                        case acceptreader
                        by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                      next
                        case initiatereader
                        by step( contradiction /* impossible chain */ )
                      next
                        case tag1
                        step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                          case d_0_fst
                          by step( contradiction /* impossible chain */ )
                        next
                          case d_0_snd
                          by step( solve( (#vr.6, 0) ~~> (#vk.4, 0) ) )
                        qed
                      qed
                    qed
                  next
                    case c_xor_case_11
                    step( solve( !KU( (~k2⊕~r1.1) ) @ #vk.5 ) )
                      case c_xor
                      by step( contradiction /* cyclic */ )
                    next
                      case coerce
                      step( solve( !KD( (~k2⊕~r1.1) ) ▶₀ #vk.4 ) )
                        case acceptreader
                        by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                      next
                        case initiatereader
                        by step( contradiction /* impossible chain */ )
                      next
                        case tag1
                        step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                          case d_0_fst
                          by step( contradiction /* impossible chain */ )
                        next
                          case d_0_snd
                          by step( solve( (#vr.6, 0) ~~> (#vk.4, 0) ) )
                        qed
                      qed
                    qed
                  next
                    case c_xor_case_12
                    step( solve( !KU( (~r1⊕r0⊕~r1.1) ) @ #vk.5 ) )
                      case c_xor_case_1
                      step( solve( !KU( (~k⊕~k2) ) @ #vk.6 ) )
                        case c_xor
                        by step( solve( !KU( ~k2 ) @ #vk.8 ) )
                      next
                        case coerce
                        step( solve( !KD( (~k⊕~k2) ) ▶₀ #vk.5 ) )
                          case acceptreader
                          by step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                        next
                          case initiatereader
                          by step( contradiction /* impossible chain */ )
                        next
                          case tag1
                          step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                            case d_0_fst
                            by step( contradiction /* impossible chain */ )
                          next
                            case d_0_snd
                            by step( solve( (#vr.6, 0) ~~> (#vk.5, 0) ) )
                          qed
                        qed
                      qed
                    next
                      case c_xor_case_2
                      step( solve( !KU( (~k⊕~k2) ) @ #vk.6 ) )
                        case c_xor
                        by step( solve( !KU( ~k2 ) @ #vk.8 ) )
                      next
                        case coerce
                        step( solve( !KD( (~k⊕~k2) ) ▶₀ #vk.5 ) )
                          case acceptreader
                          by step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                        next
                          case initiatereader
                          by step( contradiction /* impossible chain */ )
                        next
                          case tag1
                          step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                            case d_0_fst
                            by step( contradiction /* impossible chain */ )
                          next
                            case d_0_snd
                            by step( solve( (#vr.6, 0) ~~> (#vk.5, 0) ) )
                          qed
                        qed
                      qed
                    next
                      case c_xor_case_3
                      by step( contradiction /* cyclic */ )
                    next
                      case coerce
                      step( solve( !KD( (~r1⊕r0⊕~r1.1) ) ▶₀ #vk.4 ) )
                        case acceptreader
                        by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                      next
                        case initiatereader
                        by step( contradiction /* impossible chain */ )
                      next
                        case tag1
                        step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                          case d_0_fst
                          by step( contradiction /* impossible chain */ )
                        next
                          case d_0_snd
                          by step( solve( (#vr.6, 0) ~~> (#vk.4, 0) ) )
                        qed
                      qed
                    qed
                  next
                    case c_xor_case_13
                    step( solve( !KU( (~r1⊕~r1.1) ) @ #vk.5 ) )
                      case c_xor
                      by step( contradiction /* cyclic */ )
                    next
                      case coerce
                      step( solve( !KD( (~r1⊕~r1.1) ) ▶₀ #vk.4 ) )
                        case acceptreader
                        by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                      next
                        case initiatereader
                        by step( contradiction /* impossible chain */ )
                      next
                        case tag1
                        step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                          case d_0_fst
                          by step( contradiction /* impossible chain */ )
                        next
                          case d_0_snd
                          by step( solve( (#vr.6, 0) ~~> (#vk.4, 0) ) )
                        qed
                      qed
                    qed
                  next
                    case c_xor_case_14
                    step( solve( !KU( (r0⊕~r1.1) ) @ #vk.5 ) )
                      case c_xor
                      by step( contradiction /* cyclic */ )
                    next
                      case coerce
                      step( solve( !KD( (r0⊕~r1.1) ) ▶₀ #vk.4 ) )
                        case acceptreader
                        by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                      next
                        case initiatereader
                        by step( contradiction /* impossible chain */ )
                      next
                        case tag1
                        step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                          case d_0_fst
                          by step( contradiction /* impossible chain */ )
                        next
                          case d_0_snd
                          by step( solve( (#vr.6, 0) ~~> (#vk.4, 0) ) )
                        qed
                      qed
                    qed
                  next
                    case c_xor_case_15
                    by step( contradiction /* cyclic */ )
                  next
                    case coerce
                    step( solve( !KD( (~k⊕~k2⊕~r1⊕r0⊕~r1.1) ) ▶₀ #vk.3 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                      qed
                    qed
                  qed
                qed
              next
                case split_case_4
                step( solve( !KU( zero ) @ #vk.3 ) )
                  case c_zero
                  step( solve( splitEqs(2) ) )
                    case split
                    step( solve( !KU( (~k⊕~k2⊕~r1⊕~r1.1) ) @ #vk.4 ) )
                      case c_xor_case_1
                      step( solve( !KU( (~k⊕~k2⊕~r1.1) ) @ #vk.5 ) )
                        case c_xor_case_1
                        by step( solve( !KU( ~k2 ) @ #vk.7 ) )
                      next
                        case c_xor_case_2
                        by step( solve( !KU( ~k ) @ #vk.7 ) )
                      next
                        case c_xor_case_3
                        by step( contradiction /* cyclic */ )
                      next
                        case coerce
                        step( solve( !KD( (~k⊕~k2⊕~r1.1) ) ▶₀ #vk.5 ) )
                          case acceptreader
                          by step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                        next
                          case initiatereader
                          by step( contradiction /* impossible chain */ )
                        next
                          case tag1
                          step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                            case d_0_fst
                            by step( contradiction /* impossible chain */ )
                          next
                            case d_0_snd
                            by step( solve( (#vr.6, 0) ~~> (#vk.5, 0) ) )
                          qed
                        qed
                      qed
                    next
                      case c_xor_case_2
                      by step( solve( !KU( ~k2 ) @ #vk.6 ) )
                    next
                      case c_xor_case_3
                      step( solve( !KU( (~k⊕~r1.1) ) @ #vk.5 ) )
                        case c_xor
                        by step( contradiction /* cyclic */ )
                      next
                        case coerce
                        step( solve( !KD( (~k⊕~r1.1) ) ▶₀ #vk.5 ) )
                          case acceptreader
                          by step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                        next
                          case initiatereader
                          by step( contradiction /* impossible chain */ )
                        next
                          case tag1
                          step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                            case d_0_fst
                            by step( contradiction /* impossible chain */ )
                          next
                            case d_0_snd
                            by step( solve( (#vr.6, 0) ~~> (#vk.5, 0) ) )
                          qed
                        qed
                      qed
                    next
                      case c_xor_case_4
                      by step( solve( !KU( ~k ) @ #vk.6 ) )
                    next
                      case c_xor_case_5
                      step( solve( !KU( (~k2⊕~r1.1) ) @ #vk.5 ) )
                        case c_xor
                        by step( contradiction /* cyclic */ )
                      next
                        case coerce
                        step( solve( !KD( (~k2⊕~r1.1) ) ▶₀ #vk.5 ) )
                          case acceptreader
                          by step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                        next
                          case initiatereader
                          by step( contradiction /* impossible chain */ )
                        next
                          case tag1
                          step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                            case d_0_fst
                            by step( contradiction /* impossible chain */ )
                          next
                            case d_0_snd
                            by step( solve( (#vr.6, 0) ~~> (#vk.5, 0) ) )
                          qed
                        qed
                      qed
                    next
                      case c_xor_case_6
                      step( solve( !KU( (~r1⊕~r1.1) ) @ #vk.5 ) )
                        case c_xor
                        by step( contradiction /* cyclic */ )
                      next
                        case coerce
                        step( solve( !KD( (~r1⊕~r1.1) ) ▶₀ #vk.5 ) )
                          case acceptreader
                          by step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                        next
                          case initiatereader
                          by step( contradiction /* impossible chain */ )
                        next
                          case tag1
                          step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                            case d_0_fst
                            by step( contradiction /* impossible chain */ )
                          next
                            case d_0_snd
                            by step( solve( (#vr.6, 0) ~~> (#vk.5, 0) ) )
                          qed
                        qed
                      qed
                    next
                      case c_xor_case_7
                      by step( contradiction /* cyclic */ )
                    next
                      case coerce
                      step( solve( !KD( (~k⊕~k2⊕~r1⊕~r1.1) ) ▶₀ #vk.4 ) )
                        case acceptreader
                        by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                      next
                        case initiatereader
                        by step( contradiction /* impossible chain */ )
                      next
                        case tag1
                        step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                          case d_0_fst
                          by step( contradiction /* impossible chain */ )
                        next
                          case d_0_snd
                          by step( solve( (#vr.6, 0) ~~> (#vk.4, 0) ) )
                        qed
                      qed
                    qed
                  qed
                next
                  case coerce
                  step( solve( !KD( zero ) ▶₀ #vk.3 ) )
                    case acceptreader
                    by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_5
                step( solve( !KU( (~k⊕~r1) ) @ #vk.3 ) )
                  case c_xor
                  by step( contradiction /* cyclic */ )
                next
                  case coerce
                  step( solve( !KD( (~k⊕~r1) ) ▶₀ #vk.3 ) )
                    case acceptreader
                    by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_6
                step( solve( !KU( (~k⊕~r1⊕z) ) @ #vk.3 ) )
                  case c_xor_case_1
                  by step( contradiction /* cyclic */ )
                next
                  case c_xor_case_2
                  by step( solve( !KU( ~k ) @ #vk.6 ) )
                next
                  case c_xor_case_3
                  step( solve( !KU( (~k⊕~r1) ) @ #vk.6 ) )
                    case c_xor
                    by step( contradiction /* cyclic */ )
                  next
                    case coerce
                    step( solve( !KD( (~k⊕~r1) ) ▶₀ #vk.4 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.4, 0) ) )
                      qed
                    qed
                  qed
                next
                  case coerce
                  step( solve( !KD( (~k⊕~r1⊕z) ) ▶₀ #vk.3 ) )
                    case acceptreader
                    by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_7
                step( solve( !KU( (~r1⊕x) ) @ #vk.3 ) )
                  case c_xor
                  by step( contradiction /* cyclic */ )
                next
                  case coerce
                  step( solve( !KD( (~r1⊕x) ) ▶₀ #vk.3 ) )
                    case acceptreader
                    by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_8
                step( solve( !KU( (~k⊕x) ) @ #vk.3 ) )
                  case c_xor
                  by step( solve( !KU( ~k ) @ #vk.6 ) )
                next
                  case coerce
                  step( solve( !KD( (~k⊕x) ) ▶₀ #vk.3 ) )
                    case acceptreader
                    by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                    qed
                  qed
                qed
              qed
            qed
          qed
        next
          case setup_case_2
          step( solve( !KU( ~r1 ) @ #vk.2 ) )
            case tag1
            step( solve( !KU( h(z) ) @ #vk.3 ) )
              case c_h
              step( solve( splitEqs(0) ) )
                case split_case_1
                by step( solve( !KU( ~k ) @ #vk.3 ) )
              next
                case split_case_2
                by step( contradiction /* cyclic */ )
              next
                case split_case_3
                step( solve( !KU( (~k⊕~r1⊕r0) ) @ #vk.4 ) )
                  case c_xor_case_1
                  step( solve( !KU( (~k⊕r0) ) @ #vk.5 ) )
                    case c_xor
                    by step( solve( !KU( ~k ) @ #vk.6 ) )
                  next
                    case coerce
                    step( solve( !KD( (~k⊕r0) ) ▶₀ #vk.4 ) )
                      case acceptreader
                      by step( solve( (#vl.1, 0) ~~> (#vk.4, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.1, 0) ~~> (#vk.4, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.4, 0) ~~> (#vk.4, 0) ) )
                      qed
                    qed
                  qed
                next
                  case c_xor_case_2
                  by step( solve( !KU( ~k ) @ #vk.6 ) )
                next
                  case c_xor_case_3
                  step( solve( !KU( (~k⊕~r1) ) @ #vk.5 ) )
                    case c_xor
                    by step( solve( !KU( ~k ) @ #vk.6 ) )
                  next
                    case coerce
                    step( solve( !KD( (~k⊕~r1) ) ▶₀ #vk.4 ) )
                      case acceptreader
                      by step( solve( (#vl.1, 0) ~~> (#vk.4, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.1, 0) ~~> (#vk.4, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.4, 0) ~~> (#vk.4, 0) ) )
                      qed
                    qed
                  qed
                next
                  case coerce
                  step( solve( !KD( (~k⊕~r1⊕r0) ) ▶₀ #vk.3 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.4, 0) ~~> (#vk.3, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_4
                step( solve( !KU( (~k⊕~r1) ) @ #vk.4 ) )
                  case c_xor
                  by step( solve( !KU( ~k ) @ #vk.5 ) )
                next
                  case coerce
                  step( solve( !KD( (~k⊕~r1) ) ▶₀ #vk.3 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.4, 0) ~~> (#vk.3, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_5
                step( solve( !KU( (~k⊕~r1) ) @ #vk.3 ) )
                  case c_xor
                  by step( contradiction /* cyclic */ )
                next
                  case coerce
                  step( solve( !KD( (~k⊕~r1) ) ▶₀ #vk.3 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.4, 0) ~~> (#vk.3, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_6
                step( solve( !KU( (~k⊕~r1⊕z) ) @ #vk.3 ) )
                  case c_xor_case_1
                  by step( contradiction /* cyclic */ )
                next
                  case c_xor_case_2
                  by step( solve( !KU( ~k ) @ #vk.6 ) )
                next
                  case c_xor_case_3
                  step( solve( !KU( (~k⊕~r1) ) @ #vk.5 ) )
                    case c_xor
                    by step( contradiction /* cyclic */ )
                  next
                    case coerce
                    step( solve( !KD( (~k⊕~r1) ) ▶₀ #vk.4 ) )
                      case acceptreader
                      by step( solve( (#vl.1, 0) ~~> (#vk.4, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.1, 0) ~~> (#vk.4, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.4, 0) ~~> (#vk.4, 0) ) )
                      qed
                    qed
                  qed
                next
                  case coerce
                  step( solve( !KD( (~k⊕~r1⊕z) ) ▶₀ #vk.3 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.4, 0) ~~> (#vk.3, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_7
                step( solve( !KU( (~r1⊕x) ) @ #vk.3 ) )
                  case c_xor
                  by step( contradiction /* cyclic */ )
                next
                  case coerce
                  step( solve( !KD( (~r1⊕x) ) ▶₀ #vk.3 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.4, 0) ~~> (#vk.3, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_8
                step( solve( !KU( (~k⊕x) ) @ #vk.3 ) )
                  case c_xor
                  by step( solve( !KU( ~k ) @ #vk.6 ) )
                next
                  case coerce
                  step( solve( !KD( (~k⊕x) ) ▶₀ #vk.3 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.4, 0) ~~> (#vk.3, 0) ) )
                    qed
                  qed
                qed
              qed
            next
              case tag1_case_1
              step( solve( splitEqs(0) ) )
                case split_case_1
                by step( solve( !KU( ~k ) @ #vk.3 ) )
              next
                case split_case_2
                by step( contradiction /* cyclic */ )
              next
                case split_case_3
                step( solve( splitEqs(2) ) )
                  case split_case_1
                  by step( solve( !KU( ~k1 ) @ #vk.3 ) )
                next
                  case split_case_2
                  step( solve( !KU( (~k⊕~k1⊕~r1) ) @ #vk.4 ) )
                    case c_xor_case_1
                    by step( solve( !KU( ~k1 ) @ #vk.6 ) )
                  next
                    case c_xor_case_2
                    by step( solve( !KU( ~k ) @ #vk.6 ) )
                  next
                    case c_xor_case_3
                    by step( contradiction /* cyclic */ )
                  next
                    case coerce
                    step( solve( !KD( (~k⊕~k1⊕~r1) ) ▶₀ #vk.3 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_3
                  step( solve( !KU( (~k1⊕~r1.1) ) @ #vk.3 ) )
                    case c_xor
                    by step( solve( !KU( ~k1 ) @ #vk.6 ) )
                  next
                    case coerce
                    step( solve( !KD( (~k1⊕~r1.1) ) ▶₀ #vk.3 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_4
                  step( solve( !KU( (~k1⊕x⊕~r1.1) ) @ #vk.3 ) )
                    case c_xor_case_1
                    step( solve( !KU( (~k⊕~r1⊕x) ) @ #vk.4 ) )
                      case c_xor_case_1
                      step( solve( !KU( (~k1⊕~r1.1) ) @ #vk.5 ) )
                        case c_xor
                        by step( contradiction /* cyclic */ )
                      next
                        case coerce
                        step( solve( !KD( (~k1⊕~r1.1) ) ▶₀ #vk.5 ) )
                          case acceptreader
                          by step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                        next
                          case initiatereader
                          by step( contradiction /* impossible chain */ )
                        next
                          case tag1
                          step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                            case d_0_fst
                            by step( contradiction /* impossible chain */ )
                          next
                            case d_0_snd
                            by step( solve( (#vr.6, 0) ~~> (#vk.5, 0) ) )
                          qed
                        qed
                      qed
                    next
                      case c_xor_case_2
                      by step( solve( !KU( ~k ) @ #vk.8 ) )
                    next
                      case c_xor_case_3
                      step( solve( !KU( (~k1⊕~r1.1) ) @ #vk.5 ) )
                        case c_xor
                        by step( solve( !KU( ~k1 ) @ #vk.9 ) )
                      next
                        case coerce
                        step( solve( !KD( (~k1⊕~r1.1) ) ▶₀ #vk.5 ) )
                          case acceptreader
                          by step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                        next
                          case initiatereader
                          by step( contradiction /* impossible chain */ )
                        next
                          case tag1
                          step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                            case d_0_fst
                            by step( contradiction /* impossible chain */ )
                          next
                            case d_0_snd
                            by step( solve( (#vr.6, 0) ~~> (#vk.5, 0) ) )
                          qed
                        qed
                      qed
                    next
                      case coerce
                      step( solve( !KD( (~k⊕~r1⊕x) ) ▶₀ #vk.4 ) )
                        case acceptreader
                        by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                      next
                        case initiatereader
                        by step( contradiction /* impossible chain */ )
                      next
                        case tag1
                        step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                          case d_0_fst
                          by step( contradiction /* impossible chain */ )
                        next
                          case d_0_snd
                          by step( solve( (#vr.6, 0) ~~> (#vk.4, 0) ) )
                        qed
                      qed
                    qed
                  next
                    case c_xor_case_2
                    by step( solve( !KU( ~k1 ) @ #vk.6 ) )
                  next
                    case c_xor_case_3
                    step( solve( !KU( (~k⊕~r1⊕x) ) @ #vk.4 ) )
                      case c_xor_case_1
                      by step( contradiction /* cyclic */ )
                    next
                      case c_xor_case_2
                      by step( solve( !KU( ~k ) @ #vk.8 ) )
                    next
                      case c_xor_case_3
                      step( solve( !KU( (~k1⊕x) ) @ #vk.6 ) )
                        case c_xor
                        by step( solve( !KU( ~k1 ) @ #vk.9 ) )
                      next
                        case coerce
                        step( solve( !KD( (~k1⊕x) ) ▶₀ #vk.5 ) )
                          case acceptreader
                          by step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                        next
                          case initiatereader
                          by step( contradiction /* impossible chain */ )
                        next
                          case tag1
                          step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                            case d_0_fst
                            by step( contradiction /* impossible chain */ )
                          next
                            case d_0_snd
                            by step( solve( (#vr.6, 0) ~~> (#vk.5, 0) ) )
                          qed
                        qed
                      qed
                    next
                      case coerce
                      step( solve( !KD( (~k⊕~r1⊕x) ) ▶₀ #vk.4 ) )
                        case acceptreader
                        by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                      next
                        case initiatereader
                        by step( contradiction /* impossible chain */ )
                      next
                        case tag1
                        step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                          case d_0_fst
                          by step( contradiction /* impossible chain */ )
                        next
                          case d_0_snd
                          by step( solve( (#vr.6, 0) ~~> (#vk.4, 0) ) )
                        qed
                      qed
                    qed
                  next
                    case coerce
                    step( solve( !KD( (~k1⊕x⊕~r1.1) ) ▶₀ #vk.3 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_5
                  step( solve( !KU( (~k1⊕x) ) @ #vk.3 ) )
                    case c_xor
                    by step( solve( !KU( ~k1 ) @ #vk.6 ) )
                  next
                    case coerce
                    step( solve( !KD( (~k1⊕x) ) ▶₀ #vk.3 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_6
                  step( solve( !KU( (x⊕~r1.1) ) @ #vk.3 ) )
                    case c_xor
                    step( solve( !KU( (~k⊕~k1⊕~r1⊕x) ) @ #vk.4 ) )
                      case c_xor_case_1
                      by step( contradiction /* cyclic */ )
                    next
                      case c_xor_case_2
                      by step( solve( !KU( ~k1 ) @ #vk.8 ) )
                    next
                      case c_xor_case_3
                      step( solve( !KU( (~k⊕x) ) @ #vk.7 ) )
                        case c_xor
                        by step( solve( !KU( ~k ) @ #vk.9 ) )
                      next
                        case coerce
                        step( solve( !KD( (~k⊕x) ) ▶₀ #vk.5 ) )
                          case acceptreader
                          by step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                        next
                          case initiatereader
                          by step( contradiction /* impossible chain */ )
                        next
                          case tag1
                          step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                            case d_0_fst
                            by step( contradiction /* impossible chain */ )
                          next
                            case d_0_snd
                            by step( solve( (#vr.6, 0) ~~> (#vk.5, 0) ) )
                          qed
                        qed
                      qed
                    next
                      case c_xor_case_4
                      by step( solve( !KU( ~k ) @ #vk.8 ) )
                    next
                      case c_xor_case_5
                      step( solve( !KU( (~k1⊕x) ) @ #vk.7 ) )
                        case c_xor
                        by step( solve( !KU( ~k1 ) @ #vk.9 ) )
                      next
                        case coerce
                        step( solve( !KD( (~k1⊕x) ) ▶₀ #vk.5 ) )
                          case acceptreader
                          by step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                        next
                          case initiatereader
                          by step( contradiction /* impossible chain */ )
                        next
                          case tag1
                          step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                            case d_0_fst
                            by step( contradiction /* impossible chain */ )
                          next
                            case d_0_snd
                            by step( solve( (#vr.6, 0) ~~> (#vk.5, 0) ) )
                          qed
                        qed
                      qed
                    next
                      case c_xor_case_6
                      step( solve( !KU( (~r1⊕x) ) @ #vk.7 ) )
                        case c_xor
                        by step( contradiction /* cyclic */ )
                      next
                        case coerce
                        step( solve( !KD( (~r1⊕x) ) ▶₀ #vk.5 ) )
                          case acceptreader
                          by step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                        next
                          case initiatereader
                          by step( contradiction /* impossible chain */ )
                        next
                          case tag1
                          step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                            case d_0_fst
                            by step( contradiction /* impossible chain */ )
                          next
                            case d_0_snd
                            by step( solve( (#vr.6, 0) ~~> (#vk.5, 0) ) )
                          qed
                        qed
                      qed
                    next
                      case c_xor_case_7
                      step( solve( !KU( (~k⊕~k1⊕~r1) ) @ #vk.7 ) )
                        case c_xor_case_1
                        by step( solve( !KU( ~k1 ) @ #vk.9 ) )
                      next
                        case c_xor_case_2
                        by step( solve( !KU( ~k ) @ #vk.9 ) )
                      next
                        case c_xor_case_3
                        by step( contradiction /* cyclic */ )
                      next
                        case coerce
                        step( solve( !KD( (~k⊕~k1⊕~r1) ) ▶₀ #vk.5 ) )
                          case acceptreader
                          by step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                        next
                          case initiatereader
                          by step( contradiction /* impossible chain */ )
                        next
                          case tag1
                          step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                            case d_0_fst
                            by step( contradiction /* impossible chain */ )
                          next
                            case d_0_snd
                            by step( solve( (#vr.6, 0) ~~> (#vk.5, 0) ) )
                          qed
                        qed
                      qed
                    next
                      case coerce
                      step( solve( !KD( (~k⊕~k1⊕~r1⊕x) ) ▶₀ #vk.4 ) )
                        case acceptreader
                        by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                      next
                        case initiatereader
                        by step( contradiction /* impossible chain */ )
                      next
                        case tag1
                        step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                          case d_0_fst
                          by step( contradiction /* impossible chain */ )
                        next
                          case d_0_snd
                          by step( solve( (#vr.6, 0) ~~> (#vk.4, 0) ) )
                        qed
                      qed
                    qed
                  next
                    case coerce
                    step( solve( !KD( (x⊕~r1.1) ) ▶₀ #vk.3 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_7
                  step( solve( !KU( (~k⊕~k1⊕~r1⊕r0⊕~r1.1) ) @ #vk.4 ) )
                    case c_xor_case_01
                    step( solve( !KU( (~k⊕~k1⊕~r1⊕~r1.1) ) @ #vk.5 ) )
                      case c_xor_case_1
                      step( solve( !KU( (~k⊕~k1⊕~r1.1) ) @ #vk.6 ) )
                        case c_xor_case_1
                        by step( solve( !KU( ~k1 ) @ #vk.8 ) )
                      next
                        case c_xor_case_2
                        by step( solve( !KU( ~k ) @ #vk.8 ) )
                      next
                        case c_xor_case_3
                        by step( contradiction /* cyclic */ )
                      next
                        case coerce
                        step( solve( !KD( (~k⊕~k1⊕~r1.1) ) ▶₀ #vk.5 ) )
                          case acceptreader
                          by step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                        next
                          case initiatereader
                          by step( contradiction /* impossible chain */ )
                        next
                          case tag1
                          step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                            case d_0_fst
                            by step( contradiction /* impossible chain */ )
                          next
                            case d_0_snd
                            by step( solve( (#vr.6, 0) ~~> (#vk.5, 0) ) )
                          qed
                        qed
                      qed
                    next
                      case c_xor_case_2
                      by step( solve( !KU( ~k1 ) @ #vk.7 ) )
                    next
                      case c_xor_case_3
                      step( solve( !KU( (~k⊕~r1.1) ) @ #vk.6 ) )
                        case c_xor
                        by step( contradiction /* cyclic */ )
                      next
                        case coerce
                        step( solve( !KD( (~k⊕~r1.1) ) ▶₀ #vk.5 ) )
                          case acceptreader
                          by step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                        next
                          case initiatereader
                          by step( contradiction /* impossible chain */ )
                        next
                          case tag1
                          step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                            case d_0_fst
                            by step( contradiction /* impossible chain */ )
                          next
                            case d_0_snd
                            by step( solve( (#vr.6, 0) ~~> (#vk.5, 0) ) )
                          qed
                        qed
                      qed
                    next
                      case c_xor_case_4
                      by step( solve( !KU( ~k ) @ #vk.7 ) )
                    next
                      case c_xor_case_5
                      step( solve( !KU( (~k1⊕~r1.1) ) @ #vk.6 ) )
                        case c_xor
                        by step( contradiction /* cyclic */ )
                      next
                        case coerce
                        step( solve( !KD( (~k1⊕~r1.1) ) ▶₀ #vk.5 ) )
                          case acceptreader
                          by step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                        next
                          case initiatereader
                          by step( contradiction /* impossible chain */ )
                        next
                          case tag1
                          step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                            case d_0_fst
                            by step( contradiction /* impossible chain */ )
                          next
                            case d_0_snd
                            by step( solve( (#vr.6, 0) ~~> (#vk.5, 0) ) )
                          qed
                        qed
                      qed
                    next
                      case c_xor_case_6
                      step( solve( !KU( (~r1⊕~r1.1) ) @ #vk.6 ) )
                        case c_xor
                        by step( contradiction /* cyclic */ )
                      next
                        case coerce
                        step( solve( !KD( (~r1⊕~r1.1) ) ▶₀ #vk.5 ) )
                          case acceptreader
                          by step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                        next
                          case initiatereader
                          by step( contradiction /* impossible chain */ )
                        next
                          case tag1
                          step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                            case d_0_fst
                            by step( contradiction /* impossible chain */ )
                          next
                            case d_0_snd
                            by step( solve( (#vr.6, 0) ~~> (#vk.5, 0) ) )
                          qed
                        qed
                      qed
                    next
                      case c_xor_case_7
                      by step( contradiction /* cyclic */ )
                    next
                      case coerce
                      step( solve( !KD( (~k⊕~k1⊕~r1⊕~r1.1) ) ▶₀ #vk.4 ) )
                        case acceptreader
                        by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                      next
                        case initiatereader
                        by step( contradiction /* impossible chain */ )
                      next
                        case tag1
                        step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                          case d_0_fst
                          by step( contradiction /* impossible chain */ )
                        next
                          case d_0_snd
                          by step( solve( (#vr.6, 0) ~~> (#vk.4, 0) ) )
                        qed
                      qed
                    qed
                  next
                    case c_xor_case_02
                    step( solve( !KU( (~k⊕~k1⊕r0⊕~r1.1) ) @ #vk.5 ) )
                      case c_xor_case_1
                      step( solve( !KU( (~k⊕~k1⊕~r1.1) ) @ #vk.6 ) )
                        case c_xor_case_1
                        by step( solve( !KU( ~k1 ) @ #vk.8 ) )
                      next
                        case c_xor_case_2
                        by step( solve( !KU( ~k ) @ #vk.8 ) )
                      next
                        case c_xor_case_3
                        by step( contradiction /* cyclic */ )
                      next
                        case coerce
                        step( solve( !KD( (~k⊕~k1⊕~r1.1) ) ▶₀ #vk.5 ) )
                          case acceptreader
                          by step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                        next
                          case initiatereader
                          by step( contradiction /* impossible chain */ )
                        next
                          case tag1
                          step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                            case d_0_fst
                            by step( contradiction /* impossible chain */ )
                          next
                            case d_0_snd
                            by step( solve( (#vr.6, 0) ~~> (#vk.5, 0) ) )
                          qed
                        qed
                      qed
                    next
                      case c_xor_case_2
                      by step( solve( !KU( ~k1 ) @ #vk.7 ) )
                    next
                      case c_xor_case_3
                      step( solve( !KU( (~k⊕~r1.1) ) @ #vk.6 ) )
                        case c_xor
                        by step( contradiction /* cyclic */ )
                      next
                        case coerce
                        step( solve( !KD( (~k⊕~r1.1) ) ▶₀ #vk.5 ) )
                          case acceptreader
                          by step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                        next
                          case initiatereader
                          by step( contradiction /* impossible chain */ )
                        next
                          case tag1
                          step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                            case d_0_fst
                            by step( contradiction /* impossible chain */ )
                          next
                            case d_0_snd
                            by step( solve( (#vr.6, 0) ~~> (#vk.5, 0) ) )
                          qed
                        qed
                      qed
                    next
                      case c_xor_case_4
                      by step( solve( !KU( ~k ) @ #vk.7 ) )
                    next
                      case c_xor_case_5
                      step( solve( !KU( (~k1⊕~r1.1) ) @ #vk.6 ) )
                        case c_xor
                        by step( contradiction /* cyclic */ )
                      next
                        case coerce
                        step( solve( !KD( (~k1⊕~r1.1) ) ▶₀ #vk.5 ) )
                          case acceptreader
                          by step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                        next
                          case initiatereader
                          by step( contradiction /* impossible chain */ )
                        next
                          case tag1
                          step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                            case d_0_fst
                            by step( contradiction /* impossible chain */ )
                          next
                            case d_0_snd
                            by step( solve( (#vr.6, 0) ~~> (#vk.5, 0) ) )
                          qed
                        qed
                      qed
                    next
                      case c_xor_case_6
                      step( solve( !KU( (r0⊕~r1.1) ) @ #vk.6 ) )
                        case c_xor
                        by step( contradiction /* cyclic */ )
                      next
                        case coerce
                        step( solve( !KD( (r0⊕~r1.1) ) ▶₀ #vk.5 ) )
                          case acceptreader
                          by step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                        next
                          case initiatereader
                          by step( contradiction /* impossible chain */ )
                        next
                          case tag1
                          step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                            case d_0_fst
                            by step( contradiction /* impossible chain */ )
                          next
                            case d_0_snd
                            by step( solve( (#vr.6, 0) ~~> (#vk.5, 0) ) )
                          qed
                        qed
                      qed
                    next
                      case c_xor_case_7
                      by step( contradiction /* cyclic */ )
                    next
                      case coerce
                      step( solve( !KD( (~k⊕~k1⊕r0⊕~r1.1) ) ▶₀ #vk.4 ) )
                        case acceptreader
                        by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                      next
                        case initiatereader
                        by step( contradiction /* impossible chain */ )
                      next
                        case tag1
                        step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                          case d_0_fst
                          by step( contradiction /* impossible chain */ )
                        next
                          case d_0_snd
                          by step( solve( (#vr.6, 0) ~~> (#vk.4, 0) ) )
                        qed
                      qed
                    qed
                  next
                    case c_xor_case_03
                    step( solve( !KU( (~k⊕~k1⊕~r1.1) ) @ #vk.5 ) )
                      case c_xor_case_1
                      by step( solve( !KU( ~k1 ) @ #vk.8 ) )
                    next
                      case c_xor_case_2
                      by step( solve( !KU( ~k ) @ #vk.8 ) )
                    next
                      case c_xor_case_3
                      by step( contradiction /* cyclic */ )
                    next
                      case coerce
                      step( solve( !KD( (~k⊕~k1⊕~r1.1) ) ▶₀ #vk.4 ) )
                        case acceptreader
                        by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                      next
                        case initiatereader
                        by step( contradiction /* impossible chain */ )
                      next
                        case tag1
                        step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                          case d_0_fst
                          by step( contradiction /* impossible chain */ )
                        next
                          case d_0_snd
                          by step( solve( (#vr.6, 0) ~~> (#vk.4, 0) ) )
                        qed
                      qed
                    qed
                  next
                    case c_xor_case_04
                    by step( solve( !KU( ~k1 ) @ #vk.6 ) )
                  next
                    case c_xor_case_05
                    step( solve( !KU( (~k⊕~r1⊕~r1.1) ) @ #vk.5 ) )
                      case c_xor_case_1
                      step( solve( !KU( (~k1⊕r0) ) @ #vk.6 ) )
                        case c_xor
                        by step( solve( !KU( ~k1 ) @ #vk.8 ) )
                      next
                        case coerce
                        step( solve( !KD( (~k1⊕r0) ) ▶₀ #vk.5 ) )
                          case acceptreader
                          by step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                        next
                          case initiatereader
                          by step( contradiction /* impossible chain */ )
                        next
                          case tag1
                          step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                            case d_0_fst
                            by step( contradiction /* impossible chain */ )
                          next
                            case d_0_snd
                            by step( solve( (#vr.6, 0) ~~> (#vk.5, 0) ) )
                          qed
                        qed
                      qed
                    next
                      case c_xor_case_2
                      by step( solve( !KU( ~k ) @ #vk.8 ) )
                    next
                      case c_xor_case_3
                      by step( contradiction /* cyclic */ )
                    next
                      case coerce
                      step( solve( !KD( (~k⊕~r1⊕~r1.1) ) ▶₀ #vk.4 ) )
                        case acceptreader
                        by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                      next
                        case initiatereader
                        by step( contradiction /* impossible chain */ )
                      next
                        case tag1
                        step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                          case d_0_fst
                          by step( contradiction /* impossible chain */ )
                        next
                          case d_0_snd
                          by step( solve( (#vr.6, 0) ~~> (#vk.4, 0) ) )
                        qed
                      qed
                    qed
                  next
                    case c_xor_case_06
                    step( solve( !KU( (~k⊕r0⊕~r1.1) ) @ #vk.5 ) )
                      case c_xor_case_1
                      step( solve( !KU( (~k1⊕~r1) ) @ #vk.6 ) )
                        case c_xor
                        by step( solve( !KU( ~k1 ) @ #vk.8 ) )
                      next
                        case coerce
                        step( solve( !KD( (~k1⊕~r1) ) ▶₀ #vk.5 ) )
                          case acceptreader
                          by step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                        next
                          case initiatereader
                          by step( contradiction /* impossible chain */ )
                        next
                          case tag1
                          step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                            case d_0_fst
                            by step( contradiction /* impossible chain */ )
                          next
                            case d_0_snd
                            by step( solve( (#vr.6, 0) ~~> (#vk.5, 0) ) )
                          qed
                        qed
                      qed
                    next
                      case c_xor_case_2
                      by step( solve( !KU( ~k ) @ #vk.8 ) )
                    next
                      case c_xor_case_3
                      by step( contradiction /* cyclic */ )
                    next
                      case coerce
                      step( solve( !KD( (~k⊕r0⊕~r1.1) ) ▶₀ #vk.4 ) )
                        case acceptreader
                        by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                      next
                        case initiatereader
                        by step( contradiction /* impossible chain */ )
                      next
                        case tag1
                        step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                          case d_0_fst
                          by step( contradiction /* impossible chain */ )
                        next
                          case d_0_snd
                          by step( solve( (#vr.6, 0) ~~> (#vk.4, 0) ) )
                        qed
                      qed
                    qed
                  next
                    case c_xor_case_07
                    step( solve( !KU( (~k⊕~r1.1) ) @ #vk.5 ) )
                      case c_xor
                      by step( contradiction /* cyclic */ )
                    next
                      case coerce
                      step( solve( !KD( (~k⊕~r1.1) ) ▶₀ #vk.4 ) )
                        case acceptreader
                        by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                      next
                        case initiatereader
                        by step( contradiction /* impossible chain */ )
                      next
                        case tag1
                        step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                          case d_0_fst
                          by step( contradiction /* impossible chain */ )
                        next
                          case d_0_snd
                          by step( solve( (#vr.6, 0) ~~> (#vk.4, 0) ) )
                        qed
                      qed
                    qed
                  next
                    case c_xor_case_08
                    by step( solve( !KU( ~k ) @ #vk.6 ) )
                  next
                    case c_xor_case_09
                    step( solve( !KU( (~k1⊕~r1⊕~r1.1) ) @ #vk.5 ) )
                      case c_xor_case_1
                      step( solve( !KU( (~k⊕r0) ) @ #vk.6 ) )
                        case c_xor
                        by step( solve( !KU( ~k ) @ #vk.8 ) )
                      next
                        case coerce
                        step( solve( !KD( (~k⊕r0) ) ▶₀ #vk.5 ) )
                          case acceptreader
                          by step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                        next
                          case initiatereader
                          by step( contradiction /* impossible chain */ )
                        next
                          case tag1
                          step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                            case d_0_fst
                            by step( contradiction /* impossible chain */ )
                          next
                            case d_0_snd
                            by step( solve( (#vr.6, 0) ~~> (#vk.5, 0) ) )
                          qed
                        qed
                      qed
                    next
                      case c_xor_case_2
                      by step( solve( !KU( ~k1 ) @ #vk.8 ) )
                    next
                      case c_xor_case_3
                      by step( contradiction /* cyclic */ )
                    next
                      case coerce
                      step( solve( !KD( (~k1⊕~r1⊕~r1.1) ) ▶₀ #vk.4 ) )
                        case acceptreader
                        by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                      next
                        case initiatereader
                        by step( contradiction /* impossible chain */ )
                      next
                        case tag1
                        step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                          case d_0_fst
                          by step( contradiction /* impossible chain */ )
                        next
                          case d_0_snd
                          by step( solve( (#vr.6, 0) ~~> (#vk.4, 0) ) )
                        qed
                      qed
                    qed
                  next
                    case c_xor_case_10
                    step( solve( !KU( (~k1⊕r0⊕~r1.1) ) @ #vk.5 ) )
                      case c_xor_case_1
                      step( solve( !KU( (~k⊕~r1) ) @ #vk.6 ) )
                        case c_xor
                        by step( solve( !KU( ~k ) @ #vk.8 ) )
                      next
                        case coerce
                        step( solve( !KD( (~k⊕~r1) ) ▶₀ #vk.5 ) )
                          case acceptreader
                          by step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                        next
                          case initiatereader
                          by step( contradiction /* impossible chain */ )
                        next
                          case tag1
                          step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                            case d_0_fst
                            by step( contradiction /* impossible chain */ )
                          next
                            case d_0_snd
                            by step( solve( (#vr.6, 0) ~~> (#vk.5, 0) ) )
                          qed
                        qed
                      qed
                    next
                      case c_xor_case_2
                      by step( solve( !KU( ~k1 ) @ #vk.8 ) )
                    next
                      case c_xor_case_3
                      by step( contradiction /* cyclic */ )
                    next
                      case coerce
                      step( solve( !KD( (~k1⊕r0⊕~r1.1) ) ▶₀ #vk.4 ) )
                        case acceptreader
                        by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                      next
                        case initiatereader
                        by step( contradiction /* impossible chain */ )
                      next
                        case tag1
                        step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                          case d_0_fst
                          by step( contradiction /* impossible chain */ )
                        next
                          case d_0_snd
                          by step( solve( (#vr.6, 0) ~~> (#vk.4, 0) ) )
                        qed
                      qed
                    qed
                  next
                    case c_xor_case_11
                    step( solve( !KU( (~k1⊕~r1.1) ) @ #vk.5 ) )
                      case c_xor
                      by step( contradiction /* cyclic */ )
                    next
                      case coerce
                      step( solve( !KD( (~k1⊕~r1.1) ) ▶₀ #vk.4 ) )
                        case acceptreader
                        by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                      next
                        case initiatereader
                        by step( contradiction /* impossible chain */ )
                      next
                        case tag1
                        step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                          case d_0_fst
                          by step( contradiction /* impossible chain */ )
                        next
                          case d_0_snd
                          by step( solve( (#vr.6, 0) ~~> (#vk.4, 0) ) )
                        qed
                      qed
                    qed
                  next
                    case c_xor_case_12
                    step( solve( !KU( (~r1⊕r0⊕~r1.1) ) @ #vk.5 ) )
                      case c_xor_case_1
                      step( solve( !KU( (~k⊕~k1) ) @ #vk.6 ) )
                        case c_xor
                        by step( solve( !KU( ~k1 ) @ #vk.8 ) )
                      next
                        case coerce
                        step( solve( !KD( (~k⊕~k1) ) ▶₀ #vk.5 ) )
                          case acceptreader
                          by step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                        next
                          case initiatereader
                          by step( contradiction /* impossible chain */ )
                        next
                          case tag1
                          step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                            case d_0_fst
                            by step( contradiction /* impossible chain */ )
                          next
                            case d_0_snd
                            by step( solve( (#vr.6, 0) ~~> (#vk.5, 0) ) )
                          qed
                        qed
                      qed
                    next
                      case c_xor_case_2
                      step( solve( !KU( (~k⊕~k1) ) @ #vk.6 ) )
                        case c_xor
                        by step( solve( !KU( ~k1 ) @ #vk.8 ) )
                      next
                        case coerce
                        step( solve( !KD( (~k⊕~k1) ) ▶₀ #vk.5 ) )
                          case acceptreader
                          by step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                        next
                          case initiatereader
                          by step( contradiction /* impossible chain */ )
                        next
                          case tag1
                          step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                            case d_0_fst
                            by step( contradiction /* impossible chain */ )
                          next
                            case d_0_snd
                            by step( solve( (#vr.6, 0) ~~> (#vk.5, 0) ) )
                          qed
                        qed
                      qed
                    next
                      case c_xor_case_3
                      by step( contradiction /* cyclic */ )
                    next
                      case coerce
                      step( solve( !KD( (~r1⊕r0⊕~r1.1) ) ▶₀ #vk.4 ) )
                        case acceptreader
                        by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                      next
                        case initiatereader
                        by step( contradiction /* impossible chain */ )
                      next
                        case tag1
                        step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                          case d_0_fst
                          by step( contradiction /* impossible chain */ )
                        next
                          case d_0_snd
                          by step( solve( (#vr.6, 0) ~~> (#vk.4, 0) ) )
                        qed
                      qed
                    qed
                  next
                    case c_xor_case_13
                    step( solve( !KU( (~r1⊕~r1.1) ) @ #vk.5 ) )
                      case c_xor
                      by step( contradiction /* cyclic */ )
                    next
                      case coerce
                      step( solve( !KD( (~r1⊕~r1.1) ) ▶₀ #vk.4 ) )
                        case acceptreader
                        by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                      next
                        case initiatereader
                        by step( contradiction /* impossible chain */ )
                      next
                        case tag1
                        step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                          case d_0_fst
                          by step( contradiction /* impossible chain */ )
                        next
                          case d_0_snd
                          by step( solve( (#vr.6, 0) ~~> (#vk.4, 0) ) )
                        qed
                      qed
                    qed
                  next
                    case c_xor_case_14
                    step( solve( !KU( (r0⊕~r1.1) ) @ #vk.5 ) )
                      case c_xor
                      by step( contradiction /* cyclic */ )
                    next
                      case coerce
                      step( solve( !KD( (r0⊕~r1.1) ) ▶₀ #vk.4 ) )
                        case acceptreader
                        by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                      next
                        case initiatereader
                        by step( contradiction /* impossible chain */ )
                      next
                        case tag1
                        step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                          case d_0_fst
                          by step( contradiction /* impossible chain */ )
                        next
                          case d_0_snd
                          by step( solve( (#vr.6, 0) ~~> (#vk.4, 0) ) )
                        qed
                      qed
                    qed
                  next
                    case c_xor_case_15
                    by step( contradiction /* cyclic */ )
                  next
                    case coerce
                    step( solve( !KD( (~k⊕~k1⊕~r1⊕r0⊕~r1.1) ) ▶₀ #vk.3 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                      qed
                    qed
                  qed
                qed
              next
                case split_case_4
                step( solve( !KU( zero ) @ #vk.3 ) )
                  case c_zero
                  step( solve( splitEqs(2) ) )
                    case split
                    step( solve( !KU( (~k⊕~k1⊕~r1⊕~r1.1) ) @ #vk.4 ) )
                      case c_xor_case_1
                      step( solve( !KU( (~k⊕~k1⊕~r1.1) ) @ #vk.5 ) )
                        case c_xor_case_1
                        by step( solve( !KU( ~k1 ) @ #vk.7 ) )
                      next
                        case c_xor_case_2
                        by step( solve( !KU( ~k ) @ #vk.7 ) )
                      next
                        case c_xor_case_3
                        by step( contradiction /* cyclic */ )
                      next
                        case coerce
                        step( solve( !KD( (~k⊕~k1⊕~r1.1) ) ▶₀ #vk.5 ) )
                          case acceptreader
                          by step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                        next
                          case initiatereader
                          by step( contradiction /* impossible chain */ )
                        next
                          case tag1
                          step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                            case d_0_fst
                            by step( contradiction /* impossible chain */ )
                          next
                            case d_0_snd
                            by step( solve( (#vr.6, 0) ~~> (#vk.5, 0) ) )
                          qed
                        qed
                      qed
                    next
                      case c_xor_case_2
                      by step( solve( !KU( ~k1 ) @ #vk.6 ) )
                    next
                      case c_xor_case_3
                      step( solve( !KU( (~k⊕~r1.1) ) @ #vk.5 ) )
                        case c_xor
                        by step( contradiction /* cyclic */ )
                      next
                        case coerce
                        step( solve( !KD( (~k⊕~r1.1) ) ▶₀ #vk.5 ) )
                          case acceptreader
                          by step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                        next
                          case initiatereader
                          by step( contradiction /* impossible chain */ )
                        next
                          case tag1
                          step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                            case d_0_fst
                            by step( contradiction /* impossible chain */ )
                          next
                            case d_0_snd
                            by step( solve( (#vr.6, 0) ~~> (#vk.5, 0) ) )
                          qed
                        qed
                      qed
                    next
                      case c_xor_case_4
                      by step( solve( !KU( ~k ) @ #vk.6 ) )
                    next
                      case c_xor_case_5
                      step( solve( !KU( (~k1⊕~r1.1) ) @ #vk.5 ) )
                        case c_xor
                        by step( contradiction /* cyclic */ )
                      next
                        case coerce
                        step( solve( !KD( (~k1⊕~r1.1) ) ▶₀ #vk.5 ) )
                          case acceptreader
                          by step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                        next
                          case initiatereader
                          by step( contradiction /* impossible chain */ )
                        next
                          case tag1
                          step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                            case d_0_fst
                            by step( contradiction /* impossible chain */ )
                          next
                            case d_0_snd
                            by step( solve( (#vr.6, 0) ~~> (#vk.5, 0) ) )
                          qed
                        qed
                      qed
                    next
                      case c_xor_case_6
                      step( solve( !KU( (~r1⊕~r1.1) ) @ #vk.5 ) )
                        case c_xor
                        by step( contradiction /* cyclic */ )
                      next
                        case coerce
                        step( solve( !KD( (~r1⊕~r1.1) ) ▶₀ #vk.5 ) )
                          case acceptreader
                          by step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                        next
                          case initiatereader
                          by step( contradiction /* impossible chain */ )
                        next
                          case tag1
                          step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                            case d_0_fst
                            by step( contradiction /* impossible chain */ )
                          next
                            case d_0_snd
                            by step( solve( (#vr.6, 0) ~~> (#vk.5, 0) ) )
                          qed
                        qed
                      qed
                    next
                      case c_xor_case_7
                      by step( contradiction /* cyclic */ )
                    next
                      case coerce
                      step( solve( !KD( (~k⊕~k1⊕~r1⊕~r1.1) ) ▶₀ #vk.4 ) )
                        case acceptreader
                        by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                      next
                        case initiatereader
                        by step( contradiction /* impossible chain */ )
                      next
                        case tag1
                        step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                          case d_0_fst
                          by step( contradiction /* impossible chain */ )
                        next
                          case d_0_snd
                          by step( solve( (#vr.6, 0) ~~> (#vk.4, 0) ) )
                        qed
                      qed
                    qed
                  qed
                next
                  case coerce
                  step( solve( !KD( zero ) ▶₀ #vk.3 ) )
                    case acceptreader
                    by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_5
                step( solve( !KU( (~k⊕~r1) ) @ #vk.3 ) )
                  case c_xor
                  by step( contradiction /* cyclic */ )
                next
                  case coerce
                  step( solve( !KD( (~k⊕~r1) ) ▶₀ #vk.3 ) )
                    case acceptreader
                    by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_6
                step( solve( !KU( (~k⊕~r1⊕z) ) @ #vk.3 ) )
                  case c_xor_case_1
                  by step( contradiction /* cyclic */ )
                next
                  case c_xor_case_2
                  by step( solve( !KU( ~k ) @ #vk.6 ) )
                next
                  case c_xor_case_3
                  step( solve( !KU( (~k⊕~r1) ) @ #vk.6 ) )
                    case c_xor
                    by step( contradiction /* cyclic */ )
                  next
                    case coerce
                    step( solve( !KD( (~k⊕~r1) ) ▶₀ #vk.4 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.4, 0) ) )
                      qed
                    qed
                  qed
                next
                  case coerce
                  step( solve( !KD( (~k⊕~r1⊕z) ) ▶₀ #vk.3 ) )
                    case acceptreader
                    by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_7
                step( solve( !KU( (~r1⊕x) ) @ #vk.3 ) )
                  case c_xor
                  by step( contradiction /* cyclic */ )
                next
                  case coerce
                  step( solve( !KD( (~r1⊕x) ) ▶₀ #vk.3 ) )
                    case acceptreader
                    by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_8
                step( solve( !KU( (~k⊕x) ) @ #vk.3 ) )
                  case c_xor
                  by step( solve( !KU( ~k ) @ #vk.6 ) )
                next
                  case coerce
                  step( solve( !KD( (~k⊕x) ) ▶₀ #vk.3 ) )
                    case acceptreader
                    by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                    qed
                  qed
                qed
              qed
            next
              case tag1_case_2
              step( solve( splitEqs(0) ) )
                case split_case_1
                by step( solve( !KU( ~k ) @ #vk.3 ) )
              next
                case split_case_2
                MIRRORED
              next
                case split_case_3
                MIRRORED
              next
                case split_case_4
                step( solve( !KU( zero ) @ #vk.3 ) )
                  case c_zero
                  MIRRORED
                next
                  case coerce
                  step( solve( !KD( zero ) ▶₀ #vk.3 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.5, 0) ~~> (#vk.3, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_5
                step( solve( !KU( (~k⊕~r1) ) @ #vk.3 ) )
                  case c_xor
                  by step( contradiction /* cyclic */ )
                next
                  case coerce
                  step( solve( !KD( (~k⊕~r1) ) ▶₀ #vk.3 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.5, 0) ~~> (#vk.3, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_6
                step( solve( !KU( (~k⊕~r1⊕z) ) @ #vk.3 ) )
                  case c_xor_case_1
                  by step( contradiction /* cyclic */ )
                next
                  case c_xor_case_2
                  by step( solve( !KU( ~k ) @ #vk.5 ) )
                next
                  case c_xor_case_3
                  step( solve( !KU( (~k⊕~r1) ) @ #vk.5 ) )
                    case c_xor
                    by step( contradiction /* cyclic */ )
                  next
                    case coerce
                    step( solve( !KD( (~k⊕~r1) ) ▶₀ #vk.4 ) )
                      case acceptreader
                      by step( solve( (#vl.1, 0) ~~> (#vk.4, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.1, 0) ~~> (#vk.4, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.5, 0) ~~> (#vk.4, 0) ) )
                      qed
                    qed
                  qed
                next
                  case coerce
                  step( solve( !KD( (~k⊕~r1⊕z) ) ▶₀ #vk.3 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.5, 0) ~~> (#vk.3, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_7
                step( solve( !KU( (~r1⊕x) ) @ #vk.3 ) )
                  case c_xor
                  by step( contradiction /* cyclic */ )
                next
                  case coerce
                  step( solve( !KD( (~r1⊕x) ) ▶₀ #vk.3 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.5, 0) ~~> (#vk.3, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_8
                step( solve( !KU( (~k⊕x) ) @ #vk.3 ) )
                  case c_xor
                  by step( solve( !KU( ~k ) @ #vk.5 ) )
                next
                  case coerce
                  step( solve( !KD( (~k⊕x) ) ▶₀ #vk.3 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.5, 0) ~~> (#vk.3, 0) ) )
                    qed
                  qed
                qed
              qed
            next
              case tag1_case_3
              step( solve( splitEqs(0) ) )
                case split_case_1
                by step( solve( !KU( ~k ) @ #vk.3 ) )
              next
                case split_case_2
                by step( contradiction /* cyclic */ )
              next
                case split_case_3
                step( solve( splitEqs(2) ) )
                  case split_case_1
                  by step( contradiction /* cyclic */ )
                next
                  case split_case_2
                  step( solve( !KU( (~r1⊕r0⊕~r1.1) ) @ #vk.4 ) )
                    case c_xor_case_1
                    step( solve( !KU( (~r1⊕~r1.1) ) @ #vk.5 ) )
                      case c_xor
                      by step( contradiction /* cyclic */ )
                    next
                      case coerce
                      step( solve( !KD( (~r1⊕~r1.1) ) ▶₀ #vk.4 ) )
                        case acceptreader
                        by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                      next
                        case initiatereader
                        by step( contradiction /* impossible chain */ )
                      next
                        case tag1
                        step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                          case d_0_fst
                          by step( contradiction /* impossible chain */ )
                        next
                          case d_0_snd
                          by step( solve( (#vr.6, 0) ~~> (#vk.4, 0) ) )
                        qed
                      qed
                    qed
                  next
                    case c_xor_case_2
                    step( solve( !KU( (r0⊕~r1.1) ) @ #vk.5 ) )
                      case c_xor
                      by step( contradiction /* cyclic */ )
                    next
                      case coerce
                      step( solve( !KD( (r0⊕~r1.1) ) ▶₀ #vk.4 ) )
                        case acceptreader
                        by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                      next
                        case initiatereader
                        by step( contradiction /* impossible chain */ )
                      next
                        case tag1
                        step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                          case d_0_fst
                          by step( contradiction /* impossible chain */ )
                        next
                          case d_0_snd
                          by step( solve( (#vr.6, 0) ~~> (#vk.4, 0) ) )
                        qed
                      qed
                    qed
                  next
                    case c_xor_case_3
                    by step( contradiction /* cyclic */ )
                  next
                    case coerce
                    step( solve( !KD( (~r1⊕r0⊕~r1.1) ) ▶₀ #vk.3 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_3
                  step( solve( !KU( (x⊕~r1.1) ) @ #vk.3 ) )
                    case c_xor
                    step( solve( !KU( (~r1⊕x) ) @ #vk.4 ) )
                      case c_xor
                      by step( contradiction /* cyclic */ )
                    next
                      case coerce
                      step( solve( !KD( (~r1⊕x) ) ▶₀ #vk.4 ) )
                        case acceptreader
                        by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                      next
                        case initiatereader
                        by step( contradiction /* impossible chain */ )
                      next
                        case tag1
                        step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                          case d_0_fst
                          by step( contradiction /* impossible chain */ )
                        next
                          case d_0_snd
                          by step( solve( (#vr.6, 0) ~~> (#vk.4, 0) ) )
                        qed
                      qed
                    qed
                  next
                    case coerce
                    step( solve( !KD( (x⊕~r1.1) ) ▶₀ #vk.3 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                      qed
                    qed
                  qed
                qed
              next
                case split_case_4
                step( solve( !KU( zero ) @ #vk.3 ) )
                  case c_zero
                  step( solve( splitEqs(2) ) )
                    case split
                    step( solve( !KU( (~r1⊕~r1.1) ) @ #vk.4 ) )
                      case c_xor
                      by step( contradiction /* cyclic */ )
                    next
                      case coerce
                      step( solve( !KD( (~r1⊕~r1.1) ) ▶₀ #vk.4 ) )
                        case acceptreader
                        by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                      next
                        case initiatereader
                        by step( contradiction /* impossible chain */ )
                      next
                        case tag1
                        step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                          case d_0_fst
                          by step( contradiction /* impossible chain */ )
                        next
                          case d_0_snd
                          by step( solve( (#vr.6, 0) ~~> (#vk.4, 0) ) )
                        qed
                      qed
                    qed
                  qed
                next
                  case coerce
                  step( solve( !KD( zero ) ▶₀ #vk.3 ) )
                    case acceptreader
                    by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_5
                step( solve( !KU( (~k⊕~r1) ) @ #vk.3 ) )
                  case c_xor
                  by step( contradiction /* cyclic */ )
                next
                  case coerce
                  step( solve( !KD( (~k⊕~r1) ) ▶₀ #vk.3 ) )
                    case acceptreader
                    by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_6
                step( solve( !KU( (~k⊕~r1⊕z) ) @ #vk.3 ) )
                  case c_xor_case_1
                  by step( contradiction /* cyclic */ )
                next
                  case c_xor_case_2
                  by step( solve( !KU( ~k ) @ #vk.6 ) )
                next
                  case c_xor_case_3
                  step( solve( !KU( (~k⊕~r1) ) @ #vk.6 ) )
                    case c_xor
                    by step( contradiction /* cyclic */ )
                  next
                    case coerce
                    step( solve( !KD( (~k⊕~r1) ) ▶₀ #vk.4 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.4, 0) ) )
                      qed
                    qed
                  qed
                next
                  case coerce
                  step( solve( !KD( (~k⊕~r1⊕z) ) ▶₀ #vk.3 ) )
                    case acceptreader
                    by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_7
                step( solve( !KU( (~r1⊕x) ) @ #vk.3 ) )
                  case c_xor
                  by step( contradiction /* cyclic */ )
                next
                  case coerce
                  step( solve( !KD( (~r1⊕x) ) ▶₀ #vk.3 ) )
                    case acceptreader
                    by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_8
                step( solve( !KU( (~k⊕x) ) @ #vk.3 ) )
                  case c_xor
                  by step( solve( !KU( ~k ) @ #vk.6 ) )
                next
                  case coerce
                  step( solve( !KD( (~k⊕x) ) ▶₀ #vk.3 ) )
                    case acceptreader
                    by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                    qed
                  qed
                qed
              qed
            qed
          qed
        next
          case setup_case_3
          step( solve( !KU( ~r1 ) @ #vk.2 ) )
            case tag1
            step( solve( !KU( h(z) ) @ #vk.3 ) )
              case c_h
              step( solve( splitEqs(0) ) )
                case split_case_1
                by step( solve( !KU( ~k ) @ #vk.3 ) )
              next
                case split_case_2
                by step( contradiction /* cyclic */ )
              next
                case split_case_3
                step( solve( !KU( (~k⊕~r1⊕r0) ) @ #vk.4 ) )
                  case c_xor_case_1
                  step( solve( !KU( (~k⊕r0) ) @ #vk.5 ) )
                    case c_xor
                    by step( solve( !KU( ~k ) @ #vk.6 ) )
                  next
                    case coerce
                    step( solve( !KD( (~k⊕r0) ) ▶₀ #vk.4 ) )
                      case acceptreader
                      by step( solve( (#vl.1, 0) ~~> (#vk.4, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.1, 0) ~~> (#vk.4, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.4, 0) ~~> (#vk.4, 0) ) )
                      qed
                    qed
                  qed
                next
                  case c_xor_case_2
                  by step( solve( !KU( ~k ) @ #vk.6 ) )
                next
                  case c_xor_case_3
                  step( solve( !KU( (~k⊕~r1) ) @ #vk.5 ) )
                    case c_xor
                    by step( solve( !KU( ~k ) @ #vk.6 ) )
                  next
                    case coerce
                    step( solve( !KD( (~k⊕~r1) ) ▶₀ #vk.4 ) )
                      case acceptreader
                      by step( solve( (#vl.1, 0) ~~> (#vk.4, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.1, 0) ~~> (#vk.4, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.4, 0) ~~> (#vk.4, 0) ) )
                      qed
                    qed
                  qed
                next
                  case coerce
                  step( solve( !KD( (~k⊕~r1⊕r0) ) ▶₀ #vk.3 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.4, 0) ~~> (#vk.3, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_4
                step( solve( !KU( (~k⊕~r1) ) @ #vk.4 ) )
                  case c_xor
                  by step( solve( !KU( ~k ) @ #vk.5 ) )
                next
                  case coerce
                  step( solve( !KD( (~k⊕~r1) ) ▶₀ #vk.3 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.4, 0) ~~> (#vk.3, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_5
                step( solve( !KU( (~k⊕~r1) ) @ #vk.3 ) )
                  case c_xor
                  by step( contradiction /* cyclic */ )
                next
                  case coerce
                  step( solve( !KD( (~k⊕~r1) ) ▶₀ #vk.3 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.4, 0) ~~> (#vk.3, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_6
                step( solve( !KU( (~k⊕~r1⊕z) ) @ #vk.3 ) )
                  case c_xor_case_1
                  by step( contradiction /* cyclic */ )
                next
                  case c_xor_case_2
                  by step( solve( !KU( ~k ) @ #vk.6 ) )
                next
                  case c_xor_case_3
                  step( solve( !KU( (~k⊕~r1) ) @ #vk.5 ) )
                    case c_xor
                    by step( contradiction /* cyclic */ )
                  next
                    case coerce
                    step( solve( !KD( (~k⊕~r1) ) ▶₀ #vk.4 ) )
                      case acceptreader
                      by step( solve( (#vl.1, 0) ~~> (#vk.4, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.1, 0) ~~> (#vk.4, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.4, 0) ~~> (#vk.4, 0) ) )
                      qed
                    qed
                  qed
                next
                  case coerce
                  step( solve( !KD( (~k⊕~r1⊕z) ) ▶₀ #vk.3 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.4, 0) ~~> (#vk.3, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_7
                step( solve( !KU( (~r1⊕x) ) @ #vk.3 ) )
                  case c_xor
                  by step( contradiction /* cyclic */ )
                next
                  case coerce
                  step( solve( !KD( (~r1⊕x) ) ▶₀ #vk.3 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.4, 0) ~~> (#vk.3, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_8
                step( solve( !KU( (~k⊕x) ) @ #vk.3 ) )
                  case c_xor
                  by step( solve( !KU( ~k ) @ #vk.6 ) )
                next
                  case coerce
                  step( solve( !KD( (~k⊕x) ) ▶₀ #vk.3 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.4, 0) ~~> (#vk.3, 0) ) )
                    qed
                  qed
                qed
              qed
            next
              case tag1_case_1
              step( solve( splitEqs(0) ) )
                case split_case_1
                by step( solve( !KU( ~k ) @ #vk.3 ) )
              next
                case split_case_2
                by step( contradiction /* cyclic */ )
              next
                case split_case_3
                step( solve( splitEqs(2) ) )
                  case split_case_1
                  by step( solve( !KU( ~k1 ) @ #vk.3 ) )
                next
                  case split_case_2
                  step( solve( !KU( (~k⊕~k1⊕~r1) ) @ #vk.4 ) )
                    case c_xor_case_1
                    by step( solve( !KU( ~k1 ) @ #vk.6 ) )
                  next
                    case c_xor_case_2
                    by step( solve( !KU( ~k ) @ #vk.6 ) )
                  next
                    case c_xor_case_3
                    by step( contradiction /* cyclic */ )
                  next
                    case coerce
                    step( solve( !KD( (~k⊕~k1⊕~r1) ) ▶₀ #vk.3 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_3
                  step( solve( !KU( (~k1⊕~r1.1) ) @ #vk.3 ) )
                    case c_xor
                    by step( solve( !KU( ~k1 ) @ #vk.6 ) )
                  next
                    case coerce
                    step( solve( !KD( (~k1⊕~r1.1) ) ▶₀ #vk.3 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_4
                  step( solve( !KU( (~k1⊕x⊕~r1.1) ) @ #vk.3 ) )
                    case c_xor_case_1
                    step( solve( !KU( (~k⊕~r1⊕x) ) @ #vk.4 ) )
                      case c_xor_case_1
                      step( solve( !KU( (~k1⊕~r1.1) ) @ #vk.5 ) )
                        case c_xor
                        by step( contradiction /* cyclic */ )
                      next
                        case coerce
                        step( solve( !KD( (~k1⊕~r1.1) ) ▶₀ #vk.5 ) )
                          case acceptreader
                          by step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                        next
                          case initiatereader
                          by step( contradiction /* impossible chain */ )
                        next
                          case tag1
                          step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                            case d_0_fst
                            by step( contradiction /* impossible chain */ )
                          next
                            case d_0_snd
                            by step( solve( (#vr.6, 0) ~~> (#vk.5, 0) ) )
                          qed
                        qed
                      qed
                    next
                      case c_xor_case_2
                      by step( solve( !KU( ~k ) @ #vk.8 ) )
                    next
                      case c_xor_case_3
                      step( solve( !KU( (~k1⊕~r1.1) ) @ #vk.5 ) )
                        case c_xor
                        by step( solve( !KU( ~k1 ) @ #vk.9 ) )
                      next
                        case coerce
                        step( solve( !KD( (~k1⊕~r1.1) ) ▶₀ #vk.5 ) )
                          case acceptreader
                          by step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                        next
                          case initiatereader
                          by step( contradiction /* impossible chain */ )
                        next
                          case tag1
                          step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                            case d_0_fst
                            by step( contradiction /* impossible chain */ )
                          next
                            case d_0_snd
                            by step( solve( (#vr.6, 0) ~~> (#vk.5, 0) ) )
                          qed
                        qed
                      qed
                    next
                      case coerce
                      step( solve( !KD( (~k⊕~r1⊕x) ) ▶₀ #vk.4 ) )
                        case acceptreader
                        by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                      next
                        case initiatereader
                        by step( contradiction /* impossible chain */ )
                      next
                        case tag1
                        step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                          case d_0_fst
                          by step( contradiction /* impossible chain */ )
                        next
                          case d_0_snd
                          by step( solve( (#vr.6, 0) ~~> (#vk.4, 0) ) )
                        qed
                      qed
                    qed
                  next
                    case c_xor_case_2
                    by step( solve( !KU( ~k1 ) @ #vk.6 ) )
                  next
                    case c_xor_case_3
                    step( solve( !KU( (~k⊕~r1⊕x) ) @ #vk.4 ) )
                      case c_xor_case_1
                      by step( contradiction /* cyclic */ )
                    next
                      case c_xor_case_2
                      by step( solve( !KU( ~k ) @ #vk.8 ) )
                    next
                      case c_xor_case_3
                      step( solve( !KU( (~k1⊕x) ) @ #vk.6 ) )
                        case c_xor
                        by step( solve( !KU( ~k1 ) @ #vk.9 ) )
                      next
                        case coerce
                        step( solve( !KD( (~k1⊕x) ) ▶₀ #vk.5 ) )
                          case acceptreader
                          by step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                        next
                          case initiatereader
                          by step( contradiction /* impossible chain */ )
                        next
                          case tag1
                          step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                            case d_0_fst
                            by step( contradiction /* impossible chain */ )
                          next
                            case d_0_snd
                            by step( solve( (#vr.6, 0) ~~> (#vk.5, 0) ) )
                          qed
                        qed
                      qed
                    next
                      case coerce
                      step( solve( !KD( (~k⊕~r1⊕x) ) ▶₀ #vk.4 ) )
                        case acceptreader
                        by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                      next
                        case initiatereader
                        by step( contradiction /* impossible chain */ )
                      next
                        case tag1
                        step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                          case d_0_fst
                          by step( contradiction /* impossible chain */ )
                        next
                          case d_0_snd
                          by step( solve( (#vr.6, 0) ~~> (#vk.4, 0) ) )
                        qed
                      qed
                    qed
                  next
                    case coerce
                    step( solve( !KD( (~k1⊕x⊕~r1.1) ) ▶₀ #vk.3 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_5
                  step( solve( !KU( (~k1⊕x) ) @ #vk.3 ) )
                    case c_xor
                    by step( solve( !KU( ~k1 ) @ #vk.6 ) )
                  next
                    case coerce
                    step( solve( !KD( (~k1⊕x) ) ▶₀ #vk.3 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_6
                  step( solve( !KU( (x⊕~r1.1) ) @ #vk.3 ) )
                    case c_xor
                    step( solve( !KU( (~k⊕~k1⊕~r1⊕x) ) @ #vk.4 ) )
                      case c_xor_case_1
                      by step( contradiction /* cyclic */ )
                    next
                      case c_xor_case_2
                      by step( solve( !KU( ~k1 ) @ #vk.8 ) )
                    next
                      case c_xor_case_3
                      step( solve( !KU( (~k⊕x) ) @ #vk.7 ) )
                        case c_xor
                        by step( solve( !KU( ~k ) @ #vk.9 ) )
                      next
                        case coerce
                        step( solve( !KD( (~k⊕x) ) ▶₀ #vk.5 ) )
                          case acceptreader
                          by step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                        next
                          case initiatereader
                          by step( contradiction /* impossible chain */ )
                        next
                          case tag1
                          step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                            case d_0_fst
                            by step( contradiction /* impossible chain */ )
                          next
                            case d_0_snd
                            by step( solve( (#vr.6, 0) ~~> (#vk.5, 0) ) )
                          qed
                        qed
                      qed
                    next
                      case c_xor_case_4
                      by step( solve( !KU( ~k ) @ #vk.8 ) )
                    next
                      case c_xor_case_5
                      step( solve( !KU( (~k1⊕x) ) @ #vk.7 ) )
                        case c_xor
                        by step( solve( !KU( ~k1 ) @ #vk.9 ) )
                      next
                        case coerce
                        step( solve( !KD( (~k1⊕x) ) ▶₀ #vk.5 ) )
                          case acceptreader
                          by step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                        next
                          case initiatereader
                          by step( contradiction /* impossible chain */ )
                        next
                          case tag1
                          step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                            case d_0_fst
                            by step( contradiction /* impossible chain */ )
                          next
                            case d_0_snd
                            by step( solve( (#vr.6, 0) ~~> (#vk.5, 0) ) )
                          qed
                        qed
                      qed
                    next
                      case c_xor_case_6
                      step( solve( !KU( (~r1⊕x) ) @ #vk.7 ) )
                        case c_xor
                        by step( contradiction /* cyclic */ )
                      next
                        case coerce
                        step( solve( !KD( (~r1⊕x) ) ▶₀ #vk.5 ) )
                          case acceptreader
                          by step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                        next
                          case initiatereader
                          by step( contradiction /* impossible chain */ )
                        next
                          case tag1
                          step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                            case d_0_fst
                            by step( contradiction /* impossible chain */ )
                          next
                            case d_0_snd
                            by step( solve( (#vr.6, 0) ~~> (#vk.5, 0) ) )
                          qed
                        qed
                      qed
                    next
                      case c_xor_case_7
                      step( solve( !KU( (~k⊕~k1⊕~r1) ) @ #vk.7 ) )
                        case c_xor_case_1
                        by step( solve( !KU( ~k1 ) @ #vk.9 ) )
                      next
                        case c_xor_case_2
                        by step( solve( !KU( ~k ) @ #vk.9 ) )
                      next
                        case c_xor_case_3
                        by step( contradiction /* cyclic */ )
                      next
                        case coerce
                        step( solve( !KD( (~k⊕~k1⊕~r1) ) ▶₀ #vk.5 ) )
                          case acceptreader
                          by step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                        next
                          case initiatereader
                          by step( contradiction /* impossible chain */ )
                        next
                          case tag1
                          step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                            case d_0_fst
                            by step( contradiction /* impossible chain */ )
                          next
                            case d_0_snd
                            by step( solve( (#vr.6, 0) ~~> (#vk.5, 0) ) )
                          qed
                        qed
                      qed
                    next
                      case coerce
                      step( solve( !KD( (~k⊕~k1⊕~r1⊕x) ) ▶₀ #vk.4 ) )
                        case acceptreader
                        by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                      next
                        case initiatereader
                        by step( contradiction /* impossible chain */ )
                      next
                        case tag1
                        step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                          case d_0_fst
                          by step( contradiction /* impossible chain */ )
                        next
                          case d_0_snd
                          by step( solve( (#vr.6, 0) ~~> (#vk.4, 0) ) )
                        qed
                      qed
                    qed
                  next
                    case coerce
                    step( solve( !KD( (x⊕~r1.1) ) ▶₀ #vk.3 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_7
                  step( solve( !KU( (~k⊕~k1⊕~r1⊕r0⊕~r1.1) ) @ #vk.4 ) )
                    case c_xor_case_01
                    step( solve( !KU( (~k⊕~k1⊕~r1⊕~r1.1) ) @ #vk.5 ) )
                      case c_xor_case_1
                      step( solve( !KU( (~k⊕~k1⊕~r1.1) ) @ #vk.6 ) )
                        case c_xor_case_1
                        by step( solve( !KU( ~k1 ) @ #vk.8 ) )
                      next
                        case c_xor_case_2
                        by step( solve( !KU( ~k ) @ #vk.8 ) )
                      next
                        case c_xor_case_3
                        by step( contradiction /* cyclic */ )
                      next
                        case coerce
                        step( solve( !KD( (~k⊕~k1⊕~r1.1) ) ▶₀ #vk.5 ) )
                          case acceptreader
                          by step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                        next
                          case initiatereader
                          by step( contradiction /* impossible chain */ )
                        next
                          case tag1
                          step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                            case d_0_fst
                            by step( contradiction /* impossible chain */ )
                          next
                            case d_0_snd
                            by step( solve( (#vr.6, 0) ~~> (#vk.5, 0) ) )
                          qed
                        qed
                      qed
                    next
                      case c_xor_case_2
                      by step( solve( !KU( ~k1 ) @ #vk.7 ) )
                    next
                      case c_xor_case_3
                      step( solve( !KU( (~k⊕~r1.1) ) @ #vk.6 ) )
                        case c_xor
                        by step( contradiction /* cyclic */ )
                      next
                        case coerce
                        step( solve( !KD( (~k⊕~r1.1) ) ▶₀ #vk.5 ) )
                          case acceptreader
                          by step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                        next
                          case initiatereader
                          by step( contradiction /* impossible chain */ )
                        next
                          case tag1
                          step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                            case d_0_fst
                            by step( contradiction /* impossible chain */ )
                          next
                            case d_0_snd
                            by step( solve( (#vr.6, 0) ~~> (#vk.5, 0) ) )
                          qed
                        qed
                      qed
                    next
                      case c_xor_case_4
                      by step( solve( !KU( ~k ) @ #vk.7 ) )
                    next
                      case c_xor_case_5
                      step( solve( !KU( (~k1⊕~r1.1) ) @ #vk.6 ) )
                        case c_xor
                        by step( contradiction /* cyclic */ )
                      next
                        case coerce
                        step( solve( !KD( (~k1⊕~r1.1) ) ▶₀ #vk.5 ) )
                          case acceptreader
                          by step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                        next
                          case initiatereader
                          by step( contradiction /* impossible chain */ )
                        next
                          case tag1
                          step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                            case d_0_fst
                            by step( contradiction /* impossible chain */ )
                          next
                            case d_0_snd
                            by step( solve( (#vr.6, 0) ~~> (#vk.5, 0) ) )
                          qed
                        qed
                      qed
                    next
                      case c_xor_case_6
                      step( solve( !KU( (~r1⊕~r1.1) ) @ #vk.6 ) )
                        case c_xor
                        by step( contradiction /* cyclic */ )
                      next
                        case coerce
                        step( solve( !KD( (~r1⊕~r1.1) ) ▶₀ #vk.5 ) )
                          case acceptreader
                          by step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                        next
                          case initiatereader
                          by step( contradiction /* impossible chain */ )
                        next
                          case tag1
                          step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                            case d_0_fst
                            by step( contradiction /* impossible chain */ )
                          next
                            case d_0_snd
                            by step( solve( (#vr.6, 0) ~~> (#vk.5, 0) ) )
                          qed
                        qed
                      qed
                    next
                      case c_xor_case_7
                      by step( contradiction /* cyclic */ )
                    next
                      case coerce
                      step( solve( !KD( (~k⊕~k1⊕~r1⊕~r1.1) ) ▶₀ #vk.4 ) )
                        case acceptreader
                        by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                      next
                        case initiatereader
                        by step( contradiction /* impossible chain */ )
                      next
                        case tag1
                        step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                          case d_0_fst
                          by step( contradiction /* impossible chain */ )
                        next
                          case d_0_snd
                          by step( solve( (#vr.6, 0) ~~> (#vk.4, 0) ) )
                        qed
                      qed
                    qed
                  next
                    case c_xor_case_02
                    step( solve( !KU( (~k⊕~k1⊕r0⊕~r1.1) ) @ #vk.5 ) )
                      case c_xor_case_1
                      step( solve( !KU( (~k⊕~k1⊕~r1.1) ) @ #vk.6 ) )
                        case c_xor_case_1
                        by step( solve( !KU( ~k1 ) @ #vk.8 ) )
                      next
                        case c_xor_case_2
                        by step( solve( !KU( ~k ) @ #vk.8 ) )
                      next
                        case c_xor_case_3
                        by step( contradiction /* cyclic */ )
                      next
                        case coerce
                        step( solve( !KD( (~k⊕~k1⊕~r1.1) ) ▶₀ #vk.5 ) )
                          case acceptreader
                          by step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                        next
                          case initiatereader
                          by step( contradiction /* impossible chain */ )
                        next
                          case tag1
                          step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                            case d_0_fst
                            by step( contradiction /* impossible chain */ )
                          next
                            case d_0_snd
                            by step( solve( (#vr.6, 0) ~~> (#vk.5, 0) ) )
                          qed
                        qed
                      qed
                    next
                      case c_xor_case_2
                      by step( solve( !KU( ~k1 ) @ #vk.7 ) )
                    next
                      case c_xor_case_3
                      step( solve( !KU( (~k⊕~r1.1) ) @ #vk.6 ) )
                        case c_xor
                        by step( contradiction /* cyclic */ )
                      next
                        case coerce
                        step( solve( !KD( (~k⊕~r1.1) ) ▶₀ #vk.5 ) )
                          case acceptreader
                          by step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                        next
                          case initiatereader
                          by step( contradiction /* impossible chain */ )
                        next
                          case tag1
                          step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                            case d_0_fst
                            by step( contradiction /* impossible chain */ )
                          next
                            case d_0_snd
                            by step( solve( (#vr.6, 0) ~~> (#vk.5, 0) ) )
                          qed
                        qed
                      qed
                    next
                      case c_xor_case_4
                      by step( solve( !KU( ~k ) @ #vk.7 ) )
                    next
                      case c_xor_case_5
                      step( solve( !KU( (~k1⊕~r1.1) ) @ #vk.6 ) )
                        case c_xor
                        by step( contradiction /* cyclic */ )
                      next
                        case coerce
                        step( solve( !KD( (~k1⊕~r1.1) ) ▶₀ #vk.5 ) )
                          case acceptreader
                          by step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                        next
                          case initiatereader
                          by step( contradiction /* impossible chain */ )
                        next
                          case tag1
                          step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                            case d_0_fst
                            by step( contradiction /* impossible chain */ )
                          next
                            case d_0_snd
                            by step( solve( (#vr.6, 0) ~~> (#vk.5, 0) ) )
                          qed
                        qed
                      qed
                    next
                      case c_xor_case_6
                      step( solve( !KU( (r0⊕~r1.1) ) @ #vk.6 ) )
                        case c_xor
                        by step( contradiction /* cyclic */ )
                      next
                        case coerce
                        step( solve( !KD( (r0⊕~r1.1) ) ▶₀ #vk.5 ) )
                          case acceptreader
                          by step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                        next
                          case initiatereader
                          by step( contradiction /* impossible chain */ )
                        next
                          case tag1
                          step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                            case d_0_fst
                            by step( contradiction /* impossible chain */ )
                          next
                            case d_0_snd
                            by step( solve( (#vr.6, 0) ~~> (#vk.5, 0) ) )
                          qed
                        qed
                      qed
                    next
                      case c_xor_case_7
                      by step( contradiction /* cyclic */ )
                    next
                      case coerce
                      step( solve( !KD( (~k⊕~k1⊕r0⊕~r1.1) ) ▶₀ #vk.4 ) )
                        case acceptreader
                        by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                      next
                        case initiatereader
                        by step( contradiction /* impossible chain */ )
                      next
                        case tag1
                        step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                          case d_0_fst
                          by step( contradiction /* impossible chain */ )
                        next
                          case d_0_snd
                          by step( solve( (#vr.6, 0) ~~> (#vk.4, 0) ) )
                        qed
                      qed
                    qed
                  next
                    case c_xor_case_03
                    step( solve( !KU( (~k⊕~k1⊕~r1.1) ) @ #vk.5 ) )
                      case c_xor_case_1
                      by step( solve( !KU( ~k1 ) @ #vk.8 ) )
                    next
                      case c_xor_case_2
                      by step( solve( !KU( ~k ) @ #vk.8 ) )
                    next
                      case c_xor_case_3
                      by step( contradiction /* cyclic */ )
                    next
                      case coerce
                      step( solve( !KD( (~k⊕~k1⊕~r1.1) ) ▶₀ #vk.4 ) )
                        case acceptreader
                        by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                      next
                        case initiatereader
                        by step( contradiction /* impossible chain */ )
                      next
                        case tag1
                        step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                          case d_0_fst
                          by step( contradiction /* impossible chain */ )
                        next
                          case d_0_snd
                          by step( solve( (#vr.6, 0) ~~> (#vk.4, 0) ) )
                        qed
                      qed
                    qed
                  next
                    case c_xor_case_04
                    by step( solve( !KU( ~k1 ) @ #vk.6 ) )
                  next
                    case c_xor_case_05
                    step( solve( !KU( (~k⊕~r1⊕~r1.1) ) @ #vk.5 ) )
                      case c_xor_case_1
                      step( solve( !KU( (~k1⊕r0) ) @ #vk.6 ) )
                        case c_xor
                        by step( solve( !KU( ~k1 ) @ #vk.8 ) )
                      next
                        case coerce
                        step( solve( !KD( (~k1⊕r0) ) ▶₀ #vk.5 ) )
                          case acceptreader
                          by step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                        next
                          case initiatereader
                          by step( contradiction /* impossible chain */ )
                        next
                          case tag1
                          step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                            case d_0_fst
                            by step( contradiction /* impossible chain */ )
                          next
                            case d_0_snd
                            by step( solve( (#vr.6, 0) ~~> (#vk.5, 0) ) )
                          qed
                        qed
                      qed
                    next
                      case c_xor_case_2
                      by step( solve( !KU( ~k ) @ #vk.8 ) )
                    next
                      case c_xor_case_3
                      by step( contradiction /* cyclic */ )
                    next
                      case coerce
                      step( solve( !KD( (~k⊕~r1⊕~r1.1) ) ▶₀ #vk.4 ) )
                        case acceptreader
                        by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                      next
                        case initiatereader
                        by step( contradiction /* impossible chain */ )
                      next
                        case tag1
                        step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                          case d_0_fst
                          by step( contradiction /* impossible chain */ )
                        next
                          case d_0_snd
                          by step( solve( (#vr.6, 0) ~~> (#vk.4, 0) ) )
                        qed
                      qed
                    qed
                  next
                    case c_xor_case_06
                    step( solve( !KU( (~k⊕r0⊕~r1.1) ) @ #vk.5 ) )
                      case c_xor_case_1
                      step( solve( !KU( (~k1⊕~r1) ) @ #vk.6 ) )
                        case c_xor
                        by step( solve( !KU( ~k1 ) @ #vk.8 ) )
                      next
                        case coerce
                        step( solve( !KD( (~k1⊕~r1) ) ▶₀ #vk.5 ) )
                          case acceptreader
                          by step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                        next
                          case initiatereader
                          by step( contradiction /* impossible chain */ )
                        next
                          case tag1
                          step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                            case d_0_fst
                            by step( contradiction /* impossible chain */ )
                          next
                            case d_0_snd
                            by step( solve( (#vr.6, 0) ~~> (#vk.5, 0) ) )
                          qed
                        qed
                      qed
                    next
                      case c_xor_case_2
                      by step( solve( !KU( ~k ) @ #vk.8 ) )
                    next
                      case c_xor_case_3
                      by step( contradiction /* cyclic */ )
                    next
                      case coerce
                      step( solve( !KD( (~k⊕r0⊕~r1.1) ) ▶₀ #vk.4 ) )
                        case acceptreader
                        by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                      next
                        case initiatereader
                        by step( contradiction /* impossible chain */ )
                      next
                        case tag1
                        step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                          case d_0_fst
                          by step( contradiction /* impossible chain */ )
                        next
                          case d_0_snd
                          by step( solve( (#vr.6, 0) ~~> (#vk.4, 0) ) )
                        qed
                      qed
                    qed
                  next
                    case c_xor_case_07
                    step( solve( !KU( (~k⊕~r1.1) ) @ #vk.5 ) )
                      case c_xor
                      by step( contradiction /* cyclic */ )
                    next
                      case coerce
                      step( solve( !KD( (~k⊕~r1.1) ) ▶₀ #vk.4 ) )
                        case acceptreader
                        by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                      next
                        case initiatereader
                        by step( contradiction /* impossible chain */ )
                      next
                        case tag1
                        step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                          case d_0_fst
                          by step( contradiction /* impossible chain */ )
                        next
                          case d_0_snd
                          by step( solve( (#vr.6, 0) ~~> (#vk.4, 0) ) )
                        qed
                      qed
                    qed
                  next
                    case c_xor_case_08
                    by step( solve( !KU( ~k ) @ #vk.6 ) )
                  next
                    case c_xor_case_09
                    step( solve( !KU( (~k1⊕~r1⊕~r1.1) ) @ #vk.5 ) )
                      case c_xor_case_1
                      step( solve( !KU( (~k⊕r0) ) @ #vk.6 ) )
                        case c_xor
                        by step( solve( !KU( ~k ) @ #vk.8 ) )
                      next
                        case coerce
                        step( solve( !KD( (~k⊕r0) ) ▶₀ #vk.5 ) )
                          case acceptreader
                          by step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                        next
                          case initiatereader
                          by step( contradiction /* impossible chain */ )
                        next
                          case tag1
                          step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                            case d_0_fst
                            by step( contradiction /* impossible chain */ )
                          next
                            case d_0_snd
                            by step( solve( (#vr.6, 0) ~~> (#vk.5, 0) ) )
                          qed
                        qed
                      qed
                    next
                      case c_xor_case_2
                      by step( solve( !KU( ~k1 ) @ #vk.8 ) )
                    next
                      case c_xor_case_3
                      by step( contradiction /* cyclic */ )
                    next
                      case coerce
                      step( solve( !KD( (~k1⊕~r1⊕~r1.1) ) ▶₀ #vk.4 ) )
                        case acceptreader
                        by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                      next
                        case initiatereader
                        by step( contradiction /* impossible chain */ )
                      next
                        case tag1
                        step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                          case d_0_fst
                          by step( contradiction /* impossible chain */ )
                        next
                          case d_0_snd
                          by step( solve( (#vr.6, 0) ~~> (#vk.4, 0) ) )
                        qed
                      qed
                    qed
                  next
                    case c_xor_case_10
                    step( solve( !KU( (~k1⊕r0⊕~r1.1) ) @ #vk.5 ) )
                      case c_xor_case_1
                      step( solve( !KU( (~k⊕~r1) ) @ #vk.6 ) )
                        case c_xor
                        by step( solve( !KU( ~k ) @ #vk.8 ) )
                      next
                        case coerce
                        step( solve( !KD( (~k⊕~r1) ) ▶₀ #vk.5 ) )
                          case acceptreader
                          by step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                        next
                          case initiatereader
                          by step( contradiction /* impossible chain */ )
                        next
                          case tag1
                          step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                            case d_0_fst
                            by step( contradiction /* impossible chain */ )
                          next
                            case d_0_snd
                            by step( solve( (#vr.6, 0) ~~> (#vk.5, 0) ) )
                          qed
                        qed
                      qed
                    next
                      case c_xor_case_2
                      by step( solve( !KU( ~k1 ) @ #vk.8 ) )
                    next
                      case c_xor_case_3
                      by step( contradiction /* cyclic */ )
                    next
                      case coerce
                      step( solve( !KD( (~k1⊕r0⊕~r1.1) ) ▶₀ #vk.4 ) )
                        case acceptreader
                        by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                      next
                        case initiatereader
                        by step( contradiction /* impossible chain */ )
                      next
                        case tag1
                        step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                          case d_0_fst
                          by step( contradiction /* impossible chain */ )
                        next
                          case d_0_snd
                          by step( solve( (#vr.6, 0) ~~> (#vk.4, 0) ) )
                        qed
                      qed
                    qed
                  next
                    case c_xor_case_11
                    step( solve( !KU( (~k1⊕~r1.1) ) @ #vk.5 ) )
                      case c_xor
                      by step( contradiction /* cyclic */ )
                    next
                      case coerce
                      step( solve( !KD( (~k1⊕~r1.1) ) ▶₀ #vk.4 ) )
                        case acceptreader
                        by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                      next
                        case initiatereader
                        by step( contradiction /* impossible chain */ )
                      next
                        case tag1
                        step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                          case d_0_fst
                          by step( contradiction /* impossible chain */ )
                        next
                          case d_0_snd
                          by step( solve( (#vr.6, 0) ~~> (#vk.4, 0) ) )
                        qed
                      qed
                    qed
                  next
                    case c_xor_case_12
                    step( solve( !KU( (~r1⊕r0⊕~r1.1) ) @ #vk.5 ) )
                      case c_xor_case_1
                      step( solve( !KU( (~k⊕~k1) ) @ #vk.6 ) )
                        case c_xor
                        by step( solve( !KU( ~k1 ) @ #vk.8 ) )
                      next
                        case coerce
                        step( solve( !KD( (~k⊕~k1) ) ▶₀ #vk.5 ) )
                          case acceptreader
                          by step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                        next
                          case initiatereader
                          by step( contradiction /* impossible chain */ )
                        next
                          case tag1
                          step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                            case d_0_fst
                            by step( contradiction /* impossible chain */ )
                          next
                            case d_0_snd
                            by step( solve( (#vr.6, 0) ~~> (#vk.5, 0) ) )
                          qed
                        qed
                      qed
                    next
                      case c_xor_case_2
                      step( solve( !KU( (~k⊕~k1) ) @ #vk.6 ) )
                        case c_xor
                        by step( solve( !KU( ~k1 ) @ #vk.8 ) )
                      next
                        case coerce
                        step( solve( !KD( (~k⊕~k1) ) ▶₀ #vk.5 ) )
                          case acceptreader
                          by step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                        next
                          case initiatereader
                          by step( contradiction /* impossible chain */ )
                        next
                          case tag1
                          step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                            case d_0_fst
                            by step( contradiction /* impossible chain */ )
                          next
                            case d_0_snd
                            by step( solve( (#vr.6, 0) ~~> (#vk.5, 0) ) )
                          qed
                        qed
                      qed
                    next
                      case c_xor_case_3
                      by step( contradiction /* cyclic */ )
                    next
                      case coerce
                      step( solve( !KD( (~r1⊕r0⊕~r1.1) ) ▶₀ #vk.4 ) )
                        case acceptreader
                        by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                      next
                        case initiatereader
                        by step( contradiction /* impossible chain */ )
                      next
                        case tag1
                        step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                          case d_0_fst
                          by step( contradiction /* impossible chain */ )
                        next
                          case d_0_snd
                          by step( solve( (#vr.6, 0) ~~> (#vk.4, 0) ) )
                        qed
                      qed
                    qed
                  next
                    case c_xor_case_13
                    step( solve( !KU( (~r1⊕~r1.1) ) @ #vk.5 ) )
                      case c_xor
                      by step( contradiction /* cyclic */ )
                    next
                      case coerce
                      step( solve( !KD( (~r1⊕~r1.1) ) ▶₀ #vk.4 ) )
                        case acceptreader
                        by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                      next
                        case initiatereader
                        by step( contradiction /* impossible chain */ )
                      next
                        case tag1
                        step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                          case d_0_fst
                          by step( contradiction /* impossible chain */ )
                        next
                          case d_0_snd
                          by step( solve( (#vr.6, 0) ~~> (#vk.4, 0) ) )
                        qed
                      qed
                    qed
                  next
                    case c_xor_case_14
                    step( solve( !KU( (r0⊕~r1.1) ) @ #vk.5 ) )
                      case c_xor
                      by step( contradiction /* cyclic */ )
                    next
                      case coerce
                      step( solve( !KD( (r0⊕~r1.1) ) ▶₀ #vk.4 ) )
                        case acceptreader
                        by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                      next
                        case initiatereader
                        by step( contradiction /* impossible chain */ )
                      next
                        case tag1
                        step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                          case d_0_fst
                          by step( contradiction /* impossible chain */ )
                        next
                          case d_0_snd
                          by step( solve( (#vr.6, 0) ~~> (#vk.4, 0) ) )
                        qed
                      qed
                    qed
                  next
                    case c_xor_case_15
                    by step( contradiction /* cyclic */ )
                  next
                    case coerce
                    step( solve( !KD( (~k⊕~k1⊕~r1⊕r0⊕~r1.1) ) ▶₀ #vk.3 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                      qed
                    qed
                  qed
                qed
              next
                case split_case_4
                step( solve( !KU( zero ) @ #vk.3 ) )
                  case c_zero
                  step( solve( splitEqs(2) ) )
                    case split
                    step( solve( !KU( (~k⊕~k1⊕~r1⊕~r1.1) ) @ #vk.4 ) )
                      case c_xor_case_1
                      step( solve( !KU( (~k⊕~k1⊕~r1.1) ) @ #vk.5 ) )
                        case c_xor_case_1
                        by step( solve( !KU( ~k1 ) @ #vk.7 ) )
                      next
                        case c_xor_case_2
                        by step( solve( !KU( ~k ) @ #vk.7 ) )
                      next
                        case c_xor_case_3
                        by step( contradiction /* cyclic */ )
                      next
                        case coerce
                        step( solve( !KD( (~k⊕~k1⊕~r1.1) ) ▶₀ #vk.5 ) )
                          case acceptreader
                          by step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                        next
                          case initiatereader
                          by step( contradiction /* impossible chain */ )
                        next
                          case tag1
                          step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                            case d_0_fst
                            by step( contradiction /* impossible chain */ )
                          next
                            case d_0_snd
                            by step( solve( (#vr.6, 0) ~~> (#vk.5, 0) ) )
                          qed
                        qed
                      qed
                    next
                      case c_xor_case_2
                      by step( solve( !KU( ~k1 ) @ #vk.6 ) )
                    next
                      case c_xor_case_3
                      step( solve( !KU( (~k⊕~r1.1) ) @ #vk.5 ) )
                        case c_xor
                        by step( contradiction /* cyclic */ )
                      next
                        case coerce
                        step( solve( !KD( (~k⊕~r1.1) ) ▶₀ #vk.5 ) )
                          case acceptreader
                          by step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                        next
                          case initiatereader
                          by step( contradiction /* impossible chain */ )
                        next
                          case tag1
                          step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                            case d_0_fst
                            by step( contradiction /* impossible chain */ )
                          next
                            case d_0_snd
                            by step( solve( (#vr.6, 0) ~~> (#vk.5, 0) ) )
                          qed
                        qed
                      qed
                    next
                      case c_xor_case_4
                      by step( solve( !KU( ~k ) @ #vk.6 ) )
                    next
                      case c_xor_case_5
                      step( solve( !KU( (~k1⊕~r1.1) ) @ #vk.5 ) )
                        case c_xor
                        by step( contradiction /* cyclic */ )
                      next
                        case coerce
                        step( solve( !KD( (~k1⊕~r1.1) ) ▶₀ #vk.5 ) )
                          case acceptreader
                          by step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                        next
                          case initiatereader
                          by step( contradiction /* impossible chain */ )
                        next
                          case tag1
                          step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                            case d_0_fst
                            by step( contradiction /* impossible chain */ )
                          next
                            case d_0_snd
                            by step( solve( (#vr.6, 0) ~~> (#vk.5, 0) ) )
                          qed
                        qed
                      qed
                    next
                      case c_xor_case_6
                      step( solve( !KU( (~r1⊕~r1.1) ) @ #vk.5 ) )
                        case c_xor
                        by step( contradiction /* cyclic */ )
                      next
                        case coerce
                        step( solve( !KD( (~r1⊕~r1.1) ) ▶₀ #vk.5 ) )
                          case acceptreader
                          by step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                        next
                          case initiatereader
                          by step( contradiction /* impossible chain */ )
                        next
                          case tag1
                          step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                            case d_0_fst
                            by step( contradiction /* impossible chain */ )
                          next
                            case d_0_snd
                            by step( solve( (#vr.6, 0) ~~> (#vk.5, 0) ) )
                          qed
                        qed
                      qed
                    next
                      case c_xor_case_7
                      by step( contradiction /* cyclic */ )
                    next
                      case coerce
                      step( solve( !KD( (~k⊕~k1⊕~r1⊕~r1.1) ) ▶₀ #vk.4 ) )
                        case acceptreader
                        by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                      next
                        case initiatereader
                        by step( contradiction /* impossible chain */ )
                      next
                        case tag1
                        step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                          case d_0_fst
                          by step( contradiction /* impossible chain */ )
                        next
                          case d_0_snd
                          by step( solve( (#vr.6, 0) ~~> (#vk.4, 0) ) )
                        qed
                      qed
                    qed
                  qed
                next
                  case coerce
                  step( solve( !KD( zero ) ▶₀ #vk.3 ) )
                    case acceptreader
                    by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_5
                step( solve( !KU( (~k⊕~r1) ) @ #vk.3 ) )
                  case c_xor
                  by step( contradiction /* cyclic */ )
                next
                  case coerce
                  step( solve( !KD( (~k⊕~r1) ) ▶₀ #vk.3 ) )
                    case acceptreader
                    by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_6
                step( solve( !KU( (~k⊕~r1⊕z) ) @ #vk.3 ) )
                  case c_xor_case_1
                  by step( contradiction /* cyclic */ )
                next
                  case c_xor_case_2
                  by step( solve( !KU( ~k ) @ #vk.6 ) )
                next
                  case c_xor_case_3
                  step( solve( !KU( (~k⊕~r1) ) @ #vk.6 ) )
                    case c_xor
                    by step( contradiction /* cyclic */ )
                  next
                    case coerce
                    step( solve( !KD( (~k⊕~r1) ) ▶₀ #vk.4 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.4, 0) ) )
                      qed
                    qed
                  qed
                next
                  case coerce
                  step( solve( !KD( (~k⊕~r1⊕z) ) ▶₀ #vk.3 ) )
                    case acceptreader
                    by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_7
                step( solve( !KU( (~r1⊕x) ) @ #vk.3 ) )
                  case c_xor
                  by step( contradiction /* cyclic */ )
                next
                  case coerce
                  step( solve( !KD( (~r1⊕x) ) ▶₀ #vk.3 ) )
                    case acceptreader
                    by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_8
                step( solve( !KU( (~k⊕x) ) @ #vk.3 ) )
                  case c_xor
                  by step( solve( !KU( ~k ) @ #vk.6 ) )
                next
                  case coerce
                  step( solve( !KD( (~k⊕x) ) ▶₀ #vk.3 ) )
                    case acceptreader
                    by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                    qed
                  qed
                qed
              qed
            next
              case tag1_case_2
              step( solve( splitEqs(0) ) )
                case split_case_1
                by step( solve( !KU( ~k ) @ #vk.3 ) )
              next
                case split_case_2
                by step( contradiction /* cyclic */ )
              next
                case split_case_3
                step( solve( splitEqs(2) ) )
                  case split_case_1
                  by step( contradiction /* cyclic */ )
                next
                  case split_case_2
                  step( solve( !KU( (~r1⊕r0⊕~r1.1) ) @ #vk.4 ) )
                    case c_xor_case_1
                    step( solve( !KU( (~r1⊕~r1.1) ) @ #vk.5 ) )
                      case c_xor
                      by step( contradiction /* cyclic */ )
                    next
                      case coerce
                      step( solve( !KD( (~r1⊕~r1.1) ) ▶₀ #vk.4 ) )
                        case acceptreader
                        by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                      next
                        case initiatereader
                        by step( contradiction /* impossible chain */ )
                      next
                        case tag1
                        step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                          case d_0_fst
                          by step( contradiction /* impossible chain */ )
                        next
                          case d_0_snd
                          by step( solve( (#vr.6, 0) ~~> (#vk.4, 0) ) )
                        qed
                      qed
                    qed
                  next
                    case c_xor_case_2
                    step( solve( !KU( (r0⊕~r1.1) ) @ #vk.5 ) )
                      case c_xor
                      by step( contradiction /* cyclic */ )
                    next
                      case coerce
                      step( solve( !KD( (r0⊕~r1.1) ) ▶₀ #vk.4 ) )
                        case acceptreader
                        by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                      next
                        case initiatereader
                        by step( contradiction /* impossible chain */ )
                      next
                        case tag1
                        step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                          case d_0_fst
                          by step( contradiction /* impossible chain */ )
                        next
                          case d_0_snd
                          by step( solve( (#vr.6, 0) ~~> (#vk.4, 0) ) )
                        qed
                      qed
                    qed
                  next
                    case c_xor_case_3
                    by step( contradiction /* cyclic */ )
                  next
                    case coerce
                    step( solve( !KD( (~r1⊕r0⊕~r1.1) ) ▶₀ #vk.3 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                      qed
                    qed
                  qed
                next
                  case split_case_3
                  step( solve( !KU( (x⊕~r1.1) ) @ #vk.3 ) )
                    case c_xor
                    step( solve( !KU( (~r1⊕x) ) @ #vk.4 ) )
                      case c_xor
                      by step( contradiction /* cyclic */ )
                    next
                      case coerce
                      step( solve( !KD( (~r1⊕x) ) ▶₀ #vk.4 ) )
                        case acceptreader
                        by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                      next
                        case initiatereader
                        by step( contradiction /* impossible chain */ )
                      next
                        case tag1
                        step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                          case d_0_fst
                          by step( contradiction /* impossible chain */ )
                        next
                          case d_0_snd
                          by step( solve( (#vr.6, 0) ~~> (#vk.4, 0) ) )
                        qed
                      qed
                    qed
                  next
                    case coerce
                    step( solve( !KD( (x⊕~r1.1) ) ▶₀ #vk.3 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                      qed
                    qed
                  qed
                qed
              next
                case split_case_4
                step( solve( !KU( zero ) @ #vk.3 ) )
                  case c_zero
                  step( solve( splitEqs(2) ) )
                    case split
                    step( solve( !KU( (~r1⊕~r1.1) ) @ #vk.4 ) )
                      case c_xor
                      by step( contradiction /* cyclic */ )
                    next
                      case coerce
                      step( solve( !KD( (~r1⊕~r1.1) ) ▶₀ #vk.4 ) )
                        case acceptreader
                        by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                      next
                        case initiatereader
                        by step( contradiction /* impossible chain */ )
                      next
                        case tag1
                        step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                          case d_0_fst
                          by step( contradiction /* impossible chain */ )
                        next
                          case d_0_snd
                          by step( solve( (#vr.6, 0) ~~> (#vk.4, 0) ) )
                        qed
                      qed
                    qed
                  qed
                next
                  case coerce
                  step( solve( !KD( zero ) ▶₀ #vk.3 ) )
                    case acceptreader
                    by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_5
                step( solve( !KU( (~k⊕~r1) ) @ #vk.3 ) )
                  case c_xor
                  by step( contradiction /* cyclic */ )
                next
                  case coerce
                  step( solve( !KD( (~k⊕~r1) ) ▶₀ #vk.3 ) )
                    case acceptreader
                    by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_6
                step( solve( !KU( (~k⊕~r1⊕z) ) @ #vk.3 ) )
                  case c_xor_case_1
                  by step( contradiction /* cyclic */ )
                next
                  case c_xor_case_2
                  by step( solve( !KU( ~k ) @ #vk.6 ) )
                next
                  case c_xor_case_3
                  step( solve( !KU( (~k⊕~r1) ) @ #vk.6 ) )
                    case c_xor
                    by step( contradiction /* cyclic */ )
                  next
                    case coerce
                    step( solve( !KD( (~k⊕~r1) ) ▶₀ #vk.4 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.6, 0) ~~> (#vk.4, 0) ) )
                      qed
                    qed
                  qed
                next
                  case coerce
                  step( solve( !KD( (~k⊕~r1⊕z) ) ▶₀ #vk.3 ) )
                    case acceptreader
                    by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_7
                step( solve( !KU( (~r1⊕x) ) @ #vk.3 ) )
                  case c_xor
                  by step( contradiction /* cyclic */ )
                next
                  case coerce
                  step( solve( !KD( (~r1⊕x) ) ▶₀ #vk.3 ) )
                    case acceptreader
                    by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_8
                step( solve( !KU( (~k⊕x) ) @ #vk.3 ) )
                  case c_xor
                  by step( solve( !KU( ~k ) @ #vk.6 ) )
                next
                  case coerce
                  step( solve( !KD( (~k⊕x) ) ▶₀ #vk.3 ) )
                    case acceptreader
                    by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                    qed
                  qed
                qed
              qed
            next
              case tag1_case_3
              step( solve( splitEqs(0) ) )
                case split_case_1
                by step( solve( !KU( ~k ) @ #vk.3 ) )
              next
                case split_case_2
                MIRRORED
              next
                case split_case_3
                MIRRORED
              next
                case split_case_4
                step( solve( !KU( zero ) @ #vk.3 ) )
                  case c_zero
                  MIRRORED
                next
                  case coerce
                  step( solve( !KD( zero ) ▶₀ #vk.3 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.5, 0) ~~> (#vk.3, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_5
                step( solve( !KU( (~k⊕~r1) ) @ #vk.3 ) )
                  case c_xor
                  by step( contradiction /* cyclic */ )
                next
                  case coerce
                  step( solve( !KD( (~k⊕~r1) ) ▶₀ #vk.3 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.5, 0) ~~> (#vk.3, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_6
                step( solve( !KU( (~k⊕~r1⊕z) ) @ #vk.3 ) )
                  case c_xor_case_1
                  by step( contradiction /* cyclic */ )
                next
                  case c_xor_case_2
                  by step( solve( !KU( ~k ) @ #vk.5 ) )
                next
                  case c_xor_case_3
                  step( solve( !KU( (~k⊕~r1) ) @ #vk.5 ) )
                    case c_xor
                    by step( contradiction /* cyclic */ )
                  next
                    case coerce
                    step( solve( !KD( (~k⊕~r1) ) ▶₀ #vk.4 ) )
                      case acceptreader
                      by step( solve( (#vl.1, 0) ~~> (#vk.4, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.1, 0) ~~> (#vk.4, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.5, 0) ~~> (#vk.4, 0) ) )
                      qed
                    qed
                  qed
                next
                  case coerce
                  step( solve( !KD( (~k⊕~r1⊕z) ) ▶₀ #vk.3 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.5, 0) ~~> (#vk.3, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_7
                step( solve( !KU( (~r1⊕x) ) @ #vk.3 ) )
                  case c_xor
                  by step( contradiction /* cyclic */ )
                next
                  case coerce
                  step( solve( !KD( (~r1⊕x) ) ▶₀ #vk.3 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.5, 0) ~~> (#vk.3, 0) ) )
                    qed
                  qed
                qed
              next
                case split_case_8
                step( solve( !KU( (~k⊕x) ) @ #vk.3 ) )
                  case c_xor
                  by step( solve( !KU( ~k ) @ #vk.5 ) )
                next
                  case coerce
                  step( solve( !KD( (~k⊕x) ) ▶₀ #vk.3 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.5, 0) ~~> (#vk.3, 0) ) )
                    qed
                  qed
                qed
              qed
            qed
          qed
        qed
      qed
    qed
  qed
next
  case Rule_Send
  backward-search
    case LHS
    step( simplify )
    MIRRORED
  next
    case RHS
    step( simplify )
    MIRRORED
  qed
next
  case Rule_acceptreader
  backward-search
    case LHS
    step( simplify )
    by step( solve( ReaderState1( ~k, ~r0, phase ) ▶₀ #i ) )
  next
    case RHS
    step( simplify )
    by step( solve( ReaderState1( ~k, ~r0, phase ) ▶₀ #i ) )
  qed
next
  case Rule_accepttag
  backward-search
    case LHS
    step( simplify )
    step( solve( TagState1( ~k, ~r1, r0, phase ) ▶₀ #i ) )
      case tag1_case_1
      step( solve( !KU( h(z) ) @ #vk ) )
        case c_h
        step( solve( splitEqs(0) ) )
          case split_case_1
          by step( solve( !KU( ~k ) @ #vk.1 ) )
        next
          case split_case_2
          by step( contradiction /* cyclic */ )
        next
          case split_case_3
          step( solve( !KU( (~k⊕h((~k⊕~r1))) ) @ #vk.2 ) )
            case c_xor
            by step( solve( !KU( ~k ) @ #vk.4 ) )
          next
            case coerce
            step( solve( !KD( (~k⊕h((~k⊕~r1))) ) ▶₀ #vk.1 ) )
              case acceptreader
              by step( solve( (#vl, 0) ~~> (#vk.1, 0) ) )
            next
              case initiatereader
              by step( contradiction /* impossible chain */ )
            next
              case tag1
              step( solve( (#vl, 0) ~~> (#vk.1, 0) ) )
                case d_0_fst
                by step( contradiction /* impossible chain */ )
              next
                case d_0_snd
                by step( solve( (#vr.3, 0) ~~> (#vk.1, 0) ) )
              qed
            qed
          qed
        next
          case split_case_4
          step( solve( !KU( (~k⊕~r1) ) @ #vk.1 ) )
            case c_xor
            by step( contradiction /* cyclic */ )
          next
            case coerce
            step( solve( !KD( (~k⊕~r1) ) ▶₀ #vk.1 ) )
              case acceptreader
              by step( solve( (#vl, 0) ~~> (#vk.1, 0) ) )
            next
              case initiatereader
              by step( contradiction /* impossible chain */ )
            next
              case tag1
              step( solve( (#vl, 0) ~~> (#vk.1, 0) ) )
                case d_0_fst
                by step( contradiction /* impossible chain */ )
              next
                case d_0_snd
                by step( solve( (#vr.3, 0) ~~> (#vk.1, 0) ) )
              qed
            qed
          qed
        next
          case split_case_5
          step( solve( !KU( (~k⊕r0⊕h((~k⊕~r1⊕r0))) ) @ #vk.2 ) )
            case c_xor_case_1
            step( solve( !KU( (~k⊕h((~k⊕~r1⊕r0))) ) @ #vk.3 ) )
              case c_xor
              by step( solve( !KU( ~k ) @ #vk.5 ) )
            next
              case coerce
              step( solve( !KD( (~k⊕h((~k⊕~r1⊕r0))) ) ▶₀ #vk.2 ) )
                case acceptreader
                by step( solve( (#vl, 0) ~~> (#vk.2, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl, 0) ~~> (#vk.2, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.3, 0) ~~> (#vk.2, 0) ) )
                qed
              qed
            qed
          next
            case c_xor_case_2
            by step( solve( !KU( ~k ) @ #vk.4 ) )
          next
            case c_xor_case_3
            step( solve( !KU( (~k⊕r0) ) @ #vk.4 ) )
              case c_xor
              by step( solve( !KU( ~k ) @ #vk.5 ) )
            next
              case coerce
              step( solve( !KD( (~k⊕r0) ) ▶₀ #vk.2 ) )
                case acceptreader
                by step( solve( (#vl, 0) ~~> (#vk.2, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl, 0) ~~> (#vk.2, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.3, 0) ~~> (#vk.2, 0) ) )
                qed
              qed
            qed
          next
            case coerce
            step( solve( !KD( (~k⊕r0⊕h((~k⊕~r1⊕r0))) ) ▶₀ #vk.1 ) )
              case acceptreader
              by step( solve( (#vl, 0) ~~> (#vk.1, 0) ) )
            next
              case initiatereader
              by step( contradiction /* impossible chain */ )
            next
              case tag1
              step( solve( (#vl, 0) ~~> (#vk.1, 0) ) )
                case d_0_fst
                by step( contradiction /* impossible chain */ )
              next
                case d_0_snd
                by step( solve( (#vr.3, 0) ~~> (#vk.1, 0) ) )
              qed
            qed
          qed
        next
          case split_case_6
          step( solve( !KU( (~r1⊕x) ) @ #vk.1 ) )
            case c_xor
            by step( contradiction /* cyclic */ )
          next
            case coerce
            step( solve( !KD( (~r1⊕x) ) ▶₀ #vk.1 ) )
              case acceptreader
              by step( solve( (#vl, 0) ~~> (#vk.1, 0) ) )
            next
              case initiatereader
              by step( contradiction /* impossible chain */ )
            next
              case tag1
              step( solve( (#vl, 0) ~~> (#vk.1, 0) ) )
                case d_0_fst
                by step( contradiction /* impossible chain */ )
              next
                case d_0_snd
                by step( solve( (#vr.3, 0) ~~> (#vk.1, 0) ) )
              qed
            qed
          qed
        next
          case split_case_7
          step( solve( !KU( (~k⊕~r1⊕z) ) @ #vk.1 ) )
            case c_xor_case_1
            by step( contradiction /* cyclic */ )
          next
            case c_xor_case_2
            by step( solve( !KU( ~k ) @ #vk.4 ) )
          next
            case c_xor_case_3
            step( solve( !KU( (~r1⊕z⊕h(z)) ) @ #vk.2 ) )
              case c_xor_case_1
              step( solve( !KU( (~k⊕~r1) ) @ #vk.4 ) )
                case c_xor
                by step( contradiction /* cyclic */ )
              next
                case coerce
                step( solve( !KD( (~k⊕~r1) ) ▶₀ #vk.3 ) )
                  case acceptreader
                  by step( solve( (#vl, 0) ~~> (#vk.3, 0) ) )
                next
                  case initiatereader
                  by step( contradiction /* impossible chain */ )
                next
                  case tag1
                  step( solve( (#vl, 0) ~~> (#vk.3, 0) ) )
                    case d_0_fst
                    by step( contradiction /* impossible chain */ )
                  next
                    case d_0_snd
                    by step( solve( (#vr.3, 0) ~~> (#vk.3, 0) ) )
                  qed
                qed
              qed
            next
              case c_xor_case_2
              step( solve( !KU( (~k⊕~r1) ) @ #vk.4 ) )
                case c_xor
                by step( contradiction /* cyclic */ )
              next
                case coerce
                step( solve( !KD( (~k⊕~r1) ) ▶₀ #vk.3 ) )
                  case acceptreader
                  by step( solve( (#vl, 0) ~~> (#vk.3, 0) ) )
                next
                  case initiatereader
                  by step( contradiction /* impossible chain */ )
                next
                  case tag1
                  step( solve( (#vl, 0) ~~> (#vk.3, 0) ) )
                    case d_0_fst
                    by step( contradiction /* impossible chain */ )
                  next
                    case d_0_snd
                    by step( solve( (#vr.3, 0) ~~> (#vk.3, 0) ) )
                  qed
                qed
              qed
            next
              case c_xor_case_3
              step( solve( !KU( (~k⊕~r1) ) @ #vk.4 ) )
                case c_xor
                by step( contradiction /* cyclic */ )
              next
                case coerce
                step( solve( !KD( (~k⊕~r1) ) ▶₀ #vk.3 ) )
                  case acceptreader
                  by step( solve( (#vl, 0) ~~> (#vk.3, 0) ) )
                next
                  case initiatereader
                  by step( contradiction /* impossible chain */ )
                next
                  case tag1
                  step( solve( (#vl, 0) ~~> (#vk.3, 0) ) )
                    case d_0_fst
                    by step( contradiction /* impossible chain */ )
                  next
                    case d_0_snd
                    by step( solve( (#vr.3, 0) ~~> (#vk.3, 0) ) )
                  qed
                qed
              qed
            next
              case coerce
              step( solve( !KD( (~r1⊕z⊕h(z)) ) ▶₀ #vk.2 ) )
                case acceptreader
                by step( solve( (#vl, 0) ~~> (#vk.2, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl, 0) ~~> (#vk.2, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.3, 0) ~~> (#vk.2, 0) ) )
                qed
              qed
            qed
          next
            case coerce
            step( solve( !KD( (~k⊕~r1⊕z) ) ▶₀ #vk.1 ) )
              case acceptreader
              by step( solve( (#vl, 0) ~~> (#vk.1, 0) ) )
            next
              case initiatereader
              by step( contradiction /* impossible chain */ )
            next
              case tag1
              step( solve( (#vl, 0) ~~> (#vk.1, 0) ) )
                case d_0_fst
                by step( contradiction /* impossible chain */ )
              next
                case d_0_snd
                by step( solve( (#vr.3, 0) ~~> (#vk.1, 0) ) )
              qed
            qed
          qed
        next
          case split_case_8
          step( solve( !KU( (~k⊕x) ) @ #vk.1 ) )
            case c_xor
            by step( solve( !KU( ~k ) @ #vk.4 ) )
          next
            case coerce
            step( solve( !KD( (~k⊕x) ) ▶₀ #vk.1 ) )
              case acceptreader
              by step( solve( (#vl, 0) ~~> (#vk.1, 0) ) )
            next
              case initiatereader
              by step( contradiction /* impossible chain */ )
            next
              case tag1
              step( solve( (#vl, 0) ~~> (#vk.1, 0) ) )
                case d_0_fst
                by step( contradiction /* impossible chain */ )
              next
                case d_0_snd
                by step( solve( (#vr.3, 0) ~~> (#vk.1, 0) ) )
              qed
            qed
          qed
        qed
      next
        case tag1_case_1
        by step( solve( splitEqs(0) ) )
      next
        case tag1_case_2
        step( solve( splitEqs(0) ) )
          case split_case_1
          by step( solve( !KU( ~k ) @ #vk.1 ) )
        next
          case split_case_2
          by step( contradiction /* cyclic */ )
        next
          case split_case_3
          step( solve( splitEqs(2) ) )
            case split_case_1
            by step( solve( !KU( ~k2 ) @ #vk.1 ) )
          next
            case split_case_2
            step( solve( !KU( (~k⊕~k2⊕h((~k⊕~r0⊕~r1))) ) @ #vk.2 ) )
              case c_xor_case_1
              by step( solve( !KU( ~k2 ) @ #vk.4 ) )
            next
              case c_xor_case_2
              by step( solve( !KU( ~k ) @ #vk.4 ) )
            next
              case c_xor_case_3
              step( solve( !KU( h((~k⊕~r0⊕~r1)) ) @ #vk.3 ) )
                case c_h
                step( solve( !KU( (~k⊕~k2) ) @ #vk.4 ) )
                  case c_xor
                  by step( solve( !KU( ~k2 ) @ #vk.6 ) )
                next
                  case coerce
                  step( solve( !KD( (~k⊕~k2) ) ▶₀ #vk.3 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.5, 0) ~~> (#vk.3, 0) ) )
                    qed
                  qed
                qed
              next
                case tag1_case_1
                by step( contradiction /* cyclic */ )
              next
                case tag1_case_2
                step( solve( !KU( (~k⊕~k2) ) @ #vk.4 ) )
                  case c_xor
                  by step( solve( !KU( ~k2 ) @ #vk.6 ) )
                next
                  case coerce
                  step( solve( !KD( (~k⊕~k2) ) ▶₀ #vk.3 ) )
                    case acceptreader
                    by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.7, 0) ~~> (#vk.3, 0) ) )
                    qed
                  qed
                qed
              qed
            next
              case coerce
              step( solve( !KD( (~k⊕~k2⊕h((~k⊕~r0⊕~r1))) ) ▶₀ #vk.1 ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.5, 0) ~~> (#vk.1, 0) ) )
                qed
              qed
            qed
          next
            case split_case_3
            step( solve( !KU( (~k2⊕~r1.1) ) @ #vk.1 ) )
              case c_xor
              by step( solve( !KU( ~k2 ) @ #vk.4 ) )
            next
              case coerce
              step( solve( !KD( (~k2⊕~r1.1) ) ▶₀ #vk.1 ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.5, 0) ~~> (#vk.1, 0) ) )
                qed
              qed
            qed
          next
            case split_case_4
            step( solve( !KU( (~k2⊕x⊕~r1.1) ) @ #vk.1 ) )
              case c_xor_case_1
              step( solve( !KU( (~k⊕x⊕h((~k⊕~k2⊕~r1⊕x⊕~r1.1))) ) @ #vk.2 ) )
                case c_xor_case_1
                step( solve( !KU( (~k2⊕~r1.1) ) @ #vk.3 ) )
                  case c_xor
                  by step( solve( !KU( ~k2 ) @ #vk.7 ) )
                next
                  case coerce
                  step( solve( !KD( (~k2⊕~r1.1) ) ▶₀ #vk.3 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.5, 0) ~~> (#vk.3, 0) ) )
                    qed
                  qed
                qed
              next
                case c_xor_case_2
                by step( solve( !KU( ~k ) @ #vk.6 ) )
              next
                case c_xor_case_3
                step( solve( !KU( (~k2⊕~r1.1) ) @ #vk.3 ) )
                  case c_xor
                  by step( solve( !KU( ~k2 ) @ #vk.8 ) )
                next
                  case coerce
                  step( solve( !KD( (~k2⊕~r1.1) ) ▶₀ #vk.3 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.5, 0) ~~> (#vk.3, 0) ) )
                    qed
                  qed
                qed
              next
                case coerce
                step( solve( !KD( (~k⊕x⊕h((~k⊕~k2⊕~r1⊕x⊕~r1.1))) ) ▶₀ #vk.2 ) )
                  case acceptreader
                  by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                next
                  case initiatereader
                  by step( contradiction /* impossible chain */ )
                next
                  case tag1
                  step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                    case d_0_fst
                    by step( contradiction /* impossible chain */ )
                  next
                    case d_0_snd
                    by step( solve( (#vr.5, 0) ~~> (#vk.2, 0) ) )
                  qed
                qed
              qed
            next
              case c_xor_case_2
              by step( solve( !KU( ~k2 ) @ #vk.4 ) )
            next
              case c_xor_case_3
              step( solve( !KU( (~k⊕x⊕h((~k⊕~k2⊕~r1⊕x⊕~r1.1))) ) @ #vk.2 ) )
                case c_xor_case_1
                step( solve( !KU( (~k2⊕x) ) @ #vk.4 ) )
                  case c_xor
                  by step( solve( !KU( ~k2 ) @ #vk.7 ) )
                next
                  case coerce
                  step( solve( !KD( (~k2⊕x) ) ▶₀ #vk.3 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.5, 0) ~~> (#vk.3, 0) ) )
                    qed
                  qed
                qed
              next
                case c_xor_case_2
                by step( solve( !KU( ~k ) @ #vk.6 ) )
              next
                case c_xor_case_3
                step( solve( !KU( (~k2⊕x) ) @ #vk.4 ) )
                  case c_xor
                  by step( solve( !KU( ~k2 ) @ #vk.8 ) )
                next
                  case coerce
                  step( solve( !KD( (~k2⊕x) ) ▶₀ #vk.3 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.5, 0) ~~> (#vk.3, 0) ) )
                    qed
                  qed
                qed
              next
                case coerce
                step( solve( !KD( (~k⊕x⊕h((~k⊕~k2⊕~r1⊕x⊕~r1.1))) ) ▶₀ #vk.2 ) )
                  case acceptreader
                  by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                next
                  case initiatereader
                  by step( contradiction /* impossible chain */ )
                next
                  case tag1
                  step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                    case d_0_fst
                    by step( contradiction /* impossible chain */ )
                  next
                    case d_0_snd
                    by step( solve( (#vr.5, 0) ~~> (#vk.2, 0) ) )
                  qed
                qed
              qed
            next
              case coerce
              step( solve( !KD( (~k2⊕x⊕~r1.1) ) ▶₀ #vk.1 ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.5, 0) ~~> (#vk.1, 0) ) )
                qed
              qed
            qed
          next
            case split_case_5
            step( solve( !KU( (~k2⊕x) ) @ #vk.1 ) )
              case c_xor
              by step( solve( !KU( ~k2 ) @ #vk.4 ) )
            next
              case coerce
              step( solve( !KD( (~k2⊕x) ) ▶₀ #vk.1 ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.5, 0) ~~> (#vk.1, 0) ) )
                qed
              qed
            qed
          next
            case split_case_6
            step( solve( !KU( (x⊕~r1.1) ) @ #vk.1 ) )
              case c_xor
              step( solve( !KU( (~k⊕~k2⊕x⊕h((~k⊕~r1⊕x⊕~r1.1))) ) @ #vk.2 ) )
                case c_xor_case_1
                step( solve( !KU( (~k⊕~k2⊕h((~k⊕~r1⊕x⊕~r1.1))) ) @ #vk.5 ) )
                  case c_xor_case_1
                  by step( solve( !KU( ~k2 ) @ #vk.7 ) )
                next
                  case c_xor_case_2
                  by step( solve( !KU( ~k ) @ #vk.7 ) )
                next
                  case c_xor_case_3
                  step( solve( !KU( h((~k⊕~r1⊕x⊕~r1.1)) ) @ #vk.6 ) )
                    case c_h
                    step( solve( !KU( (~k⊕~k2) ) @ #vk.7 ) )
                      case c_xor
                      by step( solve( !KU( ~k2 ) @ #vk.9 ) )
                    next
                      case coerce
                      step( solve( !KD( (~k⊕~k2) ) ▶₀ #vk.5 ) )
                        case acceptreader
                        by step( solve( (#vl.1, 0) ~~> (#vk.5, 0) ) )
                      next
                        case initiatereader
                        by step( contradiction /* impossible chain */ )
                      next
                        case tag1
                        step( solve( (#vl.1, 0) ~~> (#vk.5, 0) ) )
                          case d_0_fst
                          by step( contradiction /* impossible chain */ )
                        next
                          case d_0_snd
                          by step( solve( (#vr.5, 0) ~~> (#vk.5, 0) ) )
                        qed
                      qed
                    qed
                  next
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    step( solve( !KU( (~k⊕~k2) ) @ #vk.7 ) )
                      case c_xor
                      by step( solve( !KU( ~k2 ) @ #vk.9 ) )
                    next
                      case coerce
                      step( solve( !KD( (~k⊕~k2) ) ▶₀ #vk.5 ) )
                        case acceptreader
                        by step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                      next
                        case initiatereader
                        by step( contradiction /* impossible chain */ )
                      next
                        case tag1
                        step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                          case d_0_fst
                          by step( contradiction /* impossible chain */ )
                        next
                          case d_0_snd
                          by step( solve( (#vr.7, 0) ~~> (#vk.5, 0) ) )
                        qed
                      qed
                    qed
                  qed
                next
                  case coerce
                  step( solve( !KD( (~k⊕~k2⊕h((~k⊕~r1⊕x⊕~r1.1))) ) ▶₀ #vk.3 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.5, 0) ~~> (#vk.3, 0) ) )
                    qed
                  qed
                qed
              next
                case c_xor_case_2
                by step( solve( !KU( ~k2 ) @ #vk.6 ) )
              next
                case c_xor_case_3
                step( solve( !KU( (~k⊕h((~k⊕~r1⊕x⊕~r1.1))) ) @ #vk.5 ) )
                  case c_xor
                  by step( solve( !KU( ~k ) @ #vk.8 ) )
                next
                  case coerce
                  step( solve( !KD( (~k⊕h((~k⊕~r1⊕x⊕~r1.1))) ) ▶₀ #vk.3 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.5, 0) ~~> (#vk.3, 0) ) )
                    qed
                  qed
                qed
              next
                case c_xor_case_4
                by step( solve( !KU( ~k ) @ #vk.6 ) )
              next
                case c_xor_case_5
                step( solve( !KU( (~k2⊕h((~k⊕~r1⊕x⊕~r1.1))) ) @ #vk.5 ) )
                  case c_xor
                  by step( solve( !KU( ~k2 ) @ #vk.8 ) )
                next
                  case coerce
                  step( solve( !KD( (~k2⊕h((~k⊕~r1⊕x⊕~r1.1))) ) ▶₀ #vk.3 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.5, 0) ~~> (#vk.3, 0) ) )
                    qed
                  qed
                qed
              next
                case c_xor_case_6
                step( solve( !KU( (x⊕h((~k⊕~r1⊕x⊕~r1.1))) ) @ #vk.5 ) )
                  case c_xor
                  step( solve( !KU( (~k⊕~k2) ) @ #vk.6 ) )
                    case c_xor
                    by step( solve( !KU( ~k2 ) @ #vk.8 ) )
                  next
                    case coerce
                    step( solve( !KD( (~k⊕~k2) ) ▶₀ #vk.4 ) )
                      case acceptreader
                      by step( solve( (#vl.1, 0) ~~> (#vk.4, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.1, 0) ~~> (#vk.4, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.5, 0) ~~> (#vk.4, 0) ) )
                      qed
                    qed
                  qed
                next
                  case coerce
                  step( solve( !KD( (x⊕h((~k⊕~r1⊕x⊕~r1.1))) ) ▶₀ #vk.3 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.5, 0) ~~> (#vk.3, 0) ) )
                    qed
                  qed
                qed
              next
                case c_xor_case_7
                step( solve( !KU( h((~k⊕~r1⊕x⊕~r1.1)) ) @ #vk.5 ) )
                  case c_h
                  step( solve( !KU( (~k⊕~k2⊕x) ) @ #vk.6 ) )
                    case c_xor_case_1
                    by step( solve( !KU( ~k2 ) @ #vk.9 ) )
                  next
                    case c_xor_case_2
                    by step( solve( !KU( ~k ) @ #vk.9 ) )
                  next
                    case c_xor_case_3
                    step( solve( !KU( (~k⊕~r1⊕x⊕~r1.1) ) @ #vk.7 ) )
                      case c_xor_case_1
                      step( solve( !KU( (~k⊕~k2) ) @ #vk.8 ) )
                        case c_xor
                        by step( solve( !KU( ~k2 ) @ #vk.10 ) )
                      next
                        case coerce
                        step( solve( !KD( (~k⊕~k2) ) ▶₀ #vk.6 ) )
                          case acceptreader
                          by step( solve( (#vl.1, 0) ~~> (#vk.6, 0) ) )
                        next
                          case initiatereader
                          by step( contradiction /* impossible chain */ )
                        next
                          case tag1
                          step( solve( (#vl.1, 0) ~~> (#vk.6, 0) ) )
                            case d_0_fst
                            by step( contradiction /* impossible chain */ )
                          next
                            case d_0_snd
                            by step( solve( (#vr.5, 0) ~~> (#vk.6, 0) ) )
                          qed
                        qed
                      qed
                    next
                      case c_xor_case_2
                      by step( contradiction /* cyclic */ )
                    next
                      case c_xor_case_3
                      step( solve( !KU( (~k⊕~k2) ) @ #vk.8 ) )
                        case c_xor
                        by step( solve( !KU( ~k2 ) @ #vk.11 ) )
                      next
                        case coerce
                        step( solve( !KD( (~k⊕~k2) ) ▶₀ #vk.6 ) )
                          case acceptreader
                          by step( solve( (#vl.1, 0) ~~> (#vk.6, 0) ) )
                        next
                          case initiatereader
                          by step( contradiction /* impossible chain */ )
                        next
                          case tag1
                          step( solve( (#vl.1, 0) ~~> (#vk.6, 0) ) )
                            case d_0_fst
                            by step( contradiction /* impossible chain */ )
                          next
                            case d_0_snd
                            by step( solve( (#vr.5, 0) ~~> (#vk.6, 0) ) )
                          qed
                        qed
                      qed
                    next
                      case c_xor_case_4
                      by step( solve( !KU( ~k ) @ #vk.10 ) )
                    next
                      case c_xor_case_5
                      step( solve( !KU( (~k⊕~k2) ) @ #vk.8 ) )
                        case c_xor
                        by step( solve( !KU( ~k2 ) @ #vk.11 ) )
                      next
                        case coerce
                        step( solve( !KD( (~k⊕~k2) ) ▶₀ #vk.6 ) )
                          case acceptreader
                          by step( solve( (#vl.1, 0) ~~> (#vk.6, 0) ) )
                        next
                          case initiatereader
                          by step( contradiction /* impossible chain */ )
                        next
                          case tag1
                          step( solve( (#vl.1, 0) ~~> (#vk.6, 0) ) )
                            case d_0_fst
                            by step( contradiction /* impossible chain */ )
                          next
                            case d_0_snd
                            by step( solve( (#vr.5, 0) ~~> (#vk.6, 0) ) )
                          qed
                        qed
                      qed
                    next
                      case c_xor_case_6
                      by step( contradiction /* cyclic */ )
                    next
                      case c_xor_case_7
                      by step( contradiction /* cyclic */ )
                    next
                      case coerce
                      step( solve( !KD( (~k⊕~r1⊕x⊕~r1.1) ) ▶₀ #vk.5 ) )
                        case acceptreader
                        by step( solve( (#vl.1, 0) ~~> (#vk.5, 0) ) )
                      next
                        case initiatereader
                        by step( contradiction /* impossible chain */ )
                      next
                        case tag1
                        step( solve( (#vl.1, 0) ~~> (#vk.5, 0) ) )
                          case d_0_fst
                          by step( contradiction /* impossible chain */ )
                        next
                          case d_0_snd
                          by step( solve( (#vr.5, 0) ~~> (#vk.5, 0) ) )
                        qed
                      qed
                    qed
                  next
                    case coerce
                    step( solve( !KD( (~k⊕~k2⊕x) ) ▶₀ #vk.4 ) )
                      case acceptreader
                      by step( solve( (#vl.1, 0) ~~> (#vk.4, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.1, 0) ~~> (#vk.4, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.5, 0) ~~> (#vk.4, 0) ) )
                      qed
                    qed
                  qed
                next
                  case tag1_case_1
                  by step( contradiction /* cyclic */ )
                next
                  case tag1_case_2
                  step( solve( !KU( (~k⊕~k2⊕x) ) @ #vk.6 ) )
                    case c_xor_case_1
                    by step( solve( !KU( ~k2 ) @ #vk.9 ) )
                  next
                    case c_xor_case_2
                    by step( solve( !KU( ~k ) @ #vk.9 ) )
                  next
                    case c_xor_case_3
                    step( solve( !KU( (~k⊕~k2) ) @ #vk.8 ) )
                      case c_xor
                      by step( solve( !KU( ~k2 ) @ #vk.9 ) )
                    next
                      case coerce
                      step( solve( !KD( (~k⊕~k2) ) ▶₀ #vk.5 ) )
                        case acceptreader
                        by step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                      next
                        case initiatereader
                        by step( contradiction /* impossible chain */ )
                      next
                        case tag1
                        step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                          case d_0_fst
                          by step( contradiction /* impossible chain */ )
                        next
                          case d_0_snd
                          by step( solve( (#vr.7, 0) ~~> (#vk.5, 0) ) )
                        qed
                      qed
                    qed
                  next
                    case coerce
                    step( solve( !KD( (~k⊕~k2⊕x) ) ▶₀ #vk.4 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.7, 0) ~~> (#vk.4, 0) ) )
                      qed
                    qed
                  qed
                qed
              next
                case coerce
                step( solve( !KD( (~k⊕~k2⊕x⊕h((~k⊕~r1⊕x⊕~r1.1))) ) ▶₀ #vk.2 ) )
                  case acceptreader
                  by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                next
                  case initiatereader
                  by step( contradiction /* impossible chain */ )
                next
                  case tag1
                  step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                    case d_0_fst
                    by step( contradiction /* impossible chain */ )
                  next
                    case d_0_snd
                    by step( solve( (#vr.5, 0) ~~> (#vk.2, 0) ) )
                  qed
                qed
              qed
            next
              case coerce
              step( solve( !KD( (x⊕~r1.1) ) ▶₀ #vk.1 ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.5, 0) ~~> (#vk.1, 0) ) )
                qed
              qed
            qed
          next
            case split_case_7
            step( solve( !KU( (~k⊕~k2⊕r0⊕~r1.1⊕h((~k⊕~r1⊕r0))) ) @ #vk.2 ) )
              case c_xor_case_01
              by step( contradiction /* cyclic */ )
            next
              case c_xor_case_02
              step( solve( !KU( (~k⊕~k2⊕~r1.1⊕h((~k⊕~r1⊕r0))) ) @ #vk.3 ) )
                case c_xor_case_1
                by step( contradiction /* cyclic */ )
              next
                case c_xor_case_2
                by step( solve( !KU( ~k2 ) @ #vk.5 ) )
              next
                case c_xor_case_3
                step( solve( !KU( (~k⊕h((~k⊕~r1⊕r0))) ) @ #vk.4 ) )
                  case c_xor
                  by step( solve( !KU( ~k ) @ #vk.7 ) )
                next
                  case coerce
                  step( solve( !KD( (~k⊕h((~k⊕~r1⊕r0))) ) ▶₀ #vk.3 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.5, 0) ~~> (#vk.3, 0) ) )
                    qed
                  qed
                qed
              next
                case c_xor_case_4
                by step( solve( !KU( ~k ) @ #vk.5 ) )
              next
                case c_xor_case_5
                step( solve( !KU( (~k2⊕h((~k⊕~r1⊕r0))) ) @ #vk.4 ) )
                  case c_xor
                  by step( solve( !KU( ~k2 ) @ #vk.7 ) )
                next
                  case coerce
                  step( solve( !KD( (~k2⊕h((~k⊕~r1⊕r0))) ) ▶₀ #vk.3 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.5, 0) ~~> (#vk.3, 0) ) )
                    qed
                  qed
                qed
              next
                case c_xor_case_6
                step( solve( !KU( (~r1.1⊕h((~k⊕~r1⊕r0))) ) @ #vk.4 ) )
                  case c_xor
                  by step( contradiction /* cyclic */ )
                next
                  case coerce
                  step( solve( !KD( (~r1.1⊕h((~k⊕~r1⊕r0))) ) ▶₀ #vk.3 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.5, 0) ~~> (#vk.3, 0) ) )
                    qed
                  qed
                qed
              next
                case c_xor_case_7
                step( solve( !KU( (~k⊕~k2⊕~r1.1) ) @ #vk.5 ) )
                  case c_xor_case_1
                  by step( solve( !KU( ~k2 ) @ #vk.7 ) )
                next
                  case c_xor_case_2
                  by step( solve( !KU( ~k ) @ #vk.7 ) )
                next
                  case c_xor_case_3
                  by step( contradiction /* cyclic */ )
                next
                  case coerce
                  step( solve( !KD( (~k⊕~k2⊕~r1.1) ) ▶₀ #vk.3 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.5, 0) ~~> (#vk.3, 0) ) )
                    qed
                  qed
                qed
              next
                case coerce
                step( solve( !KD( (~k⊕~k2⊕~r1.1⊕h((~k⊕~r1⊕r0))) ) ▶₀ #vk.2 ) )
                  case acceptreader
                  by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                next
                  case initiatereader
                  by step( contradiction /* impossible chain */ )
                next
                  case tag1
                  step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                    case d_0_fst
                    by step( contradiction /* impossible chain */ )
                  next
                    case d_0_snd
                    by step( solve( (#vr.5, 0) ~~> (#vk.2, 0) ) )
                  qed
                qed
              qed
            next
              case c_xor_case_03
              step( solve( !KU( (~k⊕~k2⊕h((~k⊕~r1⊕r0))) ) @ #vk.3 ) )
                case c_xor_case_1
                by step( solve( !KU( ~k2 ) @ #vk.6 ) )
              next
                case c_xor_case_2
                by step( solve( !KU( ~k ) @ #vk.6 ) )
              next
                case c_xor_case_3
                step( solve( !KU( (r0⊕~r1.1) ) @ #vk.4 ) )
                  case c_xor
                  by step( contradiction /* cyclic */ )
                next
                  case coerce
                  step( solve( !KD( (r0⊕~r1.1) ) ▶₀ #vk.3 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.5, 0) ~~> (#vk.3, 0) ) )
                    qed
                  qed
                qed
              next
                case coerce
                step( solve( !KD( (~k⊕~k2⊕h((~k⊕~r1⊕r0))) ) ▶₀ #vk.2 ) )
                  case acceptreader
                  by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                next
                  case initiatereader
                  by step( contradiction /* impossible chain */ )
                next
                  case tag1
                  step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                    case d_0_fst
                    by step( contradiction /* impossible chain */ )
                  next
                    case d_0_snd
                    by step( solve( (#vr.5, 0) ~~> (#vk.2, 0) ) )
                  qed
                qed
              qed
            next
              case c_xor_case_04
              by step( solve( !KU( ~k2 ) @ #vk.4 ) )
            next
              case c_xor_case_05
              step( solve( !KU( (~k⊕r0⊕h((~k⊕~r1⊕r0))) ) @ #vk.3 ) )
                case c_xor_case_1
                step( solve( !KU( (~k2⊕~r1.1) ) @ #vk.4 ) )
                  case c_xor
                  by step( contradiction /* cyclic */ )
                next
                  case coerce
                  step( solve( !KD( (~k2⊕~r1.1) ) ▶₀ #vk.3 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.5, 0) ~~> (#vk.3, 0) ) )
                    qed
                  qed
                qed
              next
                case c_xor_case_2
                by step( solve( !KU( ~k ) @ #vk.6 ) )
              next
                case c_xor_case_3
                step( solve( !KU( (~k2⊕~r1.1) ) @ #vk.4 ) )
                  case c_xor
                  by step( contradiction /* cyclic */ )
                next
                  case coerce
                  step( solve( !KD( (~k2⊕~r1.1) ) ▶₀ #vk.3 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.5, 0) ~~> (#vk.3, 0) ) )
                    qed
                  qed
                qed
              next
                case coerce
                step( solve( !KD( (~k⊕r0⊕h((~k⊕~r1⊕r0))) ) ▶₀ #vk.2 ) )
                  case acceptreader
                  by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                next
                  case initiatereader
                  by step( contradiction /* impossible chain */ )
                next
                  case tag1
                  step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                    case d_0_fst
                    by step( contradiction /* impossible chain */ )
                  next
                    case d_0_snd
                    by step( solve( (#vr.5, 0) ~~> (#vk.2, 0) ) )
                  qed
                qed
              qed
            next
              case c_xor_case_06
              step( solve( !KU( (~k⊕~r1.1⊕h((~k⊕~r1⊕r0))) ) @ #vk.3 ) )
                case c_xor_case_1
                by step( contradiction /* cyclic */ )
              next
                case c_xor_case_2
                by step( solve( !KU( ~k ) @ #vk.6 ) )
              next
                case c_xor_case_3
                step( solve( !KU( (~k2⊕r0) ) @ #vk.4 ) )
                  case c_xor
                  by step( solve( !KU( ~k2 ) @ #vk.7 ) )
                next
                  case coerce
                  step( solve( !KD( (~k2⊕r0) ) ▶₀ #vk.3 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.5, 0) ~~> (#vk.3, 0) ) )
                    qed
                  qed
                qed
              next
                case coerce
                step( solve( !KD( (~k⊕~r1.1⊕h((~k⊕~r1⊕r0))) ) ▶₀ #vk.2 ) )
                  case acceptreader
                  by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                next
                  case initiatereader
                  by step( contradiction /* impossible chain */ )
                next
                  case tag1
                  step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                    case d_0_fst
                    by step( contradiction /* impossible chain */ )
                  next
                    case d_0_snd
                    by step( solve( (#vr.5, 0) ~~> (#vk.2, 0) ) )
                  qed
                qed
              qed
            next
              case c_xor_case_07
              step( solve( !KU( (~k⊕h((~k⊕~r1⊕r0))) ) @ #vk.3 ) )
                case c_xor
                by step( solve( !KU( ~k ) @ #vk.6 ) )
              next
                case coerce
                step( solve( !KD( (~k⊕h((~k⊕~r1⊕r0))) ) ▶₀ #vk.2 ) )
                  case acceptreader
                  by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                next
                  case initiatereader
                  by step( contradiction /* impossible chain */ )
                next
                  case tag1
                  step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                    case d_0_fst
                    by step( contradiction /* impossible chain */ )
                  next
                    case d_0_snd
                    by step( solve( (#vr.5, 0) ~~> (#vk.2, 0) ) )
                  qed
                qed
              qed
            next
              case c_xor_case_08
              by step( solve( !KU( ~k ) @ #vk.4 ) )
            next
              case c_xor_case_09
              step( solve( !KU( (~k2⊕r0⊕h((~k⊕~r1⊕r0))) ) @ #vk.3 ) )
                case c_xor_case_1
                step( solve( !KU( (~k⊕~r1.1) ) @ #vk.4 ) )
                  case c_xor
                  by step( contradiction /* cyclic */ )
                next
                  case coerce
                  step( solve( !KD( (~k⊕~r1.1) ) ▶₀ #vk.3 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.5, 0) ~~> (#vk.3, 0) ) )
                    qed
                  qed
                qed
              next
                case c_xor_case_2
                by step( solve( !KU( ~k2 ) @ #vk.6 ) )
              next
                case c_xor_case_3
                step( solve( !KU( (~k⊕~r1.1) ) @ #vk.4 ) )
                  case c_xor
                  by step( contradiction /* cyclic */ )
                next
                  case coerce
                  step( solve( !KD( (~k⊕~r1.1) ) ▶₀ #vk.3 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.5, 0) ~~> (#vk.3, 0) ) )
                    qed
                  qed
                qed
              next
                case coerce
                step( solve( !KD( (~k2⊕r0⊕h((~k⊕~r1⊕r0))) ) ▶₀ #vk.2 ) )
                  case acceptreader
                  by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                next
                  case initiatereader
                  by step( contradiction /* impossible chain */ )
                next
                  case tag1
                  step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                    case d_0_fst
                    by step( contradiction /* impossible chain */ )
                  next
                    case d_0_snd
                    by step( solve( (#vr.5, 0) ~~> (#vk.2, 0) ) )
                  qed
                qed
              qed
            next
              case c_xor_case_10
              step( solve( !KU( (~k2⊕~r1.1⊕h((~k⊕~r1⊕r0))) ) @ #vk.3 ) )
                case c_xor_case_1
                by step( contradiction /* cyclic */ )
              next
                case c_xor_case_2
                by step( solve( !KU( ~k2 ) @ #vk.6 ) )
              next
                case c_xor_case_3
                step( solve( !KU( (~k⊕r0) ) @ #vk.4 ) )
                  case c_xor
                  by step( solve( !KU( ~k ) @ #vk.7 ) )
                next
                  case coerce
                  step( solve( !KD( (~k⊕r0) ) ▶₀ #vk.3 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.5, 0) ~~> (#vk.3, 0) ) )
                    qed
                  qed
                qed
              next
                case coerce
                step( solve( !KD( (~k2⊕~r1.1⊕h((~k⊕~r1⊕r0))) ) ▶₀ #vk.2 ) )
                  case acceptreader
                  by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                next
                  case initiatereader
                  by step( contradiction /* impossible chain */ )
                next
                  case tag1
                  step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                    case d_0_fst
                    by step( contradiction /* impossible chain */ )
                  next
                    case d_0_snd
                    by step( solve( (#vr.5, 0) ~~> (#vk.2, 0) ) )
                  qed
                qed
              qed
            next
              case c_xor_case_11
              step( solve( !KU( (~k2⊕h((~k⊕~r1⊕r0))) ) @ #vk.3 ) )
                case c_xor
                by step( solve( !KU( ~k2 ) @ #vk.6 ) )
              next
                case coerce
                step( solve( !KD( (~k2⊕h((~k⊕~r1⊕r0))) ) ▶₀ #vk.2 ) )
                  case acceptreader
                  by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                next
                  case initiatereader
                  by step( contradiction /* impossible chain */ )
                next
                  case tag1
                  step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                    case d_0_fst
                    by step( contradiction /* impossible chain */ )
                  next
                    case d_0_snd
                    by step( solve( (#vr.5, 0) ~~> (#vk.2, 0) ) )
                  qed
                qed
              qed
            next
              case c_xor_case_12
              step( solve( !KU( (r0⊕~r1.1⊕h((~k⊕~r1⊕r0))) ) @ #vk.3 ) )
                case c_xor_case_1
                by step( contradiction /* cyclic */ )
              next
                case c_xor_case_2
                step( solve( !KU( (~k⊕~k2) ) @ #vk.4 ) )
                  case c_xor
                  by step( solve( !KU( ~k2 ) @ #vk.6 ) )
                next
                  case coerce
                  step( solve( !KD( (~k⊕~k2) ) ▶₀ #vk.3 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.5, 0) ~~> (#vk.3, 0) ) )
                    qed
                  qed
                qed
              next
                case c_xor_case_3
                step( solve( !KU( (~k⊕~k2) ) @ #vk.4 ) )
                  case c_xor
                  by step( solve( !KU( ~k2 ) @ #vk.7 ) )
                next
                  case coerce
                  step( solve( !KD( (~k⊕~k2) ) ▶₀ #vk.3 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.5, 0) ~~> (#vk.3, 0) ) )
                    qed
                  qed
                qed
              next
                case coerce
                step( solve( !KD( (r0⊕~r1.1⊕h((~k⊕~r1⊕r0))) ) ▶₀ #vk.2 ) )
                  case acceptreader
                  by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                next
                  case initiatereader
                  by step( contradiction /* impossible chain */ )
                next
                  case tag1
                  step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                    case d_0_fst
                    by step( contradiction /* impossible chain */ )
                  next
                    case d_0_snd
                    by step( solve( (#vr.5, 0) ~~> (#vk.2, 0) ) )
                  qed
                qed
              qed
            next
              case c_xor_case_13
              step( solve( !KU( (r0⊕h((~k⊕~r1⊕r0))) ) @ #vk.3 ) )
                case c_xor
                step( solve( !KU( (~k⊕~k2⊕~r1.1) ) @ #vk.4 ) )
                  case c_xor_case_1
                  by step( solve( !KU( ~k2 ) @ #vk.7 ) )
                next
                  case c_xor_case_2
                  by step( solve( !KU( ~k ) @ #vk.7 ) )
                next
                  case c_xor_case_3
                  by step( contradiction /* cyclic */ )
                next
                  case coerce
                  step( solve( !KD( (~k⊕~k2⊕~r1.1) ) ▶₀ #vk.3 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.5, 0) ~~> (#vk.3, 0) ) )
                    qed
                  qed
                qed
              next
                case coerce
                step( solve( !KD( (r0⊕h((~k⊕~r1⊕r0))) ) ▶₀ #vk.2 ) )
                  case acceptreader
                  by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                next
                  case initiatereader
                  by step( contradiction /* impossible chain */ )
                next
                  case tag1
                  step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                    case d_0_fst
                    by step( contradiction /* impossible chain */ )
                  next
                    case d_0_snd
                    by step( solve( (#vr.5, 0) ~~> (#vk.2, 0) ) )
                  qed
                qed
              qed
            next
              case c_xor_case_14
              step( solve( !KU( (~r1.1⊕h((~k⊕~r1⊕r0))) ) @ #vk.3 ) )
                case c_xor
                by step( contradiction /* cyclic */ )
              next
                case coerce
                step( solve( !KD( (~r1.1⊕h((~k⊕~r1⊕r0))) ) ▶₀ #vk.2 ) )
                  case acceptreader
                  by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                next
                  case initiatereader
                  by step( contradiction /* impossible chain */ )
                next
                  case tag1
                  step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                    case d_0_fst
                    by step( contradiction /* impossible chain */ )
                  next
                    case d_0_snd
                    by step( solve( (#vr.5, 0) ~~> (#vk.2, 0) ) )
                  qed
                qed
              qed
            next
              case c_xor_case_15
              step( solve( !KU( (~k⊕~k2⊕r0⊕~r1.1) ) @ #vk.4 ) )
                case c_xor_case_1
                step( solve( !KU( (~k⊕~k2⊕~r1.1) ) @ #vk.5 ) )
                  case c_xor_case_1
                  by step( solve( !KU( ~k2 ) @ #vk.7 ) )
                next
                  case c_xor_case_2
                  by step( solve( !KU( ~k ) @ #vk.7 ) )
                next
                  case c_xor_case_3
                  by step( contradiction /* cyclic */ )
                next
                  case coerce
                  step( solve( !KD( (~k⊕~k2⊕~r1.1) ) ▶₀ #vk.3 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.5, 0) ~~> (#vk.3, 0) ) )
                    qed
                  qed
                qed
              next
                case c_xor_case_2
                by step( solve( !KU( ~k2 ) @ #vk.6 ) )
              next
                case c_xor_case_3
                step( solve( !KU( (~k⊕~r1.1) ) @ #vk.5 ) )
                  case c_xor
                  by step( contradiction /* cyclic */ )
                next
                  case coerce
                  step( solve( !KD( (~k⊕~r1.1) ) ▶₀ #vk.3 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.5, 0) ~~> (#vk.3, 0) ) )
                    qed
                  qed
                qed
              next
                case c_xor_case_4
                by step( solve( !KU( ~k ) @ #vk.6 ) )
              next
                case c_xor_case_5
                step( solve( !KU( (~k2⊕~r1.1) ) @ #vk.5 ) )
                  case c_xor
                  by step( contradiction /* cyclic */ )
                next
                  case coerce
                  step( solve( !KD( (~k2⊕~r1.1) ) ▶₀ #vk.3 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.5, 0) ~~> (#vk.3, 0) ) )
                    qed
                  qed
                qed
              next
                case c_xor_case_6
                step( solve( !KU( (r0⊕~r1.1) ) @ #vk.5 ) )
                  case c_xor
                  by step( contradiction /* cyclic */ )
                next
                  case coerce
                  step( solve( !KD( (r0⊕~r1.1) ) ▶₀ #vk.3 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.5, 0) ~~> (#vk.3, 0) ) )
                    qed
                  qed
                qed
              next
                case c_xor_case_7
                by step( contradiction /* cyclic */ )
              next
                case coerce
                step( solve( !KD( (~k⊕~k2⊕r0⊕~r1.1) ) ▶₀ #vk.2 ) )
                  case acceptreader
                  by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                next
                  case initiatereader
                  by step( contradiction /* impossible chain */ )
                next
                  case tag1
                  step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                    case d_0_fst
                    by step( contradiction /* impossible chain */ )
                  next
                    case d_0_snd
                    by step( solve( (#vr.5, 0) ~~> (#vk.2, 0) ) )
                  qed
                qed
              qed
            next
              case coerce
              step( solve( !KD( (~k⊕~k2⊕r0⊕~r1.1⊕h((~k⊕~r1⊕r0))) ) ▶₀ #vk.1 ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.5, 0) ~~> (#vk.1, 0) ) )
                qed
              qed
            qed
          qed
        next
          case split_case_4
          step( solve( !KU( (x⊕~x.1) ) @ #vk.2 ) )
            case c_xor
            step( solve( !KU( ~x ) @ #vk.3 ) )
              case fresh
              step( solve( !KU( zero ) @ #vk.3 ) )
                case c_zero
                by step( solve( splitEqs(2) ) )
              next
                case coerce
                step( solve( !KD( zero ) ▶₀ #vk.3 ) )
                  case acceptreader
                  by step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                next
                  case initiatereader
                  by step( contradiction /* impossible chain */ )
                next
                  case tag1
                  step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                    case d_0_fst
                    by step( contradiction /* impossible chain */ )
                  next
                    case d_0_snd
                    by step( solve( (#vr.5, 0) ~~> (#vk.3, 0) ) )
                  qed
                qed
              qed
            next
              case tag1_case_1
              step( solve( !KU( zero ) @ #vk.3 ) )
                case c_zero
                by step( solve( splitEqs(2) ) )
              next
                case coerce
                step( solve( !KD( zero ) ▶₀ #vk.3 ) )
                  case acceptreader
                  by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                next
                  case initiatereader
                  by step( contradiction /* impossible chain */ )
                next
                  case tag1
                  step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                    case d_0_fst
                    by step( contradiction /* impossible chain */ )
                  next
                    case d_0_snd
                    by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                  qed
                qed
              qed
            next
              case tag1_case_2
              step( solve( !KU( zero ) @ #vk.3 ) )
                case c_zero
                by step( solve( splitEqs(2) ) )
              next
                case coerce
                step( solve( !KD( zero ) ▶₀ #vk.3 ) )
                  case acceptreader
                  by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                next
                  case initiatereader
                  by step( contradiction /* impossible chain */ )
                next
                  case tag1
                  step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                    case d_0_fst
                    by step( contradiction /* impossible chain */ )
                  next
                    case d_0_snd
                    by step( solve( (#vr.7, 0) ~~> (#vk.3, 0) ) )
                  qed
                qed
              qed
            qed
          next
            case coerce
            step( solve( !KD( (x⊕~x.1) ) ▶₀ #vk.1 ) )
              case acceptreader
              by step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
            next
              case initiatereader
              by step( contradiction /* impossible chain */ )
            next
              case tag1
              step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                case d_0_fst
                by step( contradiction /* impossible chain */ )
              next
                case d_0_snd
                by step( solve( (#vr.5, 0) ~~> (#vk.1, 0) ) )
              qed
            qed
          qed
        next
          case split_case_5
          step( solve( !KU( (~k⊕~r1) ) @ #vk.1 ) )
            case c_xor
            by step( contradiction /* cyclic */ )
          next
            case coerce
            step( solve( !KD( (~k⊕~r1) ) ▶₀ #vk.1 ) )
              case acceptreader
              by step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
            next
              case initiatereader
              by step( contradiction /* impossible chain */ )
            next
              case tag1
              step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                case d_0_fst
                by step( contradiction /* impossible chain */ )
              next
                case d_0_snd
                by step( solve( (#vr.5, 0) ~~> (#vk.1, 0) ) )
              qed
            qed
          qed
        next
          case split_case_6
          step( solve( !KU( (~r1⊕x) ) @ #vk.1 ) )
            case c_xor
            by step( contradiction /* cyclic */ )
          next
            case coerce
            step( solve( !KD( (~r1⊕x) ) ▶₀ #vk.1 ) )
              case acceptreader
              by step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
            next
              case initiatereader
              by step( contradiction /* impossible chain */ )
            next
              case tag1
              step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                case d_0_fst
                by step( contradiction /* impossible chain */ )
              next
                case d_0_snd
                by step( solve( (#vr.5, 0) ~~> (#vk.1, 0) ) )
              qed
            qed
          qed
        next
          case split_case_7
          step( solve( !KU( (~k⊕~r1⊕z) ) @ #vk.1 ) )
            case c_xor_case_1
            by step( contradiction /* cyclic */ )
          next
            case c_xor_case_2
            by step( solve( !KU( ~k ) @ #vk.4 ) )
          next
            case c_xor_case_3
            step( solve( !KU( (~k⊕~r1) ) @ #vk.4 ) )
              case c_xor
              by step( contradiction /* cyclic */ )
            next
              case coerce
              step( solve( !KD( (~k⊕~r1) ) ▶₀ #vk.2 ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.5, 0) ~~> (#vk.2, 0) ) )
                qed
              qed
            qed
          next
            case coerce
            step( solve( !KD( (~k⊕~r1⊕z) ) ▶₀ #vk.1 ) )
              case acceptreader
              by step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
            next
              case initiatereader
              by step( contradiction /* impossible chain */ )
            next
              case tag1
              step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                case d_0_fst
                by step( contradiction /* impossible chain */ )
              next
                case d_0_snd
                by step( solve( (#vr.5, 0) ~~> (#vk.1, 0) ) )
              qed
            qed
          qed
        next
          case split_case_8
          step( solve( !KU( (~k⊕x) ) @ #vk.1 ) )
            case c_xor
            by step( solve( !KU( ~k ) @ #vk.4 ) )
          next
            case coerce
            step( solve( !KD( (~k⊕x) ) ▶₀ #vk.1 ) )
              case acceptreader
              by step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
            next
              case initiatereader
              by step( contradiction /* impossible chain */ )
            next
              case tag1
              step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                case d_0_fst
                by step( contradiction /* impossible chain */ )
              next
                case d_0_snd
                by step( solve( (#vr.5, 0) ~~> (#vk.1, 0) ) )
              qed
            qed
          qed
        qed
      next
        case tag1_case_3
        step( solve( splitEqs(0) ) )
          case split_case_1
          by step( solve( !KU( ~k ) @ #vk.1 ) )
        next
          case split_case_2
          by step( contradiction /* cyclic */ )
        next
          case split_case_3
          step( solve( splitEqs(2) ) )
            case split_case_1
            step( solve( !KU( h((~k⊕~r0⊕~r1)) ) @ #vk.2 ) )
              case c_h
              step( solve( !KU( (~k⊕~r0⊕~r1) ) @ #vk.3 ) )
                case c_xor_case_1
                by step( contradiction /* cyclic */ )
              next
                case c_xor_case_2
                by step( solve( !KU( ~k ) @ #vk.5 ) )
              next
                case c_xor_case_3
                by step( contradiction /* cyclic */ )
              next
                case coerce
                step( solve( !KD( (~k⊕~r0⊕~r1) ) ▶₀ #vk.2 ) )
                  case acceptreader
                  by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                next
                  case initiatereader
                  by step( contradiction /* impossible chain */ )
                next
                  case tag1
                  step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                    case d_0_fst
                    by step( contradiction /* impossible chain */ )
                  next
                    case d_0_snd
                    by step( solve( (#vr.5, 0) ~~> (#vk.2, 0) ) )
                  qed
                qed
              qed
            next
              case tag1_case_1
              by step( contradiction /* cyclic */ )
            next
              case tag1_case_2
              step( solve( !KU( ~r0 ) @ #vk.2 ) )
                case tag1
                step( solve( splitEqs(5) ) )
                  case split
                  step( solve( !KU( (~k⊕~k2⊕~r0⊕~r1⊕~r1.1) ) @ #vk.3 ) )
                    case c_xor_case_01
                    by step( contradiction /* cyclic */ )
                  next
                    case c_xor_case_02
                    by step( contradiction /* cyclic */ )
                  next
                    case c_xor_case_03
                    step( solve( !KU( (~k⊕~k2⊕~r1.1) ) @ #vk.4 ) )
                      case c_xor_case_1
                      by step( solve( !KU( ~k2 ) @ #vk.7 ) )
                    next
                      case c_xor_case_2
                      by step( solve( !KU( ~k ) @ #vk.7 ) )
                    next
                      case c_xor_case_3
                      by step( contradiction /* cyclic */ )
                    next
                      case coerce
                      step( solve( !KD( (~k⊕~k2⊕~r1.1) ) ▶₀ #vk.4 ) )
                        case acceptreader
                        by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                      next
                        case initiatereader
                        by step( contradiction /* impossible chain */ )
                      next
                        case tag1
                        step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                          case d_0_fst
                          by step( contradiction /* impossible chain */ )
                        next
                          case d_0_snd
                          by step( solve( (#vr.8, 0) ~~> (#vk.4, 0) ) )
                        qed
                      qed
                    qed
                  next
                    case c_xor_case_04
                    by step( solve( !KU( ~k2 ) @ #vk.5 ) )
                  next
                    case c_xor_case_05
                    step( solve( !KU( (~k⊕~r0⊕~r1.1) ) @ #vk.4 ) )
                      case c_xor_case_1
                      by step( contradiction /* cyclic */ )
                    next
                      case c_xor_case_2
                      by step( solve( !KU( ~k ) @ #vk.7 ) )
                    next
                      case c_xor_case_3
                      by step( contradiction /* cyclic */ )
                    next
                      case coerce
                      step( solve( !KD( (~k⊕~r0⊕~r1.1) ) ▶₀ #vk.4 ) )
                        case acceptreader
                        by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                      next
                        case initiatereader
                        by step( contradiction /* impossible chain */ )
                      next
                        case tag1
                        step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                          case d_0_fst
                          by step( contradiction /* impossible chain */ )
                        next
                          case d_0_snd
                          by step( solve( (#vr.8, 0) ~~> (#vk.4, 0) ) )
                        qed
                      qed
                    qed
                  next
                    case c_xor_case_06
                    step( solve( !KU( (~k⊕~r1⊕~r1.1) ) @ #vk.4 ) )
                      case c_xor_case_1
                      by step( contradiction /* cyclic */ )
                    next
                      case c_xor_case_2
                      by step( solve( !KU( ~k ) @ #vk.7 ) )
                    next
                      case c_xor_case_3
                      by step( contradiction /* cyclic */ )
                    next
                      case coerce
                      step( solve( !KD( (~k⊕~r1⊕~r1.1) ) ▶₀ #vk.4 ) )
                        case acceptreader
                        by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                      next
                        case initiatereader
                        by step( contradiction /* impossible chain */ )
                      next
                        case tag1
                        step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                          case d_0_fst
                          by step( contradiction /* impossible chain */ )
                        next
                          case d_0_snd
                          by step( solve( (#vr.8, 0) ~~> (#vk.4, 0) ) )
                        qed
                      qed
                    qed
                  next
                    case c_xor_case_07
                    step( solve( !KU( (~k⊕~r1.1) ) @ #vk.4 ) )
                      case c_xor
                      by step( contradiction /* cyclic */ )
                    next
                      case coerce
                      step( solve( !KD( (~k⊕~r1.1) ) ▶₀ #vk.4 ) )
                        case acceptreader
                        by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                      next
                        case initiatereader
                        by step( contradiction /* impossible chain */ )
                      next
                        case tag1
                        step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                          case d_0_fst
                          by step( contradiction /* impossible chain */ )
                        next
                          case d_0_snd
                          by step( solve( (#vr.8, 0) ~~> (#vk.4, 0) ) )
                        qed
                      qed
                    qed
                  next
                    case c_xor_case_08
                    by step( solve( !KU( ~k ) @ #vk.5 ) )
                  next
                    case c_xor_case_09
                    step( solve( !KU( (~k2⊕~r0⊕~r1.1) ) @ #vk.4 ) )
                      case c_xor_case_1
                      by step( contradiction /* cyclic */ )
                    next
                      case c_xor_case_2
                      by step( solve( !KU( ~k2 ) @ #vk.7 ) )
                    next
                      case c_xor_case_3
                      by step( contradiction /* cyclic */ )
                    next
                      case coerce
                      step( solve( !KD( (~k2⊕~r0⊕~r1.1) ) ▶₀ #vk.4 ) )
                        case acceptreader
                        by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                      next
                        case initiatereader
                        by step( contradiction /* impossible chain */ )
                      next
                        case tag1
                        step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                          case d_0_fst
                          by step( contradiction /* impossible chain */ )
                        next
                          case d_0_snd
                          by step( solve( (#vr.8, 0) ~~> (#vk.4, 0) ) )
                        qed
                      qed
                    qed
                  next
                    case c_xor_case_10
                    step( solve( !KU( (~k2⊕~r1⊕~r1.1) ) @ #vk.4 ) )
                      case c_xor_case_1
                      by step( contradiction /* cyclic */ )
                    next
                      case c_xor_case_2
                      by step( solve( !KU( ~k2 ) @ #vk.7 ) )
                    next
                      case c_xor_case_3
                      by step( contradiction /* cyclic */ )
                    next
                      case coerce
                      step( solve( !KD( (~k2⊕~r1⊕~r1.1) ) ▶₀ #vk.4 ) )
                        case acceptreader
                        by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                      next
                        case initiatereader
                        by step( contradiction /* impossible chain */ )
                      next
                        case tag1
                        step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                          case d_0_fst
                          by step( contradiction /* impossible chain */ )
                        next
                          case d_0_snd
                          by step( solve( (#vr.8, 0) ~~> (#vk.4, 0) ) )
                        qed
                      qed
                    qed
                  next
                    case c_xor_case_11
                    step( solve( !KU( (~k2⊕~r1.1) ) @ #vk.4 ) )
                      case c_xor
                      by step( contradiction /* cyclic */ )
                    next
                      case coerce
                      step( solve( !KD( (~k2⊕~r1.1) ) ▶₀ #vk.4 ) )
                        case acceptreader
                        by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                      next
                        case initiatereader
                        by step( contradiction /* impossible chain */ )
                      next
                        case tag1
                        step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                          case d_0_fst
                          by step( contradiction /* impossible chain */ )
                        next
                          case d_0_snd
                          by step( solve( (#vr.8, 0) ~~> (#vk.4, 0) ) )
                        qed
                      qed
                    qed
                  next
                    case c_xor_case_12
                    step( solve( !KU( (~r0⊕~r1⊕~r1.1) ) @ #vk.4 ) )
                      case c_xor_case_1
                      by step( contradiction /* cyclic */ )
                    next
                      case c_xor_case_2
                      by step( contradiction /* cyclic */ )
                    next
                      case c_xor_case_3
                      by step( contradiction /* cyclic */ )
                    next
                      case coerce
                      step( solve( !KD( (~r0⊕~r1⊕~r1.1) ) ▶₀ #vk.4 ) )
                        case acceptreader
                        by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                      next
                        case initiatereader
                        by step( contradiction /* impossible chain */ )
                      next
                        case tag1
                        step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                          case d_0_fst
                          by step( contradiction /* impossible chain */ )
                        next
                          case d_0_snd
                          by step( solve( (#vr.8, 0) ~~> (#vk.4, 0) ) )
                        qed
                      qed
                    qed
                  next
                    case c_xor_case_13
                    step( solve( !KU( (~r0⊕~r1.1) ) @ #vk.4 ) )
                      case c_xor
                      by step( contradiction /* cyclic */ )
                    next
                      case coerce
                      step( solve( !KD( (~r0⊕~r1.1) ) ▶₀ #vk.4 ) )
                        case acceptreader
                        by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                      next
                        case initiatereader
                        by step( contradiction /* impossible chain */ )
                      next
                        case tag1
                        step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                          case d_0_fst
                          by step( contradiction /* impossible chain */ )
                        next
                          case d_0_snd
                          by step( solve( (#vr.8, 0) ~~> (#vk.4, 0) ) )
                        qed
                      qed
                    qed
                  next
                    case c_xor_case_14
                    step( solve( !KU( (~r1⊕~r1.1) ) @ #vk.4 ) )
                      case c_xor
                      by step( contradiction /* cyclic */ )
                    next
                      case coerce
                      step( solve( !KD( (~r1⊕~r1.1) ) ▶₀ #vk.4 ) )
                        case acceptreader
                        by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                      next
                        case initiatereader
                        by step( contradiction /* impossible chain */ )
                      next
                        case tag1
                        step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                          case d_0_fst
                          by step( contradiction /* impossible chain */ )
                        next
                          case d_0_snd
                          by step( solve( (#vr.8, 0) ~~> (#vk.4, 0) ) )
                        qed
                      qed
                    qed
                  next
                    case c_xor_case_15
                    by step( contradiction /* cyclic */ )
                  next
                    case coerce
                    step( solve( !KD( (~k⊕~k2⊕~r0⊕~r1⊕~r1.1) ) ▶₀ #vk.3 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.8, 0) ~~> (#vk.3, 0) ) )
                      qed
                    qed
                  qed
                qed
              qed
            qed
          next
            case split_case_2
            step( solve( !KU( (r0⊕~r1.1⊕h((~k⊕~r1⊕r0))) ) @ #vk.2 ) )
              case c_xor_case_1
              by step( contradiction /* cyclic */ )
            next
              case c_xor_case_2
              step( solve( !KU( (~r1.1⊕h((~k⊕~r1⊕r0))) ) @ #vk.3 ) )
                case c_xor
                by step( contradiction /* cyclic */ )
              next
                case coerce
                step( solve( !KD( (~r1.1⊕h((~k⊕~r1⊕r0))) ) ▶₀ #vk.2 ) )
                  case acceptreader
                  by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                next
                  case initiatereader
                  by step( contradiction /* impossible chain */ )
                next
                  case tag1
                  step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                    case d_0_fst
                    by step( contradiction /* impossible chain */ )
                  next
                    case d_0_snd
                    by step( solve( (#vr.5, 0) ~~> (#vk.2, 0) ) )
                  qed
                qed
              qed
            next
              case c_xor_case_3
              step( solve( !KU( (r0⊕~r1.1) ) @ #vk.4 ) )
                case c_xor
                by step( contradiction /* cyclic */ )
              next
                case coerce
                step( solve( !KD( (r0⊕~r1.1) ) ▶₀ #vk.2 ) )
                  case acceptreader
                  by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                next
                  case initiatereader
                  by step( contradiction /* impossible chain */ )
                next
                  case tag1
                  step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                    case d_0_fst
                    by step( contradiction /* impossible chain */ )
                  next
                    case d_0_snd
                    by step( solve( (#vr.5, 0) ~~> (#vk.2, 0) ) )
                  qed
                qed
              qed
            next
              case coerce
              step( solve( !KD( (r0⊕~r1.1⊕h((~k⊕~r1⊕r0))) ) ▶₀ #vk.1 ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.5, 0) ~~> (#vk.1, 0) ) )
                qed
              qed
            qed
          next
            case split_case_3
            step( solve( !KU( (x⊕~r1.1) ) @ #vk.1 ) )
              case c_xor
              step( solve( !KU( (x⊕h((~k⊕~r1⊕x⊕~r1.1))) ) @ #vk.2 ) )
                case c_xor
                step( solve( !KU( h((~k⊕~r1⊕x⊕~r1.1)) ) @ #vk.5 ) )
                  case c_h
                  step( solve( !KU( (~k⊕~r1⊕x⊕~r1.1) ) @ #vk.6 ) )
                    case c_xor_case_1
                    step( solve( !KU( (~k⊕~r1⊕~r1.1) ) @ #vk.7 ) )
                      case c_xor_case_1
                      by step( contradiction /* cyclic */ )
                    next
                      case c_xor_case_2
                      by step( solve( !KU( ~k ) @ #vk.9 ) )
                    next
                      case c_xor_case_3
                      by step( contradiction /* cyclic */ )
                    next
                      case coerce
                      step( solve( !KD( (~k⊕~r1⊕~r1.1) ) ▶₀ #vk.5 ) )
                        case acceptreader
                        by step( solve( (#vl.1, 0) ~~> (#vk.5, 0) ) )
                      next
                        case initiatereader
                        by step( contradiction /* impossible chain */ )
                      next
                        case tag1
                        step( solve( (#vl.1, 0) ~~> (#vk.5, 0) ) )
                          case d_0_fst
                          by step( contradiction /* impossible chain */ )
                        next
                          case d_0_snd
                          by step( solve( (#vr.5, 0) ~~> (#vk.5, 0) ) )
                        qed
                      qed
                    qed
                  next
                    case c_xor_case_2
                    by step( contradiction /* cyclic */ )
                  next
                    case c_xor_case_3
                    step( solve( !KU( (~k⊕~r1.1) ) @ #vk.7 ) )
                      case c_xor
                      by step( contradiction /* cyclic */ )
                    next
                      case coerce
                      step( solve( !KD( (~k⊕~r1.1) ) ▶₀ #vk.5 ) )
                        case acceptreader
                        by step( solve( (#vl.1, 0) ~~> (#vk.5, 0) ) )
                      next
                        case initiatereader
                        by step( contradiction /* impossible chain */ )
                      next
                        case tag1
                        step( solve( (#vl.1, 0) ~~> (#vk.5, 0) ) )
                          case d_0_fst
                          by step( contradiction /* impossible chain */ )
                        next
                          case d_0_snd
                          by step( solve( (#vr.5, 0) ~~> (#vk.5, 0) ) )
                        qed
                      qed
                    qed
                  next
                    case c_xor_case_4
                    by step( solve( !KU( ~k ) @ #vk.8 ) )
                  next
                    case c_xor_case_5
                    step( solve( !KU( (~r1⊕~r1.1) ) @ #vk.7 ) )
                      case c_xor
                      by step( contradiction /* cyclic */ )
                    next
                      case coerce
                      step( solve( !KD( (~r1⊕~r1.1) ) ▶₀ #vk.5 ) )
                        case acceptreader
                        by step( solve( (#vl.1, 0) ~~> (#vk.5, 0) ) )
                      next
                        case initiatereader
                        by step( contradiction /* impossible chain */ )
                      next
                        case tag1
                        step( solve( (#vl.1, 0) ~~> (#vk.5, 0) ) )
                          case d_0_fst
                          by step( contradiction /* impossible chain */ )
                        next
                          case d_0_snd
                          by step( solve( (#vr.5, 0) ~~> (#vk.5, 0) ) )
                        qed
                      qed
                    qed
                  next
                    case c_xor_case_6
                    by step( contradiction /* cyclic */ )
                  next
                    case c_xor_case_7
                    by step( contradiction /* cyclic */ )
                  next
                    case coerce
                    step( solve( !KD( (~k⊕~r1⊕x⊕~r1.1) ) ▶₀ #vk.4 ) )
                      case acceptreader
                      by step( solve( (#vl.1, 0) ~~> (#vk.4, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.1, 0) ~~> (#vk.4, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.5, 0) ~~> (#vk.4, 0) ) )
                      qed
                    qed
                  qed
                next
                  case tag1_case_1
                  by step( contradiction /* cyclic */ )
                next
                  case tag1_case_2
                  step( solve( !KU( (x.1⊕x.2) ) @ #vk.6 ) )
                    case c_xor
                    step( solve( !KU( ~r1.1 ) @ #vk.5 ) )
                      case tag1
                      step( solve( splitEqs(5) ) )
                        case split_case_1
                        by step( solve( !KU( ~k2 ) @ #vk.6 ) )
                      next
                        case split_case_2
                        by step( solve( !KU( ~k ) @ #vk.8 ) )
                      next
                        case split_case_3
                        by step( solve( !KU( ~k ) @ #vk.8 ) )
                      next
                        case split_case_4
                        step( solve( !KU( (~k2⊕x) ) @ #vk.6 ) )
                          case c_xor
                          by step( solve( !KU( ~k2 ) @ #vk.9 ) )
                        next
                          case coerce
                          step( solve( !KD( (~k2⊕x) ) ▶₀ #vk.6 ) )
                            case acceptreader
                            by step( solve( (#vl.2, 0) ~~> (#vk.6, 0) ) )
                          next
                            case initiatereader
                            by step( contradiction /* impossible chain */ )
                          next
                            case tag1
                            step( solve( (#vl.2, 0) ~~> (#vk.6, 0) ) )
                              case d_0_fst
                              by step( contradiction /* impossible chain */ )
                            next
                              case d_0_snd
                              by step( solve( (#vr.8, 0) ~~> (#vk.6, 0) ) )
                            qed
                          qed
                        qed
                      next
                        case split_case_5
                        step( solve( !KU( (~k2⊕x⊕~r1.2) ) @ #vk.6 ) )
                          case c_xor_case_1
                          step( solve( !KU( (~k⊕~r1⊕~r1.1) ) @ #vk.7 ) )
                            case c_xor_case_1
                            by step( contradiction /* cyclic */ )
                          next
                            case c_xor_case_2
                            by step( solve( !KU( ~k ) @ #vk.11 ) )
                          next
                            case c_xor_case_3
                            by step( contradiction /* cyclic */ )
                          next
                            case coerce
                            step( solve( !KD( (~k⊕~r1⊕~r1.1) ) ▶₀ #vk.7 ) )
                              case acceptreader
                              by step( solve( (#vl.2, 0) ~~> (#vk.7, 0) ) )
                            next
                              case initiatereader
                              by step( contradiction /* impossible chain */ )
                            next
                              case tag1
                              step( solve( (#vl.2, 0) ~~> (#vk.7, 0) ) )
                                case d_0_fst
                                by step( contradiction /* impossible chain */ )
                              next
                                case d_0_snd
                                by step( solve( (#vr.8, 0) ~~> (#vk.7, 0) ) )
                              qed
                            qed
                          qed
                        next
                          case c_xor_case_2
                          by step( solve( !KU( ~k2 ) @ #vk.10 ) )
                        next
                          case c_xor_case_3
                          step( solve( !KU( (~k⊕~r1⊕~r1.1) ) @ #vk.7 ) )
                            case c_xor_case_1
                            by step( contradiction /* cyclic */ )
                          next
                            case c_xor_case_2
                            by step( solve( !KU( ~k ) @ #vk.12 ) )
                          next
                            case c_xor_case_3
                            by step( contradiction /* cyclic */ )
                          next
                            case coerce
                            step( solve( !KD( (~k⊕~r1⊕~r1.1) ) ▶₀ #vk.7 ) )
                              case acceptreader
                              by step( solve( (#vl.2, 0) ~~> (#vk.7, 0) ) )
                            next
                              case initiatereader
                              by step( contradiction /* impossible chain */ )
                            next
                              case tag1
                              step( solve( (#vl.2, 0) ~~> (#vk.7, 0) ) )
                                case d_0_fst
                                by step( contradiction /* impossible chain */ )
                              next
                                case d_0_snd
                                by step( solve( (#vr.8, 0) ~~> (#vk.7, 0) ) )
                              qed
                            qed
                          qed
                        next
                          case coerce
                          step( solve( !KD( (~k2⊕x⊕~r1.2) ) ▶₀ #vk.6 ) )
                            case acceptreader
                            by step( solve( (#vl.2, 0) ~~> (#vk.6, 0) ) )
                          next
                            case initiatereader
                            by step( contradiction /* impossible chain */ )
                          next
                            case tag1
                            step( solve( (#vl.2, 0) ~~> (#vk.6, 0) ) )
                              case d_0_fst
                              by step( contradiction /* impossible chain */ )
                            next
                              case d_0_snd
                              by step( solve( (#vr.8, 0) ~~> (#vk.6, 0) ) )
                            qed
                          qed
                        qed
                      next
                        case split_case_6
                        by step( solve( !KU( ~k ) @ #vk.8 ) )
                      next
                        case split_case_7
                        step( solve( !KU( (x⊕~r1.2) ) @ #vk.6 ) )
                          case c_xor
                          step( solve( !KU( (~k⊕~k2⊕~r1⊕~r1.1) ) @ #vk.7 ) )
                            case c_xor_case_1
                            by step( contradiction /* cyclic */ )
                          next
                            case c_xor_case_2
                            by step( solve( !KU( ~k2 ) @ #vk.11 ) )
                          next
                            case c_xor_case_3
                            step( solve( !KU( (~k⊕~r1.1) ) @ #vk.10 ) )
                              case c_xor
                              by step( contradiction /* cyclic */ )
                            next
                              case coerce
                              step( solve( !KD( (~k⊕~r1.1) ) ▶₀ #vk.8 ) )
                                case acceptreader
                                by step( solve( (#vl.2, 0) ~~> (#vk.8, 0) ) )
                              next
                                case initiatereader
                                by step( contradiction /* impossible chain */ )
                              next
                                case tag1
                                step( solve( (#vl.2, 0) ~~> (#vk.8, 0) ) )
                                  case d_0_fst
                                  by step( contradiction /* impossible chain */ )
                                next
                                  case d_0_snd
                                  by step( solve( (#vr.8, 0) ~~> (#vk.8, 0) ) )
                                qed
                              qed
                            qed
                          next
                            case c_xor_case_4
                            by step( solve( !KU( ~k ) @ #vk.11 ) )
                          next
                            case c_xor_case_5
                            step( solve( !KU( (~k2⊕~r1.1) ) @ #vk.10 ) )
                              case c_xor
                              by step( contradiction /* cyclic */ )
                            next
                              case coerce
                              step( solve( !KD( (~k2⊕~r1.1) ) ▶₀ #vk.8 ) )
                                case acceptreader
                                by step( solve( (#vl.2, 0) ~~> (#vk.8, 0) ) )
                              next
                                case initiatereader
                                by step( contradiction /* impossible chain */ )
                              next
                                case tag1
                                step( solve( (#vl.2, 0) ~~> (#vk.8, 0) ) )
                                  case d_0_fst
                                  by step( contradiction /* impossible chain */ )
                                next
                                  case d_0_snd
                                  by step( solve( (#vr.8, 0) ~~> (#vk.8, 0) ) )
                                qed
                              qed
                            qed
                          next
                            case c_xor_case_6
                            step( solve( !KU( (~r1⊕~r1.1) ) @ #vk.10 ) )
                              case c_xor
                              by step( contradiction /* cyclic */ )
                            next
                              case coerce
                              step( solve( !KD( (~r1⊕~r1.1) ) ▶₀ #vk.8 ) )
                                case acceptreader
                                by step( solve( (#vl.2, 0) ~~> (#vk.8, 0) ) )
                              next
                                case initiatereader
                                by step( contradiction /* impossible chain */ )
                              next
                                case tag1
                                step( solve( (#vl.2, 0) ~~> (#vk.8, 0) ) )
                                  case d_0_fst
                                  by step( contradiction /* impossible chain */ )
                                next
                                  case d_0_snd
                                  by step( solve( (#vr.8, 0) ~~> (#vk.8, 0) ) )
                                qed
                              qed
                            qed
                          next
                            case c_xor_case_7
                            by step( contradiction /* cyclic */ )
                          next
                            case coerce
                            step( solve( !KD( (~k⊕~k2⊕~r1⊕~r1.1) ) ▶₀ #vk.7 ) )
                              case acceptreader
                              by step( solve( (#vl.2, 0) ~~> (#vk.7, 0) ) )
                            next
                              case initiatereader
                              by step( contradiction /* impossible chain */ )
                            next
                              case tag1
                              step( solve( (#vl.2, 0) ~~> (#vk.7, 0) ) )
                                case d_0_fst
                                by step( contradiction /* impossible chain */ )
                              next
                                case d_0_snd
                                by step( solve( (#vr.8, 0) ~~> (#vk.7, 0) ) )
                              qed
                            qed
                          qed
                        next
                          case coerce
                          step( solve( !KD( (x⊕~r1.2) ) ▶₀ #vk.6 ) )
                            case acceptreader
                            by step( solve( (#vl.2, 0) ~~> (#vk.6, 0) ) )
                          next
                            case initiatereader
                            by step( contradiction /* impossible chain */ )
                          next
                            case tag1
                            step( solve( (#vl.2, 0) ~~> (#vk.6, 0) ) )
                              case d_0_fst
                              by step( contradiction /* impossible chain */ )
                            next
                              case d_0_snd
                              by step( solve( (#vr.8, 0) ~~> (#vk.6, 0) ) )
                            qed
                          qed
                        qed
                      qed
                    qed
                  next
                    case coerce
                    step( solve( !KD( (x.1⊕x.2) ) ▶₀ #vk.4 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.7, 0) ~~> (#vk.4, 0) ) )
                      qed
                    qed
                  qed
                qed
              next
                case coerce
                step( solve( !KD( (x⊕h((~k⊕~r1⊕x⊕~r1.1))) ) ▶₀ #vk.2 ) )
                  case acceptreader
                  by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                next
                  case initiatereader
                  by step( contradiction /* impossible chain */ )
                next
                  case tag1
                  step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                    case d_0_fst
                    by step( contradiction /* impossible chain */ )
                  next
                    case d_0_snd
                    by step( solve( (#vr.5, 0) ~~> (#vk.2, 0) ) )
                  qed
                qed
              qed
            next
              case coerce
              step( solve( !KD( (x⊕~r1.1) ) ▶₀ #vk.1 ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.5, 0) ~~> (#vk.1, 0) ) )
                qed
              qed
            qed
          qed
        next
          case split_case_4
          step( solve( !KU( (~r1.1⊕h((~k⊕~r1))) ) @ #vk.2 ) )
            case c_xor
            by step( contradiction /* cyclic */ )
          next
            case coerce
            step( solve( !KD( (~r1.1⊕h((~k⊕~r1))) ) ▶₀ #vk.1 ) )
              case acceptreader
              by step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
            next
              case initiatereader
              by step( contradiction /* impossible chain */ )
            next
              case tag1
              step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                case d_0_fst
                by step( contradiction /* impossible chain */ )
              next
                case d_0_snd
                by step( solve( (#vr.5, 0) ~~> (#vk.1, 0) ) )
              qed
            qed
          qed
        next
          case split_case_5
          step( solve( !KU( (~k⊕~r1) ) @ #vk.1 ) )
            case c_xor
            by step( contradiction /* cyclic */ )
          next
            case coerce
            step( solve( !KD( (~k⊕~r1) ) ▶₀ #vk.1 ) )
              case acceptreader
              by step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
            next
              case initiatereader
              by step( contradiction /* impossible chain */ )
            next
              case tag1
              step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                case d_0_fst
                by step( contradiction /* impossible chain */ )
              next
                case d_0_snd
                by step( solve( (#vr.5, 0) ~~> (#vk.1, 0) ) )
              qed
            qed
          qed
        next
          case split_case_6
          step( solve( !KU( (~r1⊕x) ) @ #vk.1 ) )
            case c_xor
            by step( contradiction /* cyclic */ )
          next
            case coerce
            step( solve( !KD( (~r1⊕x) ) ▶₀ #vk.1 ) )
              case acceptreader
              by step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
            next
              case initiatereader
              by step( contradiction /* impossible chain */ )
            next
              case tag1
              step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                case d_0_fst
                by step( contradiction /* impossible chain */ )
              next
                case d_0_snd
                by step( solve( (#vr.5, 0) ~~> (#vk.1, 0) ) )
              qed
            qed
          qed
        next
          case split_case_7
          step( solve( !KU( (~k⊕~r1⊕z) ) @ #vk.1 ) )
            case c_xor_case_1
            by step( contradiction /* cyclic */ )
          next
            case c_xor_case_2
            by step( solve( !KU( ~k ) @ #vk.4 ) )
          next
            case c_xor_case_3
            step( solve( !KU( (~x⊕x.1⊕x.2) ) @ #vk.2 ) )
              case c_xor_case_1
              step( solve( !KU( (~k⊕~r1) ) @ #vk.4 ) )
                case c_xor
                by step( contradiction /* cyclic */ )
              next
                case coerce
                step( solve( !KD( (~k⊕~r1) ) ▶₀ #vk.3 ) )
                  case acceptreader
                  by step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                next
                  case initiatereader
                  by step( contradiction /* impossible chain */ )
                next
                  case tag1
                  step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                    case d_0_fst
                    by step( contradiction /* impossible chain */ )
                  next
                    case d_0_snd
                    by step( solve( (#vr.5, 0) ~~> (#vk.3, 0) ) )
                  qed
                qed
              qed
            next
              case c_xor_case_2
              step( solve( !KU( ~x.2 ) @ #vk.6 ) )
                case fresh
                step( solve( !KU( (~k⊕~r1) ) @ #vk.5 ) )
                  case c_xor
                  by step( contradiction /* cyclic */ )
                next
                  case coerce
                  step( solve( !KD( (~k⊕~r1) ) ▶₀ #vk.4 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.4, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.4, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.5, 0) ~~> (#vk.4, 0) ) )
                    qed
                  qed
                qed
              next
                case tag1_case_1
                step( solve( !KU( (~k⊕~r1) ) @ #vk.5 ) )
                  case c_xor
                  by step( contradiction /* cyclic */ )
                next
                  case coerce
                  step( solve( !KD( (~k⊕~r1) ) ▶₀ #vk.4 ) )
                    case acceptreader
                    by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.7, 0) ~~> (#vk.4, 0) ) )
                    qed
                  qed
                qed
              next
                case tag1_case_2
                by step( contradiction /* cyclic */ )
              qed
            next
              case c_xor_case_3
              step( solve( !KU( (~k⊕~r1) ) @ #vk.4 ) )
                case c_xor
                by step( contradiction /* cyclic */ )
              next
                case coerce
                step( solve( !KD( (~k⊕~r1) ) ▶₀ #vk.3 ) )
                  case acceptreader
                  by step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                next
                  case initiatereader
                  by step( contradiction /* impossible chain */ )
                next
                  case tag1
                  step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                    case d_0_fst
                    by step( contradiction /* impossible chain */ )
                  next
                    case d_0_snd
                    by step( solve( (#vr.5, 0) ~~> (#vk.3, 0) ) )
                  qed
                qed
              qed
            next
              case coerce
              step( solve( !KD( (~x⊕x.1⊕x.2) ) ▶₀ #vk.2 ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.5, 0) ~~> (#vk.2, 0) ) )
                qed
              qed
            qed
          next
            case coerce
            step( solve( !KD( (~k⊕~r1⊕z) ) ▶₀ #vk.1 ) )
              case acceptreader
              by step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
            next
              case initiatereader
              by step( contradiction /* impossible chain */ )
            next
              case tag1
              step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                case d_0_fst
                by step( contradiction /* impossible chain */ )
              next
                case d_0_snd
                by step( solve( (#vr.5, 0) ~~> (#vk.1, 0) ) )
              qed
            qed
          qed
        next
          case split_case_8
          step( solve( !KU( (~k⊕x) ) @ #vk.1 ) )
            case c_xor
            by step( solve( !KU( ~k ) @ #vk.4 ) )
          next
            case coerce
            step( solve( !KD( (~k⊕x) ) ▶₀ #vk.1 ) )
              case acceptreader
              by step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
            next
              case initiatereader
              by step( contradiction /* impossible chain */ )
            next
              case tag1
              step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                case d_0_fst
                by step( contradiction /* impossible chain */ )
              next
                case d_0_snd
                by step( solve( (#vr.5, 0) ~~> (#vk.1, 0) ) )
              qed
            qed
          qed
        qed
      qed
    next
      case tag1_case_2
      step( solve( !KU( h(z) ) @ #vk ) )
        case c_h
        step( solve( splitEqs(0) ) )
          case split_case_1
          by step( solve( !KU( ~k ) @ #vk.1 ) )
        next
          case split_case_2
          by step( contradiction /* cyclic */ )
        next
          case split_case_3
          step( solve( !KU( (~k⊕h((~k⊕~r1))) ) @ #vk.2 ) )
            case c_xor
            by step( solve( !KU( ~k ) @ #vk.4 ) )
          next
            case coerce
            step( solve( !KD( (~k⊕h((~k⊕~r1))) ) ▶₀ #vk.1 ) )
              case acceptreader
              by step( solve( (#vl, 0) ~~> (#vk.1, 0) ) )
            next
              case initiatereader
              by step( contradiction /* impossible chain */ )
            next
              case tag1
              step( solve( (#vl, 0) ~~> (#vk.1, 0) ) )
                case d_0_fst
                by step( contradiction /* impossible chain */ )
              next
                case d_0_snd
                by step( solve( (#vr.3, 0) ~~> (#vk.1, 0) ) )
              qed
            qed
          qed
        next
          case split_case_4
          step( solve( !KU( (~k⊕~r1) ) @ #vk.1 ) )
            case c_xor
            by step( contradiction /* cyclic */ )
          next
            case coerce
            step( solve( !KD( (~k⊕~r1) ) ▶₀ #vk.1 ) )
              case acceptreader
              by step( solve( (#vl, 0) ~~> (#vk.1, 0) ) )
            next
              case initiatereader
              by step( contradiction /* impossible chain */ )
            next
              case tag1
              step( solve( (#vl, 0) ~~> (#vk.1, 0) ) )
                case d_0_fst
                by step( contradiction /* impossible chain */ )
              next
                case d_0_snd
                by step( solve( (#vr.3, 0) ~~> (#vk.1, 0) ) )
              qed
            qed
          qed
        next
          case split_case_5
          step( solve( !KU( (~k⊕r0⊕h((~k⊕~r1⊕r0))) ) @ #vk.2 ) )
            case c_xor_case_1
            step( solve( !KU( (~k⊕h((~k⊕~r1⊕r0))) ) @ #vk.3 ) )
              case c_xor
              by step( solve( !KU( ~k ) @ #vk.5 ) )
            next
              case coerce
              step( solve( !KD( (~k⊕h((~k⊕~r1⊕r0))) ) ▶₀ #vk.2 ) )
                case acceptreader
                by step( solve( (#vl, 0) ~~> (#vk.2, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl, 0) ~~> (#vk.2, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.3, 0) ~~> (#vk.2, 0) ) )
                qed
              qed
            qed
          next
            case c_xor_case_2
            by step( solve( !KU( ~k ) @ #vk.4 ) )
          next
            case c_xor_case_3
            step( solve( !KU( (~k⊕r0) ) @ #vk.4 ) )
              case c_xor
              by step( solve( !KU( ~k ) @ #vk.5 ) )
            next
              case coerce
              step( solve( !KD( (~k⊕r0) ) ▶₀ #vk.2 ) )
                case acceptreader
                by step( solve( (#vl, 0) ~~> (#vk.2, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl, 0) ~~> (#vk.2, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.3, 0) ~~> (#vk.2, 0) ) )
                qed
              qed
            qed
          next
            case coerce
            step( solve( !KD( (~k⊕r0⊕h((~k⊕~r1⊕r0))) ) ▶₀ #vk.1 ) )
              case acceptreader
              by step( solve( (#vl, 0) ~~> (#vk.1, 0) ) )
            next
              case initiatereader
              by step( contradiction /* impossible chain */ )
            next
              case tag1
              step( solve( (#vl, 0) ~~> (#vk.1, 0) ) )
                case d_0_fst
                by step( contradiction /* impossible chain */ )
              next
                case d_0_snd
                by step( solve( (#vr.3, 0) ~~> (#vk.1, 0) ) )
              qed
            qed
          qed
        next
          case split_case_6
          step( solve( !KU( (~r1⊕x) ) @ #vk.1 ) )
            case c_xor
            by step( contradiction /* cyclic */ )
          next
            case coerce
            step( solve( !KD( (~r1⊕x) ) ▶₀ #vk.1 ) )
              case acceptreader
              by step( solve( (#vl, 0) ~~> (#vk.1, 0) ) )
            next
              case initiatereader
              by step( contradiction /* impossible chain */ )
            next
              case tag1
              step( solve( (#vl, 0) ~~> (#vk.1, 0) ) )
                case d_0_fst
                by step( contradiction /* impossible chain */ )
              next
                case d_0_snd
                by step( solve( (#vr.3, 0) ~~> (#vk.1, 0) ) )
              qed
            qed
          qed
        next
          case split_case_7
          step( solve( !KU( (~k⊕~r1⊕z) ) @ #vk.1 ) )
            case c_xor_case_1
            by step( contradiction /* cyclic */ )
          next
            case c_xor_case_2
            by step( solve( !KU( ~k ) @ #vk.4 ) )
          next
            case c_xor_case_3
            step( solve( !KU( (~r1⊕z⊕h(z)) ) @ #vk.2 ) )
              case c_xor_case_1
              step( solve( !KU( (~k⊕~r1) ) @ #vk.4 ) )
                case c_xor
                by step( contradiction /* cyclic */ )
              next
                case coerce
                step( solve( !KD( (~k⊕~r1) ) ▶₀ #vk.3 ) )
                  case acceptreader
                  by step( solve( (#vl, 0) ~~> (#vk.3, 0) ) )
                next
                  case initiatereader
                  by step( contradiction /* impossible chain */ )
                next
                  case tag1
                  step( solve( (#vl, 0) ~~> (#vk.3, 0) ) )
                    case d_0_fst
                    by step( contradiction /* impossible chain */ )
                  next
                    case d_0_snd
                    by step( solve( (#vr.3, 0) ~~> (#vk.3, 0) ) )
                  qed
                qed
              qed
            next
              case c_xor_case_2
              step( solve( !KU( (~k⊕~r1) ) @ #vk.4 ) )
                case c_xor
                by step( contradiction /* cyclic */ )
              next
                case coerce
                step( solve( !KD( (~k⊕~r1) ) ▶₀ #vk.3 ) )
                  case acceptreader
                  by step( solve( (#vl, 0) ~~> (#vk.3, 0) ) )
                next
                  case initiatereader
                  by step( contradiction /* impossible chain */ )
                next
                  case tag1
                  step( solve( (#vl, 0) ~~> (#vk.3, 0) ) )
                    case d_0_fst
                    by step( contradiction /* impossible chain */ )
                  next
                    case d_0_snd
                    by step( solve( (#vr.3, 0) ~~> (#vk.3, 0) ) )
                  qed
                qed
              qed
            next
              case c_xor_case_3
              step( solve( !KU( (~k⊕~r1) ) @ #vk.4 ) )
                case c_xor
                by step( contradiction /* cyclic */ )
              next
                case coerce
                step( solve( !KD( (~k⊕~r1) ) ▶₀ #vk.3 ) )
                  case acceptreader
                  by step( solve( (#vl, 0) ~~> (#vk.3, 0) ) )
                next
                  case initiatereader
                  by step( contradiction /* impossible chain */ )
                next
                  case tag1
                  step( solve( (#vl, 0) ~~> (#vk.3, 0) ) )
                    case d_0_fst
                    by step( contradiction /* impossible chain */ )
                  next
                    case d_0_snd
                    by step( solve( (#vr.3, 0) ~~> (#vk.3, 0) ) )
                  qed
                qed
              qed
            next
              case coerce
              step( solve( !KD( (~r1⊕z⊕h(z)) ) ▶₀ #vk.2 ) )
                case acceptreader
                by step( solve( (#vl, 0) ~~> (#vk.2, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl, 0) ~~> (#vk.2, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.3, 0) ~~> (#vk.2, 0) ) )
                qed
              qed
            qed
          next
            case coerce
            step( solve( !KD( (~k⊕~r1⊕z) ) ▶₀ #vk.1 ) )
              case acceptreader
              by step( solve( (#vl, 0) ~~> (#vk.1, 0) ) )
            next
              case initiatereader
              by step( contradiction /* impossible chain */ )
            next
              case tag1
              step( solve( (#vl, 0) ~~> (#vk.1, 0) ) )
                case d_0_fst
                by step( contradiction /* impossible chain */ )
              next
                case d_0_snd
                by step( solve( (#vr.3, 0) ~~> (#vk.1, 0) ) )
              qed
            qed
          qed
        next
          case split_case_8
          step( solve( !KU( (~k⊕x) ) @ #vk.1 ) )
            case c_xor
            by step( solve( !KU( ~k ) @ #vk.4 ) )
          next
            case coerce
            step( solve( !KD( (~k⊕x) ) ▶₀ #vk.1 ) )
              case acceptreader
              by step( solve( (#vl, 0) ~~> (#vk.1, 0) ) )
            next
              case initiatereader
              by step( contradiction /* impossible chain */ )
            next
              case tag1
              step( solve( (#vl, 0) ~~> (#vk.1, 0) ) )
                case d_0_fst
                by step( contradiction /* impossible chain */ )
              next
                case d_0_snd
                by step( solve( (#vr.3, 0) ~~> (#vk.1, 0) ) )
              qed
            qed
          qed
        qed
      next
        case tag1_case_1
        step( solve( splitEqs(0) ) )
          case split_case_1
          by step( solve( !KU( ~k ) @ #vk.1 ) )
        next
          case split_case_2
          by step( contradiction /* cyclic */ )
        next
          case split_case_3
          step( solve( splitEqs(2) ) )
            case split_case_1
            by step( solve( !KU( ~k1 ) @ #vk.1 ) )
          next
            case split_case_2
            step( solve( !KU( (~k⊕~k1⊕h((~k⊕~r0⊕~r1))) ) @ #vk.2 ) )
              case c_xor_case_1
              by step( solve( !KU( ~k1 ) @ #vk.4 ) )
            next
              case c_xor_case_2
              by step( solve( !KU( ~k ) @ #vk.4 ) )
            next
              case c_xor_case_3
              step( solve( !KU( h((~k⊕~r0⊕~r1)) ) @ #vk.3 ) )
                case c_h
                step( solve( !KU( (~k⊕~k1) ) @ #vk.4 ) )
                  case c_xor
                  by step( solve( !KU( ~k1 ) @ #vk.6 ) )
                next
                  case coerce
                  step( solve( !KD( (~k⊕~k1) ) ▶₀ #vk.3 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.5, 0) ~~> (#vk.3, 0) ) )
                    qed
                  qed
                qed
              next
                case tag1_case_1
                by step( contradiction /* cyclic */ )
              next
                case tag1_case_2
                step( solve( !KU( (~k⊕~k1) ) @ #vk.4 ) )
                  case c_xor
                  by step( solve( !KU( ~k1 ) @ #vk.6 ) )
                next
                  case coerce
                  step( solve( !KD( (~k⊕~k1) ) ▶₀ #vk.3 ) )
                    case acceptreader
                    by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.7, 0) ~~> (#vk.3, 0) ) )
                    qed
                  qed
                qed
              qed
            next
              case coerce
              step( solve( !KD( (~k⊕~k1⊕h((~k⊕~r0⊕~r1))) ) ▶₀ #vk.1 ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.5, 0) ~~> (#vk.1, 0) ) )
                qed
              qed
            qed
          next
            case split_case_3
            step( solve( !KU( (~k1⊕~r1.1) ) @ #vk.1 ) )
              case c_xor
              by step( solve( !KU( ~k1 ) @ #vk.4 ) )
            next
              case coerce
              step( solve( !KD( (~k1⊕~r1.1) ) ▶₀ #vk.1 ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.5, 0) ~~> (#vk.1, 0) ) )
                qed
              qed
            qed
          next
            case split_case_4
            step( solve( !KU( (~k1⊕x⊕~r1.1) ) @ #vk.1 ) )
              case c_xor_case_1
              step( solve( !KU( (~k⊕x⊕h((~k⊕~k1⊕~r1⊕x⊕~r1.1))) ) @ #vk.2 ) )
                case c_xor_case_1
                step( solve( !KU( (~k1⊕~r1.1) ) @ #vk.3 ) )
                  case c_xor
                  by step( solve( !KU( ~k1 ) @ #vk.7 ) )
                next
                  case coerce
                  step( solve( !KD( (~k1⊕~r1.1) ) ▶₀ #vk.3 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.5, 0) ~~> (#vk.3, 0) ) )
                    qed
                  qed
                qed
              next
                case c_xor_case_2
                by step( solve( !KU( ~k ) @ #vk.6 ) )
              next
                case c_xor_case_3
                step( solve( !KU( (~k1⊕~r1.1) ) @ #vk.3 ) )
                  case c_xor
                  by step( solve( !KU( ~k1 ) @ #vk.8 ) )
                next
                  case coerce
                  step( solve( !KD( (~k1⊕~r1.1) ) ▶₀ #vk.3 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.5, 0) ~~> (#vk.3, 0) ) )
                    qed
                  qed
                qed
              next
                case coerce
                step( solve( !KD( (~k⊕x⊕h((~k⊕~k1⊕~r1⊕x⊕~r1.1))) ) ▶₀ #vk.2 ) )
                  case acceptreader
                  by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                next
                  case initiatereader
                  by step( contradiction /* impossible chain */ )
                next
                  case tag1
                  step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                    case d_0_fst
                    by step( contradiction /* impossible chain */ )
                  next
                    case d_0_snd
                    by step( solve( (#vr.5, 0) ~~> (#vk.2, 0) ) )
                  qed
                qed
              qed
            next
              case c_xor_case_2
              by step( solve( !KU( ~k1 ) @ #vk.4 ) )
            next
              case c_xor_case_3
              step( solve( !KU( (~k⊕x⊕h((~k⊕~k1⊕~r1⊕x⊕~r1.1))) ) @ #vk.2 ) )
                case c_xor_case_1
                step( solve( !KU( (~k1⊕x) ) @ #vk.4 ) )
                  case c_xor
                  by step( solve( !KU( ~k1 ) @ #vk.7 ) )
                next
                  case coerce
                  step( solve( !KD( (~k1⊕x) ) ▶₀ #vk.3 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.5, 0) ~~> (#vk.3, 0) ) )
                    qed
                  qed
                qed
              next
                case c_xor_case_2
                by step( solve( !KU( ~k ) @ #vk.6 ) )
              next
                case c_xor_case_3
                step( solve( !KU( (~k1⊕x) ) @ #vk.4 ) )
                  case c_xor
                  by step( solve( !KU( ~k1 ) @ #vk.8 ) )
                next
                  case coerce
                  step( solve( !KD( (~k1⊕x) ) ▶₀ #vk.3 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.5, 0) ~~> (#vk.3, 0) ) )
                    qed
                  qed
                qed
              next
                case coerce
                step( solve( !KD( (~k⊕x⊕h((~k⊕~k1⊕~r1⊕x⊕~r1.1))) ) ▶₀ #vk.2 ) )
                  case acceptreader
                  by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                next
                  case initiatereader
                  by step( contradiction /* impossible chain */ )
                next
                  case tag1
                  step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                    case d_0_fst
                    by step( contradiction /* impossible chain */ )
                  next
                    case d_0_snd
                    by step( solve( (#vr.5, 0) ~~> (#vk.2, 0) ) )
                  qed
                qed
              qed
            next
              case coerce
              step( solve( !KD( (~k1⊕x⊕~r1.1) ) ▶₀ #vk.1 ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.5, 0) ~~> (#vk.1, 0) ) )
                qed
              qed
            qed
          next
            case split_case_5
            step( solve( !KU( (~k1⊕x) ) @ #vk.1 ) )
              case c_xor
              by step( solve( !KU( ~k1 ) @ #vk.4 ) )
            next
              case coerce
              step( solve( !KD( (~k1⊕x) ) ▶₀ #vk.1 ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.5, 0) ~~> (#vk.1, 0) ) )
                qed
              qed
            qed
          next
            case split_case_6
            step( solve( !KU( (x⊕~r1.1) ) @ #vk.1 ) )
              case c_xor
              step( solve( !KU( (~k⊕~k1⊕x⊕h((~k⊕~r1⊕x⊕~r1.1))) ) @ #vk.2 ) )
                case c_xor_case_1
                step( solve( !KU( (~k⊕~k1⊕h((~k⊕~r1⊕x⊕~r1.1))) ) @ #vk.5 ) )
                  case c_xor_case_1
                  by step( solve( !KU( ~k1 ) @ #vk.7 ) )
                next
                  case c_xor_case_2
                  by step( solve( !KU( ~k ) @ #vk.7 ) )
                next
                  case c_xor_case_3
                  step( solve( !KU( h((~k⊕~r1⊕x⊕~r1.1)) ) @ #vk.6 ) )
                    case c_h
                    step( solve( !KU( (~k⊕~k1) ) @ #vk.7 ) )
                      case c_xor
                      by step( solve( !KU( ~k1 ) @ #vk.9 ) )
                    next
                      case coerce
                      step( solve( !KD( (~k⊕~k1) ) ▶₀ #vk.5 ) )
                        case acceptreader
                        by step( solve( (#vl.1, 0) ~~> (#vk.5, 0) ) )
                      next
                        case initiatereader
                        by step( contradiction /* impossible chain */ )
                      next
                        case tag1
                        step( solve( (#vl.1, 0) ~~> (#vk.5, 0) ) )
                          case d_0_fst
                          by step( contradiction /* impossible chain */ )
                        next
                          case d_0_snd
                          by step( solve( (#vr.5, 0) ~~> (#vk.5, 0) ) )
                        qed
                      qed
                    qed
                  next
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    step( solve( !KU( (~k⊕~k1) ) @ #vk.7 ) )
                      case c_xor
                      by step( solve( !KU( ~k1 ) @ #vk.9 ) )
                    next
                      case coerce
                      step( solve( !KD( (~k⊕~k1) ) ▶₀ #vk.5 ) )
                        case acceptreader
                        by step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                      next
                        case initiatereader
                        by step( contradiction /* impossible chain */ )
                      next
                        case tag1
                        step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                          case d_0_fst
                          by step( contradiction /* impossible chain */ )
                        next
                          case d_0_snd
                          by step( solve( (#vr.7, 0) ~~> (#vk.5, 0) ) )
                        qed
                      qed
                    qed
                  qed
                next
                  case coerce
                  step( solve( !KD( (~k⊕~k1⊕h((~k⊕~r1⊕x⊕~r1.1))) ) ▶₀ #vk.3 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.5, 0) ~~> (#vk.3, 0) ) )
                    qed
                  qed
                qed
              next
                case c_xor_case_2
                by step( solve( !KU( ~k1 ) @ #vk.6 ) )
              next
                case c_xor_case_3
                step( solve( !KU( (~k⊕h((~k⊕~r1⊕x⊕~r1.1))) ) @ #vk.5 ) )
                  case c_xor
                  by step( solve( !KU( ~k ) @ #vk.8 ) )
                next
                  case coerce
                  step( solve( !KD( (~k⊕h((~k⊕~r1⊕x⊕~r1.1))) ) ▶₀ #vk.3 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.5, 0) ~~> (#vk.3, 0) ) )
                    qed
                  qed
                qed
              next
                case c_xor_case_4
                by step( solve( !KU( ~k ) @ #vk.6 ) )
              next
                case c_xor_case_5
                step( solve( !KU( (~k1⊕h((~k⊕~r1⊕x⊕~r1.1))) ) @ #vk.5 ) )
                  case c_xor
                  by step( solve( !KU( ~k1 ) @ #vk.8 ) )
                next
                  case coerce
                  step( solve( !KD( (~k1⊕h((~k⊕~r1⊕x⊕~r1.1))) ) ▶₀ #vk.3 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.5, 0) ~~> (#vk.3, 0) ) )
                    qed
                  qed
                qed
              next
                case c_xor_case_6
                step( solve( !KU( (x⊕h((~k⊕~r1⊕x⊕~r1.1))) ) @ #vk.5 ) )
                  case c_xor
                  step( solve( !KU( (~k⊕~k1) ) @ #vk.6 ) )
                    case c_xor
                    by step( solve( !KU( ~k1 ) @ #vk.8 ) )
                  next
                    case coerce
                    step( solve( !KD( (~k⊕~k1) ) ▶₀ #vk.4 ) )
                      case acceptreader
                      by step( solve( (#vl.1, 0) ~~> (#vk.4, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.1, 0) ~~> (#vk.4, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.5, 0) ~~> (#vk.4, 0) ) )
                      qed
                    qed
                  qed
                next
                  case coerce
                  step( solve( !KD( (x⊕h((~k⊕~r1⊕x⊕~r1.1))) ) ▶₀ #vk.3 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.5, 0) ~~> (#vk.3, 0) ) )
                    qed
                  qed
                qed
              next
                case c_xor_case_7
                step( solve( !KU( h((~k⊕~r1⊕x⊕~r1.1)) ) @ #vk.5 ) )
                  case c_h
                  step( solve( !KU( (~k⊕~k1⊕x) ) @ #vk.6 ) )
                    case c_xor_case_1
                    by step( solve( !KU( ~k1 ) @ #vk.9 ) )
                  next
                    case c_xor_case_2
                    by step( solve( !KU( ~k ) @ #vk.9 ) )
                  next
                    case c_xor_case_3
                    step( solve( !KU( (~k⊕~r1⊕x⊕~r1.1) ) @ #vk.7 ) )
                      case c_xor_case_1
                      step( solve( !KU( (~k⊕~k1) ) @ #vk.8 ) )
                        case c_xor
                        by step( solve( !KU( ~k1 ) @ #vk.10 ) )
                      next
                        case coerce
                        step( solve( !KD( (~k⊕~k1) ) ▶₀ #vk.6 ) )
                          case acceptreader
                          by step( solve( (#vl.1, 0) ~~> (#vk.6, 0) ) )
                        next
                          case initiatereader
                          by step( contradiction /* impossible chain */ )
                        next
                          case tag1
                          step( solve( (#vl.1, 0) ~~> (#vk.6, 0) ) )
                            case d_0_fst
                            by step( contradiction /* impossible chain */ )
                          next
                            case d_0_snd
                            by step( solve( (#vr.5, 0) ~~> (#vk.6, 0) ) )
                          qed
                        qed
                      qed
                    next
                      case c_xor_case_2
                      by step( contradiction /* cyclic */ )
                    next
                      case c_xor_case_3
                      step( solve( !KU( (~k⊕~k1) ) @ #vk.8 ) )
                        case c_xor
                        by step( solve( !KU( ~k1 ) @ #vk.11 ) )
                      next
                        case coerce
                        step( solve( !KD( (~k⊕~k1) ) ▶₀ #vk.6 ) )
                          case acceptreader
                          by step( solve( (#vl.1, 0) ~~> (#vk.6, 0) ) )
                        next
                          case initiatereader
                          by step( contradiction /* impossible chain */ )
                        next
                          case tag1
                          step( solve( (#vl.1, 0) ~~> (#vk.6, 0) ) )
                            case d_0_fst
                            by step( contradiction /* impossible chain */ )
                          next
                            case d_0_snd
                            by step( solve( (#vr.5, 0) ~~> (#vk.6, 0) ) )
                          qed
                        qed
                      qed
                    next
                      case c_xor_case_4
                      by step( solve( !KU( ~k ) @ #vk.10 ) )
                    next
                      case c_xor_case_5
                      step( solve( !KU( (~k⊕~k1) ) @ #vk.8 ) )
                        case c_xor
                        by step( solve( !KU( ~k1 ) @ #vk.11 ) )
                      next
                        case coerce
                        step( solve( !KD( (~k⊕~k1) ) ▶₀ #vk.6 ) )
                          case acceptreader
                          by step( solve( (#vl.1, 0) ~~> (#vk.6, 0) ) )
                        next
                          case initiatereader
                          by step( contradiction /* impossible chain */ )
                        next
                          case tag1
                          step( solve( (#vl.1, 0) ~~> (#vk.6, 0) ) )
                            case d_0_fst
                            by step( contradiction /* impossible chain */ )
                          next
                            case d_0_snd
                            by step( solve( (#vr.5, 0) ~~> (#vk.6, 0) ) )
                          qed
                        qed
                      qed
                    next
                      case c_xor_case_6
                      by step( contradiction /* cyclic */ )
                    next
                      case c_xor_case_7
                      by step( contradiction /* cyclic */ )
                    next
                      case coerce
                      step( solve( !KD( (~k⊕~r1⊕x⊕~r1.1) ) ▶₀ #vk.5 ) )
                        case acceptreader
                        by step( solve( (#vl.1, 0) ~~> (#vk.5, 0) ) )
                      next
                        case initiatereader
                        by step( contradiction /* impossible chain */ )
                      next
                        case tag1
                        step( solve( (#vl.1, 0) ~~> (#vk.5, 0) ) )
                          case d_0_fst
                          by step( contradiction /* impossible chain */ )
                        next
                          case d_0_snd
                          by step( solve( (#vr.5, 0) ~~> (#vk.5, 0) ) )
                        qed
                      qed
                    qed
                  next
                    case coerce
                    step( solve( !KD( (~k⊕~k1⊕x) ) ▶₀ #vk.4 ) )
                      case acceptreader
                      by step( solve( (#vl.1, 0) ~~> (#vk.4, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.1, 0) ~~> (#vk.4, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.5, 0) ~~> (#vk.4, 0) ) )
                      qed
                    qed
                  qed
                next
                  case tag1_case_1
                  by step( contradiction /* cyclic */ )
                next
                  case tag1_case_2
                  step( solve( !KU( (~k⊕~k1⊕x) ) @ #vk.6 ) )
                    case c_xor_case_1
                    by step( solve( !KU( ~k1 ) @ #vk.9 ) )
                  next
                    case c_xor_case_2
                    by step( solve( !KU( ~k ) @ #vk.9 ) )
                  next
                    case c_xor_case_3
                    step( solve( !KU( (~k⊕~k1) ) @ #vk.8 ) )
                      case c_xor
                      by step( solve( !KU( ~k1 ) @ #vk.9 ) )
                    next
                      case coerce
                      step( solve( !KD( (~k⊕~k1) ) ▶₀ #vk.5 ) )
                        case acceptreader
                        by step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                      next
                        case initiatereader
                        by step( contradiction /* impossible chain */ )
                      next
                        case tag1
                        step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                          case d_0_fst
                          by step( contradiction /* impossible chain */ )
                        next
                          case d_0_snd
                          by step( solve( (#vr.7, 0) ~~> (#vk.5, 0) ) )
                        qed
                      qed
                    qed
                  next
                    case coerce
                    step( solve( !KD( (~k⊕~k1⊕x) ) ▶₀ #vk.4 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.7, 0) ~~> (#vk.4, 0) ) )
                      qed
                    qed
                  qed
                qed
              next
                case coerce
                step( solve( !KD( (~k⊕~k1⊕x⊕h((~k⊕~r1⊕x⊕~r1.1))) ) ▶₀ #vk.2 ) )
                  case acceptreader
                  by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                next
                  case initiatereader
                  by step( contradiction /* impossible chain */ )
                next
                  case tag1
                  step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                    case d_0_fst
                    by step( contradiction /* impossible chain */ )
                  next
                    case d_0_snd
                    by step( solve( (#vr.5, 0) ~~> (#vk.2, 0) ) )
                  qed
                qed
              qed
            next
              case coerce
              step( solve( !KD( (x⊕~r1.1) ) ▶₀ #vk.1 ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.5, 0) ~~> (#vk.1, 0) ) )
                qed
              qed
            qed
          next
            case split_case_7
            step( solve( !KU( (~k⊕~k1⊕r0⊕~r1.1⊕h((~k⊕~r1⊕r0))) ) @ #vk.2 ) )
              case c_xor_case_01
              by step( contradiction /* cyclic */ )
            next
              case c_xor_case_02
              step( solve( !KU( (~k⊕~k1⊕~r1.1⊕h((~k⊕~r1⊕r0))) ) @ #vk.3 ) )
                case c_xor_case_1
                by step( contradiction /* cyclic */ )
              next
                case c_xor_case_2
                by step( solve( !KU( ~k1 ) @ #vk.5 ) )
              next
                case c_xor_case_3
                step( solve( !KU( (~k⊕h((~k⊕~r1⊕r0))) ) @ #vk.4 ) )
                  case c_xor
                  by step( solve( !KU( ~k ) @ #vk.7 ) )
                next
                  case coerce
                  step( solve( !KD( (~k⊕h((~k⊕~r1⊕r0))) ) ▶₀ #vk.3 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.5, 0) ~~> (#vk.3, 0) ) )
                    qed
                  qed
                qed
              next
                case c_xor_case_4
                by step( solve( !KU( ~k ) @ #vk.5 ) )
              next
                case c_xor_case_5
                step( solve( !KU( (~k1⊕h((~k⊕~r1⊕r0))) ) @ #vk.4 ) )
                  case c_xor
                  by step( solve( !KU( ~k1 ) @ #vk.7 ) )
                next
                  case coerce
                  step( solve( !KD( (~k1⊕h((~k⊕~r1⊕r0))) ) ▶₀ #vk.3 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.5, 0) ~~> (#vk.3, 0) ) )
                    qed
                  qed
                qed
              next
                case c_xor_case_6
                step( solve( !KU( (~r1.1⊕h((~k⊕~r1⊕r0))) ) @ #vk.4 ) )
                  case c_xor
                  by step( contradiction /* cyclic */ )
                next
                  case coerce
                  step( solve( !KD( (~r1.1⊕h((~k⊕~r1⊕r0))) ) ▶₀ #vk.3 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.5, 0) ~~> (#vk.3, 0) ) )
                    qed
                  qed
                qed
              next
                case c_xor_case_7
                step( solve( !KU( (~k⊕~k1⊕~r1.1) ) @ #vk.5 ) )
                  case c_xor_case_1
                  by step( solve( !KU( ~k1 ) @ #vk.7 ) )
                next
                  case c_xor_case_2
                  by step( solve( !KU( ~k ) @ #vk.7 ) )
                next
                  case c_xor_case_3
                  by step( contradiction /* cyclic */ )
                next
                  case coerce
                  step( solve( !KD( (~k⊕~k1⊕~r1.1) ) ▶₀ #vk.3 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.5, 0) ~~> (#vk.3, 0) ) )
                    qed
                  qed
                qed
              next
                case coerce
                step( solve( !KD( (~k⊕~k1⊕~r1.1⊕h((~k⊕~r1⊕r0))) ) ▶₀ #vk.2 ) )
                  case acceptreader
                  by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                next
                  case initiatereader
                  by step( contradiction /* impossible chain */ )
                next
                  case tag1
                  step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                    case d_0_fst
                    by step( contradiction /* impossible chain */ )
                  next
                    case d_0_snd
                    by step( solve( (#vr.5, 0) ~~> (#vk.2, 0) ) )
                  qed
                qed
              qed
            next
              case c_xor_case_03
              step( solve( !KU( (~k⊕~k1⊕h((~k⊕~r1⊕r0))) ) @ #vk.3 ) )
                case c_xor_case_1
                by step( solve( !KU( ~k1 ) @ #vk.6 ) )
              next
                case c_xor_case_2
                by step( solve( !KU( ~k ) @ #vk.6 ) )
              next
                case c_xor_case_3
                step( solve( !KU( (r0⊕~r1.1) ) @ #vk.4 ) )
                  case c_xor
                  by step( contradiction /* cyclic */ )
                next
                  case coerce
                  step( solve( !KD( (r0⊕~r1.1) ) ▶₀ #vk.3 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.5, 0) ~~> (#vk.3, 0) ) )
                    qed
                  qed
                qed
              next
                case coerce
                step( solve( !KD( (~k⊕~k1⊕h((~k⊕~r1⊕r0))) ) ▶₀ #vk.2 ) )
                  case acceptreader
                  by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                next
                  case initiatereader
                  by step( contradiction /* impossible chain */ )
                next
                  case tag1
                  step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                    case d_0_fst
                    by step( contradiction /* impossible chain */ )
                  next
                    case d_0_snd
                    by step( solve( (#vr.5, 0) ~~> (#vk.2, 0) ) )
                  qed
                qed
              qed
            next
              case c_xor_case_04
              by step( solve( !KU( ~k1 ) @ #vk.4 ) )
            next
              case c_xor_case_05
              step( solve( !KU( (~k⊕r0⊕h((~k⊕~r1⊕r0))) ) @ #vk.3 ) )
                case c_xor_case_1
                step( solve( !KU( (~k1⊕~r1.1) ) @ #vk.4 ) )
                  case c_xor
                  by step( contradiction /* cyclic */ )
                next
                  case coerce
                  step( solve( !KD( (~k1⊕~r1.1) ) ▶₀ #vk.3 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.5, 0) ~~> (#vk.3, 0) ) )
                    qed
                  qed
                qed
              next
                case c_xor_case_2
                by step( solve( !KU( ~k ) @ #vk.6 ) )
              next
                case c_xor_case_3
                step( solve( !KU( (~k1⊕~r1.1) ) @ #vk.4 ) )
                  case c_xor
                  by step( contradiction /* cyclic */ )
                next
                  case coerce
                  step( solve( !KD( (~k1⊕~r1.1) ) ▶₀ #vk.3 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.5, 0) ~~> (#vk.3, 0) ) )
                    qed
                  qed
                qed
              next
                case coerce
                step( solve( !KD( (~k⊕r0⊕h((~k⊕~r1⊕r0))) ) ▶₀ #vk.2 ) )
                  case acceptreader
                  by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                next
                  case initiatereader
                  by step( contradiction /* impossible chain */ )
                next
                  case tag1
                  step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                    case d_0_fst
                    by step( contradiction /* impossible chain */ )
                  next
                    case d_0_snd
                    by step( solve( (#vr.5, 0) ~~> (#vk.2, 0) ) )
                  qed
                qed
              qed
            next
              case c_xor_case_06
              step( solve( !KU( (~k⊕~r1.1⊕h((~k⊕~r1⊕r0))) ) @ #vk.3 ) )
                case c_xor_case_1
                by step( contradiction /* cyclic */ )
              next
                case c_xor_case_2
                by step( solve( !KU( ~k ) @ #vk.6 ) )
              next
                case c_xor_case_3
                step( solve( !KU( (~k1⊕r0) ) @ #vk.4 ) )
                  case c_xor
                  by step( solve( !KU( ~k1 ) @ #vk.7 ) )
                next
                  case coerce
                  step( solve( !KD( (~k1⊕r0) ) ▶₀ #vk.3 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.5, 0) ~~> (#vk.3, 0) ) )
                    qed
                  qed
                qed
              next
                case coerce
                step( solve( !KD( (~k⊕~r1.1⊕h((~k⊕~r1⊕r0))) ) ▶₀ #vk.2 ) )
                  case acceptreader
                  by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                next
                  case initiatereader
                  by step( contradiction /* impossible chain */ )
                next
                  case tag1
                  step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                    case d_0_fst
                    by step( contradiction /* impossible chain */ )
                  next
                    case d_0_snd
                    by step( solve( (#vr.5, 0) ~~> (#vk.2, 0) ) )
                  qed
                qed
              qed
            next
              case c_xor_case_07
              step( solve( !KU( (~k⊕h((~k⊕~r1⊕r0))) ) @ #vk.3 ) )
                case c_xor
                by step( solve( !KU( ~k ) @ #vk.6 ) )
              next
                case coerce
                step( solve( !KD( (~k⊕h((~k⊕~r1⊕r0))) ) ▶₀ #vk.2 ) )
                  case acceptreader
                  by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                next
                  case initiatereader
                  by step( contradiction /* impossible chain */ )
                next
                  case tag1
                  step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                    case d_0_fst
                    by step( contradiction /* impossible chain */ )
                  next
                    case d_0_snd
                    by step( solve( (#vr.5, 0) ~~> (#vk.2, 0) ) )
                  qed
                qed
              qed
            next
              case c_xor_case_08
              by step( solve( !KU( ~k ) @ #vk.4 ) )
            next
              case c_xor_case_09
              step( solve( !KU( (~k1⊕r0⊕h((~k⊕~r1⊕r0))) ) @ #vk.3 ) )
                case c_xor_case_1
                step( solve( !KU( (~k⊕~r1.1) ) @ #vk.4 ) )
                  case c_xor
                  by step( contradiction /* cyclic */ )
                next
                  case coerce
                  step( solve( !KD( (~k⊕~r1.1) ) ▶₀ #vk.3 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.5, 0) ~~> (#vk.3, 0) ) )
                    qed
                  qed
                qed
              next
                case c_xor_case_2
                by step( solve( !KU( ~k1 ) @ #vk.6 ) )
              next
                case c_xor_case_3
                step( solve( !KU( (~k⊕~r1.1) ) @ #vk.4 ) )
                  case c_xor
                  by step( contradiction /* cyclic */ )
                next
                  case coerce
                  step( solve( !KD( (~k⊕~r1.1) ) ▶₀ #vk.3 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.5, 0) ~~> (#vk.3, 0) ) )
                    qed
                  qed
                qed
              next
                case coerce
                step( solve( !KD( (~k1⊕r0⊕h((~k⊕~r1⊕r0))) ) ▶₀ #vk.2 ) )
                  case acceptreader
                  by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                next
                  case initiatereader
                  by step( contradiction /* impossible chain */ )
                next
                  case tag1
                  step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                    case d_0_fst
                    by step( contradiction /* impossible chain */ )
                  next
                    case d_0_snd
                    by step( solve( (#vr.5, 0) ~~> (#vk.2, 0) ) )
                  qed
                qed
              qed
            next
              case c_xor_case_10
              step( solve( !KU( (~k1⊕~r1.1⊕h((~k⊕~r1⊕r0))) ) @ #vk.3 ) )
                case c_xor_case_1
                by step( contradiction /* cyclic */ )
              next
                case c_xor_case_2
                by step( solve( !KU( ~k1 ) @ #vk.6 ) )
              next
                case c_xor_case_3
                step( solve( !KU( (~k⊕r0) ) @ #vk.4 ) )
                  case c_xor
                  by step( solve( !KU( ~k ) @ #vk.7 ) )
                next
                  case coerce
                  step( solve( !KD( (~k⊕r0) ) ▶₀ #vk.3 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.5, 0) ~~> (#vk.3, 0) ) )
                    qed
                  qed
                qed
              next
                case coerce
                step( solve( !KD( (~k1⊕~r1.1⊕h((~k⊕~r1⊕r0))) ) ▶₀ #vk.2 ) )
                  case acceptreader
                  by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                next
                  case initiatereader
                  by step( contradiction /* impossible chain */ )
                next
                  case tag1
                  step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                    case d_0_fst
                    by step( contradiction /* impossible chain */ )
                  next
                    case d_0_snd
                    by step( solve( (#vr.5, 0) ~~> (#vk.2, 0) ) )
                  qed
                qed
              qed
            next
              case c_xor_case_11
              step( solve( !KU( (~k1⊕h((~k⊕~r1⊕r0))) ) @ #vk.3 ) )
                case c_xor
                by step( solve( !KU( ~k1 ) @ #vk.6 ) )
              next
                case coerce
                step( solve( !KD( (~k1⊕h((~k⊕~r1⊕r0))) ) ▶₀ #vk.2 ) )
                  case acceptreader
                  by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                next
                  case initiatereader
                  by step( contradiction /* impossible chain */ )
                next
                  case tag1
                  step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                    case d_0_fst
                    by step( contradiction /* impossible chain */ )
                  next
                    case d_0_snd
                    by step( solve( (#vr.5, 0) ~~> (#vk.2, 0) ) )
                  qed
                qed
              qed
            next
              case c_xor_case_12
              step( solve( !KU( (r0⊕~r1.1⊕h((~k⊕~r1⊕r0))) ) @ #vk.3 ) )
                case c_xor_case_1
                by step( contradiction /* cyclic */ )
              next
                case c_xor_case_2
                step( solve( !KU( (~k⊕~k1) ) @ #vk.4 ) )
                  case c_xor
                  by step( solve( !KU( ~k1 ) @ #vk.6 ) )
                next
                  case coerce
                  step( solve( !KD( (~k⊕~k1) ) ▶₀ #vk.3 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.5, 0) ~~> (#vk.3, 0) ) )
                    qed
                  qed
                qed
              next
                case c_xor_case_3
                step( solve( !KU( (~k⊕~k1) ) @ #vk.4 ) )
                  case c_xor
                  by step( solve( !KU( ~k1 ) @ #vk.7 ) )
                next
                  case coerce
                  step( solve( !KD( (~k⊕~k1) ) ▶₀ #vk.3 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.5, 0) ~~> (#vk.3, 0) ) )
                    qed
                  qed
                qed
              next
                case coerce
                step( solve( !KD( (r0⊕~r1.1⊕h((~k⊕~r1⊕r0))) ) ▶₀ #vk.2 ) )
                  case acceptreader
                  by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                next
                  case initiatereader
                  by step( contradiction /* impossible chain */ )
                next
                  case tag1
                  step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                    case d_0_fst
                    by step( contradiction /* impossible chain */ )
                  next
                    case d_0_snd
                    by step( solve( (#vr.5, 0) ~~> (#vk.2, 0) ) )
                  qed
                qed
              qed
            next
              case c_xor_case_13
              step( solve( !KU( (r0⊕h((~k⊕~r1⊕r0))) ) @ #vk.3 ) )
                case c_xor
                step( solve( !KU( (~k⊕~k1⊕~r1.1) ) @ #vk.4 ) )
                  case c_xor_case_1
                  by step( solve( !KU( ~k1 ) @ #vk.7 ) )
                next
                  case c_xor_case_2
                  by step( solve( !KU( ~k ) @ #vk.7 ) )
                next
                  case c_xor_case_3
                  by step( contradiction /* cyclic */ )
                next
                  case coerce
                  step( solve( !KD( (~k⊕~k1⊕~r1.1) ) ▶₀ #vk.3 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.5, 0) ~~> (#vk.3, 0) ) )
                    qed
                  qed
                qed
              next
                case coerce
                step( solve( !KD( (r0⊕h((~k⊕~r1⊕r0))) ) ▶₀ #vk.2 ) )
                  case acceptreader
                  by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                next
                  case initiatereader
                  by step( contradiction /* impossible chain */ )
                next
                  case tag1
                  step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                    case d_0_fst
                    by step( contradiction /* impossible chain */ )
                  next
                    case d_0_snd
                    by step( solve( (#vr.5, 0) ~~> (#vk.2, 0) ) )
                  qed
                qed
              qed
            next
              case c_xor_case_14
              step( solve( !KU( (~r1.1⊕h((~k⊕~r1⊕r0))) ) @ #vk.3 ) )
                case c_xor
                by step( contradiction /* cyclic */ )
              next
                case coerce
                step( solve( !KD( (~r1.1⊕h((~k⊕~r1⊕r0))) ) ▶₀ #vk.2 ) )
                  case acceptreader
                  by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                next
                  case initiatereader
                  by step( contradiction /* impossible chain */ )
                next
                  case tag1
                  step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                    case d_0_fst
                    by step( contradiction /* impossible chain */ )
                  next
                    case d_0_snd
                    by step( solve( (#vr.5, 0) ~~> (#vk.2, 0) ) )
                  qed
                qed
              qed
            next
              case c_xor_case_15
              step( solve( !KU( (~k⊕~k1⊕r0⊕~r1.1) ) @ #vk.4 ) )
                case c_xor_case_1
                step( solve( !KU( (~k⊕~k1⊕~r1.1) ) @ #vk.5 ) )
                  case c_xor_case_1
                  by step( solve( !KU( ~k1 ) @ #vk.7 ) )
                next
                  case c_xor_case_2
                  by step( solve( !KU( ~k ) @ #vk.7 ) )
                next
                  case c_xor_case_3
                  by step( contradiction /* cyclic */ )
                next
                  case coerce
                  step( solve( !KD( (~k⊕~k1⊕~r1.1) ) ▶₀ #vk.3 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.5, 0) ~~> (#vk.3, 0) ) )
                    qed
                  qed
                qed
              next
                case c_xor_case_2
                by step( solve( !KU( ~k1 ) @ #vk.6 ) )
              next
                case c_xor_case_3
                step( solve( !KU( (~k⊕~r1.1) ) @ #vk.5 ) )
                  case c_xor
                  by step( contradiction /* cyclic */ )
                next
                  case coerce
                  step( solve( !KD( (~k⊕~r1.1) ) ▶₀ #vk.3 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.5, 0) ~~> (#vk.3, 0) ) )
                    qed
                  qed
                qed
              next
                case c_xor_case_4
                by step( solve( !KU( ~k ) @ #vk.6 ) )
              next
                case c_xor_case_5
                step( solve( !KU( (~k1⊕~r1.1) ) @ #vk.5 ) )
                  case c_xor
                  by step( contradiction /* cyclic */ )
                next
                  case coerce
                  step( solve( !KD( (~k1⊕~r1.1) ) ▶₀ #vk.3 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.5, 0) ~~> (#vk.3, 0) ) )
                    qed
                  qed
                qed
              next
                case c_xor_case_6
                step( solve( !KU( (r0⊕~r1.1) ) @ #vk.5 ) )
                  case c_xor
                  by step( contradiction /* cyclic */ )
                next
                  case coerce
                  step( solve( !KD( (r0⊕~r1.1) ) ▶₀ #vk.3 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.5, 0) ~~> (#vk.3, 0) ) )
                    qed
                  qed
                qed
              next
                case c_xor_case_7
                by step( contradiction /* cyclic */ )
              next
                case coerce
                step( solve( !KD( (~k⊕~k1⊕r0⊕~r1.1) ) ▶₀ #vk.2 ) )
                  case acceptreader
                  by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                next
                  case initiatereader
                  by step( contradiction /* impossible chain */ )
                next
                  case tag1
                  step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                    case d_0_fst
                    by step( contradiction /* impossible chain */ )
                  next
                    case d_0_snd
                    by step( solve( (#vr.5, 0) ~~> (#vk.2, 0) ) )
                  qed
                qed
              qed
            next
              case coerce
              step( solve( !KD( (~k⊕~k1⊕r0⊕~r1.1⊕h((~k⊕~r1⊕r0))) ) ▶₀ #vk.1 ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.5, 0) ~~> (#vk.1, 0) ) )
                qed
              qed
            qed
          qed
        next
          case split_case_4
          step( solve( !KU( (x⊕~x.1) ) @ #vk.2 ) )
            case c_xor
            step( solve( !KU( ~x ) @ #vk.3 ) )
              case fresh
              step( solve( !KU( zero ) @ #vk.3 ) )
                case c_zero
                by step( solve( splitEqs(2) ) )
              next
                case coerce
                step( solve( !KD( zero ) ▶₀ #vk.3 ) )
                  case acceptreader
                  by step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                next
                  case initiatereader
                  by step( contradiction /* impossible chain */ )
                next
                  case tag1
                  step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                    case d_0_fst
                    by step( contradiction /* impossible chain */ )
                  next
                    case d_0_snd
                    by step( solve( (#vr.5, 0) ~~> (#vk.3, 0) ) )
                  qed
                qed
              qed
            next
              case tag1_case_1
              step( solve( !KU( zero ) @ #vk.3 ) )
                case c_zero
                by step( solve( splitEqs(2) ) )
              next
                case coerce
                step( solve( !KD( zero ) ▶₀ #vk.3 ) )
                  case acceptreader
                  by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                next
                  case initiatereader
                  by step( contradiction /* impossible chain */ )
                next
                  case tag1
                  step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                    case d_0_fst
                    by step( contradiction /* impossible chain */ )
                  next
                    case d_0_snd
                    by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                  qed
                qed
              qed
            next
              case tag1_case_2
              step( solve( !KU( zero ) @ #vk.3 ) )
                case c_zero
                by step( solve( splitEqs(2) ) )
              next
                case coerce
                step( solve( !KD( zero ) ▶₀ #vk.3 ) )
                  case acceptreader
                  by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                next
                  case initiatereader
                  by step( contradiction /* impossible chain */ )
                next
                  case tag1
                  step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                    case d_0_fst
                    by step( contradiction /* impossible chain */ )
                  next
                    case d_0_snd
                    by step( solve( (#vr.7, 0) ~~> (#vk.3, 0) ) )
                  qed
                qed
              qed
            qed
          next
            case coerce
            step( solve( !KD( (x⊕~x.1) ) ▶₀ #vk.1 ) )
              case acceptreader
              by step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
            next
              case initiatereader
              by step( contradiction /* impossible chain */ )
            next
              case tag1
              step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                case d_0_fst
                by step( contradiction /* impossible chain */ )
              next
                case d_0_snd
                by step( solve( (#vr.5, 0) ~~> (#vk.1, 0) ) )
              qed
            qed
          qed
        next
          case split_case_5
          step( solve( !KU( (~k⊕~r1) ) @ #vk.1 ) )
            case c_xor
            by step( contradiction /* cyclic */ )
          next
            case coerce
            step( solve( !KD( (~k⊕~r1) ) ▶₀ #vk.1 ) )
              case acceptreader
              by step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
            next
              case initiatereader
              by step( contradiction /* impossible chain */ )
            next
              case tag1
              step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                case d_0_fst
                by step( contradiction /* impossible chain */ )
              next
                case d_0_snd
                by step( solve( (#vr.5, 0) ~~> (#vk.1, 0) ) )
              qed
            qed
          qed
        next
          case split_case_6
          step( solve( !KU( (~r1⊕x) ) @ #vk.1 ) )
            case c_xor
            by step( contradiction /* cyclic */ )
          next
            case coerce
            step( solve( !KD( (~r1⊕x) ) ▶₀ #vk.1 ) )
              case acceptreader
              by step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
            next
              case initiatereader
              by step( contradiction /* impossible chain */ )
            next
              case tag1
              step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                case d_0_fst
                by step( contradiction /* impossible chain */ )
              next
                case d_0_snd
                by step( solve( (#vr.5, 0) ~~> (#vk.1, 0) ) )
              qed
            qed
          qed
        next
          case split_case_7
          step( solve( !KU( (~k⊕~r1⊕z) ) @ #vk.1 ) )
            case c_xor_case_1
            by step( contradiction /* cyclic */ )
          next
            case c_xor_case_2
            by step( solve( !KU( ~k ) @ #vk.4 ) )
          next
            case c_xor_case_3
            step( solve( !KU( (~k⊕~r1) ) @ #vk.4 ) )
              case c_xor
              by step( contradiction /* cyclic */ )
            next
              case coerce
              step( solve( !KD( (~k⊕~r1) ) ▶₀ #vk.2 ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.5, 0) ~~> (#vk.2, 0) ) )
                qed
              qed
            qed
          next
            case coerce
            step( solve( !KD( (~k⊕~r1⊕z) ) ▶₀ #vk.1 ) )
              case acceptreader
              by step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
            next
              case initiatereader
              by step( contradiction /* impossible chain */ )
            next
              case tag1
              step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                case d_0_fst
                by step( contradiction /* impossible chain */ )
              next
                case d_0_snd
                by step( solve( (#vr.5, 0) ~~> (#vk.1, 0) ) )
              qed
            qed
          qed
        next
          case split_case_8
          step( solve( !KU( (~k⊕x) ) @ #vk.1 ) )
            case c_xor
            by step( solve( !KU( ~k ) @ #vk.4 ) )
          next
            case coerce
            step( solve( !KD( (~k⊕x) ) ▶₀ #vk.1 ) )
              case acceptreader
              by step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
            next
              case initiatereader
              by step( contradiction /* impossible chain */ )
            next
              case tag1
              step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                case d_0_fst
                by step( contradiction /* impossible chain */ )
              next
                case d_0_snd
                by step( solve( (#vr.5, 0) ~~> (#vk.1, 0) ) )
              qed
            qed
          qed
        qed
      next
        case tag1_case_2
        by step( solve( splitEqs(0) ) )
      next
        case tag1_case_3
        step( solve( splitEqs(0) ) )
          case split_case_1
          by step( solve( !KU( ~k ) @ #vk.1 ) )
        next
          case split_case_2
          by step( contradiction /* cyclic */ )
        next
          case split_case_3
          step( solve( splitEqs(2) ) )
            case split_case_1
            by step( solve( !KU( ~k1 ) @ #vk.1 ) )
          next
            case split_case_2
            step( solve( !KU( (~k⊕~k1⊕h((~k⊕~r0⊕~r1))) ) @ #vk.2 ) )
              case c_xor_case_1
              by step( solve( !KU( ~k1 ) @ #vk.4 ) )
            next
              case c_xor_case_2
              by step( solve( !KU( ~k ) @ #vk.4 ) )
            next
              case c_xor_case_3
              step( solve( !KU( h((~k⊕~r0⊕~r1)) ) @ #vk.3 ) )
                case c_h
                step( solve( !KU( (~k⊕~k1) ) @ #vk.4 ) )
                  case c_xor
                  by step( solve( !KU( ~k1 ) @ #vk.6 ) )
                next
                  case coerce
                  step( solve( !KD( (~k⊕~k1) ) ▶₀ #vk.3 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.5, 0) ~~> (#vk.3, 0) ) )
                    qed
                  qed
                qed
              next
                case tag1_case_1
                step( solve( !KU( (~k⊕~k1) ) @ #vk.4 ) )
                  case c_xor
                  by step( solve( !KU( ~k1 ) @ #vk.6 ) )
                next
                  case coerce
                  step( solve( !KD( (~k⊕~k1) ) ▶₀ #vk.3 ) )
                    case acceptreader
                    by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.7, 0) ~~> (#vk.3, 0) ) )
                    qed
                  qed
                qed
              next
                case tag1_case_2
                by step( contradiction /* cyclic */ )
              qed
            next
              case coerce
              step( solve( !KD( (~k⊕~k1⊕h((~k⊕~r0⊕~r1))) ) ▶₀ #vk.1 ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.5, 0) ~~> (#vk.1, 0) ) )
                qed
              qed
            qed
          next
            case split_case_3
            step( solve( !KU( (~k1⊕~r1.1) ) @ #vk.1 ) )
              case c_xor
              by step( solve( !KU( ~k1 ) @ #vk.4 ) )
            next
              case coerce
              step( solve( !KD( (~k1⊕~r1.1) ) ▶₀ #vk.1 ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.5, 0) ~~> (#vk.1, 0) ) )
                qed
              qed
            qed
          next
            case split_case_4
            step( solve( !KU( (~k1⊕x⊕~r1.1) ) @ #vk.1 ) )
              case c_xor_case_1
              step( solve( !KU( (~k⊕x⊕h((~k⊕~k1⊕~r1⊕x⊕~r1.1))) ) @ #vk.2 ) )
                case c_xor_case_1
                step( solve( !KU( (~k1⊕~r1.1) ) @ #vk.3 ) )
                  case c_xor
                  by step( solve( !KU( ~k1 ) @ #vk.7 ) )
                next
                  case coerce
                  step( solve( !KD( (~k1⊕~r1.1) ) ▶₀ #vk.3 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.5, 0) ~~> (#vk.3, 0) ) )
                    qed
                  qed
                qed
              next
                case c_xor_case_2
                by step( solve( !KU( ~k ) @ #vk.6 ) )
              next
                case c_xor_case_3
                step( solve( !KU( (~k1⊕~r1.1) ) @ #vk.3 ) )
                  case c_xor
                  by step( solve( !KU( ~k1 ) @ #vk.8 ) )
                next
                  case coerce
                  step( solve( !KD( (~k1⊕~r1.1) ) ▶₀ #vk.3 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.5, 0) ~~> (#vk.3, 0) ) )
                    qed
                  qed
                qed
              next
                case coerce
                step( solve( !KD( (~k⊕x⊕h((~k⊕~k1⊕~r1⊕x⊕~r1.1))) ) ▶₀ #vk.2 ) )
                  case acceptreader
                  by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                next
                  case initiatereader
                  by step( contradiction /* impossible chain */ )
                next
                  case tag1
                  step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                    case d_0_fst
                    by step( contradiction /* impossible chain */ )
                  next
                    case d_0_snd
                    by step( solve( (#vr.5, 0) ~~> (#vk.2, 0) ) )
                  qed
                qed
              qed
            next
              case c_xor_case_2
              by step( solve( !KU( ~k1 ) @ #vk.4 ) )
            next
              case c_xor_case_3
              step( solve( !KU( (~k⊕x⊕h((~k⊕~k1⊕~r1⊕x⊕~r1.1))) ) @ #vk.2 ) )
                case c_xor_case_1
                step( solve( !KU( (~k1⊕x) ) @ #vk.4 ) )
                  case c_xor
                  by step( solve( !KU( ~k1 ) @ #vk.7 ) )
                next
                  case coerce
                  step( solve( !KD( (~k1⊕x) ) ▶₀ #vk.3 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.5, 0) ~~> (#vk.3, 0) ) )
                    qed
                  qed
                qed
              next
                case c_xor_case_2
                by step( solve( !KU( ~k ) @ #vk.6 ) )
              next
                case c_xor_case_3
                step( solve( !KU( (~k1⊕x) ) @ #vk.4 ) )
                  case c_xor
                  by step( solve( !KU( ~k1 ) @ #vk.8 ) )
                next
                  case coerce
                  step( solve( !KD( (~k1⊕x) ) ▶₀ #vk.3 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.5, 0) ~~> (#vk.3, 0) ) )
                    qed
                  qed
                qed
              next
                case coerce
                step( solve( !KD( (~k⊕x⊕h((~k⊕~k1⊕~r1⊕x⊕~r1.1))) ) ▶₀ #vk.2 ) )
                  case acceptreader
                  by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                next
                  case initiatereader
                  by step( contradiction /* impossible chain */ )
                next
                  case tag1
                  step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                    case d_0_fst
                    by step( contradiction /* impossible chain */ )
                  next
                    case d_0_snd
                    by step( solve( (#vr.5, 0) ~~> (#vk.2, 0) ) )
                  qed
                qed
              qed
            next
              case coerce
              step( solve( !KD( (~k1⊕x⊕~r1.1) ) ▶₀ #vk.1 ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.5, 0) ~~> (#vk.1, 0) ) )
                qed
              qed
            qed
          next
            case split_case_5
            step( solve( !KU( (~k1⊕x) ) @ #vk.1 ) )
              case c_xor
              by step( solve( !KU( ~k1 ) @ #vk.4 ) )
            next
              case coerce
              step( solve( !KD( (~k1⊕x) ) ▶₀ #vk.1 ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.5, 0) ~~> (#vk.1, 0) ) )
                qed
              qed
            qed
          next
            case split_case_6
            step( solve( !KU( (x⊕~r1.1) ) @ #vk.1 ) )
              case c_xor
              step( solve( !KU( (~k⊕~k1⊕x⊕h((~k⊕~r1⊕x⊕~r1.1))) ) @ #vk.2 ) )
                case c_xor_case_1
                step( solve( !KU( (~k⊕~k1⊕h((~k⊕~r1⊕x⊕~r1.1))) ) @ #vk.5 ) )
                  case c_xor_case_1
                  by step( solve( !KU( ~k1 ) @ #vk.7 ) )
                next
                  case c_xor_case_2
                  by step( solve( !KU( ~k ) @ #vk.7 ) )
                next
                  case c_xor_case_3
                  step( solve( !KU( h((~k⊕~r1⊕x⊕~r1.1)) ) @ #vk.6 ) )
                    case c_h
                    step( solve( !KU( (~k⊕~k1) ) @ #vk.7 ) )
                      case c_xor
                      by step( solve( !KU( ~k1 ) @ #vk.9 ) )
                    next
                      case coerce
                      step( solve( !KD( (~k⊕~k1) ) ▶₀ #vk.5 ) )
                        case acceptreader
                        by step( solve( (#vl.1, 0) ~~> (#vk.5, 0) ) )
                      next
                        case initiatereader
                        by step( contradiction /* impossible chain */ )
                      next
                        case tag1
                        step( solve( (#vl.1, 0) ~~> (#vk.5, 0) ) )
                          case d_0_fst
                          by step( contradiction /* impossible chain */ )
                        next
                          case d_0_snd
                          by step( solve( (#vr.5, 0) ~~> (#vk.5, 0) ) )
                        qed
                      qed
                    qed
                  next
                    case tag1_case_1
                    step( solve( !KU( (~k⊕~k1) ) @ #vk.7 ) )
                      case c_xor
                      by step( solve( !KU( ~k1 ) @ #vk.9 ) )
                    next
                      case coerce
                      step( solve( !KD( (~k⊕~k1) ) ▶₀ #vk.5 ) )
                        case acceptreader
                        by step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                      next
                        case initiatereader
                        by step( contradiction /* impossible chain */ )
                      next
                        case tag1
                        step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                          case d_0_fst
                          by step( contradiction /* impossible chain */ )
                        next
                          case d_0_snd
                          by step( solve( (#vr.7, 0) ~~> (#vk.5, 0) ) )
                        qed
                      qed
                    qed
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case coerce
                  step( solve( !KD( (~k⊕~k1⊕h((~k⊕~r1⊕x⊕~r1.1))) ) ▶₀ #vk.3 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.5, 0) ~~> (#vk.3, 0) ) )
                    qed
                  qed
                qed
              next
                case c_xor_case_2
                by step( solve( !KU( ~k1 ) @ #vk.6 ) )
              next
                case c_xor_case_3
                step( solve( !KU( (~k⊕h((~k⊕~r1⊕x⊕~r1.1))) ) @ #vk.5 ) )
                  case c_xor
                  by step( solve( !KU( ~k ) @ #vk.8 ) )
                next
                  case coerce
                  step( solve( !KD( (~k⊕h((~k⊕~r1⊕x⊕~r1.1))) ) ▶₀ #vk.3 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.5, 0) ~~> (#vk.3, 0) ) )
                    qed
                  qed
                qed
              next
                case c_xor_case_4
                by step( solve( !KU( ~k ) @ #vk.6 ) )
              next
                case c_xor_case_5
                step( solve( !KU( (~k1⊕h((~k⊕~r1⊕x⊕~r1.1))) ) @ #vk.5 ) )
                  case c_xor
                  by step( solve( !KU( ~k1 ) @ #vk.8 ) )
                next
                  case coerce
                  step( solve( !KD( (~k1⊕h((~k⊕~r1⊕x⊕~r1.1))) ) ▶₀ #vk.3 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.5, 0) ~~> (#vk.3, 0) ) )
                    qed
                  qed
                qed
              next
                case c_xor_case_6
                step( solve( !KU( (x⊕h((~k⊕~r1⊕x⊕~r1.1))) ) @ #vk.5 ) )
                  case c_xor
                  step( solve( !KU( (~k⊕~k1) ) @ #vk.6 ) )
                    case c_xor
                    by step( solve( !KU( ~k1 ) @ #vk.8 ) )
                  next
                    case coerce
                    step( solve( !KD( (~k⊕~k1) ) ▶₀ #vk.4 ) )
                      case acceptreader
                      by step( solve( (#vl.1, 0) ~~> (#vk.4, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.1, 0) ~~> (#vk.4, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.5, 0) ~~> (#vk.4, 0) ) )
                      qed
                    qed
                  qed
                next
                  case coerce
                  step( solve( !KD( (x⊕h((~k⊕~r1⊕x⊕~r1.1))) ) ▶₀ #vk.3 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.5, 0) ~~> (#vk.3, 0) ) )
                    qed
                  qed
                qed
              next
                case c_xor_case_7
                step( solve( !KU( h((~k⊕~r1⊕x⊕~r1.1)) ) @ #vk.5 ) )
                  case c_h
                  step( solve( !KU( (~k⊕~k1⊕x) ) @ #vk.6 ) )
                    case c_xor_case_1
                    by step( solve( !KU( ~k1 ) @ #vk.9 ) )
                  next
                    case c_xor_case_2
                    by step( solve( !KU( ~k ) @ #vk.9 ) )
                  next
                    case c_xor_case_3
                    step( solve( !KU( (~k⊕~r1⊕x⊕~r1.1) ) @ #vk.7 ) )
                      case c_xor_case_1
                      step( solve( !KU( (~k⊕~k1) ) @ #vk.8 ) )
                        case c_xor
                        by step( solve( !KU( ~k1 ) @ #vk.10 ) )
                      next
                        case coerce
                        step( solve( !KD( (~k⊕~k1) ) ▶₀ #vk.6 ) )
                          case acceptreader
                          by step( solve( (#vl.1, 0) ~~> (#vk.6, 0) ) )
                        next
                          case initiatereader
                          by step( contradiction /* impossible chain */ )
                        next
                          case tag1
                          step( solve( (#vl.1, 0) ~~> (#vk.6, 0) ) )
                            case d_0_fst
                            by step( contradiction /* impossible chain */ )
                          next
                            case d_0_snd
                            by step( solve( (#vr.5, 0) ~~> (#vk.6, 0) ) )
                          qed
                        qed
                      qed
                    next
                      case c_xor_case_2
                      by step( contradiction /* cyclic */ )
                    next
                      case c_xor_case_3
                      step( solve( !KU( (~k⊕~k1) ) @ #vk.8 ) )
                        case c_xor
                        by step( solve( !KU( ~k1 ) @ #vk.11 ) )
                      next
                        case coerce
                        step( solve( !KD( (~k⊕~k1) ) ▶₀ #vk.6 ) )
                          case acceptreader
                          by step( solve( (#vl.1, 0) ~~> (#vk.6, 0) ) )
                        next
                          case initiatereader
                          by step( contradiction /* impossible chain */ )
                        next
                          case tag1
                          step( solve( (#vl.1, 0) ~~> (#vk.6, 0) ) )
                            case d_0_fst
                            by step( contradiction /* impossible chain */ )
                          next
                            case d_0_snd
                            by step( solve( (#vr.5, 0) ~~> (#vk.6, 0) ) )
                          qed
                        qed
                      qed
                    next
                      case c_xor_case_4
                      by step( solve( !KU( ~k ) @ #vk.10 ) )
                    next
                      case c_xor_case_5
                      step( solve( !KU( (~k⊕~k1) ) @ #vk.8 ) )
                        case c_xor
                        by step( solve( !KU( ~k1 ) @ #vk.11 ) )
                      next
                        case coerce
                        step( solve( !KD( (~k⊕~k1) ) ▶₀ #vk.6 ) )
                          case acceptreader
                          by step( solve( (#vl.1, 0) ~~> (#vk.6, 0) ) )
                        next
                          case initiatereader
                          by step( contradiction /* impossible chain */ )
                        next
                          case tag1
                          step( solve( (#vl.1, 0) ~~> (#vk.6, 0) ) )
                            case d_0_fst
                            by step( contradiction /* impossible chain */ )
                          next
                            case d_0_snd
                            by step( solve( (#vr.5, 0) ~~> (#vk.6, 0) ) )
                          qed
                        qed
                      qed
                    next
                      case c_xor_case_6
                      by step( contradiction /* cyclic */ )
                    next
                      case c_xor_case_7
                      by step( contradiction /* cyclic */ )
                    next
                      case coerce
                      step( solve( !KD( (~k⊕~r1⊕x⊕~r1.1) ) ▶₀ #vk.5 ) )
                        case acceptreader
                        by step( solve( (#vl.1, 0) ~~> (#vk.5, 0) ) )
                      next
                        case initiatereader
                        by step( contradiction /* impossible chain */ )
                      next
                        case tag1
                        step( solve( (#vl.1, 0) ~~> (#vk.5, 0) ) )
                          case d_0_fst
                          by step( contradiction /* impossible chain */ )
                        next
                          case d_0_snd
                          by step( solve( (#vr.5, 0) ~~> (#vk.5, 0) ) )
                        qed
                      qed
                    qed
                  next
                    case coerce
                    step( solve( !KD( (~k⊕~k1⊕x) ) ▶₀ #vk.4 ) )
                      case acceptreader
                      by step( solve( (#vl.1, 0) ~~> (#vk.4, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.1, 0) ~~> (#vk.4, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.5, 0) ~~> (#vk.4, 0) ) )
                      qed
                    qed
                  qed
                next
                  case tag1_case_1
                  step( solve( !KU( (~k⊕~k1⊕x) ) @ #vk.6 ) )
                    case c_xor_case_1
                    by step( solve( !KU( ~k1 ) @ #vk.9 ) )
                  next
                    case c_xor_case_2
                    by step( solve( !KU( ~k ) @ #vk.9 ) )
                  next
                    case c_xor_case_3
                    step( solve( !KU( (~k⊕~k1) ) @ #vk.8 ) )
                      case c_xor
                      by step( solve( !KU( ~k1 ) @ #vk.9 ) )
                    next
                      case coerce
                      step( solve( !KD( (~k⊕~k1) ) ▶₀ #vk.5 ) )
                        case acceptreader
                        by step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                      next
                        case initiatereader
                        by step( contradiction /* impossible chain */ )
                      next
                        case tag1
                        step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                          case d_0_fst
                          by step( contradiction /* impossible chain */ )
                        next
                          case d_0_snd
                          by step( solve( (#vr.7, 0) ~~> (#vk.5, 0) ) )
                        qed
                      qed
                    qed
                  next
                    case coerce
                    step( solve( !KD( (~k⊕~k1⊕x) ) ▶₀ #vk.4 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.7, 0) ~~> (#vk.4, 0) ) )
                      qed
                    qed
                  qed
                next
                  case tag1_case_2
                  by step( contradiction /* cyclic */ )
                qed
              next
                case coerce
                step( solve( !KD( (~k⊕~k1⊕x⊕h((~k⊕~r1⊕x⊕~r1.1))) ) ▶₀ #vk.2 ) )
                  case acceptreader
                  by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                next
                  case initiatereader
                  by step( contradiction /* impossible chain */ )
                next
                  case tag1
                  step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                    case d_0_fst
                    by step( contradiction /* impossible chain */ )
                  next
                    case d_0_snd
                    by step( solve( (#vr.5, 0) ~~> (#vk.2, 0) ) )
                  qed
                qed
              qed
            next
              case coerce
              step( solve( !KD( (x⊕~r1.1) ) ▶₀ #vk.1 ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.5, 0) ~~> (#vk.1, 0) ) )
                qed
              qed
            qed
          next
            case split_case_7
            step( solve( !KU( (~k⊕~k1⊕r0⊕~r1.1⊕h((~k⊕~r1⊕r0))) ) @ #vk.2 ) )
              case c_xor_case_01
              by step( contradiction /* cyclic */ )
            next
              case c_xor_case_02
              step( solve( !KU( (~k⊕~k1⊕~r1.1⊕h((~k⊕~r1⊕r0))) ) @ #vk.3 ) )
                case c_xor_case_1
                by step( contradiction /* cyclic */ )
              next
                case c_xor_case_2
                by step( solve( !KU( ~k1 ) @ #vk.5 ) )
              next
                case c_xor_case_3
                step( solve( !KU( (~k⊕h((~k⊕~r1⊕r0))) ) @ #vk.4 ) )
                  case c_xor
                  by step( solve( !KU( ~k ) @ #vk.7 ) )
                next
                  case coerce
                  step( solve( !KD( (~k⊕h((~k⊕~r1⊕r0))) ) ▶₀ #vk.3 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.5, 0) ~~> (#vk.3, 0) ) )
                    qed
                  qed
                qed
              next
                case c_xor_case_4
                by step( solve( !KU( ~k ) @ #vk.5 ) )
              next
                case c_xor_case_5
                step( solve( !KU( (~k1⊕h((~k⊕~r1⊕r0))) ) @ #vk.4 ) )
                  case c_xor
                  by step( solve( !KU( ~k1 ) @ #vk.7 ) )
                next
                  case coerce
                  step( solve( !KD( (~k1⊕h((~k⊕~r1⊕r0))) ) ▶₀ #vk.3 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.5, 0) ~~> (#vk.3, 0) ) )
                    qed
                  qed
                qed
              next
                case c_xor_case_6
                step( solve( !KU( (~r1.1⊕h((~k⊕~r1⊕r0))) ) @ #vk.4 ) )
                  case c_xor
                  by step( contradiction /* cyclic */ )
                next
                  case coerce
                  step( solve( !KD( (~r1.1⊕h((~k⊕~r1⊕r0))) ) ▶₀ #vk.3 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.5, 0) ~~> (#vk.3, 0) ) )
                    qed
                  qed
                qed
              next
                case c_xor_case_7
                step( solve( !KU( (~k⊕~k1⊕~r1.1) ) @ #vk.5 ) )
                  case c_xor_case_1
                  by step( solve( !KU( ~k1 ) @ #vk.7 ) )
                next
                  case c_xor_case_2
                  by step( solve( !KU( ~k ) @ #vk.7 ) )
                next
                  case c_xor_case_3
                  by step( contradiction /* cyclic */ )
                next
                  case coerce
                  step( solve( !KD( (~k⊕~k1⊕~r1.1) ) ▶₀ #vk.3 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.5, 0) ~~> (#vk.3, 0) ) )
                    qed
                  qed
                qed
              next
                case coerce
                step( solve( !KD( (~k⊕~k1⊕~r1.1⊕h((~k⊕~r1⊕r0))) ) ▶₀ #vk.2 ) )
                  case acceptreader
                  by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                next
                  case initiatereader
                  by step( contradiction /* impossible chain */ )
                next
                  case tag1
                  step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                    case d_0_fst
                    by step( contradiction /* impossible chain */ )
                  next
                    case d_0_snd
                    by step( solve( (#vr.5, 0) ~~> (#vk.2, 0) ) )
                  qed
                qed
              qed
            next
              case c_xor_case_03
              step( solve( !KU( (~k⊕~k1⊕h((~k⊕~r1⊕r0))) ) @ #vk.3 ) )
                case c_xor_case_1
                by step( solve( !KU( ~k1 ) @ #vk.6 ) )
              next
                case c_xor_case_2
                by step( solve( !KU( ~k ) @ #vk.6 ) )
              next
                case c_xor_case_3
                step( solve( !KU( (r0⊕~r1.1) ) @ #vk.4 ) )
                  case c_xor
                  by step( contradiction /* cyclic */ )
                next
                  case coerce
                  step( solve( !KD( (r0⊕~r1.1) ) ▶₀ #vk.3 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.5, 0) ~~> (#vk.3, 0) ) )
                    qed
                  qed
                qed
              next
                case coerce
                step( solve( !KD( (~k⊕~k1⊕h((~k⊕~r1⊕r0))) ) ▶₀ #vk.2 ) )
                  case acceptreader
                  by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                next
                  case initiatereader
                  by step( contradiction /* impossible chain */ )
                next
                  case tag1
                  step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                    case d_0_fst
                    by step( contradiction /* impossible chain */ )
                  next
                    case d_0_snd
                    by step( solve( (#vr.5, 0) ~~> (#vk.2, 0) ) )
                  qed
                qed
              qed
            next
              case c_xor_case_04
              by step( solve( !KU( ~k1 ) @ #vk.4 ) )
            next
              case c_xor_case_05
              step( solve( !KU( (~k⊕r0⊕h((~k⊕~r1⊕r0))) ) @ #vk.3 ) )
                case c_xor_case_1
                step( solve( !KU( (~k1⊕~r1.1) ) @ #vk.4 ) )
                  case c_xor
                  by step( contradiction /* cyclic */ )
                next
                  case coerce
                  step( solve( !KD( (~k1⊕~r1.1) ) ▶₀ #vk.3 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.5, 0) ~~> (#vk.3, 0) ) )
                    qed
                  qed
                qed
              next
                case c_xor_case_2
                by step( solve( !KU( ~k ) @ #vk.6 ) )
              next
                case c_xor_case_3
                step( solve( !KU( (~k1⊕~r1.1) ) @ #vk.4 ) )
                  case c_xor
                  by step( contradiction /* cyclic */ )
                next
                  case coerce
                  step( solve( !KD( (~k1⊕~r1.1) ) ▶₀ #vk.3 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.5, 0) ~~> (#vk.3, 0) ) )
                    qed
                  qed
                qed
              next
                case coerce
                step( solve( !KD( (~k⊕r0⊕h((~k⊕~r1⊕r0))) ) ▶₀ #vk.2 ) )
                  case acceptreader
                  by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                next
                  case initiatereader
                  by step( contradiction /* impossible chain */ )
                next
                  case tag1
                  step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                    case d_0_fst
                    by step( contradiction /* impossible chain */ )
                  next
                    case d_0_snd
                    by step( solve( (#vr.5, 0) ~~> (#vk.2, 0) ) )
                  qed
                qed
              qed
            next
              case c_xor_case_06
              step( solve( !KU( (~k⊕~r1.1⊕h((~k⊕~r1⊕r0))) ) @ #vk.3 ) )
                case c_xor_case_1
                by step( contradiction /* cyclic */ )
              next
                case c_xor_case_2
                by step( solve( !KU( ~k ) @ #vk.6 ) )
              next
                case c_xor_case_3
                step( solve( !KU( (~k1⊕r0) ) @ #vk.4 ) )
                  case c_xor
                  by step( solve( !KU( ~k1 ) @ #vk.7 ) )
                next
                  case coerce
                  step( solve( !KD( (~k1⊕r0) ) ▶₀ #vk.3 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.5, 0) ~~> (#vk.3, 0) ) )
                    qed
                  qed
                qed
              next
                case coerce
                step( solve( !KD( (~k⊕~r1.1⊕h((~k⊕~r1⊕r0))) ) ▶₀ #vk.2 ) )
                  case acceptreader
                  by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                next
                  case initiatereader
                  by step( contradiction /* impossible chain */ )
                next
                  case tag1
                  step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                    case d_0_fst
                    by step( contradiction /* impossible chain */ )
                  next
                    case d_0_snd
                    by step( solve( (#vr.5, 0) ~~> (#vk.2, 0) ) )
                  qed
                qed
              qed
            next
              case c_xor_case_07
              step( solve( !KU( (~k⊕h((~k⊕~r1⊕r0))) ) @ #vk.3 ) )
                case c_xor
                by step( solve( !KU( ~k ) @ #vk.6 ) )
              next
                case coerce
                step( solve( !KD( (~k⊕h((~k⊕~r1⊕r0))) ) ▶₀ #vk.2 ) )
                  case acceptreader
                  by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                next
                  case initiatereader
                  by step( contradiction /* impossible chain */ )
                next
                  case tag1
                  step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                    case d_0_fst
                    by step( contradiction /* impossible chain */ )
                  next
                    case d_0_snd
                    by step( solve( (#vr.5, 0) ~~> (#vk.2, 0) ) )
                  qed
                qed
              qed
            next
              case c_xor_case_08
              by step( solve( !KU( ~k ) @ #vk.4 ) )
            next
              case c_xor_case_09
              step( solve( !KU( (~k1⊕r0⊕h((~k⊕~r1⊕r0))) ) @ #vk.3 ) )
                case c_xor_case_1
                step( solve( !KU( (~k⊕~r1.1) ) @ #vk.4 ) )
                  case c_xor
                  by step( contradiction /* cyclic */ )
                next
                  case coerce
                  step( solve( !KD( (~k⊕~r1.1) ) ▶₀ #vk.3 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.5, 0) ~~> (#vk.3, 0) ) )
                    qed
                  qed
                qed
              next
                case c_xor_case_2
                by step( solve( !KU( ~k1 ) @ #vk.6 ) )
              next
                case c_xor_case_3
                step( solve( !KU( (~k⊕~r1.1) ) @ #vk.4 ) )
                  case c_xor
                  by step( contradiction /* cyclic */ )
                next
                  case coerce
                  step( solve( !KD( (~k⊕~r1.1) ) ▶₀ #vk.3 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.5, 0) ~~> (#vk.3, 0) ) )
                    qed
                  qed
                qed
              next
                case coerce
                step( solve( !KD( (~k1⊕r0⊕h((~k⊕~r1⊕r0))) ) ▶₀ #vk.2 ) )
                  case acceptreader
                  by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                next
                  case initiatereader
                  by step( contradiction /* impossible chain */ )
                next
                  case tag1
                  step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                    case d_0_fst
                    by step( contradiction /* impossible chain */ )
                  next
                    case d_0_snd
                    by step( solve( (#vr.5, 0) ~~> (#vk.2, 0) ) )
                  qed
                qed
              qed
            next
              case c_xor_case_10
              step( solve( !KU( (~k1⊕~r1.1⊕h((~k⊕~r1⊕r0))) ) @ #vk.3 ) )
                case c_xor_case_1
                by step( contradiction /* cyclic */ )
              next
                case c_xor_case_2
                by step( solve( !KU( ~k1 ) @ #vk.6 ) )
              next
                case c_xor_case_3
                step( solve( !KU( (~k⊕r0) ) @ #vk.4 ) )
                  case c_xor
                  by step( solve( !KU( ~k ) @ #vk.7 ) )
                next
                  case coerce
                  step( solve( !KD( (~k⊕r0) ) ▶₀ #vk.3 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.5, 0) ~~> (#vk.3, 0) ) )
                    qed
                  qed
                qed
              next
                case coerce
                step( solve( !KD( (~k1⊕~r1.1⊕h((~k⊕~r1⊕r0))) ) ▶₀ #vk.2 ) )
                  case acceptreader
                  by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                next
                  case initiatereader
                  by step( contradiction /* impossible chain */ )
                next
                  case tag1
                  step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                    case d_0_fst
                    by step( contradiction /* impossible chain */ )
                  next
                    case d_0_snd
                    by step( solve( (#vr.5, 0) ~~> (#vk.2, 0) ) )
                  qed
                qed
              qed
            next
              case c_xor_case_11
              step( solve( !KU( (~k1⊕h((~k⊕~r1⊕r0))) ) @ #vk.3 ) )
                case c_xor
                by step( solve( !KU( ~k1 ) @ #vk.6 ) )
              next
                case coerce
                step( solve( !KD( (~k1⊕h((~k⊕~r1⊕r0))) ) ▶₀ #vk.2 ) )
                  case acceptreader
                  by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                next
                  case initiatereader
                  by step( contradiction /* impossible chain */ )
                next
                  case tag1
                  step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                    case d_0_fst
                    by step( contradiction /* impossible chain */ )
                  next
                    case d_0_snd
                    by step( solve( (#vr.5, 0) ~~> (#vk.2, 0) ) )
                  qed
                qed
              qed
            next
              case c_xor_case_12
              step( solve( !KU( (r0⊕~r1.1⊕h((~k⊕~r1⊕r0))) ) @ #vk.3 ) )
                case c_xor_case_1
                by step( contradiction /* cyclic */ )
              next
                case c_xor_case_2
                step( solve( !KU( (~k⊕~k1) ) @ #vk.4 ) )
                  case c_xor
                  by step( solve( !KU( ~k1 ) @ #vk.6 ) )
                next
                  case coerce
                  step( solve( !KD( (~k⊕~k1) ) ▶₀ #vk.3 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.5, 0) ~~> (#vk.3, 0) ) )
                    qed
                  qed
                qed
              next
                case c_xor_case_3
                step( solve( !KU( (~k⊕~k1) ) @ #vk.4 ) )
                  case c_xor
                  by step( solve( !KU( ~k1 ) @ #vk.7 ) )
                next
                  case coerce
                  step( solve( !KD( (~k⊕~k1) ) ▶₀ #vk.3 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.5, 0) ~~> (#vk.3, 0) ) )
                    qed
                  qed
                qed
              next
                case coerce
                step( solve( !KD( (r0⊕~r1.1⊕h((~k⊕~r1⊕r0))) ) ▶₀ #vk.2 ) )
                  case acceptreader
                  by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                next
                  case initiatereader
                  by step( contradiction /* impossible chain */ )
                next
                  case tag1
                  step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                    case d_0_fst
                    by step( contradiction /* impossible chain */ )
                  next
                    case d_0_snd
                    by step( solve( (#vr.5, 0) ~~> (#vk.2, 0) ) )
                  qed
                qed
              qed
            next
              case c_xor_case_13
              step( solve( !KU( (r0⊕h((~k⊕~r1⊕r0))) ) @ #vk.3 ) )
                case c_xor
                step( solve( !KU( (~k⊕~k1⊕~r1.1) ) @ #vk.4 ) )
                  case c_xor_case_1
                  by step( solve( !KU( ~k1 ) @ #vk.7 ) )
                next
                  case c_xor_case_2
                  by step( solve( !KU( ~k ) @ #vk.7 ) )
                next
                  case c_xor_case_3
                  by step( contradiction /* cyclic */ )
                next
                  case coerce
                  step( solve( !KD( (~k⊕~k1⊕~r1.1) ) ▶₀ #vk.3 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.5, 0) ~~> (#vk.3, 0) ) )
                    qed
                  qed
                qed
              next
                case coerce
                step( solve( !KD( (r0⊕h((~k⊕~r1⊕r0))) ) ▶₀ #vk.2 ) )
                  case acceptreader
                  by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                next
                  case initiatereader
                  by step( contradiction /* impossible chain */ )
                next
                  case tag1
                  step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                    case d_0_fst
                    by step( contradiction /* impossible chain */ )
                  next
                    case d_0_snd
                    by step( solve( (#vr.5, 0) ~~> (#vk.2, 0) ) )
                  qed
                qed
              qed
            next
              case c_xor_case_14
              step( solve( !KU( (~r1.1⊕h((~k⊕~r1⊕r0))) ) @ #vk.3 ) )
                case c_xor
                by step( contradiction /* cyclic */ )
              next
                case coerce
                step( solve( !KD( (~r1.1⊕h((~k⊕~r1⊕r0))) ) ▶₀ #vk.2 ) )
                  case acceptreader
                  by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                next
                  case initiatereader
                  by step( contradiction /* impossible chain */ )
                next
                  case tag1
                  step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                    case d_0_fst
                    by step( contradiction /* impossible chain */ )
                  next
                    case d_0_snd
                    by step( solve( (#vr.5, 0) ~~> (#vk.2, 0) ) )
                  qed
                qed
              qed
            next
              case c_xor_case_15
              step( solve( !KU( (~k⊕~k1⊕r0⊕~r1.1) ) @ #vk.4 ) )
                case c_xor_case_1
                step( solve( !KU( (~k⊕~k1⊕~r1.1) ) @ #vk.5 ) )
                  case c_xor_case_1
                  by step( solve( !KU( ~k1 ) @ #vk.7 ) )
                next
                  case c_xor_case_2
                  by step( solve( !KU( ~k ) @ #vk.7 ) )
                next
                  case c_xor_case_3
                  by step( contradiction /* cyclic */ )
                next
                  case coerce
                  step( solve( !KD( (~k⊕~k1⊕~r1.1) ) ▶₀ #vk.3 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.5, 0) ~~> (#vk.3, 0) ) )
                    qed
                  qed
                qed
              next
                case c_xor_case_2
                by step( solve( !KU( ~k1 ) @ #vk.6 ) )
              next
                case c_xor_case_3
                step( solve( !KU( (~k⊕~r1.1) ) @ #vk.5 ) )
                  case c_xor
                  by step( contradiction /* cyclic */ )
                next
                  case coerce
                  step( solve( !KD( (~k⊕~r1.1) ) ▶₀ #vk.3 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.5, 0) ~~> (#vk.3, 0) ) )
                    qed
                  qed
                qed
              next
                case c_xor_case_4
                by step( solve( !KU( ~k ) @ #vk.6 ) )
              next
                case c_xor_case_5
                step( solve( !KU( (~k1⊕~r1.1) ) @ #vk.5 ) )
                  case c_xor
                  by step( contradiction /* cyclic */ )
                next
                  case coerce
                  step( solve( !KD( (~k1⊕~r1.1) ) ▶₀ #vk.3 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.5, 0) ~~> (#vk.3, 0) ) )
                    qed
                  qed
                qed
              next
                case c_xor_case_6
                step( solve( !KU( (r0⊕~r1.1) ) @ #vk.5 ) )
                  case c_xor
                  by step( contradiction /* cyclic */ )
                next
                  case coerce
                  step( solve( !KD( (r0⊕~r1.1) ) ▶₀ #vk.3 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.5, 0) ~~> (#vk.3, 0) ) )
                    qed
                  qed
                qed
              next
                case c_xor_case_7
                by step( contradiction /* cyclic */ )
              next
                case coerce
                step( solve( !KD( (~k⊕~k1⊕r0⊕~r1.1) ) ▶₀ #vk.2 ) )
                  case acceptreader
                  by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                next
                  case initiatereader
                  by step( contradiction /* impossible chain */ )
                next
                  case tag1
                  step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                    case d_0_fst
                    by step( contradiction /* impossible chain */ )
                  next
                    case d_0_snd
                    by step( solve( (#vr.5, 0) ~~> (#vk.2, 0) ) )
                  qed
                qed
              qed
            next
              case coerce
              step( solve( !KD( (~k⊕~k1⊕r0⊕~r1.1⊕h((~k⊕~r1⊕r0))) ) ▶₀ #vk.1 ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.5, 0) ~~> (#vk.1, 0) ) )
                qed
              qed
            qed
          qed
        next
          case split_case_4
          step( solve( !KU( (x⊕~x.1) ) @ #vk.2 ) )
            case c_xor
            step( solve( !KU( ~x ) @ #vk.3 ) )
              case fresh
              step( solve( !KU( zero ) @ #vk.3 ) )
                case c_zero
                by step( solve( splitEqs(2) ) )
              next
                case coerce
                step( solve( !KD( zero ) ▶₀ #vk.3 ) )
                  case acceptreader
                  by step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                next
                  case initiatereader
                  by step( contradiction /* impossible chain */ )
                next
                  case tag1
                  step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                    case d_0_fst
                    by step( contradiction /* impossible chain */ )
                  next
                    case d_0_snd
                    by step( solve( (#vr.5, 0) ~~> (#vk.3, 0) ) )
                  qed
                qed
              qed
            next
              case tag1_case_1
              step( solve( !KU( zero ) @ #vk.3 ) )
                case c_zero
                by step( solve( splitEqs(2) ) )
              next
                case coerce
                step( solve( !KD( zero ) ▶₀ #vk.3 ) )
                  case acceptreader
                  by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                next
                  case initiatereader
                  by step( contradiction /* impossible chain */ )
                next
                  case tag1
                  step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                    case d_0_fst
                    by step( contradiction /* impossible chain */ )
                  next
                    case d_0_snd
                    by step( solve( (#vr.7, 0) ~~> (#vk.3, 0) ) )
                  qed
                qed
              qed
            next
              case tag1_case_2
              step( solve( !KU( zero ) @ #vk.3 ) )
                case c_zero
                by step( solve( splitEqs(2) ) )
              next
                case coerce
                step( solve( !KD( zero ) ▶₀ #vk.3 ) )
                  case acceptreader
                  by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                next
                  case initiatereader
                  by step( contradiction /* impossible chain */ )
                next
                  case tag1
                  step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                    case d_0_fst
                    by step( contradiction /* impossible chain */ )
                  next
                    case d_0_snd
                    by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                  qed
                qed
              qed
            qed
          next
            case coerce
            step( solve( !KD( (x⊕~x.1) ) ▶₀ #vk.1 ) )
              case acceptreader
              by step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
            next
              case initiatereader
              by step( contradiction /* impossible chain */ )
            next
              case tag1
              step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                case d_0_fst
                by step( contradiction /* impossible chain */ )
              next
                case d_0_snd
                by step( solve( (#vr.5, 0) ~~> (#vk.1, 0) ) )
              qed
            qed
          qed
        next
          case split_case_5
          step( solve( !KU( (~k⊕~r1) ) @ #vk.1 ) )
            case c_xor
            by step( contradiction /* cyclic */ )
          next
            case coerce
            step( solve( !KD( (~k⊕~r1) ) ▶₀ #vk.1 ) )
              case acceptreader
              by step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
            next
              case initiatereader
              by step( contradiction /* impossible chain */ )
            next
              case tag1
              step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                case d_0_fst
                by step( contradiction /* impossible chain */ )
              next
                case d_0_snd
                by step( solve( (#vr.5, 0) ~~> (#vk.1, 0) ) )
              qed
            qed
          qed
        next
          case split_case_6
          step( solve( !KU( (~r1⊕x) ) @ #vk.1 ) )
            case c_xor
            by step( contradiction /* cyclic */ )
          next
            case coerce
            step( solve( !KD( (~r1⊕x) ) ▶₀ #vk.1 ) )
              case acceptreader
              by step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
            next
              case initiatereader
              by step( contradiction /* impossible chain */ )
            next
              case tag1
              step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                case d_0_fst
                by step( contradiction /* impossible chain */ )
              next
                case d_0_snd
                by step( solve( (#vr.5, 0) ~~> (#vk.1, 0) ) )
              qed
            qed
          qed
        next
          case split_case_7
          step( solve( !KU( (~k⊕~r1⊕z) ) @ #vk.1 ) )
            case c_xor_case_1
            by step( contradiction /* cyclic */ )
          next
            case c_xor_case_2
            by step( solve( !KU( ~k ) @ #vk.4 ) )
          next
            case c_xor_case_3
            step( solve( !KU( (~k⊕~r1) ) @ #vk.4 ) )
              case c_xor
              by step( contradiction /* cyclic */ )
            next
              case coerce
              step( solve( !KD( (~k⊕~r1) ) ▶₀ #vk.2 ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.5, 0) ~~> (#vk.2, 0) ) )
                qed
              qed
            qed
          next
            case coerce
            step( solve( !KD( (~k⊕~r1⊕z) ) ▶₀ #vk.1 ) )
              case acceptreader
              by step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
            next
              case initiatereader
              by step( contradiction /* impossible chain */ )
            next
              case tag1
              step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                case d_0_fst
                by step( contradiction /* impossible chain */ )
              next
                case d_0_snd
                by step( solve( (#vr.5, 0) ~~> (#vk.1, 0) ) )
              qed
            qed
          qed
        next
          case split_case_8
          step( solve( !KU( (~k⊕x) ) @ #vk.1 ) )
            case c_xor
            by step( solve( !KU( ~k ) @ #vk.4 ) )
          next
            case coerce
            step( solve( !KD( (~k⊕x) ) ▶₀ #vk.1 ) )
              case acceptreader
              by step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
            next
              case initiatereader
              by step( contradiction /* impossible chain */ )
            next
              case tag1
              step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                case d_0_fst
                by step( contradiction /* impossible chain */ )
              next
                case d_0_snd
                by step( solve( (#vr.5, 0) ~~> (#vk.1, 0) ) )
              qed
            qed
          qed
        qed
      qed
    next
      case tag1_case_3
      step( solve( !KU( h(z) ) @ #vk ) )
        case c_h
        step( solve( splitEqs(0) ) )
          case split_case_1
          by step( solve( !KU( ~k ) @ #vk.1 ) )
        next
          case split_case_2
          by step( contradiction /* cyclic */ )
        next
          case split_case_3
          step( solve( !KU( (~k⊕h((~k⊕~r1))) ) @ #vk.2 ) )
            case c_xor
            by step( solve( !KU( ~k ) @ #vk.4 ) )
          next
            case coerce
            step( solve( !KD( (~k⊕h((~k⊕~r1))) ) ▶₀ #vk.1 ) )
              case acceptreader
              by step( solve( (#vl, 0) ~~> (#vk.1, 0) ) )
            next
              case initiatereader
              by step( contradiction /* impossible chain */ )
            next
              case tag1
              step( solve( (#vl, 0) ~~> (#vk.1, 0) ) )
                case d_0_fst
                by step( contradiction /* impossible chain */ )
              next
                case d_0_snd
                by step( solve( (#vr.3, 0) ~~> (#vk.1, 0) ) )
              qed
            qed
          qed
        next
          case split_case_4
          step( solve( !KU( (~k⊕~r1) ) @ #vk.1 ) )
            case c_xor
            by step( contradiction /* cyclic */ )
          next
            case coerce
            step( solve( !KD( (~k⊕~r1) ) ▶₀ #vk.1 ) )
              case acceptreader
              by step( solve( (#vl, 0) ~~> (#vk.1, 0) ) )
            next
              case initiatereader
              by step( contradiction /* impossible chain */ )
            next
              case tag1
              step( solve( (#vl, 0) ~~> (#vk.1, 0) ) )
                case d_0_fst
                by step( contradiction /* impossible chain */ )
              next
                case d_0_snd
                by step( solve( (#vr.3, 0) ~~> (#vk.1, 0) ) )
              qed
            qed
          qed
        next
          case split_case_5
          step( solve( !KU( (~k⊕r0⊕h((~k⊕~r1⊕r0))) ) @ #vk.2 ) )
            case c_xor_case_1
            step( solve( !KU( (~k⊕h((~k⊕~r1⊕r0))) ) @ #vk.3 ) )
              case c_xor
              by step( solve( !KU( ~k ) @ #vk.5 ) )
            next
              case coerce
              step( solve( !KD( (~k⊕h((~k⊕~r1⊕r0))) ) ▶₀ #vk.2 ) )
                case acceptreader
                by step( solve( (#vl, 0) ~~> (#vk.2, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl, 0) ~~> (#vk.2, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.3, 0) ~~> (#vk.2, 0) ) )
                qed
              qed
            qed
          next
            case c_xor_case_2
            by step( solve( !KU( ~k ) @ #vk.4 ) )
          next
            case c_xor_case_3
            step( solve( !KU( (~k⊕r0) ) @ #vk.4 ) )
              case c_xor
              by step( solve( !KU( ~k ) @ #vk.5 ) )
            next
              case coerce
              step( solve( !KD( (~k⊕r0) ) ▶₀ #vk.2 ) )
                case acceptreader
                by step( solve( (#vl, 0) ~~> (#vk.2, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl, 0) ~~> (#vk.2, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.3, 0) ~~> (#vk.2, 0) ) )
                qed
              qed
            qed
          next
            case coerce
            step( solve( !KD( (~k⊕r0⊕h((~k⊕~r1⊕r0))) ) ▶₀ #vk.1 ) )
              case acceptreader
              by step( solve( (#vl, 0) ~~> (#vk.1, 0) ) )
            next
              case initiatereader
              by step( contradiction /* impossible chain */ )
            next
              case tag1
              step( solve( (#vl, 0) ~~> (#vk.1, 0) ) )
                case d_0_fst
                by step( contradiction /* impossible chain */ )
              next
                case d_0_snd
                by step( solve( (#vr.3, 0) ~~> (#vk.1, 0) ) )
              qed
            qed
          qed
        next
          case split_case_6
          step( solve( !KU( (~r1⊕x) ) @ #vk.1 ) )
            case c_xor
            by step( contradiction /* cyclic */ )
          next
            case coerce
            step( solve( !KD( (~r1⊕x) ) ▶₀ #vk.1 ) )
              case acceptreader
              by step( solve( (#vl, 0) ~~> (#vk.1, 0) ) )
            next
              case initiatereader
              by step( contradiction /* impossible chain */ )
            next
              case tag1
              step( solve( (#vl, 0) ~~> (#vk.1, 0) ) )
                case d_0_fst
                by step( contradiction /* impossible chain */ )
              next
                case d_0_snd
                by step( solve( (#vr.3, 0) ~~> (#vk.1, 0) ) )
              qed
            qed
          qed
        next
          case split_case_7
          step( solve( !KU( (~k⊕~r1⊕z) ) @ #vk.1 ) )
            case c_xor_case_1
            by step( contradiction /* cyclic */ )
          next
            case c_xor_case_2
            by step( solve( !KU( ~k ) @ #vk.4 ) )
          next
            case c_xor_case_3
            step( solve( !KU( (~r1⊕z⊕h(z)) ) @ #vk.2 ) )
              case c_xor_case_1
              step( solve( !KU( (~k⊕~r1) ) @ #vk.4 ) )
                case c_xor
                by step( contradiction /* cyclic */ )
              next
                case coerce
                step( solve( !KD( (~k⊕~r1) ) ▶₀ #vk.3 ) )
                  case acceptreader
                  by step( solve( (#vl, 0) ~~> (#vk.3, 0) ) )
                next
                  case initiatereader
                  by step( contradiction /* impossible chain */ )
                next
                  case tag1
                  step( solve( (#vl, 0) ~~> (#vk.3, 0) ) )
                    case d_0_fst
                    by step( contradiction /* impossible chain */ )
                  next
                    case d_0_snd
                    by step( solve( (#vr.3, 0) ~~> (#vk.3, 0) ) )
                  qed
                qed
              qed
            next
              case c_xor_case_2
              step( solve( !KU( (~k⊕~r1) ) @ #vk.4 ) )
                case c_xor
                by step( contradiction /* cyclic */ )
              next
                case coerce
                step( solve( !KD( (~k⊕~r1) ) ▶₀ #vk.3 ) )
                  case acceptreader
                  by step( solve( (#vl, 0) ~~> (#vk.3, 0) ) )
                next
                  case initiatereader
                  by step( contradiction /* impossible chain */ )
                next
                  case tag1
                  step( solve( (#vl, 0) ~~> (#vk.3, 0) ) )
                    case d_0_fst
                    by step( contradiction /* impossible chain */ )
                  next
                    case d_0_snd
                    by step( solve( (#vr.3, 0) ~~> (#vk.3, 0) ) )
                  qed
                qed
              qed
            next
              case c_xor_case_3
              step( solve( !KU( (~k⊕~r1) ) @ #vk.4 ) )
                case c_xor
                by step( contradiction /* cyclic */ )
              next
                case coerce
                step( solve( !KD( (~k⊕~r1) ) ▶₀ #vk.3 ) )
                  case acceptreader
                  by step( solve( (#vl, 0) ~~> (#vk.3, 0) ) )
                next
                  case initiatereader
                  by step( contradiction /* impossible chain */ )
                next
                  case tag1
                  step( solve( (#vl, 0) ~~> (#vk.3, 0) ) )
                    case d_0_fst
                    by step( contradiction /* impossible chain */ )
                  next
                    case d_0_snd
                    by step( solve( (#vr.3, 0) ~~> (#vk.3, 0) ) )
                  qed
                qed
              qed
            next
              case coerce
              step( solve( !KD( (~r1⊕z⊕h(z)) ) ▶₀ #vk.2 ) )
                case acceptreader
                by step( solve( (#vl, 0) ~~> (#vk.2, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl, 0) ~~> (#vk.2, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.3, 0) ~~> (#vk.2, 0) ) )
                qed
              qed
            qed
          next
            case coerce
            step( solve( !KD( (~k⊕~r1⊕z) ) ▶₀ #vk.1 ) )
              case acceptreader
              by step( solve( (#vl, 0) ~~> (#vk.1, 0) ) )
            next
              case initiatereader
              by step( contradiction /* impossible chain */ )
            next
              case tag1
              step( solve( (#vl, 0) ~~> (#vk.1, 0) ) )
                case d_0_fst
                by step( contradiction /* impossible chain */ )
              next
                case d_0_snd
                by step( solve( (#vr.3, 0) ~~> (#vk.1, 0) ) )
              qed
            qed
          qed
        next
          case split_case_8
          step( solve( !KU( (~k⊕x) ) @ #vk.1 ) )
            case c_xor
            by step( solve( !KU( ~k ) @ #vk.4 ) )
          next
            case coerce
            step( solve( !KD( (~k⊕x) ) ▶₀ #vk.1 ) )
              case acceptreader
              by step( solve( (#vl, 0) ~~> (#vk.1, 0) ) )
            next
              case initiatereader
              by step( contradiction /* impossible chain */ )
            next
              case tag1
              step( solve( (#vl, 0) ~~> (#vk.1, 0) ) )
                case d_0_fst
                by step( contradiction /* impossible chain */ )
              next
                case d_0_snd
                by step( solve( (#vr.3, 0) ~~> (#vk.1, 0) ) )
              qed
            qed
          qed
        qed
      next
        case tag1_case_1
        step( solve( splitEqs(0) ) )
          case split_case_1
          by step( solve( !KU( ~k ) @ #vk.1 ) )
        next
          case split_case_2
          by step( contradiction /* cyclic */ )
        next
          case split_case_3
          step( solve( splitEqs(2) ) )
            case split_case_1
            step( solve( !KU( h((~k⊕~r0⊕~r1)) ) @ #vk.2 ) )
              case c_h
              step( solve( !KU( (~k⊕~r0⊕~r1) ) @ #vk.3 ) )
                case c_xor_case_1
                by step( contradiction /* cyclic */ )
              next
                case c_xor_case_2
                by step( solve( !KU( ~k ) @ #vk.5 ) )
              next
                case c_xor_case_3
                by step( contradiction /* cyclic */ )
              next
                case coerce
                step( solve( !KD( (~k⊕~r0⊕~r1) ) ▶₀ #vk.2 ) )
                  case acceptreader
                  by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                next
                  case initiatereader
                  by step( contradiction /* impossible chain */ )
                next
                  case tag1
                  step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                    case d_0_fst
                    by step( contradiction /* impossible chain */ )
                  next
                    case d_0_snd
                    by step( solve( (#vr.5, 0) ~~> (#vk.2, 0) ) )
                  qed
                qed
              qed
            next
              case tag1_case_1
              step( solve( !KU( ~r0 ) @ #vk.2 ) )
                case tag1
                step( solve( splitEqs(5) ) )
                  case split
                  step( solve( !KU( (~k⊕~k2⊕~r0⊕~r1⊕~r1.1) ) @ #vk.3 ) )
                    case c_xor_case_01
                    by step( contradiction /* cyclic */ )
                  next
                    case c_xor_case_02
                    by step( contradiction /* cyclic */ )
                  next
                    case c_xor_case_03
                    step( solve( !KU( (~k⊕~k2⊕~r1.1) ) @ #vk.4 ) )
                      case c_xor_case_1
                      by step( solve( !KU( ~k2 ) @ #vk.7 ) )
                    next
                      case c_xor_case_2
                      by step( solve( !KU( ~k ) @ #vk.7 ) )
                    next
                      case c_xor_case_3
                      by step( contradiction /* cyclic */ )
                    next
                      case coerce
                      step( solve( !KD( (~k⊕~k2⊕~r1.1) ) ▶₀ #vk.4 ) )
                        case acceptreader
                        by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                      next
                        case initiatereader
                        by step( contradiction /* impossible chain */ )
                      next
                        case tag1
                        step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                          case d_0_fst
                          by step( contradiction /* impossible chain */ )
                        next
                          case d_0_snd
                          by step( solve( (#vr.8, 0) ~~> (#vk.4, 0) ) )
                        qed
                      qed
                    qed
                  next
                    case c_xor_case_04
                    by step( solve( !KU( ~k2 ) @ #vk.5 ) )
                  next
                    case c_xor_case_05
                    step( solve( !KU( (~k⊕~r0⊕~r1.1) ) @ #vk.4 ) )
                      case c_xor_case_1
                      by step( contradiction /* cyclic */ )
                    next
                      case c_xor_case_2
                      by step( solve( !KU( ~k ) @ #vk.7 ) )
                    next
                      case c_xor_case_3
                      by step( contradiction /* cyclic */ )
                    next
                      case coerce
                      step( solve( !KD( (~k⊕~r0⊕~r1.1) ) ▶₀ #vk.4 ) )
                        case acceptreader
                        by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                      next
                        case initiatereader
                        by step( contradiction /* impossible chain */ )
                      next
                        case tag1
                        step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                          case d_0_fst
                          by step( contradiction /* impossible chain */ )
                        next
                          case d_0_snd
                          by step( solve( (#vr.8, 0) ~~> (#vk.4, 0) ) )
                        qed
                      qed
                    qed
                  next
                    case c_xor_case_06
                    step( solve( !KU( (~k⊕~r1⊕~r1.1) ) @ #vk.4 ) )
                      case c_xor_case_1
                      by step( contradiction /* cyclic */ )
                    next
                      case c_xor_case_2
                      by step( solve( !KU( ~k ) @ #vk.7 ) )
                    next
                      case c_xor_case_3
                      by step( contradiction /* cyclic */ )
                    next
                      case coerce
                      step( solve( !KD( (~k⊕~r1⊕~r1.1) ) ▶₀ #vk.4 ) )
                        case acceptreader
                        by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                      next
                        case initiatereader
                        by step( contradiction /* impossible chain */ )
                      next
                        case tag1
                        step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                          case d_0_fst
                          by step( contradiction /* impossible chain */ )
                        next
                          case d_0_snd
                          by step( solve( (#vr.8, 0) ~~> (#vk.4, 0) ) )
                        qed
                      qed
                    qed
                  next
                    case c_xor_case_07
                    step( solve( !KU( (~k⊕~r1.1) ) @ #vk.4 ) )
                      case c_xor
                      by step( contradiction /* cyclic */ )
                    next
                      case coerce
                      step( solve( !KD( (~k⊕~r1.1) ) ▶₀ #vk.4 ) )
                        case acceptreader
                        by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                      next
                        case initiatereader
                        by step( contradiction /* impossible chain */ )
                      next
                        case tag1
                        step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                          case d_0_fst
                          by step( contradiction /* impossible chain */ )
                        next
                          case d_0_snd
                          by step( solve( (#vr.8, 0) ~~> (#vk.4, 0) ) )
                        qed
                      qed
                    qed
                  next
                    case c_xor_case_08
                    by step( solve( !KU( ~k ) @ #vk.5 ) )
                  next
                    case c_xor_case_09
                    step( solve( !KU( (~k2⊕~r0⊕~r1.1) ) @ #vk.4 ) )
                      case c_xor_case_1
                      by step( contradiction /* cyclic */ )
                    next
                      case c_xor_case_2
                      by step( solve( !KU( ~k2 ) @ #vk.7 ) )
                    next
                      case c_xor_case_3
                      by step( contradiction /* cyclic */ )
                    next
                      case coerce
                      step( solve( !KD( (~k2⊕~r0⊕~r1.1) ) ▶₀ #vk.4 ) )
                        case acceptreader
                        by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                      next
                        case initiatereader
                        by step( contradiction /* impossible chain */ )
                      next
                        case tag1
                        step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                          case d_0_fst
                          by step( contradiction /* impossible chain */ )
                        next
                          case d_0_snd
                          by step( solve( (#vr.8, 0) ~~> (#vk.4, 0) ) )
                        qed
                      qed
                    qed
                  next
                    case c_xor_case_10
                    step( solve( !KU( (~k2⊕~r1⊕~r1.1) ) @ #vk.4 ) )
                      case c_xor_case_1
                      by step( contradiction /* cyclic */ )
                    next
                      case c_xor_case_2
                      by step( solve( !KU( ~k2 ) @ #vk.7 ) )
                    next
                      case c_xor_case_3
                      by step( contradiction /* cyclic */ )
                    next
                      case coerce
                      step( solve( !KD( (~k2⊕~r1⊕~r1.1) ) ▶₀ #vk.4 ) )
                        case acceptreader
                        by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                      next
                        case initiatereader
                        by step( contradiction /* impossible chain */ )
                      next
                        case tag1
                        step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                          case d_0_fst
                          by step( contradiction /* impossible chain */ )
                        next
                          case d_0_snd
                          by step( solve( (#vr.8, 0) ~~> (#vk.4, 0) ) )
                        qed
                      qed
                    qed
                  next
                    case c_xor_case_11
                    step( solve( !KU( (~k2⊕~r1.1) ) @ #vk.4 ) )
                      case c_xor
                      by step( contradiction /* cyclic */ )
                    next
                      case coerce
                      step( solve( !KD( (~k2⊕~r1.1) ) ▶₀ #vk.4 ) )
                        case acceptreader
                        by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                      next
                        case initiatereader
                        by step( contradiction /* impossible chain */ )
                      next
                        case tag1
                        step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                          case d_0_fst
                          by step( contradiction /* impossible chain */ )
                        next
                          case d_0_snd
                          by step( solve( (#vr.8, 0) ~~> (#vk.4, 0) ) )
                        qed
                      qed
                    qed
                  next
                    case c_xor_case_12
                    step( solve( !KU( (~r0⊕~r1⊕~r1.1) ) @ #vk.4 ) )
                      case c_xor_case_1
                      by step( contradiction /* cyclic */ )
                    next
                      case c_xor_case_2
                      by step( contradiction /* cyclic */ )
                    next
                      case c_xor_case_3
                      by step( contradiction /* cyclic */ )
                    next
                      case coerce
                      step( solve( !KD( (~r0⊕~r1⊕~r1.1) ) ▶₀ #vk.4 ) )
                        case acceptreader
                        by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                      next
                        case initiatereader
                        by step( contradiction /* impossible chain */ )
                      next
                        case tag1
                        step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                          case d_0_fst
                          by step( contradiction /* impossible chain */ )
                        next
                          case d_0_snd
                          by step( solve( (#vr.8, 0) ~~> (#vk.4, 0) ) )
                        qed
                      qed
                    qed
                  next
                    case c_xor_case_13
                    step( solve( !KU( (~r0⊕~r1.1) ) @ #vk.4 ) )
                      case c_xor
                      by step( contradiction /* cyclic */ )
                    next
                      case coerce
                      step( solve( !KD( (~r0⊕~r1.1) ) ▶₀ #vk.4 ) )
                        case acceptreader
                        by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                      next
                        case initiatereader
                        by step( contradiction /* impossible chain */ )
                      next
                        case tag1
                        step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                          case d_0_fst
                          by step( contradiction /* impossible chain */ )
                        next
                          case d_0_snd
                          by step( solve( (#vr.8, 0) ~~> (#vk.4, 0) ) )
                        qed
                      qed
                    qed
                  next
                    case c_xor_case_14
                    step( solve( !KU( (~r1⊕~r1.1) ) @ #vk.4 ) )
                      case c_xor
                      by step( contradiction /* cyclic */ )
                    next
                      case coerce
                      step( solve( !KD( (~r1⊕~r1.1) ) ▶₀ #vk.4 ) )
                        case acceptreader
                        by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                      next
                        case initiatereader
                        by step( contradiction /* impossible chain */ )
                      next
                        case tag1
                        step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                          case d_0_fst
                          by step( contradiction /* impossible chain */ )
                        next
                          case d_0_snd
                          by step( solve( (#vr.8, 0) ~~> (#vk.4, 0) ) )
                        qed
                      qed
                    qed
                  next
                    case c_xor_case_15
                    by step( contradiction /* cyclic */ )
                  next
                    case coerce
                    step( solve( !KD( (~k⊕~k2⊕~r0⊕~r1⊕~r1.1) ) ▶₀ #vk.3 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.8, 0) ~~> (#vk.3, 0) ) )
                      qed
                    qed
                  qed
                qed
              qed
            next
              case tag1_case_2
              by step( contradiction /* cyclic */ )
            qed
          next
            case split_case_2
            step( solve( !KU( (r0⊕~r1.1⊕h((~k⊕~r1⊕r0))) ) @ #vk.2 ) )
              case c_xor_case_1
              by step( contradiction /* cyclic */ )
            next
              case c_xor_case_2
              step( solve( !KU( (~r1.1⊕h((~k⊕~r1⊕r0))) ) @ #vk.3 ) )
                case c_xor
                by step( contradiction /* cyclic */ )
              next
                case coerce
                step( solve( !KD( (~r1.1⊕h((~k⊕~r1⊕r0))) ) ▶₀ #vk.2 ) )
                  case acceptreader
                  by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                next
                  case initiatereader
                  by step( contradiction /* impossible chain */ )
                next
                  case tag1
                  step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                    case d_0_fst
                    by step( contradiction /* impossible chain */ )
                  next
                    case d_0_snd
                    by step( solve( (#vr.5, 0) ~~> (#vk.2, 0) ) )
                  qed
                qed
              qed
            next
              case c_xor_case_3
              step( solve( !KU( (r0⊕~r1.1) ) @ #vk.4 ) )
                case c_xor
                by step( contradiction /* cyclic */ )
              next
                case coerce
                step( solve( !KD( (r0⊕~r1.1) ) ▶₀ #vk.2 ) )
                  case acceptreader
                  by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                next
                  case initiatereader
                  by step( contradiction /* impossible chain */ )
                next
                  case tag1
                  step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                    case d_0_fst
                    by step( contradiction /* impossible chain */ )
                  next
                    case d_0_snd
                    by step( solve( (#vr.5, 0) ~~> (#vk.2, 0) ) )
                  qed
                qed
              qed
            next
              case coerce
              step( solve( !KD( (r0⊕~r1.1⊕h((~k⊕~r1⊕r0))) ) ▶₀ #vk.1 ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.5, 0) ~~> (#vk.1, 0) ) )
                qed
              qed
            qed
          next
            case split_case_3
            step( solve( !KU( (x⊕~r1.1) ) @ #vk.1 ) )
              case c_xor
              step( solve( !KU( (x⊕h((~k⊕~r1⊕x⊕~r1.1))) ) @ #vk.2 ) )
                case c_xor
                step( solve( !KU( h((~k⊕~r1⊕x⊕~r1.1)) ) @ #vk.5 ) )
                  case c_h
                  step( solve( !KU( (~k⊕~r1⊕x⊕~r1.1) ) @ #vk.6 ) )
                    case c_xor_case_1
                    step( solve( !KU( (~k⊕~r1⊕~r1.1) ) @ #vk.7 ) )
                      case c_xor_case_1
                      by step( contradiction /* cyclic */ )
                    next
                      case c_xor_case_2
                      by step( solve( !KU( ~k ) @ #vk.9 ) )
                    next
                      case c_xor_case_3
                      by step( contradiction /* cyclic */ )
                    next
                      case coerce
                      step( solve( !KD( (~k⊕~r1⊕~r1.1) ) ▶₀ #vk.5 ) )
                        case acceptreader
                        by step( solve( (#vl.1, 0) ~~> (#vk.5, 0) ) )
                      next
                        case initiatereader
                        by step( contradiction /* impossible chain */ )
                      next
                        case tag1
                        step( solve( (#vl.1, 0) ~~> (#vk.5, 0) ) )
                          case d_0_fst
                          by step( contradiction /* impossible chain */ )
                        next
                          case d_0_snd
                          by step( solve( (#vr.5, 0) ~~> (#vk.5, 0) ) )
                        qed
                      qed
                    qed
                  next
                    case c_xor_case_2
                    by step( contradiction /* cyclic */ )
                  next
                    case c_xor_case_3
                    step( solve( !KU( (~k⊕~r1.1) ) @ #vk.7 ) )
                      case c_xor
                      by step( contradiction /* cyclic */ )
                    next
                      case coerce
                      step( solve( !KD( (~k⊕~r1.1) ) ▶₀ #vk.5 ) )
                        case acceptreader
                        by step( solve( (#vl.1, 0) ~~> (#vk.5, 0) ) )
                      next
                        case initiatereader
                        by step( contradiction /* impossible chain */ )
                      next
                        case tag1
                        step( solve( (#vl.1, 0) ~~> (#vk.5, 0) ) )
                          case d_0_fst
                          by step( contradiction /* impossible chain */ )
                        next
                          case d_0_snd
                          by step( solve( (#vr.5, 0) ~~> (#vk.5, 0) ) )
                        qed
                      qed
                    qed
                  next
                    case c_xor_case_4
                    by step( solve( !KU( ~k ) @ #vk.8 ) )
                  next
                    case c_xor_case_5
                    step( solve( !KU( (~r1⊕~r1.1) ) @ #vk.7 ) )
                      case c_xor
                      by step( contradiction /* cyclic */ )
                    next
                      case coerce
                      step( solve( !KD( (~r1⊕~r1.1) ) ▶₀ #vk.5 ) )
                        case acceptreader
                        by step( solve( (#vl.1, 0) ~~> (#vk.5, 0) ) )
                      next
                        case initiatereader
                        by step( contradiction /* impossible chain */ )
                      next
                        case tag1
                        step( solve( (#vl.1, 0) ~~> (#vk.5, 0) ) )
                          case d_0_fst
                          by step( contradiction /* impossible chain */ )
                        next
                          case d_0_snd
                          by step( solve( (#vr.5, 0) ~~> (#vk.5, 0) ) )
                        qed
                      qed
                    qed
                  next
                    case c_xor_case_6
                    by step( contradiction /* cyclic */ )
                  next
                    case c_xor_case_7
                    by step( contradiction /* cyclic */ )
                  next
                    case coerce
                    step( solve( !KD( (~k⊕~r1⊕x⊕~r1.1) ) ▶₀ #vk.4 ) )
                      case acceptreader
                      by step( solve( (#vl.1, 0) ~~> (#vk.4, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.1, 0) ~~> (#vk.4, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.5, 0) ~~> (#vk.4, 0) ) )
                      qed
                    qed
                  qed
                next
                  case tag1_case_1
                  step( solve( !KU( (x.1⊕x.2) ) @ #vk.6 ) )
                    case c_xor
                    step( solve( !KU( ~r1.1 ) @ #vk.5 ) )
                      case tag1
                      step( solve( splitEqs(5) ) )
                        case split_case_1
                        by step( solve( !KU( ~k2 ) @ #vk.6 ) )
                      next
                        case split_case_2
                        by step( solve( !KU( ~k ) @ #vk.8 ) )
                      next
                        case split_case_3
                        by step( solve( !KU( ~k ) @ #vk.8 ) )
                      next
                        case split_case_4
                        step( solve( !KU( (~k2⊕x) ) @ #vk.6 ) )
                          case c_xor
                          by step( solve( !KU( ~k2 ) @ #vk.9 ) )
                        next
                          case coerce
                          step( solve( !KD( (~k2⊕x) ) ▶₀ #vk.6 ) )
                            case acceptreader
                            by step( solve( (#vl.2, 0) ~~> (#vk.6, 0) ) )
                          next
                            case initiatereader
                            by step( contradiction /* impossible chain */ )
                          next
                            case tag1
                            step( solve( (#vl.2, 0) ~~> (#vk.6, 0) ) )
                              case d_0_fst
                              by step( contradiction /* impossible chain */ )
                            next
                              case d_0_snd
                              by step( solve( (#vr.8, 0) ~~> (#vk.6, 0) ) )
                            qed
                          qed
                        qed
                      next
                        case split_case_5
                        step( solve( !KU( (~k2⊕x⊕~r1.2) ) @ #vk.6 ) )
                          case c_xor_case_1
                          step( solve( !KU( (~k⊕~r1⊕~r1.1) ) @ #vk.7 ) )
                            case c_xor_case_1
                            by step( contradiction /* cyclic */ )
                          next
                            case c_xor_case_2
                            by step( solve( !KU( ~k ) @ #vk.11 ) )
                          next
                            case c_xor_case_3
                            by step( contradiction /* cyclic */ )
                          next
                            case coerce
                            step( solve( !KD( (~k⊕~r1⊕~r1.1) ) ▶₀ #vk.7 ) )
                              case acceptreader
                              by step( solve( (#vl.2, 0) ~~> (#vk.7, 0) ) )
                            next
                              case initiatereader
                              by step( contradiction /* impossible chain */ )
                            next
                              case tag1
                              step( solve( (#vl.2, 0) ~~> (#vk.7, 0) ) )
                                case d_0_fst
                                by step( contradiction /* impossible chain */ )
                              next
                                case d_0_snd
                                by step( solve( (#vr.8, 0) ~~> (#vk.7, 0) ) )
                              qed
                            qed
                          qed
                        next
                          case c_xor_case_2
                          by step( solve( !KU( ~k2 ) @ #vk.10 ) )
                        next
                          case c_xor_case_3
                          step( solve( !KU( (~k⊕~r1⊕~r1.1) ) @ #vk.7 ) )
                            case c_xor_case_1
                            by step( contradiction /* cyclic */ )
                          next
                            case c_xor_case_2
                            by step( solve( !KU( ~k ) @ #vk.12 ) )
                          next
                            case c_xor_case_3
                            by step( contradiction /* cyclic */ )
                          next
                            case coerce
                            step( solve( !KD( (~k⊕~r1⊕~r1.1) ) ▶₀ #vk.7 ) )
                              case acceptreader
                              by step( solve( (#vl.2, 0) ~~> (#vk.7, 0) ) )
                            next
                              case initiatereader
                              by step( contradiction /* impossible chain */ )
                            next
                              case tag1
                              step( solve( (#vl.2, 0) ~~> (#vk.7, 0) ) )
                                case d_0_fst
                                by step( contradiction /* impossible chain */ )
                              next
                                case d_0_snd
                                by step( solve( (#vr.8, 0) ~~> (#vk.7, 0) ) )
                              qed
                            qed
                          qed
                        next
                          case coerce
                          step( solve( !KD( (~k2⊕x⊕~r1.2) ) ▶₀ #vk.6 ) )
                            case acceptreader
                            by step( solve( (#vl.2, 0) ~~> (#vk.6, 0) ) )
                          next
                            case initiatereader
                            by step( contradiction /* impossible chain */ )
                          next
                            case tag1
                            step( solve( (#vl.2, 0) ~~> (#vk.6, 0) ) )
                              case d_0_fst
                              by step( contradiction /* impossible chain */ )
                            next
                              case d_0_snd
                              by step( solve( (#vr.8, 0) ~~> (#vk.6, 0) ) )
                            qed
                          qed
                        qed
                      next
                        case split_case_6
                        by step( solve( !KU( ~k ) @ #vk.8 ) )
                      next
                        case split_case_7
                        step( solve( !KU( (x⊕~r1.2) ) @ #vk.6 ) )
                          case c_xor
                          step( solve( !KU( (~k⊕~k2⊕~r1⊕~r1.1) ) @ #vk.7 ) )
                            case c_xor_case_1
                            by step( contradiction /* cyclic */ )
                          next
                            case c_xor_case_2
                            by step( solve( !KU( ~k2 ) @ #vk.11 ) )
                          next
                            case c_xor_case_3
                            step( solve( !KU( (~k⊕~r1.1) ) @ #vk.10 ) )
                              case c_xor
                              by step( contradiction /* cyclic */ )
                            next
                              case coerce
                              step( solve( !KD( (~k⊕~r1.1) ) ▶₀ #vk.8 ) )
                                case acceptreader
                                by step( solve( (#vl.2, 0) ~~> (#vk.8, 0) ) )
                              next
                                case initiatereader
                                by step( contradiction /* impossible chain */ )
                              next
                                case tag1
                                step( solve( (#vl.2, 0) ~~> (#vk.8, 0) ) )
                                  case d_0_fst
                                  by step( contradiction /* impossible chain */ )
                                next
                                  case d_0_snd
                                  by step( solve( (#vr.8, 0) ~~> (#vk.8, 0) ) )
                                qed
                              qed
                            qed
                          next
                            case c_xor_case_4
                            by step( solve( !KU( ~k ) @ #vk.11 ) )
                          next
                            case c_xor_case_5
                            step( solve( !KU( (~k2⊕~r1.1) ) @ #vk.10 ) )
                              case c_xor
                              by step( contradiction /* cyclic */ )
                            next
                              case coerce
                              step( solve( !KD( (~k2⊕~r1.1) ) ▶₀ #vk.8 ) )
                                case acceptreader
                                by step( solve( (#vl.2, 0) ~~> (#vk.8, 0) ) )
                              next
                                case initiatereader
                                by step( contradiction /* impossible chain */ )
                              next
                                case tag1
                                step( solve( (#vl.2, 0) ~~> (#vk.8, 0) ) )
                                  case d_0_fst
                                  by step( contradiction /* impossible chain */ )
                                next
                                  case d_0_snd
                                  by step( solve( (#vr.8, 0) ~~> (#vk.8, 0) ) )
                                qed
                              qed
                            qed
                          next
                            case c_xor_case_6
                            step( solve( !KU( (~r1⊕~r1.1) ) @ #vk.10 ) )
                              case c_xor
                              by step( contradiction /* cyclic */ )
                            next
                              case coerce
                              step( solve( !KD( (~r1⊕~r1.1) ) ▶₀ #vk.8 ) )
                                case acceptreader
                                by step( solve( (#vl.2, 0) ~~> (#vk.8, 0) ) )
                              next
                                case initiatereader
                                by step( contradiction /* impossible chain */ )
                              next
                                case tag1
                                step( solve( (#vl.2, 0) ~~> (#vk.8, 0) ) )
                                  case d_0_fst
                                  by step( contradiction /* impossible chain */ )
                                next
                                  case d_0_snd
                                  by step( solve( (#vr.8, 0) ~~> (#vk.8, 0) ) )
                                qed
                              qed
                            qed
                          next
                            case c_xor_case_7
                            by step( contradiction /* cyclic */ )
                          next
                            case coerce
                            step( solve( !KD( (~k⊕~k2⊕~r1⊕~r1.1) ) ▶₀ #vk.7 ) )
                              case acceptreader
                              by step( solve( (#vl.2, 0) ~~> (#vk.7, 0) ) )
                            next
                              case initiatereader
                              by step( contradiction /* impossible chain */ )
                            next
                              case tag1
                              step( solve( (#vl.2, 0) ~~> (#vk.7, 0) ) )
                                case d_0_fst
                                by step( contradiction /* impossible chain */ )
                              next
                                case d_0_snd
                                by step( solve( (#vr.8, 0) ~~> (#vk.7, 0) ) )
                              qed
                            qed
                          qed
                        next
                          case coerce
                          step( solve( !KD( (x⊕~r1.2) ) ▶₀ #vk.6 ) )
                            case acceptreader
                            by step( solve( (#vl.2, 0) ~~> (#vk.6, 0) ) )
                          next
                            case initiatereader
                            by step( contradiction /* impossible chain */ )
                          next
                            case tag1
                            step( solve( (#vl.2, 0) ~~> (#vk.6, 0) ) )
                              case d_0_fst
                              by step( contradiction /* impossible chain */ )
                            next
                              case d_0_snd
                              by step( solve( (#vr.8, 0) ~~> (#vk.6, 0) ) )
                            qed
                          qed
                        qed
                      qed
                    qed
                  next
                    case coerce
                    step( solve( !KD( (x.1⊕x.2) ) ▶₀ #vk.4 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.7, 0) ~~> (#vk.4, 0) ) )
                      qed
                    qed
                  qed
                next
                  case tag1_case_2
                  by step( contradiction /* cyclic */ )
                qed
              next
                case coerce
                step( solve( !KD( (x⊕h((~k⊕~r1⊕x⊕~r1.1))) ) ▶₀ #vk.2 ) )
                  case acceptreader
                  by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                next
                  case initiatereader
                  by step( contradiction /* impossible chain */ )
                next
                  case tag1
                  step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                    case d_0_fst
                    by step( contradiction /* impossible chain */ )
                  next
                    case d_0_snd
                    by step( solve( (#vr.5, 0) ~~> (#vk.2, 0) ) )
                  qed
                qed
              qed
            next
              case coerce
              step( solve( !KD( (x⊕~r1.1) ) ▶₀ #vk.1 ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.5, 0) ~~> (#vk.1, 0) ) )
                qed
              qed
            qed
          qed
        next
          case split_case_4
          step( solve( !KU( (~r1.1⊕h((~k⊕~r1))) ) @ #vk.2 ) )
            case c_xor
            by step( contradiction /* cyclic */ )
          next
            case coerce
            step( solve( !KD( (~r1.1⊕h((~k⊕~r1))) ) ▶₀ #vk.1 ) )
              case acceptreader
              by step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
            next
              case initiatereader
              by step( contradiction /* impossible chain */ )
            next
              case tag1
              step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                case d_0_fst
                by step( contradiction /* impossible chain */ )
              next
                case d_0_snd
                by step( solve( (#vr.5, 0) ~~> (#vk.1, 0) ) )
              qed
            qed
          qed
        next
          case split_case_5
          step( solve( !KU( (~k⊕~r1) ) @ #vk.1 ) )
            case c_xor
            by step( contradiction /* cyclic */ )
          next
            case coerce
            step( solve( !KD( (~k⊕~r1) ) ▶₀ #vk.1 ) )
              case acceptreader
              by step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
            next
              case initiatereader
              by step( contradiction /* impossible chain */ )
            next
              case tag1
              step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                case d_0_fst
                by step( contradiction /* impossible chain */ )
              next
                case d_0_snd
                by step( solve( (#vr.5, 0) ~~> (#vk.1, 0) ) )
              qed
            qed
          qed
        next
          case split_case_6
          step( solve( !KU( (~r1⊕x) ) @ #vk.1 ) )
            case c_xor
            by step( contradiction /* cyclic */ )
          next
            case coerce
            step( solve( !KD( (~r1⊕x) ) ▶₀ #vk.1 ) )
              case acceptreader
              by step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
            next
              case initiatereader
              by step( contradiction /* impossible chain */ )
            next
              case tag1
              step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                case d_0_fst
                by step( contradiction /* impossible chain */ )
              next
                case d_0_snd
                by step( solve( (#vr.5, 0) ~~> (#vk.1, 0) ) )
              qed
            qed
          qed
        next
          case split_case_7
          step( solve( !KU( (~k⊕~r1⊕z) ) @ #vk.1 ) )
            case c_xor_case_1
            by step( contradiction /* cyclic */ )
          next
            case c_xor_case_2
            by step( solve( !KU( ~k ) @ #vk.4 ) )
          next
            case c_xor_case_3
            step( solve( !KU( (~x⊕x.1⊕x.2) ) @ #vk.2 ) )
              case c_xor_case_1
              step( solve( !KU( (~k⊕~r1) ) @ #vk.4 ) )
                case c_xor
                by step( contradiction /* cyclic */ )
              next
                case coerce
                step( solve( !KD( (~k⊕~r1) ) ▶₀ #vk.3 ) )
                  case acceptreader
                  by step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                next
                  case initiatereader
                  by step( contradiction /* impossible chain */ )
                next
                  case tag1
                  step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                    case d_0_fst
                    by step( contradiction /* impossible chain */ )
                  next
                    case d_0_snd
                    by step( solve( (#vr.5, 0) ~~> (#vk.3, 0) ) )
                  qed
                qed
              qed
            next
              case c_xor_case_2
              step( solve( !KU( ~x.2 ) @ #vk.6 ) )
                case fresh
                step( solve( !KU( (~k⊕~r1) ) @ #vk.5 ) )
                  case c_xor
                  by step( contradiction /* cyclic */ )
                next
                  case coerce
                  step( solve( !KD( (~k⊕~r1) ) ▶₀ #vk.4 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.4, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.4, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.5, 0) ~~> (#vk.4, 0) ) )
                    qed
                  qed
                qed
              next
                case tag1_case_1
                by step( contradiction /* cyclic */ )
              next
                case tag1_case_2
                step( solve( !KU( (~k⊕~r1) ) @ #vk.5 ) )
                  case c_xor
                  by step( contradiction /* cyclic */ )
                next
                  case coerce
                  step( solve( !KD( (~k⊕~r1) ) ▶₀ #vk.4 ) )
                    case acceptreader
                    by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.7, 0) ~~> (#vk.4, 0) ) )
                    qed
                  qed
                qed
              qed
            next
              case c_xor_case_3
              step( solve( !KU( (~k⊕~r1) ) @ #vk.4 ) )
                case c_xor
                by step( contradiction /* cyclic */ )
              next
                case coerce
                step( solve( !KD( (~k⊕~r1) ) ▶₀ #vk.3 ) )
                  case acceptreader
                  by step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                next
                  case initiatereader
                  by step( contradiction /* impossible chain */ )
                next
                  case tag1
                  step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                    case d_0_fst
                    by step( contradiction /* impossible chain */ )
                  next
                    case d_0_snd
                    by step( solve( (#vr.5, 0) ~~> (#vk.3, 0) ) )
                  qed
                qed
              qed
            next
              case coerce
              step( solve( !KD( (~x⊕x.1⊕x.2) ) ▶₀ #vk.2 ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.5, 0) ~~> (#vk.2, 0) ) )
                qed
              qed
            qed
          next
            case coerce
            step( solve( !KD( (~k⊕~r1⊕z) ) ▶₀ #vk.1 ) )
              case acceptreader
              by step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
            next
              case initiatereader
              by step( contradiction /* impossible chain */ )
            next
              case tag1
              step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                case d_0_fst
                by step( contradiction /* impossible chain */ )
              next
                case d_0_snd
                by step( solve( (#vr.5, 0) ~~> (#vk.1, 0) ) )
              qed
            qed
          qed
        next
          case split_case_8
          step( solve( !KU( (~k⊕x) ) @ #vk.1 ) )
            case c_xor
            by step( solve( !KU( ~k ) @ #vk.4 ) )
          next
            case coerce
            step( solve( !KD( (~k⊕x) ) ▶₀ #vk.1 ) )
              case acceptreader
              by step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
            next
              case initiatereader
              by step( contradiction /* impossible chain */ )
            next
              case tag1
              step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                case d_0_fst
                by step( contradiction /* impossible chain */ )
              next
                case d_0_snd
                by step( solve( (#vr.5, 0) ~~> (#vk.1, 0) ) )
              qed
            qed
          qed
        qed
      next
        case tag1_case_2
        step( solve( splitEqs(0) ) )
          case split_case_1
          by step( solve( !KU( ~k ) @ #vk.1 ) )
        next
          case split_case_2
          by step( contradiction /* cyclic */ )
        next
          case split_case_3
          step( solve( splitEqs(2) ) )
            case split_case_1
            by step( solve( !KU( ~k2 ) @ #vk.1 ) )
          next
            case split_case_2
            step( solve( !KU( (~k⊕~k2⊕h((~k⊕~r0⊕~r1))) ) @ #vk.2 ) )
              case c_xor_case_1
              by step( solve( !KU( ~k2 ) @ #vk.4 ) )
            next
              case c_xor_case_2
              by step( solve( !KU( ~k ) @ #vk.4 ) )
            next
              case c_xor_case_3
              step( solve( !KU( h((~k⊕~r0⊕~r1)) ) @ #vk.3 ) )
                case c_h
                step( solve( !KU( (~k⊕~k2) ) @ #vk.4 ) )
                  case c_xor
                  by step( solve( !KU( ~k2 ) @ #vk.6 ) )
                next
                  case coerce
                  step( solve( !KD( (~k⊕~k2) ) ▶₀ #vk.3 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.5, 0) ~~> (#vk.3, 0) ) )
                    qed
                  qed
                qed
              next
                case tag1_case_1
                step( solve( !KU( (~k⊕~k2) ) @ #vk.4 ) )
                  case c_xor
                  by step( solve( !KU( ~k2 ) @ #vk.6 ) )
                next
                  case coerce
                  step( solve( !KD( (~k⊕~k2) ) ▶₀ #vk.3 ) )
                    case acceptreader
                    by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.7, 0) ~~> (#vk.3, 0) ) )
                    qed
                  qed
                qed
              next
                case tag1_case_2
                by step( contradiction /* cyclic */ )
              qed
            next
              case coerce
              step( solve( !KD( (~k⊕~k2⊕h((~k⊕~r0⊕~r1))) ) ▶₀ #vk.1 ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.5, 0) ~~> (#vk.1, 0) ) )
                qed
              qed
            qed
          next
            case split_case_3
            step( solve( !KU( (~k2⊕~r1.1) ) @ #vk.1 ) )
              case c_xor
              by step( solve( !KU( ~k2 ) @ #vk.4 ) )
            next
              case coerce
              step( solve( !KD( (~k2⊕~r1.1) ) ▶₀ #vk.1 ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.5, 0) ~~> (#vk.1, 0) ) )
                qed
              qed
            qed
          next
            case split_case_4
            step( solve( !KU( (~k2⊕x⊕~r1.1) ) @ #vk.1 ) )
              case c_xor_case_1
              step( solve( !KU( (~k⊕x⊕h((~k⊕~k2⊕~r1⊕x⊕~r1.1))) ) @ #vk.2 ) )
                case c_xor_case_1
                step( solve( !KU( (~k2⊕~r1.1) ) @ #vk.3 ) )
                  case c_xor
                  by step( solve( !KU( ~k2 ) @ #vk.7 ) )
                next
                  case coerce
                  step( solve( !KD( (~k2⊕~r1.1) ) ▶₀ #vk.3 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.5, 0) ~~> (#vk.3, 0) ) )
                    qed
                  qed
                qed
              next
                case c_xor_case_2
                by step( solve( !KU( ~k ) @ #vk.6 ) )
              next
                case c_xor_case_3
                step( solve( !KU( (~k2⊕~r1.1) ) @ #vk.3 ) )
                  case c_xor
                  by step( solve( !KU( ~k2 ) @ #vk.8 ) )
                next
                  case coerce
                  step( solve( !KD( (~k2⊕~r1.1) ) ▶₀ #vk.3 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.5, 0) ~~> (#vk.3, 0) ) )
                    qed
                  qed
                qed
              next
                case coerce
                step( solve( !KD( (~k⊕x⊕h((~k⊕~k2⊕~r1⊕x⊕~r1.1))) ) ▶₀ #vk.2 ) )
                  case acceptreader
                  by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                next
                  case initiatereader
                  by step( contradiction /* impossible chain */ )
                next
                  case tag1
                  step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                    case d_0_fst
                    by step( contradiction /* impossible chain */ )
                  next
                    case d_0_snd
                    by step( solve( (#vr.5, 0) ~~> (#vk.2, 0) ) )
                  qed
                qed
              qed
            next
              case c_xor_case_2
              by step( solve( !KU( ~k2 ) @ #vk.4 ) )
            next
              case c_xor_case_3
              step( solve( !KU( (~k⊕x⊕h((~k⊕~k2⊕~r1⊕x⊕~r1.1))) ) @ #vk.2 ) )
                case c_xor_case_1
                step( solve( !KU( (~k2⊕x) ) @ #vk.4 ) )
                  case c_xor
                  by step( solve( !KU( ~k2 ) @ #vk.7 ) )
                next
                  case coerce
                  step( solve( !KD( (~k2⊕x) ) ▶₀ #vk.3 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.5, 0) ~~> (#vk.3, 0) ) )
                    qed
                  qed
                qed
              next
                case c_xor_case_2
                by step( solve( !KU( ~k ) @ #vk.6 ) )
              next
                case c_xor_case_3
                step( solve( !KU( (~k2⊕x) ) @ #vk.4 ) )
                  case c_xor
                  by step( solve( !KU( ~k2 ) @ #vk.8 ) )
                next
                  case coerce
                  step( solve( !KD( (~k2⊕x) ) ▶₀ #vk.3 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.5, 0) ~~> (#vk.3, 0) ) )
                    qed
                  qed
                qed
              next
                case coerce
                step( solve( !KD( (~k⊕x⊕h((~k⊕~k2⊕~r1⊕x⊕~r1.1))) ) ▶₀ #vk.2 ) )
                  case acceptreader
                  by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                next
                  case initiatereader
                  by step( contradiction /* impossible chain */ )
                next
                  case tag1
                  step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                    case d_0_fst
                    by step( contradiction /* impossible chain */ )
                  next
                    case d_0_snd
                    by step( solve( (#vr.5, 0) ~~> (#vk.2, 0) ) )
                  qed
                qed
              qed
            next
              case coerce
              step( solve( !KD( (~k2⊕x⊕~r1.1) ) ▶₀ #vk.1 ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.5, 0) ~~> (#vk.1, 0) ) )
                qed
              qed
            qed
          next
            case split_case_5
            step( solve( !KU( (~k2⊕x) ) @ #vk.1 ) )
              case c_xor
              by step( solve( !KU( ~k2 ) @ #vk.4 ) )
            next
              case coerce
              step( solve( !KD( (~k2⊕x) ) ▶₀ #vk.1 ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.5, 0) ~~> (#vk.1, 0) ) )
                qed
              qed
            qed
          next
            case split_case_6
            step( solve( !KU( (x⊕~r1.1) ) @ #vk.1 ) )
              case c_xor
              step( solve( !KU( (~k⊕~k2⊕x⊕h((~k⊕~r1⊕x⊕~r1.1))) ) @ #vk.2 ) )
                case c_xor_case_1
                step( solve( !KU( (~k⊕~k2⊕h((~k⊕~r1⊕x⊕~r1.1))) ) @ #vk.5 ) )
                  case c_xor_case_1
                  by step( solve( !KU( ~k2 ) @ #vk.7 ) )
                next
                  case c_xor_case_2
                  by step( solve( !KU( ~k ) @ #vk.7 ) )
                next
                  case c_xor_case_3
                  step( solve( !KU( h((~k⊕~r1⊕x⊕~r1.1)) ) @ #vk.6 ) )
                    case c_h
                    step( solve( !KU( (~k⊕~k2) ) @ #vk.7 ) )
                      case c_xor
                      by step( solve( !KU( ~k2 ) @ #vk.9 ) )
                    next
                      case coerce
                      step( solve( !KD( (~k⊕~k2) ) ▶₀ #vk.5 ) )
                        case acceptreader
                        by step( solve( (#vl.1, 0) ~~> (#vk.5, 0) ) )
                      next
                        case initiatereader
                        by step( contradiction /* impossible chain */ )
                      next
                        case tag1
                        step( solve( (#vl.1, 0) ~~> (#vk.5, 0) ) )
                          case d_0_fst
                          by step( contradiction /* impossible chain */ )
                        next
                          case d_0_snd
                          by step( solve( (#vr.5, 0) ~~> (#vk.5, 0) ) )
                        qed
                      qed
                    qed
                  next
                    case tag1_case_1
                    step( solve( !KU( (~k⊕~k2) ) @ #vk.7 ) )
                      case c_xor
                      by step( solve( !KU( ~k2 ) @ #vk.9 ) )
                    next
                      case coerce
                      step( solve( !KD( (~k⊕~k2) ) ▶₀ #vk.5 ) )
                        case acceptreader
                        by step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                      next
                        case initiatereader
                        by step( contradiction /* impossible chain */ )
                      next
                        case tag1
                        step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                          case d_0_fst
                          by step( contradiction /* impossible chain */ )
                        next
                          case d_0_snd
                          by step( solve( (#vr.7, 0) ~~> (#vk.5, 0) ) )
                        qed
                      qed
                    qed
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case coerce
                  step( solve( !KD( (~k⊕~k2⊕h((~k⊕~r1⊕x⊕~r1.1))) ) ▶₀ #vk.3 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.5, 0) ~~> (#vk.3, 0) ) )
                    qed
                  qed
                qed
              next
                case c_xor_case_2
                by step( solve( !KU( ~k2 ) @ #vk.6 ) )
              next
                case c_xor_case_3
                step( solve( !KU( (~k⊕h((~k⊕~r1⊕x⊕~r1.1))) ) @ #vk.5 ) )
                  case c_xor
                  by step( solve( !KU( ~k ) @ #vk.8 ) )
                next
                  case coerce
                  step( solve( !KD( (~k⊕h((~k⊕~r1⊕x⊕~r1.1))) ) ▶₀ #vk.3 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.5, 0) ~~> (#vk.3, 0) ) )
                    qed
                  qed
                qed
              next
                case c_xor_case_4
                by step( solve( !KU( ~k ) @ #vk.6 ) )
              next
                case c_xor_case_5
                step( solve( !KU( (~k2⊕h((~k⊕~r1⊕x⊕~r1.1))) ) @ #vk.5 ) )
                  case c_xor
                  by step( solve( !KU( ~k2 ) @ #vk.8 ) )
                next
                  case coerce
                  step( solve( !KD( (~k2⊕h((~k⊕~r1⊕x⊕~r1.1))) ) ▶₀ #vk.3 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.5, 0) ~~> (#vk.3, 0) ) )
                    qed
                  qed
                qed
              next
                case c_xor_case_6
                step( solve( !KU( (x⊕h((~k⊕~r1⊕x⊕~r1.1))) ) @ #vk.5 ) )
                  case c_xor
                  step( solve( !KU( (~k⊕~k2) ) @ #vk.6 ) )
                    case c_xor
                    by step( solve( !KU( ~k2 ) @ #vk.8 ) )
                  next
                    case coerce
                    step( solve( !KD( (~k⊕~k2) ) ▶₀ #vk.4 ) )
                      case acceptreader
                      by step( solve( (#vl.1, 0) ~~> (#vk.4, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.1, 0) ~~> (#vk.4, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.5, 0) ~~> (#vk.4, 0) ) )
                      qed
                    qed
                  qed
                next
                  case coerce
                  step( solve( !KD( (x⊕h((~k⊕~r1⊕x⊕~r1.1))) ) ▶₀ #vk.3 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.5, 0) ~~> (#vk.3, 0) ) )
                    qed
                  qed
                qed
              next
                case c_xor_case_7
                step( solve( !KU( h((~k⊕~r1⊕x⊕~r1.1)) ) @ #vk.5 ) )
                  case c_h
                  step( solve( !KU( (~k⊕~k2⊕x) ) @ #vk.6 ) )
                    case c_xor_case_1
                    by step( solve( !KU( ~k2 ) @ #vk.9 ) )
                  next
                    case c_xor_case_2
                    by step( solve( !KU( ~k ) @ #vk.9 ) )
                  next
                    case c_xor_case_3
                    step( solve( !KU( (~k⊕~r1⊕x⊕~r1.1) ) @ #vk.7 ) )
                      case c_xor_case_1
                      step( solve( !KU( (~k⊕~k2) ) @ #vk.8 ) )
                        case c_xor
                        by step( solve( !KU( ~k2 ) @ #vk.10 ) )
                      next
                        case coerce
                        step( solve( !KD( (~k⊕~k2) ) ▶₀ #vk.6 ) )
                          case acceptreader
                          by step( solve( (#vl.1, 0) ~~> (#vk.6, 0) ) )
                        next
                          case initiatereader
                          by step( contradiction /* impossible chain */ )
                        next
                          case tag1
                          step( solve( (#vl.1, 0) ~~> (#vk.6, 0) ) )
                            case d_0_fst
                            by step( contradiction /* impossible chain */ )
                          next
                            case d_0_snd
                            by step( solve( (#vr.5, 0) ~~> (#vk.6, 0) ) )
                          qed
                        qed
                      qed
                    next
                      case c_xor_case_2
                      by step( contradiction /* cyclic */ )
                    next
                      case c_xor_case_3
                      step( solve( !KU( (~k⊕~k2) ) @ #vk.8 ) )
                        case c_xor
                        by step( solve( !KU( ~k2 ) @ #vk.11 ) )
                      next
                        case coerce
                        step( solve( !KD( (~k⊕~k2) ) ▶₀ #vk.6 ) )
                          case acceptreader
                          by step( solve( (#vl.1, 0) ~~> (#vk.6, 0) ) )
                        next
                          case initiatereader
                          by step( contradiction /* impossible chain */ )
                        next
                          case tag1
                          step( solve( (#vl.1, 0) ~~> (#vk.6, 0) ) )
                            case d_0_fst
                            by step( contradiction /* impossible chain */ )
                          next
                            case d_0_snd
                            by step( solve( (#vr.5, 0) ~~> (#vk.6, 0) ) )
                          qed
                        qed
                      qed
                    next
                      case c_xor_case_4
                      by step( solve( !KU( ~k ) @ #vk.10 ) )
                    next
                      case c_xor_case_5
                      step( solve( !KU( (~k⊕~k2) ) @ #vk.8 ) )
                        case c_xor
                        by step( solve( !KU( ~k2 ) @ #vk.11 ) )
                      next
                        case coerce
                        step( solve( !KD( (~k⊕~k2) ) ▶₀ #vk.6 ) )
                          case acceptreader
                          by step( solve( (#vl.1, 0) ~~> (#vk.6, 0) ) )
                        next
                          case initiatereader
                          by step( contradiction /* impossible chain */ )
                        next
                          case tag1
                          step( solve( (#vl.1, 0) ~~> (#vk.6, 0) ) )
                            case d_0_fst
                            by step( contradiction /* impossible chain */ )
                          next
                            case d_0_snd
                            by step( solve( (#vr.5, 0) ~~> (#vk.6, 0) ) )
                          qed
                        qed
                      qed
                    next
                      case c_xor_case_6
                      by step( contradiction /* cyclic */ )
                    next
                      case c_xor_case_7
                      by step( contradiction /* cyclic */ )
                    next
                      case coerce
                      step( solve( !KD( (~k⊕~r1⊕x⊕~r1.1) ) ▶₀ #vk.5 ) )
                        case acceptreader
                        by step( solve( (#vl.1, 0) ~~> (#vk.5, 0) ) )
                      next
                        case initiatereader
                        by step( contradiction /* impossible chain */ )
                      next
                        case tag1
                        step( solve( (#vl.1, 0) ~~> (#vk.5, 0) ) )
                          case d_0_fst
                          by step( contradiction /* impossible chain */ )
                        next
                          case d_0_snd
                          by step( solve( (#vr.5, 0) ~~> (#vk.5, 0) ) )
                        qed
                      qed
                    qed
                  next
                    case coerce
                    step( solve( !KD( (~k⊕~k2⊕x) ) ▶₀ #vk.4 ) )
                      case acceptreader
                      by step( solve( (#vl.1, 0) ~~> (#vk.4, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.1, 0) ~~> (#vk.4, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.5, 0) ~~> (#vk.4, 0) ) )
                      qed
                    qed
                  qed
                next
                  case tag1_case_1
                  step( solve( !KU( (~k⊕~k2⊕x) ) @ #vk.6 ) )
                    case c_xor_case_1
                    by step( solve( !KU( ~k2 ) @ #vk.9 ) )
                  next
                    case c_xor_case_2
                    by step( solve( !KU( ~k ) @ #vk.9 ) )
                  next
                    case c_xor_case_3
                    step( solve( !KU( (~k⊕~k2) ) @ #vk.8 ) )
                      case c_xor
                      by step( solve( !KU( ~k2 ) @ #vk.9 ) )
                    next
                      case coerce
                      step( solve( !KD( (~k⊕~k2) ) ▶₀ #vk.5 ) )
                        case acceptreader
                        by step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                      next
                        case initiatereader
                        by step( contradiction /* impossible chain */ )
                      next
                        case tag1
                        step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                          case d_0_fst
                          by step( contradiction /* impossible chain */ )
                        next
                          case d_0_snd
                          by step( solve( (#vr.7, 0) ~~> (#vk.5, 0) ) )
                        qed
                      qed
                    qed
                  next
                    case coerce
                    step( solve( !KD( (~k⊕~k2⊕x) ) ▶₀ #vk.4 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.7, 0) ~~> (#vk.4, 0) ) )
                      qed
                    qed
                  qed
                next
                  case tag1_case_2
                  by step( contradiction /* cyclic */ )
                qed
              next
                case coerce
                step( solve( !KD( (~k⊕~k2⊕x⊕h((~k⊕~r1⊕x⊕~r1.1))) ) ▶₀ #vk.2 ) )
                  case acceptreader
                  by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                next
                  case initiatereader
                  by step( contradiction /* impossible chain */ )
                next
                  case tag1
                  step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                    case d_0_fst
                    by step( contradiction /* impossible chain */ )
                  next
                    case d_0_snd
                    by step( solve( (#vr.5, 0) ~~> (#vk.2, 0) ) )
                  qed
                qed
              qed
            next
              case coerce
              step( solve( !KD( (x⊕~r1.1) ) ▶₀ #vk.1 ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.5, 0) ~~> (#vk.1, 0) ) )
                qed
              qed
            qed
          next
            case split_case_7
            step( solve( !KU( (~k⊕~k2⊕r0⊕~r1.1⊕h((~k⊕~r1⊕r0))) ) @ #vk.2 ) )
              case c_xor_case_01
              by step( contradiction /* cyclic */ )
            next
              case c_xor_case_02
              step( solve( !KU( (~k⊕~k2⊕~r1.1⊕h((~k⊕~r1⊕r0))) ) @ #vk.3 ) )
                case c_xor_case_1
                by step( contradiction /* cyclic */ )
              next
                case c_xor_case_2
                by step( solve( !KU( ~k2 ) @ #vk.5 ) )
              next
                case c_xor_case_3
                step( solve( !KU( (~k⊕h((~k⊕~r1⊕r0))) ) @ #vk.4 ) )
                  case c_xor
                  by step( solve( !KU( ~k ) @ #vk.7 ) )
                next
                  case coerce
                  step( solve( !KD( (~k⊕h((~k⊕~r1⊕r0))) ) ▶₀ #vk.3 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.5, 0) ~~> (#vk.3, 0) ) )
                    qed
                  qed
                qed
              next
                case c_xor_case_4
                by step( solve( !KU( ~k ) @ #vk.5 ) )
              next
                case c_xor_case_5
                step( solve( !KU( (~k2⊕h((~k⊕~r1⊕r0))) ) @ #vk.4 ) )
                  case c_xor
                  by step( solve( !KU( ~k2 ) @ #vk.7 ) )
                next
                  case coerce
                  step( solve( !KD( (~k2⊕h((~k⊕~r1⊕r0))) ) ▶₀ #vk.3 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.5, 0) ~~> (#vk.3, 0) ) )
                    qed
                  qed
                qed
              next
                case c_xor_case_6
                step( solve( !KU( (~r1.1⊕h((~k⊕~r1⊕r0))) ) @ #vk.4 ) )
                  case c_xor
                  by step( contradiction /* cyclic */ )
                next
                  case coerce
                  step( solve( !KD( (~r1.1⊕h((~k⊕~r1⊕r0))) ) ▶₀ #vk.3 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.5, 0) ~~> (#vk.3, 0) ) )
                    qed
                  qed
                qed
              next
                case c_xor_case_7
                step( solve( !KU( (~k⊕~k2⊕~r1.1) ) @ #vk.5 ) )
                  case c_xor_case_1
                  by step( solve( !KU( ~k2 ) @ #vk.7 ) )
                next
                  case c_xor_case_2
                  by step( solve( !KU( ~k ) @ #vk.7 ) )
                next
                  case c_xor_case_3
                  by step( contradiction /* cyclic */ )
                next
                  case coerce
                  step( solve( !KD( (~k⊕~k2⊕~r1.1) ) ▶₀ #vk.3 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.5, 0) ~~> (#vk.3, 0) ) )
                    qed
                  qed
                qed
              next
                case coerce
                step( solve( !KD( (~k⊕~k2⊕~r1.1⊕h((~k⊕~r1⊕r0))) ) ▶₀ #vk.2 ) )
                  case acceptreader
                  by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                next
                  case initiatereader
                  by step( contradiction /* impossible chain */ )
                next
                  case tag1
                  step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                    case d_0_fst
                    by step( contradiction /* impossible chain */ )
                  next
                    case d_0_snd
                    by step( solve( (#vr.5, 0) ~~> (#vk.2, 0) ) )
                  qed
                qed
              qed
            next
              case c_xor_case_03
              step( solve( !KU( (~k⊕~k2⊕h((~k⊕~r1⊕r0))) ) @ #vk.3 ) )
                case c_xor_case_1
                by step( solve( !KU( ~k2 ) @ #vk.6 ) )
              next
                case c_xor_case_2
                by step( solve( !KU( ~k ) @ #vk.6 ) )
              next
                case c_xor_case_3
                step( solve( !KU( (r0⊕~r1.1) ) @ #vk.4 ) )
                  case c_xor
                  by step( contradiction /* cyclic */ )
                next
                  case coerce
                  step( solve( !KD( (r0⊕~r1.1) ) ▶₀ #vk.3 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.5, 0) ~~> (#vk.3, 0) ) )
                    qed
                  qed
                qed
              next
                case coerce
                step( solve( !KD( (~k⊕~k2⊕h((~k⊕~r1⊕r0))) ) ▶₀ #vk.2 ) )
                  case acceptreader
                  by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                next
                  case initiatereader
                  by step( contradiction /* impossible chain */ )
                next
                  case tag1
                  step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                    case d_0_fst
                    by step( contradiction /* impossible chain */ )
                  next
                    case d_0_snd
                    by step( solve( (#vr.5, 0) ~~> (#vk.2, 0) ) )
                  qed
                qed
              qed
            next
              case c_xor_case_04
              by step( solve( !KU( ~k2 ) @ #vk.4 ) )
            next
              case c_xor_case_05
              step( solve( !KU( (~k⊕r0⊕h((~k⊕~r1⊕r0))) ) @ #vk.3 ) )
                case c_xor_case_1
                step( solve( !KU( (~k2⊕~r1.1) ) @ #vk.4 ) )
                  case c_xor
                  by step( contradiction /* cyclic */ )
                next
                  case coerce
                  step( solve( !KD( (~k2⊕~r1.1) ) ▶₀ #vk.3 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.5, 0) ~~> (#vk.3, 0) ) )
                    qed
                  qed
                qed
              next
                case c_xor_case_2
                by step( solve( !KU( ~k ) @ #vk.6 ) )
              next
                case c_xor_case_3
                step( solve( !KU( (~k2⊕~r1.1) ) @ #vk.4 ) )
                  case c_xor
                  by step( contradiction /* cyclic */ )
                next
                  case coerce
                  step( solve( !KD( (~k2⊕~r1.1) ) ▶₀ #vk.3 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.5, 0) ~~> (#vk.3, 0) ) )
                    qed
                  qed
                qed
              next
                case coerce
                step( solve( !KD( (~k⊕r0⊕h((~k⊕~r1⊕r0))) ) ▶₀ #vk.2 ) )
                  case acceptreader
                  by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                next
                  case initiatereader
                  by step( contradiction /* impossible chain */ )
                next
                  case tag1
                  step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                    case d_0_fst
                    by step( contradiction /* impossible chain */ )
                  next
                    case d_0_snd
                    by step( solve( (#vr.5, 0) ~~> (#vk.2, 0) ) )
                  qed
                qed
              qed
            next
              case c_xor_case_06
              step( solve( !KU( (~k⊕~r1.1⊕h((~k⊕~r1⊕r0))) ) @ #vk.3 ) )
                case c_xor_case_1
                by step( contradiction /* cyclic */ )
              next
                case c_xor_case_2
                by step( solve( !KU( ~k ) @ #vk.6 ) )
              next
                case c_xor_case_3
                step( solve( !KU( (~k2⊕r0) ) @ #vk.4 ) )
                  case c_xor
                  by step( solve( !KU( ~k2 ) @ #vk.7 ) )
                next
                  case coerce
                  step( solve( !KD( (~k2⊕r0) ) ▶₀ #vk.3 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.5, 0) ~~> (#vk.3, 0) ) )
                    qed
                  qed
                qed
              next
                case coerce
                step( solve( !KD( (~k⊕~r1.1⊕h((~k⊕~r1⊕r0))) ) ▶₀ #vk.2 ) )
                  case acceptreader
                  by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                next
                  case initiatereader
                  by step( contradiction /* impossible chain */ )
                next
                  case tag1
                  step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                    case d_0_fst
                    by step( contradiction /* impossible chain */ )
                  next
                    case d_0_snd
                    by step( solve( (#vr.5, 0) ~~> (#vk.2, 0) ) )
                  qed
                qed
              qed
            next
              case c_xor_case_07
              step( solve( !KU( (~k⊕h((~k⊕~r1⊕r0))) ) @ #vk.3 ) )
                case c_xor
                by step( solve( !KU( ~k ) @ #vk.6 ) )
              next
                case coerce
                step( solve( !KD( (~k⊕h((~k⊕~r1⊕r0))) ) ▶₀ #vk.2 ) )
                  case acceptreader
                  by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                next
                  case initiatereader
                  by step( contradiction /* impossible chain */ )
                next
                  case tag1
                  step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                    case d_0_fst
                    by step( contradiction /* impossible chain */ )
                  next
                    case d_0_snd
                    by step( solve( (#vr.5, 0) ~~> (#vk.2, 0) ) )
                  qed
                qed
              qed
            next
              case c_xor_case_08
              by step( solve( !KU( ~k ) @ #vk.4 ) )
            next
              case c_xor_case_09
              step( solve( !KU( (~k2⊕r0⊕h((~k⊕~r1⊕r0))) ) @ #vk.3 ) )
                case c_xor_case_1
                step( solve( !KU( (~k⊕~r1.1) ) @ #vk.4 ) )
                  case c_xor
                  by step( contradiction /* cyclic */ )
                next
                  case coerce
                  step( solve( !KD( (~k⊕~r1.1) ) ▶₀ #vk.3 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.5, 0) ~~> (#vk.3, 0) ) )
                    qed
                  qed
                qed
              next
                case c_xor_case_2
                by step( solve( !KU( ~k2 ) @ #vk.6 ) )
              next
                case c_xor_case_3
                step( solve( !KU( (~k⊕~r1.1) ) @ #vk.4 ) )
                  case c_xor
                  by step( contradiction /* cyclic */ )
                next
                  case coerce
                  step( solve( !KD( (~k⊕~r1.1) ) ▶₀ #vk.3 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.5, 0) ~~> (#vk.3, 0) ) )
                    qed
                  qed
                qed
              next
                case coerce
                step( solve( !KD( (~k2⊕r0⊕h((~k⊕~r1⊕r0))) ) ▶₀ #vk.2 ) )
                  case acceptreader
                  by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                next
                  case initiatereader
                  by step( contradiction /* impossible chain */ )
                next
                  case tag1
                  step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                    case d_0_fst
                    by step( contradiction /* impossible chain */ )
                  next
                    case d_0_snd
                    by step( solve( (#vr.5, 0) ~~> (#vk.2, 0) ) )
                  qed
                qed
              qed
            next
              case c_xor_case_10
              step( solve( !KU( (~k2⊕~r1.1⊕h((~k⊕~r1⊕r0))) ) @ #vk.3 ) )
                case c_xor_case_1
                by step( contradiction /* cyclic */ )
              next
                case c_xor_case_2
                by step( solve( !KU( ~k2 ) @ #vk.6 ) )
              next
                case c_xor_case_3
                step( solve( !KU( (~k⊕r0) ) @ #vk.4 ) )
                  case c_xor
                  by step( solve( !KU( ~k ) @ #vk.7 ) )
                next
                  case coerce
                  step( solve( !KD( (~k⊕r0) ) ▶₀ #vk.3 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.5, 0) ~~> (#vk.3, 0) ) )
                    qed
                  qed
                qed
              next
                case coerce
                step( solve( !KD( (~k2⊕~r1.1⊕h((~k⊕~r1⊕r0))) ) ▶₀ #vk.2 ) )
                  case acceptreader
                  by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                next
                  case initiatereader
                  by step( contradiction /* impossible chain */ )
                next
                  case tag1
                  step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                    case d_0_fst
                    by step( contradiction /* impossible chain */ )
                  next
                    case d_0_snd
                    by step( solve( (#vr.5, 0) ~~> (#vk.2, 0) ) )
                  qed
                qed
              qed
            next
              case c_xor_case_11
              step( solve( !KU( (~k2⊕h((~k⊕~r1⊕r0))) ) @ #vk.3 ) )
                case c_xor
                by step( solve( !KU( ~k2 ) @ #vk.6 ) )
              next
                case coerce
                step( solve( !KD( (~k2⊕h((~k⊕~r1⊕r0))) ) ▶₀ #vk.2 ) )
                  case acceptreader
                  by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                next
                  case initiatereader
                  by step( contradiction /* impossible chain */ )
                next
                  case tag1
                  step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                    case d_0_fst
                    by step( contradiction /* impossible chain */ )
                  next
                    case d_0_snd
                    by step( solve( (#vr.5, 0) ~~> (#vk.2, 0) ) )
                  qed
                qed
              qed
            next
              case c_xor_case_12
              step( solve( !KU( (r0⊕~r1.1⊕h((~k⊕~r1⊕r0))) ) @ #vk.3 ) )
                case c_xor_case_1
                by step( contradiction /* cyclic */ )
              next
                case c_xor_case_2
                step( solve( !KU( (~k⊕~k2) ) @ #vk.4 ) )
                  case c_xor
                  by step( solve( !KU( ~k2 ) @ #vk.6 ) )
                next
                  case coerce
                  step( solve( !KD( (~k⊕~k2) ) ▶₀ #vk.3 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.5, 0) ~~> (#vk.3, 0) ) )
                    qed
                  qed
                qed
              next
                case c_xor_case_3
                step( solve( !KU( (~k⊕~k2) ) @ #vk.4 ) )
                  case c_xor
                  by step( solve( !KU( ~k2 ) @ #vk.7 ) )
                next
                  case coerce
                  step( solve( !KD( (~k⊕~k2) ) ▶₀ #vk.3 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.5, 0) ~~> (#vk.3, 0) ) )
                    qed
                  qed
                qed
              next
                case coerce
                step( solve( !KD( (r0⊕~r1.1⊕h((~k⊕~r1⊕r0))) ) ▶₀ #vk.2 ) )
                  case acceptreader
                  by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                next
                  case initiatereader
                  by step( contradiction /* impossible chain */ )
                next
                  case tag1
                  step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                    case d_0_fst
                    by step( contradiction /* impossible chain */ )
                  next
                    case d_0_snd
                    by step( solve( (#vr.5, 0) ~~> (#vk.2, 0) ) )
                  qed
                qed
              qed
            next
              case c_xor_case_13
              step( solve( !KU( (r0⊕h((~k⊕~r1⊕r0))) ) @ #vk.3 ) )
                case c_xor
                step( solve( !KU( (~k⊕~k2⊕~r1.1) ) @ #vk.4 ) )
                  case c_xor_case_1
                  by step( solve( !KU( ~k2 ) @ #vk.7 ) )
                next
                  case c_xor_case_2
                  by step( solve( !KU( ~k ) @ #vk.7 ) )
                next
                  case c_xor_case_3
                  by step( contradiction /* cyclic */ )
                next
                  case coerce
                  step( solve( !KD( (~k⊕~k2⊕~r1.1) ) ▶₀ #vk.3 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.5, 0) ~~> (#vk.3, 0) ) )
                    qed
                  qed
                qed
              next
                case coerce
                step( solve( !KD( (r0⊕h((~k⊕~r1⊕r0))) ) ▶₀ #vk.2 ) )
                  case acceptreader
                  by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                next
                  case initiatereader
                  by step( contradiction /* impossible chain */ )
                next
                  case tag1
                  step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                    case d_0_fst
                    by step( contradiction /* impossible chain */ )
                  next
                    case d_0_snd
                    by step( solve( (#vr.5, 0) ~~> (#vk.2, 0) ) )
                  qed
                qed
              qed
            next
              case c_xor_case_14
              step( solve( !KU( (~r1.1⊕h((~k⊕~r1⊕r0))) ) @ #vk.3 ) )
                case c_xor
                by step( contradiction /* cyclic */ )
              next
                case coerce
                step( solve( !KD( (~r1.1⊕h((~k⊕~r1⊕r0))) ) ▶₀ #vk.2 ) )
                  case acceptreader
                  by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                next
                  case initiatereader
                  by step( contradiction /* impossible chain */ )
                next
                  case tag1
                  step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                    case d_0_fst
                    by step( contradiction /* impossible chain */ )
                  next
                    case d_0_snd
                    by step( solve( (#vr.5, 0) ~~> (#vk.2, 0) ) )
                  qed
                qed
              qed
            next
              case c_xor_case_15
              step( solve( !KU( (~k⊕~k2⊕r0⊕~r1.1) ) @ #vk.4 ) )
                case c_xor_case_1
                step( solve( !KU( (~k⊕~k2⊕~r1.1) ) @ #vk.5 ) )
                  case c_xor_case_1
                  by step( solve( !KU( ~k2 ) @ #vk.7 ) )
                next
                  case c_xor_case_2
                  by step( solve( !KU( ~k ) @ #vk.7 ) )
                next
                  case c_xor_case_3
                  by step( contradiction /* cyclic */ )
                next
                  case coerce
                  step( solve( !KD( (~k⊕~k2⊕~r1.1) ) ▶₀ #vk.3 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.5, 0) ~~> (#vk.3, 0) ) )
                    qed
                  qed
                qed
              next
                case c_xor_case_2
                by step( solve( !KU( ~k2 ) @ #vk.6 ) )
              next
                case c_xor_case_3
                step( solve( !KU( (~k⊕~r1.1) ) @ #vk.5 ) )
                  case c_xor
                  by step( contradiction /* cyclic */ )
                next
                  case coerce
                  step( solve( !KD( (~k⊕~r1.1) ) ▶₀ #vk.3 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.5, 0) ~~> (#vk.3, 0) ) )
                    qed
                  qed
                qed
              next
                case c_xor_case_4
                by step( solve( !KU( ~k ) @ #vk.6 ) )
              next
                case c_xor_case_5
                step( solve( !KU( (~k2⊕~r1.1) ) @ #vk.5 ) )
                  case c_xor
                  by step( contradiction /* cyclic */ )
                next
                  case coerce
                  step( solve( !KD( (~k2⊕~r1.1) ) ▶₀ #vk.3 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.5, 0) ~~> (#vk.3, 0) ) )
                    qed
                  qed
                qed
              next
                case c_xor_case_6
                step( solve( !KU( (r0⊕~r1.1) ) @ #vk.5 ) )
                  case c_xor
                  by step( contradiction /* cyclic */ )
                next
                  case coerce
                  step( solve( !KD( (r0⊕~r1.1) ) ▶₀ #vk.3 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.5, 0) ~~> (#vk.3, 0) ) )
                    qed
                  qed
                qed
              next
                case c_xor_case_7
                by step( contradiction /* cyclic */ )
              next
                case coerce
                step( solve( !KD( (~k⊕~k2⊕r0⊕~r1.1) ) ▶₀ #vk.2 ) )
                  case acceptreader
                  by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                next
                  case initiatereader
                  by step( contradiction /* impossible chain */ )
                next
                  case tag1
                  step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                    case d_0_fst
                    by step( contradiction /* impossible chain */ )
                  next
                    case d_0_snd
                    by step( solve( (#vr.5, 0) ~~> (#vk.2, 0) ) )
                  qed
                qed
              qed
            next
              case coerce
              step( solve( !KD( (~k⊕~k2⊕r0⊕~r1.1⊕h((~k⊕~r1⊕r0))) ) ▶₀ #vk.1 ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.5, 0) ~~> (#vk.1, 0) ) )
                qed
              qed
            qed
          qed
        next
          case split_case_4
          step( solve( !KU( (x⊕~x.1) ) @ #vk.2 ) )
            case c_xor
            step( solve( !KU( ~x ) @ #vk.3 ) )
              case fresh
              step( solve( !KU( zero ) @ #vk.3 ) )
                case c_zero
                by step( solve( splitEqs(2) ) )
              next
                case coerce
                step( solve( !KD( zero ) ▶₀ #vk.3 ) )
                  case acceptreader
                  by step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                next
                  case initiatereader
                  by step( contradiction /* impossible chain */ )
                next
                  case tag1
                  step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                    case d_0_fst
                    by step( contradiction /* impossible chain */ )
                  next
                    case d_0_snd
                    by step( solve( (#vr.5, 0) ~~> (#vk.3, 0) ) )
                  qed
                qed
              qed
            next
              case tag1_case_1
              step( solve( !KU( zero ) @ #vk.3 ) )
                case c_zero
                by step( solve( splitEqs(2) ) )
              next
                case coerce
                step( solve( !KD( zero ) ▶₀ #vk.3 ) )
                  case acceptreader
                  by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                next
                  case initiatereader
                  by step( contradiction /* impossible chain */ )
                next
                  case tag1
                  step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                    case d_0_fst
                    by step( contradiction /* impossible chain */ )
                  next
                    case d_0_snd
                    by step( solve( (#vr.7, 0) ~~> (#vk.3, 0) ) )
                  qed
                qed
              qed
            next
              case tag1_case_2
              step( solve( !KU( zero ) @ #vk.3 ) )
                case c_zero
                by step( solve( splitEqs(2) ) )
              next
                case coerce
                step( solve( !KD( zero ) ▶₀ #vk.3 ) )
                  case acceptreader
                  by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                next
                  case initiatereader
                  by step( contradiction /* impossible chain */ )
                next
                  case tag1
                  step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                    case d_0_fst
                    by step( contradiction /* impossible chain */ )
                  next
                    case d_0_snd
                    by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                  qed
                qed
              qed
            qed
          next
            case coerce
            step( solve( !KD( (x⊕~x.1) ) ▶₀ #vk.1 ) )
              case acceptreader
              by step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
            next
              case initiatereader
              by step( contradiction /* impossible chain */ )
            next
              case tag1
              step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                case d_0_fst
                by step( contradiction /* impossible chain */ )
              next
                case d_0_snd
                by step( solve( (#vr.5, 0) ~~> (#vk.1, 0) ) )
              qed
            qed
          qed
        next
          case split_case_5
          step( solve( !KU( (~k⊕~r1) ) @ #vk.1 ) )
            case c_xor
            by step( contradiction /* cyclic */ )
          next
            case coerce
            step( solve( !KD( (~k⊕~r1) ) ▶₀ #vk.1 ) )
              case acceptreader
              by step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
            next
              case initiatereader
              by step( contradiction /* impossible chain */ )
            next
              case tag1
              step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                case d_0_fst
                by step( contradiction /* impossible chain */ )
              next
                case d_0_snd
                by step( solve( (#vr.5, 0) ~~> (#vk.1, 0) ) )
              qed
            qed
          qed
        next
          case split_case_6
          step( solve( !KU( (~r1⊕x) ) @ #vk.1 ) )
            case c_xor
            by step( contradiction /* cyclic */ )
          next
            case coerce
            step( solve( !KD( (~r1⊕x) ) ▶₀ #vk.1 ) )
              case acceptreader
              by step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
            next
              case initiatereader
              by step( contradiction /* impossible chain */ )
            next
              case tag1
              step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                case d_0_fst
                by step( contradiction /* impossible chain */ )
              next
                case d_0_snd
                by step( solve( (#vr.5, 0) ~~> (#vk.1, 0) ) )
              qed
            qed
          qed
        next
          case split_case_7
          step( solve( !KU( (~k⊕~r1⊕z) ) @ #vk.1 ) )
            case c_xor_case_1
            by step( contradiction /* cyclic */ )
          next
            case c_xor_case_2
            by step( solve( !KU( ~k ) @ #vk.4 ) )
          next
            case c_xor_case_3
            step( solve( !KU( (~k⊕~r1) ) @ #vk.4 ) )
              case c_xor
              by step( contradiction /* cyclic */ )
            next
              case coerce
              step( solve( !KD( (~k⊕~r1) ) ▶₀ #vk.2 ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.5, 0) ~~> (#vk.2, 0) ) )
                qed
              qed
            qed
          next
            case coerce
            step( solve( !KD( (~k⊕~r1⊕z) ) ▶₀ #vk.1 ) )
              case acceptreader
              by step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
            next
              case initiatereader
              by step( contradiction /* impossible chain */ )
            next
              case tag1
              step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                case d_0_fst
                by step( contradiction /* impossible chain */ )
              next
                case d_0_snd
                by step( solve( (#vr.5, 0) ~~> (#vk.1, 0) ) )
              qed
            qed
          qed
        next
          case split_case_8
          step( solve( !KU( (~k⊕x) ) @ #vk.1 ) )
            case c_xor
            by step( solve( !KU( ~k ) @ #vk.4 ) )
          next
            case coerce
            step( solve( !KD( (~k⊕x) ) ▶₀ #vk.1 ) )
              case acceptreader
              by step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
            next
              case initiatereader
              by step( contradiction /* impossible chain */ )
            next
              case tag1
              step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                case d_0_fst
                by step( contradiction /* impossible chain */ )
              next
                case d_0_snd
                by step( solve( (#vr.5, 0) ~~> (#vk.1, 0) ) )
              qed
            qed
          qed
        qed
      next
        case tag1_case_3
        by step( solve( splitEqs(0) ) )
      qed
    qed
  next
    case RHS
    step( simplify )
    step( solve( TagState1( ~k, ~r1, r0, phase ) ▶₀ #i ) )
      case tag1_case_1
      step( solve( !KU( h(z) ) @ #vk ) )
        case c_h
        step( solve( splitEqs(0) ) )
          case split_case_1
          by step( solve( !KU( ~k ) @ #vk.1 ) )
        next
          case split_case_2
          by step( contradiction /* cyclic */ )
        next
          case split_case_3
          step( solve( !KU( (~k⊕h((~k⊕~r1))) ) @ #vk.2 ) )
            case c_xor
            by step( solve( !KU( ~k ) @ #vk.4 ) )
          next
            case coerce
            step( solve( !KD( (~k⊕h((~k⊕~r1))) ) ▶₀ #vk.1 ) )
              case acceptreader
              by step( solve( (#vl, 0) ~~> (#vk.1, 0) ) )
            next
              case initiatereader
              by step( contradiction /* impossible chain */ )
            next
              case tag1
              step( solve( (#vl, 0) ~~> (#vk.1, 0) ) )
                case d_0_fst
                by step( contradiction /* impossible chain */ )
              next
                case d_0_snd
                by step( solve( (#vr.3, 0) ~~> (#vk.1, 0) ) )
              qed
            qed
          qed
        next
          case split_case_4
          step( solve( !KU( (~k⊕~r1) ) @ #vk.1 ) )
            case c_xor
            by step( contradiction /* cyclic */ )
          next
            case coerce
            step( solve( !KD( (~k⊕~r1) ) ▶₀ #vk.1 ) )
              case acceptreader
              by step( solve( (#vl, 0) ~~> (#vk.1, 0) ) )
            next
              case initiatereader
              by step( contradiction /* impossible chain */ )
            next
              case tag1
              step( solve( (#vl, 0) ~~> (#vk.1, 0) ) )
                case d_0_fst
                by step( contradiction /* impossible chain */ )
              next
                case d_0_snd
                by step( solve( (#vr.3, 0) ~~> (#vk.1, 0) ) )
              qed
            qed
          qed
        next
          case split_case_5
          step( solve( !KU( (~k⊕r0⊕h((~k⊕~r1⊕r0))) ) @ #vk.2 ) )
            case c_xor_case_1
            step( solve( !KU( (~k⊕h((~k⊕~r1⊕r0))) ) @ #vk.3 ) )
              case c_xor
              by step( solve( !KU( ~k ) @ #vk.5 ) )
            next
              case coerce
              step( solve( !KD( (~k⊕h((~k⊕~r1⊕r0))) ) ▶₀ #vk.2 ) )
                case acceptreader
                by step( solve( (#vl, 0) ~~> (#vk.2, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl, 0) ~~> (#vk.2, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.3, 0) ~~> (#vk.2, 0) ) )
                qed
              qed
            qed
          next
            case c_xor_case_2
            by step( solve( !KU( ~k ) @ #vk.4 ) )
          next
            case c_xor_case_3
            step( solve( !KU( (~k⊕r0) ) @ #vk.4 ) )
              case c_xor
              by step( solve( !KU( ~k ) @ #vk.5 ) )
            next
              case coerce
              step( solve( !KD( (~k⊕r0) ) ▶₀ #vk.2 ) )
                case acceptreader
                by step( solve( (#vl, 0) ~~> (#vk.2, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl, 0) ~~> (#vk.2, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.3, 0) ~~> (#vk.2, 0) ) )
                qed
              qed
            qed
          next
            case coerce
            step( solve( !KD( (~k⊕r0⊕h((~k⊕~r1⊕r0))) ) ▶₀ #vk.1 ) )
              case acceptreader
              by step( solve( (#vl, 0) ~~> (#vk.1, 0) ) )
            next
              case initiatereader
              by step( contradiction /* impossible chain */ )
            next
              case tag1
              step( solve( (#vl, 0) ~~> (#vk.1, 0) ) )
                case d_0_fst
                by step( contradiction /* impossible chain */ )
              next
                case d_0_snd
                by step( solve( (#vr.3, 0) ~~> (#vk.1, 0) ) )
              qed
            qed
          qed
        next
          case split_case_6
          step( solve( !KU( (~r1⊕x) ) @ #vk.1 ) )
            case c_xor
            by step( contradiction /* cyclic */ )
          next
            case coerce
            step( solve( !KD( (~r1⊕x) ) ▶₀ #vk.1 ) )
              case acceptreader
              by step( solve( (#vl, 0) ~~> (#vk.1, 0) ) )
            next
              case initiatereader
              by step( contradiction /* impossible chain */ )
            next
              case tag1
              step( solve( (#vl, 0) ~~> (#vk.1, 0) ) )
                case d_0_fst
                by step( contradiction /* impossible chain */ )
              next
                case d_0_snd
                by step( solve( (#vr.3, 0) ~~> (#vk.1, 0) ) )
              qed
            qed
          qed
        next
          case split_case_7
          step( solve( !KU( (~k⊕~r1⊕z) ) @ #vk.1 ) )
            case c_xor_case_1
            by step( contradiction /* cyclic */ )
          next
            case c_xor_case_2
            by step( solve( !KU( ~k ) @ #vk.4 ) )
          next
            case c_xor_case_3
            step( solve( !KU( (~r1⊕z⊕h(z)) ) @ #vk.2 ) )
              case c_xor_case_1
              step( solve( !KU( (~k⊕~r1) ) @ #vk.4 ) )
                case c_xor
                by step( contradiction /* cyclic */ )
              next
                case coerce
                step( solve( !KD( (~k⊕~r1) ) ▶₀ #vk.3 ) )
                  case acceptreader
                  by step( solve( (#vl, 0) ~~> (#vk.3, 0) ) )
                next
                  case initiatereader
                  by step( contradiction /* impossible chain */ )
                next
                  case tag1
                  step( solve( (#vl, 0) ~~> (#vk.3, 0) ) )
                    case d_0_fst
                    by step( contradiction /* impossible chain */ )
                  next
                    case d_0_snd
                    by step( solve( (#vr.3, 0) ~~> (#vk.3, 0) ) )
                  qed
                qed
              qed
            next
              case c_xor_case_2
              step( solve( !KU( (~k⊕~r1) ) @ #vk.4 ) )
                case c_xor
                by step( contradiction /* cyclic */ )
              next
                case coerce
                step( solve( !KD( (~k⊕~r1) ) ▶₀ #vk.3 ) )
                  case acceptreader
                  by step( solve( (#vl, 0) ~~> (#vk.3, 0) ) )
                next
                  case initiatereader
                  by step( contradiction /* impossible chain */ )
                next
                  case tag1
                  step( solve( (#vl, 0) ~~> (#vk.3, 0) ) )
                    case d_0_fst
                    by step( contradiction /* impossible chain */ )
                  next
                    case d_0_snd
                    by step( solve( (#vr.3, 0) ~~> (#vk.3, 0) ) )
                  qed
                qed
              qed
            next
              case c_xor_case_3
              step( solve( !KU( (~k⊕~r1) ) @ #vk.4 ) )
                case c_xor
                by step( contradiction /* cyclic */ )
              next
                case coerce
                step( solve( !KD( (~k⊕~r1) ) ▶₀ #vk.3 ) )
                  case acceptreader
                  by step( solve( (#vl, 0) ~~> (#vk.3, 0) ) )
                next
                  case initiatereader
                  by step( contradiction /* impossible chain */ )
                next
                  case tag1
                  step( solve( (#vl, 0) ~~> (#vk.3, 0) ) )
                    case d_0_fst
                    by step( contradiction /* impossible chain */ )
                  next
                    case d_0_snd
                    by step( solve( (#vr.3, 0) ~~> (#vk.3, 0) ) )
                  qed
                qed
              qed
            next
              case coerce
              step( solve( !KD( (~r1⊕z⊕h(z)) ) ▶₀ #vk.2 ) )
                case acceptreader
                by step( solve( (#vl, 0) ~~> (#vk.2, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl, 0) ~~> (#vk.2, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.3, 0) ~~> (#vk.2, 0) ) )
                qed
              qed
            qed
          next
            case coerce
            step( solve( !KD( (~k⊕~r1⊕z) ) ▶₀ #vk.1 ) )
              case acceptreader
              by step( solve( (#vl, 0) ~~> (#vk.1, 0) ) )
            next
              case initiatereader
              by step( contradiction /* impossible chain */ )
            next
              case tag1
              step( solve( (#vl, 0) ~~> (#vk.1, 0) ) )
                case d_0_fst
                by step( contradiction /* impossible chain */ )
              next
                case d_0_snd
                by step( solve( (#vr.3, 0) ~~> (#vk.1, 0) ) )
              qed
            qed
          qed
        next
          case split_case_8
          step( solve( !KU( (~k⊕x) ) @ #vk.1 ) )
            case c_xor
            by step( solve( !KU( ~k ) @ #vk.4 ) )
          next
            case coerce
            step( solve( !KD( (~k⊕x) ) ▶₀ #vk.1 ) )
              case acceptreader
              by step( solve( (#vl, 0) ~~> (#vk.1, 0) ) )
            next
              case initiatereader
              by step( contradiction /* impossible chain */ )
            next
              case tag1
              step( solve( (#vl, 0) ~~> (#vk.1, 0) ) )
                case d_0_fst
                by step( contradiction /* impossible chain */ )
              next
                case d_0_snd
                by step( solve( (#vr.3, 0) ~~> (#vk.1, 0) ) )
              qed
            qed
          qed
        qed
      next
        case tag1_case_1
        by step( solve( splitEqs(0) ) )
      next
        case tag1_case_2
        step( solve( splitEqs(0) ) )
          case split_case_1
          by step( solve( !KU( ~k ) @ #vk.1 ) )
        next
          case split_case_2
          by step( contradiction /* cyclic */ )
        next
          case split_case_3
          step( solve( splitEqs(2) ) )
            case split_case_1
            by step( solve( !KU( ~k2 ) @ #vk.1 ) )
          next
            case split_case_2
            step( solve( !KU( (~k⊕~k2⊕h((~k⊕~r0⊕~r1))) ) @ #vk.2 ) )
              case c_xor_case_1
              by step( solve( !KU( ~k2 ) @ #vk.4 ) )
            next
              case c_xor_case_2
              by step( solve( !KU( ~k ) @ #vk.4 ) )
            next
              case c_xor_case_3
              step( solve( !KU( h((~k⊕~r0⊕~r1)) ) @ #vk.3 ) )
                case c_h
                step( solve( !KU( (~k⊕~k2) ) @ #vk.4 ) )
                  case c_xor
                  by step( solve( !KU( ~k2 ) @ #vk.6 ) )
                next
                  case coerce
                  step( solve( !KD( (~k⊕~k2) ) ▶₀ #vk.3 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.5, 0) ~~> (#vk.3, 0) ) )
                    qed
                  qed
                qed
              next
                case tag1_case_1
                by step( contradiction /* cyclic */ )
              next
                case tag1_case_2
                step( solve( !KU( (~k⊕~k2) ) @ #vk.4 ) )
                  case c_xor
                  by step( solve( !KU( ~k2 ) @ #vk.6 ) )
                next
                  case coerce
                  step( solve( !KD( (~k⊕~k2) ) ▶₀ #vk.3 ) )
                    case acceptreader
                    by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.7, 0) ~~> (#vk.3, 0) ) )
                    qed
                  qed
                qed
              qed
            next
              case coerce
              step( solve( !KD( (~k⊕~k2⊕h((~k⊕~r0⊕~r1))) ) ▶₀ #vk.1 ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.5, 0) ~~> (#vk.1, 0) ) )
                qed
              qed
            qed
          next
            case split_case_3
            step( solve( !KU( (~k2⊕~r1.1) ) @ #vk.1 ) )
              case c_xor
              by step( solve( !KU( ~k2 ) @ #vk.4 ) )
            next
              case coerce
              step( solve( !KD( (~k2⊕~r1.1) ) ▶₀ #vk.1 ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.5, 0) ~~> (#vk.1, 0) ) )
                qed
              qed
            qed
          next
            case split_case_4
            step( solve( !KU( (~k2⊕x⊕~r1.1) ) @ #vk.1 ) )
              case c_xor_case_1
              step( solve( !KU( (~k⊕x⊕h((~k⊕~k2⊕~r1⊕x⊕~r1.1))) ) @ #vk.2 ) )
                case c_xor_case_1
                step( solve( !KU( (~k2⊕~r1.1) ) @ #vk.3 ) )
                  case c_xor
                  by step( solve( !KU( ~k2 ) @ #vk.7 ) )
                next
                  case coerce
                  step( solve( !KD( (~k2⊕~r1.1) ) ▶₀ #vk.3 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.5, 0) ~~> (#vk.3, 0) ) )
                    qed
                  qed
                qed
              next
                case c_xor_case_2
                by step( solve( !KU( ~k ) @ #vk.6 ) )
              next
                case c_xor_case_3
                step( solve( !KU( (~k2⊕~r1.1) ) @ #vk.3 ) )
                  case c_xor
                  by step( solve( !KU( ~k2 ) @ #vk.8 ) )
                next
                  case coerce
                  step( solve( !KD( (~k2⊕~r1.1) ) ▶₀ #vk.3 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.5, 0) ~~> (#vk.3, 0) ) )
                    qed
                  qed
                qed
              next
                case coerce
                step( solve( !KD( (~k⊕x⊕h((~k⊕~k2⊕~r1⊕x⊕~r1.1))) ) ▶₀ #vk.2 ) )
                  case acceptreader
                  by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                next
                  case initiatereader
                  by step( contradiction /* impossible chain */ )
                next
                  case tag1
                  step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                    case d_0_fst
                    by step( contradiction /* impossible chain */ )
                  next
                    case d_0_snd
                    by step( solve( (#vr.5, 0) ~~> (#vk.2, 0) ) )
                  qed
                qed
              qed
            next
              case c_xor_case_2
              by step( solve( !KU( ~k2 ) @ #vk.4 ) )
            next
              case c_xor_case_3
              step( solve( !KU( (~k⊕x⊕h((~k⊕~k2⊕~r1⊕x⊕~r1.1))) ) @ #vk.2 ) )
                case c_xor_case_1
                step( solve( !KU( (~k2⊕x) ) @ #vk.4 ) )
                  case c_xor
                  by step( solve( !KU( ~k2 ) @ #vk.7 ) )
                next
                  case coerce
                  step( solve( !KD( (~k2⊕x) ) ▶₀ #vk.3 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.5, 0) ~~> (#vk.3, 0) ) )
                    qed
                  qed
                qed
              next
                case c_xor_case_2
                by step( solve( !KU( ~k ) @ #vk.6 ) )
              next
                case c_xor_case_3
                step( solve( !KU( (~k2⊕x) ) @ #vk.4 ) )
                  case c_xor
                  by step( solve( !KU( ~k2 ) @ #vk.8 ) )
                next
                  case coerce
                  step( solve( !KD( (~k2⊕x) ) ▶₀ #vk.3 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.5, 0) ~~> (#vk.3, 0) ) )
                    qed
                  qed
                qed
              next
                case coerce
                step( solve( !KD( (~k⊕x⊕h((~k⊕~k2⊕~r1⊕x⊕~r1.1))) ) ▶₀ #vk.2 ) )
                  case acceptreader
                  by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                next
                  case initiatereader
                  by step( contradiction /* impossible chain */ )
                next
                  case tag1
                  step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                    case d_0_fst
                    by step( contradiction /* impossible chain */ )
                  next
                    case d_0_snd
                    by step( solve( (#vr.5, 0) ~~> (#vk.2, 0) ) )
                  qed
                qed
              qed
            next
              case coerce
              step( solve( !KD( (~k2⊕x⊕~r1.1) ) ▶₀ #vk.1 ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.5, 0) ~~> (#vk.1, 0) ) )
                qed
              qed
            qed
          next
            case split_case_5
            step( solve( !KU( (~k2⊕x) ) @ #vk.1 ) )
              case c_xor
              by step( solve( !KU( ~k2 ) @ #vk.4 ) )
            next
              case coerce
              step( solve( !KD( (~k2⊕x) ) ▶₀ #vk.1 ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.5, 0) ~~> (#vk.1, 0) ) )
                qed
              qed
            qed
          next
            case split_case_6
            step( solve( !KU( (x⊕~r1.1) ) @ #vk.1 ) )
              case c_xor
              step( solve( !KU( (~k⊕~k2⊕x⊕h((~k⊕~r1⊕x⊕~r1.1))) ) @ #vk.2 ) )
                case c_xor_case_1
                step( solve( !KU( (~k⊕~k2⊕h((~k⊕~r1⊕x⊕~r1.1))) ) @ #vk.5 ) )
                  case c_xor_case_1
                  by step( solve( !KU( ~k2 ) @ #vk.7 ) )
                next
                  case c_xor_case_2
                  by step( solve( !KU( ~k ) @ #vk.7 ) )
                next
                  case c_xor_case_3
                  step( solve( !KU( h((~k⊕~r1⊕x⊕~r1.1)) ) @ #vk.6 ) )
                    case c_h
                    step( solve( !KU( (~k⊕~k2) ) @ #vk.7 ) )
                      case c_xor
                      by step( solve( !KU( ~k2 ) @ #vk.9 ) )
                    next
                      case coerce
                      step( solve( !KD( (~k⊕~k2) ) ▶₀ #vk.5 ) )
                        case acceptreader
                        by step( solve( (#vl.1, 0) ~~> (#vk.5, 0) ) )
                      next
                        case initiatereader
                        by step( contradiction /* impossible chain */ )
                      next
                        case tag1
                        step( solve( (#vl.1, 0) ~~> (#vk.5, 0) ) )
                          case d_0_fst
                          by step( contradiction /* impossible chain */ )
                        next
                          case d_0_snd
                          by step( solve( (#vr.5, 0) ~~> (#vk.5, 0) ) )
                        qed
                      qed
                    qed
                  next
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    step( solve( !KU( (~k⊕~k2) ) @ #vk.7 ) )
                      case c_xor
                      by step( solve( !KU( ~k2 ) @ #vk.9 ) )
                    next
                      case coerce
                      step( solve( !KD( (~k⊕~k2) ) ▶₀ #vk.5 ) )
                        case acceptreader
                        by step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                      next
                        case initiatereader
                        by step( contradiction /* impossible chain */ )
                      next
                        case tag1
                        step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                          case d_0_fst
                          by step( contradiction /* impossible chain */ )
                        next
                          case d_0_snd
                          by step( solve( (#vr.7, 0) ~~> (#vk.5, 0) ) )
                        qed
                      qed
                    qed
                  qed
                next
                  case coerce
                  step( solve( !KD( (~k⊕~k2⊕h((~k⊕~r1⊕x⊕~r1.1))) ) ▶₀ #vk.3 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.5, 0) ~~> (#vk.3, 0) ) )
                    qed
                  qed
                qed
              next
                case c_xor_case_2
                by step( solve( !KU( ~k2 ) @ #vk.6 ) )
              next
                case c_xor_case_3
                step( solve( !KU( (~k⊕h((~k⊕~r1⊕x⊕~r1.1))) ) @ #vk.5 ) )
                  case c_xor
                  by step( solve( !KU( ~k ) @ #vk.8 ) )
                next
                  case coerce
                  step( solve( !KD( (~k⊕h((~k⊕~r1⊕x⊕~r1.1))) ) ▶₀ #vk.3 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.5, 0) ~~> (#vk.3, 0) ) )
                    qed
                  qed
                qed
              next
                case c_xor_case_4
                by step( solve( !KU( ~k ) @ #vk.6 ) )
              next
                case c_xor_case_5
                step( solve( !KU( (~k2⊕h((~k⊕~r1⊕x⊕~r1.1))) ) @ #vk.5 ) )
                  case c_xor
                  by step( solve( !KU( ~k2 ) @ #vk.8 ) )
                next
                  case coerce
                  step( solve( !KD( (~k2⊕h((~k⊕~r1⊕x⊕~r1.1))) ) ▶₀ #vk.3 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.5, 0) ~~> (#vk.3, 0) ) )
                    qed
                  qed
                qed
              next
                case c_xor_case_6
                step( solve( !KU( (x⊕h((~k⊕~r1⊕x⊕~r1.1))) ) @ #vk.5 ) )
                  case c_xor
                  step( solve( !KU( (~k⊕~k2) ) @ #vk.6 ) )
                    case c_xor
                    by step( solve( !KU( ~k2 ) @ #vk.8 ) )
                  next
                    case coerce
                    step( solve( !KD( (~k⊕~k2) ) ▶₀ #vk.4 ) )
                      case acceptreader
                      by step( solve( (#vl.1, 0) ~~> (#vk.4, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.1, 0) ~~> (#vk.4, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.5, 0) ~~> (#vk.4, 0) ) )
                      qed
                    qed
                  qed
                next
                  case coerce
                  step( solve( !KD( (x⊕h((~k⊕~r1⊕x⊕~r1.1))) ) ▶₀ #vk.3 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.5, 0) ~~> (#vk.3, 0) ) )
                    qed
                  qed
                qed
              next
                case c_xor_case_7
                step( solve( !KU( h((~k⊕~r1⊕x⊕~r1.1)) ) @ #vk.5 ) )
                  case c_h
                  step( solve( !KU( (~k⊕~k2⊕x) ) @ #vk.6 ) )
                    case c_xor_case_1
                    by step( solve( !KU( ~k2 ) @ #vk.9 ) )
                  next
                    case c_xor_case_2
                    by step( solve( !KU( ~k ) @ #vk.9 ) )
                  next
                    case c_xor_case_3
                    step( solve( !KU( (~k⊕~r1⊕x⊕~r1.1) ) @ #vk.7 ) )
                      case c_xor_case_1
                      step( solve( !KU( (~k⊕~k2) ) @ #vk.8 ) )
                        case c_xor
                        by step( solve( !KU( ~k2 ) @ #vk.10 ) )
                      next
                        case coerce
                        step( solve( !KD( (~k⊕~k2) ) ▶₀ #vk.6 ) )
                          case acceptreader
                          by step( solve( (#vl.1, 0) ~~> (#vk.6, 0) ) )
                        next
                          case initiatereader
                          by step( contradiction /* impossible chain */ )
                        next
                          case tag1
                          step( solve( (#vl.1, 0) ~~> (#vk.6, 0) ) )
                            case d_0_fst
                            by step( contradiction /* impossible chain */ )
                          next
                            case d_0_snd
                            by step( solve( (#vr.5, 0) ~~> (#vk.6, 0) ) )
                          qed
                        qed
                      qed
                    next
                      case c_xor_case_2
                      by step( contradiction /* cyclic */ )
                    next
                      case c_xor_case_3
                      step( solve( !KU( (~k⊕~k2) ) @ #vk.8 ) )
                        case c_xor
                        by step( solve( !KU( ~k2 ) @ #vk.11 ) )
                      next
                        case coerce
                        step( solve( !KD( (~k⊕~k2) ) ▶₀ #vk.6 ) )
                          case acceptreader
                          by step( solve( (#vl.1, 0) ~~> (#vk.6, 0) ) )
                        next
                          case initiatereader
                          by step( contradiction /* impossible chain */ )
                        next
                          case tag1
                          step( solve( (#vl.1, 0) ~~> (#vk.6, 0) ) )
                            case d_0_fst
                            by step( contradiction /* impossible chain */ )
                          next
                            case d_0_snd
                            by step( solve( (#vr.5, 0) ~~> (#vk.6, 0) ) )
                          qed
                        qed
                      qed
                    next
                      case c_xor_case_4
                      by step( solve( !KU( ~k ) @ #vk.10 ) )
                    next
                      case c_xor_case_5
                      step( solve( !KU( (~k⊕~k2) ) @ #vk.8 ) )
                        case c_xor
                        by step( solve( !KU( ~k2 ) @ #vk.11 ) )
                      next
                        case coerce
                        step( solve( !KD( (~k⊕~k2) ) ▶₀ #vk.6 ) )
                          case acceptreader
                          by step( solve( (#vl.1, 0) ~~> (#vk.6, 0) ) )
                        next
                          case initiatereader
                          by step( contradiction /* impossible chain */ )
                        next
                          case tag1
                          step( solve( (#vl.1, 0) ~~> (#vk.6, 0) ) )
                            case d_0_fst
                            by step( contradiction /* impossible chain */ )
                          next
                            case d_0_snd
                            by step( solve( (#vr.5, 0) ~~> (#vk.6, 0) ) )
                          qed
                        qed
                      qed
                    next
                      case c_xor_case_6
                      by step( contradiction /* cyclic */ )
                    next
                      case c_xor_case_7
                      by step( contradiction /* cyclic */ )
                    next
                      case coerce
                      step( solve( !KD( (~k⊕~r1⊕x⊕~r1.1) ) ▶₀ #vk.5 ) )
                        case acceptreader
                        by step( solve( (#vl.1, 0) ~~> (#vk.5, 0) ) )
                      next
                        case initiatereader
                        by step( contradiction /* impossible chain */ )
                      next
                        case tag1
                        step( solve( (#vl.1, 0) ~~> (#vk.5, 0) ) )
                          case d_0_fst
                          by step( contradiction /* impossible chain */ )
                        next
                          case d_0_snd
                          by step( solve( (#vr.5, 0) ~~> (#vk.5, 0) ) )
                        qed
                      qed
                    qed
                  next
                    case coerce
                    step( solve( !KD( (~k⊕~k2⊕x) ) ▶₀ #vk.4 ) )
                      case acceptreader
                      by step( solve( (#vl.1, 0) ~~> (#vk.4, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.1, 0) ~~> (#vk.4, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.5, 0) ~~> (#vk.4, 0) ) )
                      qed
                    qed
                  qed
                next
                  case tag1_case_1
                  by step( contradiction /* cyclic */ )
                next
                  case tag1_case_2
                  step( solve( !KU( (~k⊕~k2⊕x) ) @ #vk.6 ) )
                    case c_xor_case_1
                    by step( solve( !KU( ~k2 ) @ #vk.9 ) )
                  next
                    case c_xor_case_2
                    by step( solve( !KU( ~k ) @ #vk.9 ) )
                  next
                    case c_xor_case_3
                    step( solve( !KU( (~k⊕~k2) ) @ #vk.8 ) )
                      case c_xor
                      by step( solve( !KU( ~k2 ) @ #vk.9 ) )
                    next
                      case coerce
                      step( solve( !KD( (~k⊕~k2) ) ▶₀ #vk.5 ) )
                        case acceptreader
                        by step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                      next
                        case initiatereader
                        by step( contradiction /* impossible chain */ )
                      next
                        case tag1
                        step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                          case d_0_fst
                          by step( contradiction /* impossible chain */ )
                        next
                          case d_0_snd
                          by step( solve( (#vr.7, 0) ~~> (#vk.5, 0) ) )
                        qed
                      qed
                    qed
                  next
                    case coerce
                    step( solve( !KD( (~k⊕~k2⊕x) ) ▶₀ #vk.4 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.7, 0) ~~> (#vk.4, 0) ) )
                      qed
                    qed
                  qed
                qed
              next
                case coerce
                step( solve( !KD( (~k⊕~k2⊕x⊕h((~k⊕~r1⊕x⊕~r1.1))) ) ▶₀ #vk.2 ) )
                  case acceptreader
                  by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                next
                  case initiatereader
                  by step( contradiction /* impossible chain */ )
                next
                  case tag1
                  step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                    case d_0_fst
                    by step( contradiction /* impossible chain */ )
                  next
                    case d_0_snd
                    by step( solve( (#vr.5, 0) ~~> (#vk.2, 0) ) )
                  qed
                qed
              qed
            next
              case coerce
              step( solve( !KD( (x⊕~r1.1) ) ▶₀ #vk.1 ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.5, 0) ~~> (#vk.1, 0) ) )
                qed
              qed
            qed
          next
            case split_case_7
            step( solve( !KU( (~k⊕~k2⊕r0⊕~r1.1⊕h((~k⊕~r1⊕r0))) ) @ #vk.2 ) )
              case c_xor_case_01
              by step( contradiction /* cyclic */ )
            next
              case c_xor_case_02
              step( solve( !KU( (~k⊕~k2⊕~r1.1⊕h((~k⊕~r1⊕r0))) ) @ #vk.3 ) )
                case c_xor_case_1
                by step( contradiction /* cyclic */ )
              next
                case c_xor_case_2
                by step( solve( !KU( ~k2 ) @ #vk.5 ) )
              next
                case c_xor_case_3
                step( solve( !KU( (~k⊕h((~k⊕~r1⊕r0))) ) @ #vk.4 ) )
                  case c_xor
                  by step( solve( !KU( ~k ) @ #vk.7 ) )
                next
                  case coerce
                  step( solve( !KD( (~k⊕h((~k⊕~r1⊕r0))) ) ▶₀ #vk.3 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.5, 0) ~~> (#vk.3, 0) ) )
                    qed
                  qed
                qed
              next
                case c_xor_case_4
                by step( solve( !KU( ~k ) @ #vk.5 ) )
              next
                case c_xor_case_5
                step( solve( !KU( (~k2⊕h((~k⊕~r1⊕r0))) ) @ #vk.4 ) )
                  case c_xor
                  by step( solve( !KU( ~k2 ) @ #vk.7 ) )
                next
                  case coerce
                  step( solve( !KD( (~k2⊕h((~k⊕~r1⊕r0))) ) ▶₀ #vk.3 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.5, 0) ~~> (#vk.3, 0) ) )
                    qed
                  qed
                qed
              next
                case c_xor_case_6
                step( solve( !KU( (~r1.1⊕h((~k⊕~r1⊕r0))) ) @ #vk.4 ) )
                  case c_xor
                  by step( contradiction /* cyclic */ )
                next
                  case coerce
                  step( solve( !KD( (~r1.1⊕h((~k⊕~r1⊕r0))) ) ▶₀ #vk.3 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.5, 0) ~~> (#vk.3, 0) ) )
                    qed
                  qed
                qed
              next
                case c_xor_case_7
                step( solve( !KU( (~k⊕~k2⊕~r1.1) ) @ #vk.5 ) )
                  case c_xor_case_1
                  by step( solve( !KU( ~k2 ) @ #vk.7 ) )
                next
                  case c_xor_case_2
                  by step( solve( !KU( ~k ) @ #vk.7 ) )
                next
                  case c_xor_case_3
                  by step( contradiction /* cyclic */ )
                next
                  case coerce
                  step( solve( !KD( (~k⊕~k2⊕~r1.1) ) ▶₀ #vk.3 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.5, 0) ~~> (#vk.3, 0) ) )
                    qed
                  qed
                qed
              next
                case coerce
                step( solve( !KD( (~k⊕~k2⊕~r1.1⊕h((~k⊕~r1⊕r0))) ) ▶₀ #vk.2 ) )
                  case acceptreader
                  by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                next
                  case initiatereader
                  by step( contradiction /* impossible chain */ )
                next
                  case tag1
                  step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                    case d_0_fst
                    by step( contradiction /* impossible chain */ )
                  next
                    case d_0_snd
                    by step( solve( (#vr.5, 0) ~~> (#vk.2, 0) ) )
                  qed
                qed
              qed
            next
              case c_xor_case_03
              step( solve( !KU( (~k⊕~k2⊕h((~k⊕~r1⊕r0))) ) @ #vk.3 ) )
                case c_xor_case_1
                by step( solve( !KU( ~k2 ) @ #vk.6 ) )
              next
                case c_xor_case_2
                by step( solve( !KU( ~k ) @ #vk.6 ) )
              next
                case c_xor_case_3
                step( solve( !KU( (r0⊕~r1.1) ) @ #vk.4 ) )
                  case c_xor
                  by step( contradiction /* cyclic */ )
                next
                  case coerce
                  step( solve( !KD( (r0⊕~r1.1) ) ▶₀ #vk.3 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.5, 0) ~~> (#vk.3, 0) ) )
                    qed
                  qed
                qed
              next
                case coerce
                step( solve( !KD( (~k⊕~k2⊕h((~k⊕~r1⊕r0))) ) ▶₀ #vk.2 ) )
                  case acceptreader
                  by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                next
                  case initiatereader
                  by step( contradiction /* impossible chain */ )
                next
                  case tag1
                  step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                    case d_0_fst
                    by step( contradiction /* impossible chain */ )
                  next
                    case d_0_snd
                    by step( solve( (#vr.5, 0) ~~> (#vk.2, 0) ) )
                  qed
                qed
              qed
            next
              case c_xor_case_04
              by step( solve( !KU( ~k2 ) @ #vk.4 ) )
            next
              case c_xor_case_05
              step( solve( !KU( (~k⊕r0⊕h((~k⊕~r1⊕r0))) ) @ #vk.3 ) )
                case c_xor_case_1
                step( solve( !KU( (~k2⊕~r1.1) ) @ #vk.4 ) )
                  case c_xor
                  by step( contradiction /* cyclic */ )
                next
                  case coerce
                  step( solve( !KD( (~k2⊕~r1.1) ) ▶₀ #vk.3 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.5, 0) ~~> (#vk.3, 0) ) )
                    qed
                  qed
                qed
              next
                case c_xor_case_2
                by step( solve( !KU( ~k ) @ #vk.6 ) )
              next
                case c_xor_case_3
                step( solve( !KU( (~k2⊕~r1.1) ) @ #vk.4 ) )
                  case c_xor
                  by step( contradiction /* cyclic */ )
                next
                  case coerce
                  step( solve( !KD( (~k2⊕~r1.1) ) ▶₀ #vk.3 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.5, 0) ~~> (#vk.3, 0) ) )
                    qed
                  qed
                qed
              next
                case coerce
                step( solve( !KD( (~k⊕r0⊕h((~k⊕~r1⊕r0))) ) ▶₀ #vk.2 ) )
                  case acceptreader
                  by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                next
                  case initiatereader
                  by step( contradiction /* impossible chain */ )
                next
                  case tag1
                  step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                    case d_0_fst
                    by step( contradiction /* impossible chain */ )
                  next
                    case d_0_snd
                    by step( solve( (#vr.5, 0) ~~> (#vk.2, 0) ) )
                  qed
                qed
              qed
            next
              case c_xor_case_06
              step( solve( !KU( (~k⊕~r1.1⊕h((~k⊕~r1⊕r0))) ) @ #vk.3 ) )
                case c_xor_case_1
                by step( contradiction /* cyclic */ )
              next
                case c_xor_case_2
                by step( solve( !KU( ~k ) @ #vk.6 ) )
              next
                case c_xor_case_3
                step( solve( !KU( (~k2⊕r0) ) @ #vk.4 ) )
                  case c_xor
                  by step( solve( !KU( ~k2 ) @ #vk.7 ) )
                next
                  case coerce
                  step( solve( !KD( (~k2⊕r0) ) ▶₀ #vk.3 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.5, 0) ~~> (#vk.3, 0) ) )
                    qed
                  qed
                qed
              next
                case coerce
                step( solve( !KD( (~k⊕~r1.1⊕h((~k⊕~r1⊕r0))) ) ▶₀ #vk.2 ) )
                  case acceptreader
                  by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                next
                  case initiatereader
                  by step( contradiction /* impossible chain */ )
                next
                  case tag1
                  step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                    case d_0_fst
                    by step( contradiction /* impossible chain */ )
                  next
                    case d_0_snd
                    by step( solve( (#vr.5, 0) ~~> (#vk.2, 0) ) )
                  qed
                qed
              qed
            next
              case c_xor_case_07
              step( solve( !KU( (~k⊕h((~k⊕~r1⊕r0))) ) @ #vk.3 ) )
                case c_xor
                by step( solve( !KU( ~k ) @ #vk.6 ) )
              next
                case coerce
                step( solve( !KD( (~k⊕h((~k⊕~r1⊕r0))) ) ▶₀ #vk.2 ) )
                  case acceptreader
                  by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                next
                  case initiatereader
                  by step( contradiction /* impossible chain */ )
                next
                  case tag1
                  step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                    case d_0_fst
                    by step( contradiction /* impossible chain */ )
                  next
                    case d_0_snd
                    by step( solve( (#vr.5, 0) ~~> (#vk.2, 0) ) )
                  qed
                qed
              qed
            next
              case c_xor_case_08
              by step( solve( !KU( ~k ) @ #vk.4 ) )
            next
              case c_xor_case_09
              step( solve( !KU( (~k2⊕r0⊕h((~k⊕~r1⊕r0))) ) @ #vk.3 ) )
                case c_xor_case_1
                step( solve( !KU( (~k⊕~r1.1) ) @ #vk.4 ) )
                  case c_xor
                  by step( contradiction /* cyclic */ )
                next
                  case coerce
                  step( solve( !KD( (~k⊕~r1.1) ) ▶₀ #vk.3 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.5, 0) ~~> (#vk.3, 0) ) )
                    qed
                  qed
                qed
              next
                case c_xor_case_2
                by step( solve( !KU( ~k2 ) @ #vk.6 ) )
              next
                case c_xor_case_3
                step( solve( !KU( (~k⊕~r1.1) ) @ #vk.4 ) )
                  case c_xor
                  by step( contradiction /* cyclic */ )
                next
                  case coerce
                  step( solve( !KD( (~k⊕~r1.1) ) ▶₀ #vk.3 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.5, 0) ~~> (#vk.3, 0) ) )
                    qed
                  qed
                qed
              next
                case coerce
                step( solve( !KD( (~k2⊕r0⊕h((~k⊕~r1⊕r0))) ) ▶₀ #vk.2 ) )
                  case acceptreader
                  by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                next
                  case initiatereader
                  by step( contradiction /* impossible chain */ )
                next
                  case tag1
                  step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                    case d_0_fst
                    by step( contradiction /* impossible chain */ )
                  next
                    case d_0_snd
                    by step( solve( (#vr.5, 0) ~~> (#vk.2, 0) ) )
                  qed
                qed
              qed
            next
              case c_xor_case_10
              step( solve( !KU( (~k2⊕~r1.1⊕h((~k⊕~r1⊕r0))) ) @ #vk.3 ) )
                case c_xor_case_1
                by step( contradiction /* cyclic */ )
              next
                case c_xor_case_2
                by step( solve( !KU( ~k2 ) @ #vk.6 ) )
              next
                case c_xor_case_3
                step( solve( !KU( (~k⊕r0) ) @ #vk.4 ) )
                  case c_xor
                  by step( solve( !KU( ~k ) @ #vk.7 ) )
                next
                  case coerce
                  step( solve( !KD( (~k⊕r0) ) ▶₀ #vk.3 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.5, 0) ~~> (#vk.3, 0) ) )
                    qed
                  qed
                qed
              next
                case coerce
                step( solve( !KD( (~k2⊕~r1.1⊕h((~k⊕~r1⊕r0))) ) ▶₀ #vk.2 ) )
                  case acceptreader
                  by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                next
                  case initiatereader
                  by step( contradiction /* impossible chain */ )
                next
                  case tag1
                  step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                    case d_0_fst
                    by step( contradiction /* impossible chain */ )
                  next
                    case d_0_snd
                    by step( solve( (#vr.5, 0) ~~> (#vk.2, 0) ) )
                  qed
                qed
              qed
            next
              case c_xor_case_11
              step( solve( !KU( (~k2⊕h((~k⊕~r1⊕r0))) ) @ #vk.3 ) )
                case c_xor
                by step( solve( !KU( ~k2 ) @ #vk.6 ) )
              next
                case coerce
                step( solve( !KD( (~k2⊕h((~k⊕~r1⊕r0))) ) ▶₀ #vk.2 ) )
                  case acceptreader
                  by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                next
                  case initiatereader
                  by step( contradiction /* impossible chain */ )
                next
                  case tag1
                  step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                    case d_0_fst
                    by step( contradiction /* impossible chain */ )
                  next
                    case d_0_snd
                    by step( solve( (#vr.5, 0) ~~> (#vk.2, 0) ) )
                  qed
                qed
              qed
            next
              case c_xor_case_12
              step( solve( !KU( (r0⊕~r1.1⊕h((~k⊕~r1⊕r0))) ) @ #vk.3 ) )
                case c_xor_case_1
                by step( contradiction /* cyclic */ )
              next
                case c_xor_case_2
                step( solve( !KU( (~k⊕~k2) ) @ #vk.4 ) )
                  case c_xor
                  by step( solve( !KU( ~k2 ) @ #vk.6 ) )
                next
                  case coerce
                  step( solve( !KD( (~k⊕~k2) ) ▶₀ #vk.3 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.5, 0) ~~> (#vk.3, 0) ) )
                    qed
                  qed
                qed
              next
                case c_xor_case_3
                step( solve( !KU( (~k⊕~k2) ) @ #vk.4 ) )
                  case c_xor
                  by step( solve( !KU( ~k2 ) @ #vk.7 ) )
                next
                  case coerce
                  step( solve( !KD( (~k⊕~k2) ) ▶₀ #vk.3 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.5, 0) ~~> (#vk.3, 0) ) )
                    qed
                  qed
                qed
              next
                case coerce
                step( solve( !KD( (r0⊕~r1.1⊕h((~k⊕~r1⊕r0))) ) ▶₀ #vk.2 ) )
                  case acceptreader
                  by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                next
                  case initiatereader
                  by step( contradiction /* impossible chain */ )
                next
                  case tag1
                  step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                    case d_0_fst
                    by step( contradiction /* impossible chain */ )
                  next
                    case d_0_snd
                    by step( solve( (#vr.5, 0) ~~> (#vk.2, 0) ) )
                  qed
                qed
              qed
            next
              case c_xor_case_13
              step( solve( !KU( (r0⊕h((~k⊕~r1⊕r0))) ) @ #vk.3 ) )
                case c_xor
                step( solve( !KU( (~k⊕~k2⊕~r1.1) ) @ #vk.4 ) )
                  case c_xor_case_1
                  by step( solve( !KU( ~k2 ) @ #vk.7 ) )
                next
                  case c_xor_case_2
                  by step( solve( !KU( ~k ) @ #vk.7 ) )
                next
                  case c_xor_case_3
                  by step( contradiction /* cyclic */ )
                next
                  case coerce
                  step( solve( !KD( (~k⊕~k2⊕~r1.1) ) ▶₀ #vk.3 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.5, 0) ~~> (#vk.3, 0) ) )
                    qed
                  qed
                qed
              next
                case coerce
                step( solve( !KD( (r0⊕h((~k⊕~r1⊕r0))) ) ▶₀ #vk.2 ) )
                  case acceptreader
                  by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                next
                  case initiatereader
                  by step( contradiction /* impossible chain */ )
                next
                  case tag1
                  step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                    case d_0_fst
                    by step( contradiction /* impossible chain */ )
                  next
                    case d_0_snd
                    by step( solve( (#vr.5, 0) ~~> (#vk.2, 0) ) )
                  qed
                qed
              qed
            next
              case c_xor_case_14
              step( solve( !KU( (~r1.1⊕h((~k⊕~r1⊕r0))) ) @ #vk.3 ) )
                case c_xor
                by step( contradiction /* cyclic */ )
              next
                case coerce
                step( solve( !KD( (~r1.1⊕h((~k⊕~r1⊕r0))) ) ▶₀ #vk.2 ) )
                  case acceptreader
                  by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                next
                  case initiatereader
                  by step( contradiction /* impossible chain */ )
                next
                  case tag1
                  step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                    case d_0_fst
                    by step( contradiction /* impossible chain */ )
                  next
                    case d_0_snd
                    by step( solve( (#vr.5, 0) ~~> (#vk.2, 0) ) )
                  qed
                qed
              qed
            next
              case c_xor_case_15
              step( solve( !KU( (~k⊕~k2⊕r0⊕~r1.1) ) @ #vk.4 ) )
                case c_xor_case_1
                step( solve( !KU( (~k⊕~k2⊕~r1.1) ) @ #vk.5 ) )
                  case c_xor_case_1
                  by step( solve( !KU( ~k2 ) @ #vk.7 ) )
                next
                  case c_xor_case_2
                  by step( solve( !KU( ~k ) @ #vk.7 ) )
                next
                  case c_xor_case_3
                  by step( contradiction /* cyclic */ )
                next
                  case coerce
                  step( solve( !KD( (~k⊕~k2⊕~r1.1) ) ▶₀ #vk.3 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.5, 0) ~~> (#vk.3, 0) ) )
                    qed
                  qed
                qed
              next
                case c_xor_case_2
                by step( solve( !KU( ~k2 ) @ #vk.6 ) )
              next
                case c_xor_case_3
                step( solve( !KU( (~k⊕~r1.1) ) @ #vk.5 ) )
                  case c_xor
                  by step( contradiction /* cyclic */ )
                next
                  case coerce
                  step( solve( !KD( (~k⊕~r1.1) ) ▶₀ #vk.3 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.5, 0) ~~> (#vk.3, 0) ) )
                    qed
                  qed
                qed
              next
                case c_xor_case_4
                by step( solve( !KU( ~k ) @ #vk.6 ) )
              next
                case c_xor_case_5
                step( solve( !KU( (~k2⊕~r1.1) ) @ #vk.5 ) )
                  case c_xor
                  by step( contradiction /* cyclic */ )
                next
                  case coerce
                  step( solve( !KD( (~k2⊕~r1.1) ) ▶₀ #vk.3 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.5, 0) ~~> (#vk.3, 0) ) )
                    qed
                  qed
                qed
              next
                case c_xor_case_6
                step( solve( !KU( (r0⊕~r1.1) ) @ #vk.5 ) )
                  case c_xor
                  by step( contradiction /* cyclic */ )
                next
                  case coerce
                  step( solve( !KD( (r0⊕~r1.1) ) ▶₀ #vk.3 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.5, 0) ~~> (#vk.3, 0) ) )
                    qed
                  qed
                qed
              next
                case c_xor_case_7
                by step( contradiction /* cyclic */ )
              next
                case coerce
                step( solve( !KD( (~k⊕~k2⊕r0⊕~r1.1) ) ▶₀ #vk.2 ) )
                  case acceptreader
                  by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                next
                  case initiatereader
                  by step( contradiction /* impossible chain */ )
                next
                  case tag1
                  step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                    case d_0_fst
                    by step( contradiction /* impossible chain */ )
                  next
                    case d_0_snd
                    by step( solve( (#vr.5, 0) ~~> (#vk.2, 0) ) )
                  qed
                qed
              qed
            next
              case coerce
              step( solve( !KD( (~k⊕~k2⊕r0⊕~r1.1⊕h((~k⊕~r1⊕r0))) ) ▶₀ #vk.1 ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.5, 0) ~~> (#vk.1, 0) ) )
                qed
              qed
            qed
          qed
        next
          case split_case_4
          step( solve( !KU( (x⊕~x.1) ) @ #vk.2 ) )
            case c_xor
            step( solve( !KU( ~x ) @ #vk.3 ) )
              case fresh
              step( solve( !KU( zero ) @ #vk.3 ) )
                case c_zero
                by step( solve( splitEqs(2) ) )
              next
                case coerce
                step( solve( !KD( zero ) ▶₀ #vk.3 ) )
                  case acceptreader
                  by step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                next
                  case initiatereader
                  by step( contradiction /* impossible chain */ )
                next
                  case tag1
                  step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                    case d_0_fst
                    by step( contradiction /* impossible chain */ )
                  next
                    case d_0_snd
                    by step( solve( (#vr.5, 0) ~~> (#vk.3, 0) ) )
                  qed
                qed
              qed
            next
              case tag1_case_1
              step( solve( !KU( zero ) @ #vk.3 ) )
                case c_zero
                by step( solve( splitEqs(2) ) )
              next
                case coerce
                step( solve( !KD( zero ) ▶₀ #vk.3 ) )
                  case acceptreader
                  by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                next
                  case initiatereader
                  by step( contradiction /* impossible chain */ )
                next
                  case tag1
                  step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                    case d_0_fst
                    by step( contradiction /* impossible chain */ )
                  next
                    case d_0_snd
                    by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                  qed
                qed
              qed
            next
              case tag1_case_2
              step( solve( !KU( zero ) @ #vk.3 ) )
                case c_zero
                by step( solve( splitEqs(2) ) )
              next
                case coerce
                step( solve( !KD( zero ) ▶₀ #vk.3 ) )
                  case acceptreader
                  by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                next
                  case initiatereader
                  by step( contradiction /* impossible chain */ )
                next
                  case tag1
                  step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                    case d_0_fst
                    by step( contradiction /* impossible chain */ )
                  next
                    case d_0_snd
                    by step( solve( (#vr.7, 0) ~~> (#vk.3, 0) ) )
                  qed
                qed
              qed
            qed
          next
            case coerce
            step( solve( !KD( (x⊕~x.1) ) ▶₀ #vk.1 ) )
              case acceptreader
              by step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
            next
              case initiatereader
              by step( contradiction /* impossible chain */ )
            next
              case tag1
              step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                case d_0_fst
                by step( contradiction /* impossible chain */ )
              next
                case d_0_snd
                by step( solve( (#vr.5, 0) ~~> (#vk.1, 0) ) )
              qed
            qed
          qed
        next
          case split_case_5
          step( solve( !KU( (~k⊕~r1) ) @ #vk.1 ) )
            case c_xor
            by step( contradiction /* cyclic */ )
          next
            case coerce
            step( solve( !KD( (~k⊕~r1) ) ▶₀ #vk.1 ) )
              case acceptreader
              by step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
            next
              case initiatereader
              by step( contradiction /* impossible chain */ )
            next
              case tag1
              step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                case d_0_fst
                by step( contradiction /* impossible chain */ )
              next
                case d_0_snd
                by step( solve( (#vr.5, 0) ~~> (#vk.1, 0) ) )
              qed
            qed
          qed
        next
          case split_case_6
          step( solve( !KU( (~r1⊕x) ) @ #vk.1 ) )
            case c_xor
            by step( contradiction /* cyclic */ )
          next
            case coerce
            step( solve( !KD( (~r1⊕x) ) ▶₀ #vk.1 ) )
              case acceptreader
              by step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
            next
              case initiatereader
              by step( contradiction /* impossible chain */ )
            next
              case tag1
              step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                case d_0_fst
                by step( contradiction /* impossible chain */ )
              next
                case d_0_snd
                by step( solve( (#vr.5, 0) ~~> (#vk.1, 0) ) )
              qed
            qed
          qed
        next
          case split_case_7
          step( solve( !KU( (~k⊕~r1⊕z) ) @ #vk.1 ) )
            case c_xor_case_1
            by step( contradiction /* cyclic */ )
          next
            case c_xor_case_2
            by step( solve( !KU( ~k ) @ #vk.4 ) )
          next
            case c_xor_case_3
            step( solve( !KU( (~k⊕~r1) ) @ #vk.4 ) )
              case c_xor
              by step( contradiction /* cyclic */ )
            next
              case coerce
              step( solve( !KD( (~k⊕~r1) ) ▶₀ #vk.2 ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.5, 0) ~~> (#vk.2, 0) ) )
                qed
              qed
            qed
          next
            case coerce
            step( solve( !KD( (~k⊕~r1⊕z) ) ▶₀ #vk.1 ) )
              case acceptreader
              by step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
            next
              case initiatereader
              by step( contradiction /* impossible chain */ )
            next
              case tag1
              step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                case d_0_fst
                by step( contradiction /* impossible chain */ )
              next
                case d_0_snd
                by step( solve( (#vr.5, 0) ~~> (#vk.1, 0) ) )
              qed
            qed
          qed
        next
          case split_case_8
          step( solve( !KU( (~k⊕x) ) @ #vk.1 ) )
            case c_xor
            by step( solve( !KU( ~k ) @ #vk.4 ) )
          next
            case coerce
            step( solve( !KD( (~k⊕x) ) ▶₀ #vk.1 ) )
              case acceptreader
              by step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
            next
              case initiatereader
              by step( contradiction /* impossible chain */ )
            next
              case tag1
              step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                case d_0_fst
                by step( contradiction /* impossible chain */ )
              next
                case d_0_snd
                by step( solve( (#vr.5, 0) ~~> (#vk.1, 0) ) )
              qed
            qed
          qed
        qed
      next
        case tag1_case_3
        step( solve( splitEqs(0) ) )
          case split_case_1
          by step( solve( !KU( ~k ) @ #vk.1 ) )
        next
          case split_case_2
          by step( contradiction /* cyclic */ )
        next
          case split_case_3
          step( solve( splitEqs(2) ) )
            case split_case_1
            by step( solve( !KU( ~k2 ) @ #vk.1 ) )
          next
            case split_case_2
            step( solve( !KU( (~k⊕~k2⊕h((~k⊕~r0⊕~r1))) ) @ #vk.2 ) )
              case c_xor_case_1
              by step( solve( !KU( ~k2 ) @ #vk.4 ) )
            next
              case c_xor_case_2
              by step( solve( !KU( ~k ) @ #vk.4 ) )
            next
              case c_xor_case_3
              step( solve( !KU( h((~k⊕~r0⊕~r1)) ) @ #vk.3 ) )
                case c_h
                step( solve( !KU( (~k⊕~k2) ) @ #vk.4 ) )
                  case c_xor
                  by step( solve( !KU( ~k2 ) @ #vk.6 ) )
                next
                  case coerce
                  step( solve( !KD( (~k⊕~k2) ) ▶₀ #vk.3 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.5, 0) ~~> (#vk.3, 0) ) )
                    qed
                  qed
                qed
              next
                case tag1_case_1
                by step( contradiction /* cyclic */ )
              next
                case tag1_case_2
                step( solve( !KU( (~k⊕~k2) ) @ #vk.4 ) )
                  case c_xor
                  by step( solve( !KU( ~k2 ) @ #vk.6 ) )
                next
                  case coerce
                  step( solve( !KD( (~k⊕~k2) ) ▶₀ #vk.3 ) )
                    case acceptreader
                    by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.7, 0) ~~> (#vk.3, 0) ) )
                    qed
                  qed
                qed
              qed
            next
              case coerce
              step( solve( !KD( (~k⊕~k2⊕h((~k⊕~r0⊕~r1))) ) ▶₀ #vk.1 ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.5, 0) ~~> (#vk.1, 0) ) )
                qed
              qed
            qed
          next
            case split_case_3
            step( solve( !KU( (~k2⊕~r1.1) ) @ #vk.1 ) )
              case c_xor
              by step( solve( !KU( ~k2 ) @ #vk.4 ) )
            next
              case coerce
              step( solve( !KD( (~k2⊕~r1.1) ) ▶₀ #vk.1 ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.5, 0) ~~> (#vk.1, 0) ) )
                qed
              qed
            qed
          next
            case split_case_4
            step( solve( !KU( (~k2⊕x⊕~r1.1) ) @ #vk.1 ) )
              case c_xor_case_1
              step( solve( !KU( (~k⊕x⊕h((~k⊕~k2⊕~r1⊕x⊕~r1.1))) ) @ #vk.2 ) )
                case c_xor_case_1
                step( solve( !KU( (~k2⊕~r1.1) ) @ #vk.3 ) )
                  case c_xor
                  by step( solve( !KU( ~k2 ) @ #vk.7 ) )
                next
                  case coerce
                  step( solve( !KD( (~k2⊕~r1.1) ) ▶₀ #vk.3 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.5, 0) ~~> (#vk.3, 0) ) )
                    qed
                  qed
                qed
              next
                case c_xor_case_2
                by step( solve( !KU( ~k ) @ #vk.6 ) )
              next
                case c_xor_case_3
                step( solve( !KU( (~k2⊕~r1.1) ) @ #vk.3 ) )
                  case c_xor
                  by step( solve( !KU( ~k2 ) @ #vk.8 ) )
                next
                  case coerce
                  step( solve( !KD( (~k2⊕~r1.1) ) ▶₀ #vk.3 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.5, 0) ~~> (#vk.3, 0) ) )
                    qed
                  qed
                qed
              next
                case coerce
                step( solve( !KD( (~k⊕x⊕h((~k⊕~k2⊕~r1⊕x⊕~r1.1))) ) ▶₀ #vk.2 ) )
                  case acceptreader
                  by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                next
                  case initiatereader
                  by step( contradiction /* impossible chain */ )
                next
                  case tag1
                  step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                    case d_0_fst
                    by step( contradiction /* impossible chain */ )
                  next
                    case d_0_snd
                    by step( solve( (#vr.5, 0) ~~> (#vk.2, 0) ) )
                  qed
                qed
              qed
            next
              case c_xor_case_2
              by step( solve( !KU( ~k2 ) @ #vk.4 ) )
            next
              case c_xor_case_3
              step( solve( !KU( (~k⊕x⊕h((~k⊕~k2⊕~r1⊕x⊕~r1.1))) ) @ #vk.2 ) )
                case c_xor_case_1
                step( solve( !KU( (~k2⊕x) ) @ #vk.4 ) )
                  case c_xor
                  by step( solve( !KU( ~k2 ) @ #vk.7 ) )
                next
                  case coerce
                  step( solve( !KD( (~k2⊕x) ) ▶₀ #vk.3 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.5, 0) ~~> (#vk.3, 0) ) )
                    qed
                  qed
                qed
              next
                case c_xor_case_2
                by step( solve( !KU( ~k ) @ #vk.6 ) )
              next
                case c_xor_case_3
                step( solve( !KU( (~k2⊕x) ) @ #vk.4 ) )
                  case c_xor
                  by step( solve( !KU( ~k2 ) @ #vk.8 ) )
                next
                  case coerce
                  step( solve( !KD( (~k2⊕x) ) ▶₀ #vk.3 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.5, 0) ~~> (#vk.3, 0) ) )
                    qed
                  qed
                qed
              next
                case coerce
                step( solve( !KD( (~k⊕x⊕h((~k⊕~k2⊕~r1⊕x⊕~r1.1))) ) ▶₀ #vk.2 ) )
                  case acceptreader
                  by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                next
                  case initiatereader
                  by step( contradiction /* impossible chain */ )
                next
                  case tag1
                  step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                    case d_0_fst
                    by step( contradiction /* impossible chain */ )
                  next
                    case d_0_snd
                    by step( solve( (#vr.5, 0) ~~> (#vk.2, 0) ) )
                  qed
                qed
              qed
            next
              case coerce
              step( solve( !KD( (~k2⊕x⊕~r1.1) ) ▶₀ #vk.1 ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.5, 0) ~~> (#vk.1, 0) ) )
                qed
              qed
            qed
          next
            case split_case_5
            step( solve( !KU( (~k2⊕x) ) @ #vk.1 ) )
              case c_xor
              by step( solve( !KU( ~k2 ) @ #vk.4 ) )
            next
              case coerce
              step( solve( !KD( (~k2⊕x) ) ▶₀ #vk.1 ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.5, 0) ~~> (#vk.1, 0) ) )
                qed
              qed
            qed
          next
            case split_case_6
            step( solve( !KU( (x⊕~r1.1) ) @ #vk.1 ) )
              case c_xor
              step( solve( !KU( (~k⊕~k2⊕x⊕h((~k⊕~r1⊕x⊕~r1.1))) ) @ #vk.2 ) )
                case c_xor_case_1
                step( solve( !KU( (~k⊕~k2⊕h((~k⊕~r1⊕x⊕~r1.1))) ) @ #vk.5 ) )
                  case c_xor_case_1
                  by step( solve( !KU( ~k2 ) @ #vk.7 ) )
                next
                  case c_xor_case_2
                  by step( solve( !KU( ~k ) @ #vk.7 ) )
                next
                  case c_xor_case_3
                  step( solve( !KU( h((~k⊕~r1⊕x⊕~r1.1)) ) @ #vk.6 ) )
                    case c_h
                    step( solve( !KU( (~k⊕~k2) ) @ #vk.7 ) )
                      case c_xor
                      by step( solve( !KU( ~k2 ) @ #vk.9 ) )
                    next
                      case coerce
                      step( solve( !KD( (~k⊕~k2) ) ▶₀ #vk.5 ) )
                        case acceptreader
                        by step( solve( (#vl.1, 0) ~~> (#vk.5, 0) ) )
                      next
                        case initiatereader
                        by step( contradiction /* impossible chain */ )
                      next
                        case tag1
                        step( solve( (#vl.1, 0) ~~> (#vk.5, 0) ) )
                          case d_0_fst
                          by step( contradiction /* impossible chain */ )
                        next
                          case d_0_snd
                          by step( solve( (#vr.5, 0) ~~> (#vk.5, 0) ) )
                        qed
                      qed
                    qed
                  next
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    step( solve( !KU( (~k⊕~k2) ) @ #vk.7 ) )
                      case c_xor
                      by step( solve( !KU( ~k2 ) @ #vk.9 ) )
                    next
                      case coerce
                      step( solve( !KD( (~k⊕~k2) ) ▶₀ #vk.5 ) )
                        case acceptreader
                        by step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                      next
                        case initiatereader
                        by step( contradiction /* impossible chain */ )
                      next
                        case tag1
                        step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                          case d_0_fst
                          by step( contradiction /* impossible chain */ )
                        next
                          case d_0_snd
                          by step( solve( (#vr.7, 0) ~~> (#vk.5, 0) ) )
                        qed
                      qed
                    qed
                  qed
                next
                  case coerce
                  step( solve( !KD( (~k⊕~k2⊕h((~k⊕~r1⊕x⊕~r1.1))) ) ▶₀ #vk.3 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.5, 0) ~~> (#vk.3, 0) ) )
                    qed
                  qed
                qed
              next
                case c_xor_case_2
                by step( solve( !KU( ~k2 ) @ #vk.6 ) )
              next
                case c_xor_case_3
                step( solve( !KU( (~k⊕h((~k⊕~r1⊕x⊕~r1.1))) ) @ #vk.5 ) )
                  case c_xor
                  by step( solve( !KU( ~k ) @ #vk.8 ) )
                next
                  case coerce
                  step( solve( !KD( (~k⊕h((~k⊕~r1⊕x⊕~r1.1))) ) ▶₀ #vk.3 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.5, 0) ~~> (#vk.3, 0) ) )
                    qed
                  qed
                qed
              next
                case c_xor_case_4
                by step( solve( !KU( ~k ) @ #vk.6 ) )
              next
                case c_xor_case_5
                step( solve( !KU( (~k2⊕h((~k⊕~r1⊕x⊕~r1.1))) ) @ #vk.5 ) )
                  case c_xor
                  by step( solve( !KU( ~k2 ) @ #vk.8 ) )
                next
                  case coerce
                  step( solve( !KD( (~k2⊕h((~k⊕~r1⊕x⊕~r1.1))) ) ▶₀ #vk.3 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.5, 0) ~~> (#vk.3, 0) ) )
                    qed
                  qed
                qed
              next
                case c_xor_case_6
                step( solve( !KU( (x⊕h((~k⊕~r1⊕x⊕~r1.1))) ) @ #vk.5 ) )
                  case c_xor
                  step( solve( !KU( (~k⊕~k2) ) @ #vk.6 ) )
                    case c_xor
                    by step( solve( !KU( ~k2 ) @ #vk.8 ) )
                  next
                    case coerce
                    step( solve( !KD( (~k⊕~k2) ) ▶₀ #vk.4 ) )
                      case acceptreader
                      by step( solve( (#vl.1, 0) ~~> (#vk.4, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.1, 0) ~~> (#vk.4, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.5, 0) ~~> (#vk.4, 0) ) )
                      qed
                    qed
                  qed
                next
                  case coerce
                  step( solve( !KD( (x⊕h((~k⊕~r1⊕x⊕~r1.1))) ) ▶₀ #vk.3 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.5, 0) ~~> (#vk.3, 0) ) )
                    qed
                  qed
                qed
              next
                case c_xor_case_7
                step( solve( !KU( h((~k⊕~r1⊕x⊕~r1.1)) ) @ #vk.5 ) )
                  case c_h
                  step( solve( !KU( (~k⊕~k2⊕x) ) @ #vk.6 ) )
                    case c_xor_case_1
                    by step( solve( !KU( ~k2 ) @ #vk.9 ) )
                  next
                    case c_xor_case_2
                    by step( solve( !KU( ~k ) @ #vk.9 ) )
                  next
                    case c_xor_case_3
                    step( solve( !KU( (~k⊕~r1⊕x⊕~r1.1) ) @ #vk.7 ) )
                      case c_xor_case_1
                      step( solve( !KU( (~k⊕~k2) ) @ #vk.8 ) )
                        case c_xor
                        by step( solve( !KU( ~k2 ) @ #vk.10 ) )
                      next
                        case coerce
                        step( solve( !KD( (~k⊕~k2) ) ▶₀ #vk.6 ) )
                          case acceptreader
                          by step( solve( (#vl.1, 0) ~~> (#vk.6, 0) ) )
                        next
                          case initiatereader
                          by step( contradiction /* impossible chain */ )
                        next
                          case tag1
                          step( solve( (#vl.1, 0) ~~> (#vk.6, 0) ) )
                            case d_0_fst
                            by step( contradiction /* impossible chain */ )
                          next
                            case d_0_snd
                            by step( solve( (#vr.5, 0) ~~> (#vk.6, 0) ) )
                          qed
                        qed
                      qed
                    next
                      case c_xor_case_2
                      by step( contradiction /* cyclic */ )
                    next
                      case c_xor_case_3
                      step( solve( !KU( (~k⊕~k2) ) @ #vk.8 ) )
                        case c_xor
                        by step( solve( !KU( ~k2 ) @ #vk.11 ) )
                      next
                        case coerce
                        step( solve( !KD( (~k⊕~k2) ) ▶₀ #vk.6 ) )
                          case acceptreader
                          by step( solve( (#vl.1, 0) ~~> (#vk.6, 0) ) )
                        next
                          case initiatereader
                          by step( contradiction /* impossible chain */ )
                        next
                          case tag1
                          step( solve( (#vl.1, 0) ~~> (#vk.6, 0) ) )
                            case d_0_fst
                            by step( contradiction /* impossible chain */ )
                          next
                            case d_0_snd
                            by step( solve( (#vr.5, 0) ~~> (#vk.6, 0) ) )
                          qed
                        qed
                      qed
                    next
                      case c_xor_case_4
                      by step( solve( !KU( ~k ) @ #vk.10 ) )
                    next
                      case c_xor_case_5
                      step( solve( !KU( (~k⊕~k2) ) @ #vk.8 ) )
                        case c_xor
                        by step( solve( !KU( ~k2 ) @ #vk.11 ) )
                      next
                        case coerce
                        step( solve( !KD( (~k⊕~k2) ) ▶₀ #vk.6 ) )
                          case acceptreader
                          by step( solve( (#vl.1, 0) ~~> (#vk.6, 0) ) )
                        next
                          case initiatereader
                          by step( contradiction /* impossible chain */ )
                        next
                          case tag1
                          step( solve( (#vl.1, 0) ~~> (#vk.6, 0) ) )
                            case d_0_fst
                            by step( contradiction /* impossible chain */ )
                          next
                            case d_0_snd
                            by step( solve( (#vr.5, 0) ~~> (#vk.6, 0) ) )
                          qed
                        qed
                      qed
                    next
                      case c_xor_case_6
                      by step( contradiction /* cyclic */ )
                    next
                      case c_xor_case_7
                      by step( contradiction /* cyclic */ )
                    next
                      case coerce
                      step( solve( !KD( (~k⊕~r1⊕x⊕~r1.1) ) ▶₀ #vk.5 ) )
                        case acceptreader
                        by step( solve( (#vl.1, 0) ~~> (#vk.5, 0) ) )
                      next
                        case initiatereader
                        by step( contradiction /* impossible chain */ )
                      next
                        case tag1
                        step( solve( (#vl.1, 0) ~~> (#vk.5, 0) ) )
                          case d_0_fst
                          by step( contradiction /* impossible chain */ )
                        next
                          case d_0_snd
                          by step( solve( (#vr.5, 0) ~~> (#vk.5, 0) ) )
                        qed
                      qed
                    qed
                  next
                    case coerce
                    step( solve( !KD( (~k⊕~k2⊕x) ) ▶₀ #vk.4 ) )
                      case acceptreader
                      by step( solve( (#vl.1, 0) ~~> (#vk.4, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.1, 0) ~~> (#vk.4, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.5, 0) ~~> (#vk.4, 0) ) )
                      qed
                    qed
                  qed
                next
                  case tag1_case_1
                  by step( contradiction /* cyclic */ )
                next
                  case tag1_case_2
                  step( solve( !KU( (~k⊕~k2⊕x) ) @ #vk.6 ) )
                    case c_xor_case_1
                    by step( solve( !KU( ~k2 ) @ #vk.9 ) )
                  next
                    case c_xor_case_2
                    by step( solve( !KU( ~k ) @ #vk.9 ) )
                  next
                    case c_xor_case_3
                    step( solve( !KU( (~k⊕~k2) ) @ #vk.8 ) )
                      case c_xor
                      by step( solve( !KU( ~k2 ) @ #vk.9 ) )
                    next
                      case coerce
                      step( solve( !KD( (~k⊕~k2) ) ▶₀ #vk.5 ) )
                        case acceptreader
                        by step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                      next
                        case initiatereader
                        by step( contradiction /* impossible chain */ )
                      next
                        case tag1
                        step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                          case d_0_fst
                          by step( contradiction /* impossible chain */ )
                        next
                          case d_0_snd
                          by step( solve( (#vr.7, 0) ~~> (#vk.5, 0) ) )
                        qed
                      qed
                    qed
                  next
                    case coerce
                    step( solve( !KD( (~k⊕~k2⊕x) ) ▶₀ #vk.4 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.7, 0) ~~> (#vk.4, 0) ) )
                      qed
                    qed
                  qed
                qed
              next
                case coerce
                step( solve( !KD( (~k⊕~k2⊕x⊕h((~k⊕~r1⊕x⊕~r1.1))) ) ▶₀ #vk.2 ) )
                  case acceptreader
                  by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                next
                  case initiatereader
                  by step( contradiction /* impossible chain */ )
                next
                  case tag1
                  step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                    case d_0_fst
                    by step( contradiction /* impossible chain */ )
                  next
                    case d_0_snd
                    by step( solve( (#vr.5, 0) ~~> (#vk.2, 0) ) )
                  qed
                qed
              qed
            next
              case coerce
              step( solve( !KD( (x⊕~r1.1) ) ▶₀ #vk.1 ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.5, 0) ~~> (#vk.1, 0) ) )
                qed
              qed
            qed
          next
            case split_case_7
            step( solve( !KU( (~k⊕~k2⊕r0⊕~r1.1⊕h((~k⊕~r1⊕r0))) ) @ #vk.2 ) )
              case c_xor_case_01
              by step( contradiction /* cyclic */ )
            next
              case c_xor_case_02
              step( solve( !KU( (~k⊕~k2⊕~r1.1⊕h((~k⊕~r1⊕r0))) ) @ #vk.3 ) )
                case c_xor_case_1
                by step( contradiction /* cyclic */ )
              next
                case c_xor_case_2
                by step( solve( !KU( ~k2 ) @ #vk.5 ) )
              next
                case c_xor_case_3
                step( solve( !KU( (~k⊕h((~k⊕~r1⊕r0))) ) @ #vk.4 ) )
                  case c_xor
                  by step( solve( !KU( ~k ) @ #vk.7 ) )
                next
                  case coerce
                  step( solve( !KD( (~k⊕h((~k⊕~r1⊕r0))) ) ▶₀ #vk.3 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.5, 0) ~~> (#vk.3, 0) ) )
                    qed
                  qed
                qed
              next
                case c_xor_case_4
                by step( solve( !KU( ~k ) @ #vk.5 ) )
              next
                case c_xor_case_5
                step( solve( !KU( (~k2⊕h((~k⊕~r1⊕r0))) ) @ #vk.4 ) )
                  case c_xor
                  by step( solve( !KU( ~k2 ) @ #vk.7 ) )
                next
                  case coerce
                  step( solve( !KD( (~k2⊕h((~k⊕~r1⊕r0))) ) ▶₀ #vk.3 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.5, 0) ~~> (#vk.3, 0) ) )
                    qed
                  qed
                qed
              next
                case c_xor_case_6
                step( solve( !KU( (~r1.1⊕h((~k⊕~r1⊕r0))) ) @ #vk.4 ) )
                  case c_xor
                  by step( contradiction /* cyclic */ )
                next
                  case coerce
                  step( solve( !KD( (~r1.1⊕h((~k⊕~r1⊕r0))) ) ▶₀ #vk.3 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.5, 0) ~~> (#vk.3, 0) ) )
                    qed
                  qed
                qed
              next
                case c_xor_case_7
                step( solve( !KU( (~k⊕~k2⊕~r1.1) ) @ #vk.5 ) )
                  case c_xor_case_1
                  by step( solve( !KU( ~k2 ) @ #vk.7 ) )
                next
                  case c_xor_case_2
                  by step( solve( !KU( ~k ) @ #vk.7 ) )
                next
                  case c_xor_case_3
                  by step( contradiction /* cyclic */ )
                next
                  case coerce
                  step( solve( !KD( (~k⊕~k2⊕~r1.1) ) ▶₀ #vk.3 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.5, 0) ~~> (#vk.3, 0) ) )
                    qed
                  qed
                qed
              next
                case coerce
                step( solve( !KD( (~k⊕~k2⊕~r1.1⊕h((~k⊕~r1⊕r0))) ) ▶₀ #vk.2 ) )
                  case acceptreader
                  by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                next
                  case initiatereader
                  by step( contradiction /* impossible chain */ )
                next
                  case tag1
                  step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                    case d_0_fst
                    by step( contradiction /* impossible chain */ )
                  next
                    case d_0_snd
                    by step( solve( (#vr.5, 0) ~~> (#vk.2, 0) ) )
                  qed
                qed
              qed
            next
              case c_xor_case_03
              step( solve( !KU( (~k⊕~k2⊕h((~k⊕~r1⊕r0))) ) @ #vk.3 ) )
                case c_xor_case_1
                by step( solve( !KU( ~k2 ) @ #vk.6 ) )
              next
                case c_xor_case_2
                by step( solve( !KU( ~k ) @ #vk.6 ) )
              next
                case c_xor_case_3
                step( solve( !KU( (r0⊕~r1.1) ) @ #vk.4 ) )
                  case c_xor
                  by step( contradiction /* cyclic */ )
                next
                  case coerce
                  step( solve( !KD( (r0⊕~r1.1) ) ▶₀ #vk.3 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.5, 0) ~~> (#vk.3, 0) ) )
                    qed
                  qed
                qed
              next
                case coerce
                step( solve( !KD( (~k⊕~k2⊕h((~k⊕~r1⊕r0))) ) ▶₀ #vk.2 ) )
                  case acceptreader
                  by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                next
                  case initiatereader
                  by step( contradiction /* impossible chain */ )
                next
                  case tag1
                  step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                    case d_0_fst
                    by step( contradiction /* impossible chain */ )
                  next
                    case d_0_snd
                    by step( solve( (#vr.5, 0) ~~> (#vk.2, 0) ) )
                  qed
                qed
              qed
            next
              case c_xor_case_04
              by step( solve( !KU( ~k2 ) @ #vk.4 ) )
            next
              case c_xor_case_05
              step( solve( !KU( (~k⊕r0⊕h((~k⊕~r1⊕r0))) ) @ #vk.3 ) )
                case c_xor_case_1
                step( solve( !KU( (~k2⊕~r1.1) ) @ #vk.4 ) )
                  case c_xor
                  by step( contradiction /* cyclic */ )
                next
                  case coerce
                  step( solve( !KD( (~k2⊕~r1.1) ) ▶₀ #vk.3 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.5, 0) ~~> (#vk.3, 0) ) )
                    qed
                  qed
                qed
              next
                case c_xor_case_2
                by step( solve( !KU( ~k ) @ #vk.6 ) )
              next
                case c_xor_case_3
                step( solve( !KU( (~k2⊕~r1.1) ) @ #vk.4 ) )
                  case c_xor
                  by step( contradiction /* cyclic */ )
                next
                  case coerce
                  step( solve( !KD( (~k2⊕~r1.1) ) ▶₀ #vk.3 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.5, 0) ~~> (#vk.3, 0) ) )
                    qed
                  qed
                qed
              next
                case coerce
                step( solve( !KD( (~k⊕r0⊕h((~k⊕~r1⊕r0))) ) ▶₀ #vk.2 ) )
                  case acceptreader
                  by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                next
                  case initiatereader
                  by step( contradiction /* impossible chain */ )
                next
                  case tag1
                  step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                    case d_0_fst
                    by step( contradiction /* impossible chain */ )
                  next
                    case d_0_snd
                    by step( solve( (#vr.5, 0) ~~> (#vk.2, 0) ) )
                  qed
                qed
              qed
            next
              case c_xor_case_06
              step( solve( !KU( (~k⊕~r1.1⊕h((~k⊕~r1⊕r0))) ) @ #vk.3 ) )
                case c_xor_case_1
                by step( contradiction /* cyclic */ )
              next
                case c_xor_case_2
                by step( solve( !KU( ~k ) @ #vk.6 ) )
              next
                case c_xor_case_3
                step( solve( !KU( (~k2⊕r0) ) @ #vk.4 ) )
                  case c_xor
                  by step( solve( !KU( ~k2 ) @ #vk.7 ) )
                next
                  case coerce
                  step( solve( !KD( (~k2⊕r0) ) ▶₀ #vk.3 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.5, 0) ~~> (#vk.3, 0) ) )
                    qed
                  qed
                qed
              next
                case coerce
                step( solve( !KD( (~k⊕~r1.1⊕h((~k⊕~r1⊕r0))) ) ▶₀ #vk.2 ) )
                  case acceptreader
                  by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                next
                  case initiatereader
                  by step( contradiction /* impossible chain */ )
                next
                  case tag1
                  step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                    case d_0_fst
                    by step( contradiction /* impossible chain */ )
                  next
                    case d_0_snd
                    by step( solve( (#vr.5, 0) ~~> (#vk.2, 0) ) )
                  qed
                qed
              qed
            next
              case c_xor_case_07
              step( solve( !KU( (~k⊕h((~k⊕~r1⊕r0))) ) @ #vk.3 ) )
                case c_xor
                by step( solve( !KU( ~k ) @ #vk.6 ) )
              next
                case coerce
                step( solve( !KD( (~k⊕h((~k⊕~r1⊕r0))) ) ▶₀ #vk.2 ) )
                  case acceptreader
                  by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                next
                  case initiatereader
                  by step( contradiction /* impossible chain */ )
                next
                  case tag1
                  step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                    case d_0_fst
                    by step( contradiction /* impossible chain */ )
                  next
                    case d_0_snd
                    by step( solve( (#vr.5, 0) ~~> (#vk.2, 0) ) )
                  qed
                qed
              qed
            next
              case c_xor_case_08
              by step( solve( !KU( ~k ) @ #vk.4 ) )
            next
              case c_xor_case_09
              step( solve( !KU( (~k2⊕r0⊕h((~k⊕~r1⊕r0))) ) @ #vk.3 ) )
                case c_xor_case_1
                step( solve( !KU( (~k⊕~r1.1) ) @ #vk.4 ) )
                  case c_xor
                  by step( contradiction /* cyclic */ )
                next
                  case coerce
                  step( solve( !KD( (~k⊕~r1.1) ) ▶₀ #vk.3 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.5, 0) ~~> (#vk.3, 0) ) )
                    qed
                  qed
                qed
              next
                case c_xor_case_2
                by step( solve( !KU( ~k2 ) @ #vk.6 ) )
              next
                case c_xor_case_3
                step( solve( !KU( (~k⊕~r1.1) ) @ #vk.4 ) )
                  case c_xor
                  by step( contradiction /* cyclic */ )
                next
                  case coerce
                  step( solve( !KD( (~k⊕~r1.1) ) ▶₀ #vk.3 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.5, 0) ~~> (#vk.3, 0) ) )
                    qed
                  qed
                qed
              next
                case coerce
                step( solve( !KD( (~k2⊕r0⊕h((~k⊕~r1⊕r0))) ) ▶₀ #vk.2 ) )
                  case acceptreader
                  by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                next
                  case initiatereader
                  by step( contradiction /* impossible chain */ )
                next
                  case tag1
                  step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                    case d_0_fst
                    by step( contradiction /* impossible chain */ )
                  next
                    case d_0_snd
                    by step( solve( (#vr.5, 0) ~~> (#vk.2, 0) ) )
                  qed
                qed
              qed
            next
              case c_xor_case_10
              step( solve( !KU( (~k2⊕~r1.1⊕h((~k⊕~r1⊕r0))) ) @ #vk.3 ) )
                case c_xor_case_1
                by step( contradiction /* cyclic */ )
              next
                case c_xor_case_2
                by step( solve( !KU( ~k2 ) @ #vk.6 ) )
              next
                case c_xor_case_3
                step( solve( !KU( (~k⊕r0) ) @ #vk.4 ) )
                  case c_xor
                  by step( solve( !KU( ~k ) @ #vk.7 ) )
                next
                  case coerce
                  step( solve( !KD( (~k⊕r0) ) ▶₀ #vk.3 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.5, 0) ~~> (#vk.3, 0) ) )
                    qed
                  qed
                qed
              next
                case coerce
                step( solve( !KD( (~k2⊕~r1.1⊕h((~k⊕~r1⊕r0))) ) ▶₀ #vk.2 ) )
                  case acceptreader
                  by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                next
                  case initiatereader
                  by step( contradiction /* impossible chain */ )
                next
                  case tag1
                  step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                    case d_0_fst
                    by step( contradiction /* impossible chain */ )
                  next
                    case d_0_snd
                    by step( solve( (#vr.5, 0) ~~> (#vk.2, 0) ) )
                  qed
                qed
              qed
            next
              case c_xor_case_11
              step( solve( !KU( (~k2⊕h((~k⊕~r1⊕r0))) ) @ #vk.3 ) )
                case c_xor
                by step( solve( !KU( ~k2 ) @ #vk.6 ) )
              next
                case coerce
                step( solve( !KD( (~k2⊕h((~k⊕~r1⊕r0))) ) ▶₀ #vk.2 ) )
                  case acceptreader
                  by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                next
                  case initiatereader
                  by step( contradiction /* impossible chain */ )
                next
                  case tag1
                  step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                    case d_0_fst
                    by step( contradiction /* impossible chain */ )
                  next
                    case d_0_snd
                    by step( solve( (#vr.5, 0) ~~> (#vk.2, 0) ) )
                  qed
                qed
              qed
            next
              case c_xor_case_12
              step( solve( !KU( (r0⊕~r1.1⊕h((~k⊕~r1⊕r0))) ) @ #vk.3 ) )
                case c_xor_case_1
                by step( contradiction /* cyclic */ )
              next
                case c_xor_case_2
                step( solve( !KU( (~k⊕~k2) ) @ #vk.4 ) )
                  case c_xor
                  by step( solve( !KU( ~k2 ) @ #vk.6 ) )
                next
                  case coerce
                  step( solve( !KD( (~k⊕~k2) ) ▶₀ #vk.3 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.5, 0) ~~> (#vk.3, 0) ) )
                    qed
                  qed
                qed
              next
                case c_xor_case_3
                step( solve( !KU( (~k⊕~k2) ) @ #vk.4 ) )
                  case c_xor
                  by step( solve( !KU( ~k2 ) @ #vk.7 ) )
                next
                  case coerce
                  step( solve( !KD( (~k⊕~k2) ) ▶₀ #vk.3 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.5, 0) ~~> (#vk.3, 0) ) )
                    qed
                  qed
                qed
              next
                case coerce
                step( solve( !KD( (r0⊕~r1.1⊕h((~k⊕~r1⊕r0))) ) ▶₀ #vk.2 ) )
                  case acceptreader
                  by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                next
                  case initiatereader
                  by step( contradiction /* impossible chain */ )
                next
                  case tag1
                  step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                    case d_0_fst
                    by step( contradiction /* impossible chain */ )
                  next
                    case d_0_snd
                    by step( solve( (#vr.5, 0) ~~> (#vk.2, 0) ) )
                  qed
                qed
              qed
            next
              case c_xor_case_13
              step( solve( !KU( (r0⊕h((~k⊕~r1⊕r0))) ) @ #vk.3 ) )
                case c_xor
                step( solve( !KU( (~k⊕~k2⊕~r1.1) ) @ #vk.4 ) )
                  case c_xor_case_1
                  by step( solve( !KU( ~k2 ) @ #vk.7 ) )
                next
                  case c_xor_case_2
                  by step( solve( !KU( ~k ) @ #vk.7 ) )
                next
                  case c_xor_case_3
                  by step( contradiction /* cyclic */ )
                next
                  case coerce
                  step( solve( !KD( (~k⊕~k2⊕~r1.1) ) ▶₀ #vk.3 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.5, 0) ~~> (#vk.3, 0) ) )
                    qed
                  qed
                qed
              next
                case coerce
                step( solve( !KD( (r0⊕h((~k⊕~r1⊕r0))) ) ▶₀ #vk.2 ) )
                  case acceptreader
                  by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                next
                  case initiatereader
                  by step( contradiction /* impossible chain */ )
                next
                  case tag1
                  step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                    case d_0_fst
                    by step( contradiction /* impossible chain */ )
                  next
                    case d_0_snd
                    by step( solve( (#vr.5, 0) ~~> (#vk.2, 0) ) )
                  qed
                qed
              qed
            next
              case c_xor_case_14
              step( solve( !KU( (~r1.1⊕h((~k⊕~r1⊕r0))) ) @ #vk.3 ) )
                case c_xor
                by step( contradiction /* cyclic */ )
              next
                case coerce
                step( solve( !KD( (~r1.1⊕h((~k⊕~r1⊕r0))) ) ▶₀ #vk.2 ) )
                  case acceptreader
                  by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                next
                  case initiatereader
                  by step( contradiction /* impossible chain */ )
                next
                  case tag1
                  step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                    case d_0_fst
                    by step( contradiction /* impossible chain */ )
                  next
                    case d_0_snd
                    by step( solve( (#vr.5, 0) ~~> (#vk.2, 0) ) )
                  qed
                qed
              qed
            next
              case c_xor_case_15
              step( solve( !KU( (~k⊕~k2⊕r0⊕~r1.1) ) @ #vk.4 ) )
                case c_xor_case_1
                step( solve( !KU( (~k⊕~k2⊕~r1.1) ) @ #vk.5 ) )
                  case c_xor_case_1
                  by step( solve( !KU( ~k2 ) @ #vk.7 ) )
                next
                  case c_xor_case_2
                  by step( solve( !KU( ~k ) @ #vk.7 ) )
                next
                  case c_xor_case_3
                  by step( contradiction /* cyclic */ )
                next
                  case coerce
                  step( solve( !KD( (~k⊕~k2⊕~r1.1) ) ▶₀ #vk.3 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.5, 0) ~~> (#vk.3, 0) ) )
                    qed
                  qed
                qed
              next
                case c_xor_case_2
                by step( solve( !KU( ~k2 ) @ #vk.6 ) )
              next
                case c_xor_case_3
                step( solve( !KU( (~k⊕~r1.1) ) @ #vk.5 ) )
                  case c_xor
                  by step( contradiction /* cyclic */ )
                next
                  case coerce
                  step( solve( !KD( (~k⊕~r1.1) ) ▶₀ #vk.3 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.5, 0) ~~> (#vk.3, 0) ) )
                    qed
                  qed
                qed
              next
                case c_xor_case_4
                by step( solve( !KU( ~k ) @ #vk.6 ) )
              next
                case c_xor_case_5
                step( solve( !KU( (~k2⊕~r1.1) ) @ #vk.5 ) )
                  case c_xor
                  by step( contradiction /* cyclic */ )
                next
                  case coerce
                  step( solve( !KD( (~k2⊕~r1.1) ) ▶₀ #vk.3 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.5, 0) ~~> (#vk.3, 0) ) )
                    qed
                  qed
                qed
              next
                case c_xor_case_6
                step( solve( !KU( (r0⊕~r1.1) ) @ #vk.5 ) )
                  case c_xor
                  by step( contradiction /* cyclic */ )
                next
                  case coerce
                  step( solve( !KD( (r0⊕~r1.1) ) ▶₀ #vk.3 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.5, 0) ~~> (#vk.3, 0) ) )
                    qed
                  qed
                qed
              next
                case c_xor_case_7
                by step( contradiction /* cyclic */ )
              next
                case coerce
                step( solve( !KD( (~k⊕~k2⊕r0⊕~r1.1) ) ▶₀ #vk.2 ) )
                  case acceptreader
                  by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                next
                  case initiatereader
                  by step( contradiction /* impossible chain */ )
                next
                  case tag1
                  step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                    case d_0_fst
                    by step( contradiction /* impossible chain */ )
                  next
                    case d_0_snd
                    by step( solve( (#vr.5, 0) ~~> (#vk.2, 0) ) )
                  qed
                qed
              qed
            next
              case coerce
              step( solve( !KD( (~k⊕~k2⊕r0⊕~r1.1⊕h((~k⊕~r1⊕r0))) ) ▶₀ #vk.1 ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.5, 0) ~~> (#vk.1, 0) ) )
                qed
              qed
            qed
          qed
        next
          case split_case_4
          step( solve( !KU( (x⊕~x.1) ) @ #vk.2 ) )
            case c_xor
            step( solve( !KU( ~x ) @ #vk.3 ) )
              case fresh
              step( solve( !KU( zero ) @ #vk.3 ) )
                case c_zero
                by step( solve( splitEqs(2) ) )
              next
                case coerce
                step( solve( !KD( zero ) ▶₀ #vk.3 ) )
                  case acceptreader
                  by step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                next
                  case initiatereader
                  by step( contradiction /* impossible chain */ )
                next
                  case tag1
                  step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                    case d_0_fst
                    by step( contradiction /* impossible chain */ )
                  next
                    case d_0_snd
                    by step( solve( (#vr.5, 0) ~~> (#vk.3, 0) ) )
                  qed
                qed
              qed
            next
              case tag1_case_1
              step( solve( !KU( zero ) @ #vk.3 ) )
                case c_zero
                by step( solve( splitEqs(2) ) )
              next
                case coerce
                step( solve( !KD( zero ) ▶₀ #vk.3 ) )
                  case acceptreader
                  by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                next
                  case initiatereader
                  by step( contradiction /* impossible chain */ )
                next
                  case tag1
                  step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                    case d_0_fst
                    by step( contradiction /* impossible chain */ )
                  next
                    case d_0_snd
                    by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                  qed
                qed
              qed
            next
              case tag1_case_2
              step( solve( !KU( zero ) @ #vk.3 ) )
                case c_zero
                by step( solve( splitEqs(2) ) )
              next
                case coerce
                step( solve( !KD( zero ) ▶₀ #vk.3 ) )
                  case acceptreader
                  by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                next
                  case initiatereader
                  by step( contradiction /* impossible chain */ )
                next
                  case tag1
                  step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                    case d_0_fst
                    by step( contradiction /* impossible chain */ )
                  next
                    case d_0_snd
                    by step( solve( (#vr.7, 0) ~~> (#vk.3, 0) ) )
                  qed
                qed
              qed
            qed
          next
            case coerce
            step( solve( !KD( (x⊕~x.1) ) ▶₀ #vk.1 ) )
              case acceptreader
              by step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
            next
              case initiatereader
              by step( contradiction /* impossible chain */ )
            next
              case tag1
              step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                case d_0_fst
                by step( contradiction /* impossible chain */ )
              next
                case d_0_snd
                by step( solve( (#vr.5, 0) ~~> (#vk.1, 0) ) )
              qed
            qed
          qed
        next
          case split_case_5
          step( solve( !KU( (~k⊕~r1) ) @ #vk.1 ) )
            case c_xor
            by step( contradiction /* cyclic */ )
          next
            case coerce
            step( solve( !KD( (~k⊕~r1) ) ▶₀ #vk.1 ) )
              case acceptreader
              by step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
            next
              case initiatereader
              by step( contradiction /* impossible chain */ )
            next
              case tag1
              step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                case d_0_fst
                by step( contradiction /* impossible chain */ )
              next
                case d_0_snd
                by step( solve( (#vr.5, 0) ~~> (#vk.1, 0) ) )
              qed
            qed
          qed
        next
          case split_case_6
          step( solve( !KU( (~r1⊕x) ) @ #vk.1 ) )
            case c_xor
            by step( contradiction /* cyclic */ )
          next
            case coerce
            step( solve( !KD( (~r1⊕x) ) ▶₀ #vk.1 ) )
              case acceptreader
              by step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
            next
              case initiatereader
              by step( contradiction /* impossible chain */ )
            next
              case tag1
              step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                case d_0_fst
                by step( contradiction /* impossible chain */ )
              next
                case d_0_snd
                by step( solve( (#vr.5, 0) ~~> (#vk.1, 0) ) )
              qed
            qed
          qed
        next
          case split_case_7
          step( solve( !KU( (~k⊕~r1⊕z) ) @ #vk.1 ) )
            case c_xor_case_1
            by step( contradiction /* cyclic */ )
          next
            case c_xor_case_2
            by step( solve( !KU( ~k ) @ #vk.4 ) )
          next
            case c_xor_case_3
            step( solve( !KU( (~k⊕~r1) ) @ #vk.4 ) )
              case c_xor
              by step( contradiction /* cyclic */ )
            next
              case coerce
              step( solve( !KD( (~k⊕~r1) ) ▶₀ #vk.2 ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.5, 0) ~~> (#vk.2, 0) ) )
                qed
              qed
            qed
          next
            case coerce
            step( solve( !KD( (~k⊕~r1⊕z) ) ▶₀ #vk.1 ) )
              case acceptreader
              by step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
            next
              case initiatereader
              by step( contradiction /* impossible chain */ )
            next
              case tag1
              step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                case d_0_fst
                by step( contradiction /* impossible chain */ )
              next
                case d_0_snd
                by step( solve( (#vr.5, 0) ~~> (#vk.1, 0) ) )
              qed
            qed
          qed
        next
          case split_case_8
          step( solve( !KU( (~k⊕x) ) @ #vk.1 ) )
            case c_xor
            by step( solve( !KU( ~k ) @ #vk.4 ) )
          next
            case coerce
            step( solve( !KD( (~k⊕x) ) ▶₀ #vk.1 ) )
              case acceptreader
              by step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
            next
              case initiatereader
              by step( contradiction /* impossible chain */ )
            next
              case tag1
              step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                case d_0_fst
                by step( contradiction /* impossible chain */ )
              next
                case d_0_snd
                by step( solve( (#vr.5, 0) ~~> (#vk.1, 0) ) )
              qed
            qed
          qed
        qed
      qed
    next
      case tag1_case_2
      step( solve( !KU( h(z) ) @ #vk ) )
        case c_h
        step( solve( splitEqs(0) ) )
          case split_case_1
          by step( solve( !KU( ~k ) @ #vk.1 ) )
        next
          case split_case_2
          by step( contradiction /* cyclic */ )
        next
          case split_case_3
          step( solve( !KU( (~k⊕h((~k⊕~r1))) ) @ #vk.2 ) )
            case c_xor
            by step( solve( !KU( ~k ) @ #vk.4 ) )
          next
            case coerce
            step( solve( !KD( (~k⊕h((~k⊕~r1))) ) ▶₀ #vk.1 ) )
              case acceptreader
              by step( solve( (#vl, 0) ~~> (#vk.1, 0) ) )
            next
              case initiatereader
              by step( contradiction /* impossible chain */ )
            next
              case tag1
              step( solve( (#vl, 0) ~~> (#vk.1, 0) ) )
                case d_0_fst
                by step( contradiction /* impossible chain */ )
              next
                case d_0_snd
                by step( solve( (#vr.3, 0) ~~> (#vk.1, 0) ) )
              qed
            qed
          qed
        next
          case split_case_4
          step( solve( !KU( (~k⊕~r1) ) @ #vk.1 ) )
            case c_xor
            by step( contradiction /* cyclic */ )
          next
            case coerce
            step( solve( !KD( (~k⊕~r1) ) ▶₀ #vk.1 ) )
              case acceptreader
              by step( solve( (#vl, 0) ~~> (#vk.1, 0) ) )
            next
              case initiatereader
              by step( contradiction /* impossible chain */ )
            next
              case tag1
              step( solve( (#vl, 0) ~~> (#vk.1, 0) ) )
                case d_0_fst
                by step( contradiction /* impossible chain */ )
              next
                case d_0_snd
                by step( solve( (#vr.3, 0) ~~> (#vk.1, 0) ) )
              qed
            qed
          qed
        next
          case split_case_5
          step( solve( !KU( (~k⊕r0⊕h((~k⊕~r1⊕r0))) ) @ #vk.2 ) )
            case c_xor_case_1
            step( solve( !KU( (~k⊕h((~k⊕~r1⊕r0))) ) @ #vk.3 ) )
              case c_xor
              by step( solve( !KU( ~k ) @ #vk.5 ) )
            next
              case coerce
              step( solve( !KD( (~k⊕h((~k⊕~r1⊕r0))) ) ▶₀ #vk.2 ) )
                case acceptreader
                by step( solve( (#vl, 0) ~~> (#vk.2, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl, 0) ~~> (#vk.2, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.3, 0) ~~> (#vk.2, 0) ) )
                qed
              qed
            qed
          next
            case c_xor_case_2
            by step( solve( !KU( ~k ) @ #vk.4 ) )
          next
            case c_xor_case_3
            step( solve( !KU( (~k⊕r0) ) @ #vk.4 ) )
              case c_xor
              by step( solve( !KU( ~k ) @ #vk.5 ) )
            next
              case coerce
              step( solve( !KD( (~k⊕r0) ) ▶₀ #vk.2 ) )
                case acceptreader
                by step( solve( (#vl, 0) ~~> (#vk.2, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl, 0) ~~> (#vk.2, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.3, 0) ~~> (#vk.2, 0) ) )
                qed
              qed
            qed
          next
            case coerce
            step( solve( !KD( (~k⊕r0⊕h((~k⊕~r1⊕r0))) ) ▶₀ #vk.1 ) )
              case acceptreader
              by step( solve( (#vl, 0) ~~> (#vk.1, 0) ) )
            next
              case initiatereader
              by step( contradiction /* impossible chain */ )
            next
              case tag1
              step( solve( (#vl, 0) ~~> (#vk.1, 0) ) )
                case d_0_fst
                by step( contradiction /* impossible chain */ )
              next
                case d_0_snd
                by step( solve( (#vr.3, 0) ~~> (#vk.1, 0) ) )
              qed
            qed
          qed
        next
          case split_case_6
          step( solve( !KU( (~r1⊕x) ) @ #vk.1 ) )
            case c_xor
            by step( contradiction /* cyclic */ )
          next
            case coerce
            step( solve( !KD( (~r1⊕x) ) ▶₀ #vk.1 ) )
              case acceptreader
              by step( solve( (#vl, 0) ~~> (#vk.1, 0) ) )
            next
              case initiatereader
              by step( contradiction /* impossible chain */ )
            next
              case tag1
              step( solve( (#vl, 0) ~~> (#vk.1, 0) ) )
                case d_0_fst
                by step( contradiction /* impossible chain */ )
              next
                case d_0_snd
                by step( solve( (#vr.3, 0) ~~> (#vk.1, 0) ) )
              qed
            qed
          qed
        next
          case split_case_7
          step( solve( !KU( (~k⊕~r1⊕z) ) @ #vk.1 ) )
            case c_xor_case_1
            by step( contradiction /* cyclic */ )
          next
            case c_xor_case_2
            by step( solve( !KU( ~k ) @ #vk.4 ) )
          next
            case c_xor_case_3
            step( solve( !KU( (~r1⊕z⊕h(z)) ) @ #vk.2 ) )
              case c_xor_case_1
              step( solve( !KU( (~k⊕~r1) ) @ #vk.4 ) )
                case c_xor
                by step( contradiction /* cyclic */ )
              next
                case coerce
                step( solve( !KD( (~k⊕~r1) ) ▶₀ #vk.3 ) )
                  case acceptreader
                  by step( solve( (#vl, 0) ~~> (#vk.3, 0) ) )
                next
                  case initiatereader
                  by step( contradiction /* impossible chain */ )
                next
                  case tag1
                  step( solve( (#vl, 0) ~~> (#vk.3, 0) ) )
                    case d_0_fst
                    by step( contradiction /* impossible chain */ )
                  next
                    case d_0_snd
                    by step( solve( (#vr.3, 0) ~~> (#vk.3, 0) ) )
                  qed
                qed
              qed
            next
              case c_xor_case_2
              step( solve( !KU( (~k⊕~r1) ) @ #vk.4 ) )
                case c_xor
                by step( contradiction /* cyclic */ )
              next
                case coerce
                step( solve( !KD( (~k⊕~r1) ) ▶₀ #vk.3 ) )
                  case acceptreader
                  by step( solve( (#vl, 0) ~~> (#vk.3, 0) ) )
                next
                  case initiatereader
                  by step( contradiction /* impossible chain */ )
                next
                  case tag1
                  step( solve( (#vl, 0) ~~> (#vk.3, 0) ) )
                    case d_0_fst
                    by step( contradiction /* impossible chain */ )
                  next
                    case d_0_snd
                    by step( solve( (#vr.3, 0) ~~> (#vk.3, 0) ) )
                  qed
                qed
              qed
            next
              case c_xor_case_3
              step( solve( !KU( (~k⊕~r1) ) @ #vk.4 ) )
                case c_xor
                by step( contradiction /* cyclic */ )
              next
                case coerce
                step( solve( !KD( (~k⊕~r1) ) ▶₀ #vk.3 ) )
                  case acceptreader
                  by step( solve( (#vl, 0) ~~> (#vk.3, 0) ) )
                next
                  case initiatereader
                  by step( contradiction /* impossible chain */ )
                next
                  case tag1
                  step( solve( (#vl, 0) ~~> (#vk.3, 0) ) )
                    case d_0_fst
                    by step( contradiction /* impossible chain */ )
                  next
                    case d_0_snd
                    by step( solve( (#vr.3, 0) ~~> (#vk.3, 0) ) )
                  qed
                qed
              qed
            next
              case coerce
              step( solve( !KD( (~r1⊕z⊕h(z)) ) ▶₀ #vk.2 ) )
                case acceptreader
                by step( solve( (#vl, 0) ~~> (#vk.2, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl, 0) ~~> (#vk.2, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.3, 0) ~~> (#vk.2, 0) ) )
                qed
              qed
            qed
          next
            case coerce
            step( solve( !KD( (~k⊕~r1⊕z) ) ▶₀ #vk.1 ) )
              case acceptreader
              by step( solve( (#vl, 0) ~~> (#vk.1, 0) ) )
            next
              case initiatereader
              by step( contradiction /* impossible chain */ )
            next
              case tag1
              step( solve( (#vl, 0) ~~> (#vk.1, 0) ) )
                case d_0_fst
                by step( contradiction /* impossible chain */ )
              next
                case d_0_snd
                by step( solve( (#vr.3, 0) ~~> (#vk.1, 0) ) )
              qed
            qed
          qed
        next
          case split_case_8
          step( solve( !KU( (~k⊕x) ) @ #vk.1 ) )
            case c_xor
            by step( solve( !KU( ~k ) @ #vk.4 ) )
          next
            case coerce
            step( solve( !KD( (~k⊕x) ) ▶₀ #vk.1 ) )
              case acceptreader
              by step( solve( (#vl, 0) ~~> (#vk.1, 0) ) )
            next
              case initiatereader
              by step( contradiction /* impossible chain */ )
            next
              case tag1
              step( solve( (#vl, 0) ~~> (#vk.1, 0) ) )
                case d_0_fst
                by step( contradiction /* impossible chain */ )
              next
                case d_0_snd
                by step( solve( (#vr.3, 0) ~~> (#vk.1, 0) ) )
              qed
            qed
          qed
        qed
      next
        case tag1_case_1
        step( solve( splitEqs(0) ) )
          case split_case_1
          by step( solve( !KU( ~k ) @ #vk.1 ) )
        next
          case split_case_2
          by step( contradiction /* cyclic */ )
        next
          case split_case_3
          step( solve( splitEqs(2) ) )
            case split_case_1
            by step( solve( !KU( ~k1 ) @ #vk.1 ) )
          next
            case split_case_2
            step( solve( !KU( (~k⊕~k1⊕h((~k⊕~r0⊕~r1))) ) @ #vk.2 ) )
              case c_xor_case_1
              by step( solve( !KU( ~k1 ) @ #vk.4 ) )
            next
              case c_xor_case_2
              by step( solve( !KU( ~k ) @ #vk.4 ) )
            next
              case c_xor_case_3
              step( solve( !KU( h((~k⊕~r0⊕~r1)) ) @ #vk.3 ) )
                case c_h
                step( solve( !KU( (~k⊕~k1) ) @ #vk.4 ) )
                  case c_xor
                  by step( solve( !KU( ~k1 ) @ #vk.6 ) )
                next
                  case coerce
                  step( solve( !KD( (~k⊕~k1) ) ▶₀ #vk.3 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.5, 0) ~~> (#vk.3, 0) ) )
                    qed
                  qed
                qed
              next
                case tag1_case_1
                by step( contradiction /* cyclic */ )
              next
                case tag1_case_2
                step( solve( !KU( (~k⊕~k1) ) @ #vk.4 ) )
                  case c_xor
                  by step( solve( !KU( ~k1 ) @ #vk.6 ) )
                next
                  case coerce
                  step( solve( !KD( (~k⊕~k1) ) ▶₀ #vk.3 ) )
                    case acceptreader
                    by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.7, 0) ~~> (#vk.3, 0) ) )
                    qed
                  qed
                qed
              qed
            next
              case coerce
              step( solve( !KD( (~k⊕~k1⊕h((~k⊕~r0⊕~r1))) ) ▶₀ #vk.1 ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.5, 0) ~~> (#vk.1, 0) ) )
                qed
              qed
            qed
          next
            case split_case_3
            step( solve( !KU( (~k1⊕~r1.1) ) @ #vk.1 ) )
              case c_xor
              by step( solve( !KU( ~k1 ) @ #vk.4 ) )
            next
              case coerce
              step( solve( !KD( (~k1⊕~r1.1) ) ▶₀ #vk.1 ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.5, 0) ~~> (#vk.1, 0) ) )
                qed
              qed
            qed
          next
            case split_case_4
            step( solve( !KU( (~k1⊕x⊕~r1.1) ) @ #vk.1 ) )
              case c_xor_case_1
              step( solve( !KU( (~k⊕x⊕h((~k⊕~k1⊕~r1⊕x⊕~r1.1))) ) @ #vk.2 ) )
                case c_xor_case_1
                step( solve( !KU( (~k1⊕~r1.1) ) @ #vk.3 ) )
                  case c_xor
                  by step( solve( !KU( ~k1 ) @ #vk.7 ) )
                next
                  case coerce
                  step( solve( !KD( (~k1⊕~r1.1) ) ▶₀ #vk.3 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.5, 0) ~~> (#vk.3, 0) ) )
                    qed
                  qed
                qed
              next
                case c_xor_case_2
                by step( solve( !KU( ~k ) @ #vk.6 ) )
              next
                case c_xor_case_3
                step( solve( !KU( (~k1⊕~r1.1) ) @ #vk.3 ) )
                  case c_xor
                  by step( solve( !KU( ~k1 ) @ #vk.8 ) )
                next
                  case coerce
                  step( solve( !KD( (~k1⊕~r1.1) ) ▶₀ #vk.3 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.5, 0) ~~> (#vk.3, 0) ) )
                    qed
                  qed
                qed
              next
                case coerce
                step( solve( !KD( (~k⊕x⊕h((~k⊕~k1⊕~r1⊕x⊕~r1.1))) ) ▶₀ #vk.2 ) )
                  case acceptreader
                  by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                next
                  case initiatereader
                  by step( contradiction /* impossible chain */ )
                next
                  case tag1
                  step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                    case d_0_fst
                    by step( contradiction /* impossible chain */ )
                  next
                    case d_0_snd
                    by step( solve( (#vr.5, 0) ~~> (#vk.2, 0) ) )
                  qed
                qed
              qed
            next
              case c_xor_case_2
              by step( solve( !KU( ~k1 ) @ #vk.4 ) )
            next
              case c_xor_case_3
              step( solve( !KU( (~k⊕x⊕h((~k⊕~k1⊕~r1⊕x⊕~r1.1))) ) @ #vk.2 ) )
                case c_xor_case_1
                step( solve( !KU( (~k1⊕x) ) @ #vk.4 ) )
                  case c_xor
                  by step( solve( !KU( ~k1 ) @ #vk.7 ) )
                next
                  case coerce
                  step( solve( !KD( (~k1⊕x) ) ▶₀ #vk.3 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.5, 0) ~~> (#vk.3, 0) ) )
                    qed
                  qed
                qed
              next
                case c_xor_case_2
                by step( solve( !KU( ~k ) @ #vk.6 ) )
              next
                case c_xor_case_3
                step( solve( !KU( (~k1⊕x) ) @ #vk.4 ) )
                  case c_xor
                  by step( solve( !KU( ~k1 ) @ #vk.8 ) )
                next
                  case coerce
                  step( solve( !KD( (~k1⊕x) ) ▶₀ #vk.3 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.5, 0) ~~> (#vk.3, 0) ) )
                    qed
                  qed
                qed
              next
                case coerce
                step( solve( !KD( (~k⊕x⊕h((~k⊕~k1⊕~r1⊕x⊕~r1.1))) ) ▶₀ #vk.2 ) )
                  case acceptreader
                  by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                next
                  case initiatereader
                  by step( contradiction /* impossible chain */ )
                next
                  case tag1
                  step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                    case d_0_fst
                    by step( contradiction /* impossible chain */ )
                  next
                    case d_0_snd
                    by step( solve( (#vr.5, 0) ~~> (#vk.2, 0) ) )
                  qed
                qed
              qed
            next
              case coerce
              step( solve( !KD( (~k1⊕x⊕~r1.1) ) ▶₀ #vk.1 ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.5, 0) ~~> (#vk.1, 0) ) )
                qed
              qed
            qed
          next
            case split_case_5
            step( solve( !KU( (~k1⊕x) ) @ #vk.1 ) )
              case c_xor
              by step( solve( !KU( ~k1 ) @ #vk.4 ) )
            next
              case coerce
              step( solve( !KD( (~k1⊕x) ) ▶₀ #vk.1 ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.5, 0) ~~> (#vk.1, 0) ) )
                qed
              qed
            qed
          next
            case split_case_6
            step( solve( !KU( (x⊕~r1.1) ) @ #vk.1 ) )
              case c_xor
              step( solve( !KU( (~k⊕~k1⊕x⊕h((~k⊕~r1⊕x⊕~r1.1))) ) @ #vk.2 ) )
                case c_xor_case_1
                step( solve( !KU( (~k⊕~k1⊕h((~k⊕~r1⊕x⊕~r1.1))) ) @ #vk.5 ) )
                  case c_xor_case_1
                  by step( solve( !KU( ~k1 ) @ #vk.7 ) )
                next
                  case c_xor_case_2
                  by step( solve( !KU( ~k ) @ #vk.7 ) )
                next
                  case c_xor_case_3
                  step( solve( !KU( h((~k⊕~r1⊕x⊕~r1.1)) ) @ #vk.6 ) )
                    case c_h
                    step( solve( !KU( (~k⊕~k1) ) @ #vk.7 ) )
                      case c_xor
                      by step( solve( !KU( ~k1 ) @ #vk.9 ) )
                    next
                      case coerce
                      step( solve( !KD( (~k⊕~k1) ) ▶₀ #vk.5 ) )
                        case acceptreader
                        by step( solve( (#vl.1, 0) ~~> (#vk.5, 0) ) )
                      next
                        case initiatereader
                        by step( contradiction /* impossible chain */ )
                      next
                        case tag1
                        step( solve( (#vl.1, 0) ~~> (#vk.5, 0) ) )
                          case d_0_fst
                          by step( contradiction /* impossible chain */ )
                        next
                          case d_0_snd
                          by step( solve( (#vr.5, 0) ~~> (#vk.5, 0) ) )
                        qed
                      qed
                    qed
                  next
                    case tag1_case_1
                    by step( contradiction /* cyclic */ )
                  next
                    case tag1_case_2
                    step( solve( !KU( (~k⊕~k1) ) @ #vk.7 ) )
                      case c_xor
                      by step( solve( !KU( ~k1 ) @ #vk.9 ) )
                    next
                      case coerce
                      step( solve( !KD( (~k⊕~k1) ) ▶₀ #vk.5 ) )
                        case acceptreader
                        by step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                      next
                        case initiatereader
                        by step( contradiction /* impossible chain */ )
                      next
                        case tag1
                        step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                          case d_0_fst
                          by step( contradiction /* impossible chain */ )
                        next
                          case d_0_snd
                          by step( solve( (#vr.7, 0) ~~> (#vk.5, 0) ) )
                        qed
                      qed
                    qed
                  qed
                next
                  case coerce
                  step( solve( !KD( (~k⊕~k1⊕h((~k⊕~r1⊕x⊕~r1.1))) ) ▶₀ #vk.3 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.5, 0) ~~> (#vk.3, 0) ) )
                    qed
                  qed
                qed
              next
                case c_xor_case_2
                by step( solve( !KU( ~k1 ) @ #vk.6 ) )
              next
                case c_xor_case_3
                step( solve( !KU( (~k⊕h((~k⊕~r1⊕x⊕~r1.1))) ) @ #vk.5 ) )
                  case c_xor
                  by step( solve( !KU( ~k ) @ #vk.8 ) )
                next
                  case coerce
                  step( solve( !KD( (~k⊕h((~k⊕~r1⊕x⊕~r1.1))) ) ▶₀ #vk.3 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.5, 0) ~~> (#vk.3, 0) ) )
                    qed
                  qed
                qed
              next
                case c_xor_case_4
                by step( solve( !KU( ~k ) @ #vk.6 ) )
              next
                case c_xor_case_5
                step( solve( !KU( (~k1⊕h((~k⊕~r1⊕x⊕~r1.1))) ) @ #vk.5 ) )
                  case c_xor
                  by step( solve( !KU( ~k1 ) @ #vk.8 ) )
                next
                  case coerce
                  step( solve( !KD( (~k1⊕h((~k⊕~r1⊕x⊕~r1.1))) ) ▶₀ #vk.3 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.5, 0) ~~> (#vk.3, 0) ) )
                    qed
                  qed
                qed
              next
                case c_xor_case_6
                step( solve( !KU( (x⊕h((~k⊕~r1⊕x⊕~r1.1))) ) @ #vk.5 ) )
                  case c_xor
                  step( solve( !KU( (~k⊕~k1) ) @ #vk.6 ) )
                    case c_xor
                    by step( solve( !KU( ~k1 ) @ #vk.8 ) )
                  next
                    case coerce
                    step( solve( !KD( (~k⊕~k1) ) ▶₀ #vk.4 ) )
                      case acceptreader
                      by step( solve( (#vl.1, 0) ~~> (#vk.4, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.1, 0) ~~> (#vk.4, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.5, 0) ~~> (#vk.4, 0) ) )
                      qed
                    qed
                  qed
                next
                  case coerce
                  step( solve( !KD( (x⊕h((~k⊕~r1⊕x⊕~r1.1))) ) ▶₀ #vk.3 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.5, 0) ~~> (#vk.3, 0) ) )
                    qed
                  qed
                qed
              next
                case c_xor_case_7
                step( solve( !KU( h((~k⊕~r1⊕x⊕~r1.1)) ) @ #vk.5 ) )
                  case c_h
                  step( solve( !KU( (~k⊕~k1⊕x) ) @ #vk.6 ) )
                    case c_xor_case_1
                    by step( solve( !KU( ~k1 ) @ #vk.9 ) )
                  next
                    case c_xor_case_2
                    by step( solve( !KU( ~k ) @ #vk.9 ) )
                  next
                    case c_xor_case_3
                    step( solve( !KU( (~k⊕~r1⊕x⊕~r1.1) ) @ #vk.7 ) )
                      case c_xor_case_1
                      step( solve( !KU( (~k⊕~k1) ) @ #vk.8 ) )
                        case c_xor
                        by step( solve( !KU( ~k1 ) @ #vk.10 ) )
                      next
                        case coerce
                        step( solve( !KD( (~k⊕~k1) ) ▶₀ #vk.6 ) )
                          case acceptreader
                          by step( solve( (#vl.1, 0) ~~> (#vk.6, 0) ) )
                        next
                          case initiatereader
                          by step( contradiction /* impossible chain */ )
                        next
                          case tag1
                          step( solve( (#vl.1, 0) ~~> (#vk.6, 0) ) )
                            case d_0_fst
                            by step( contradiction /* impossible chain */ )
                          next
                            case d_0_snd
                            by step( solve( (#vr.5, 0) ~~> (#vk.6, 0) ) )
                          qed
                        qed
                      qed
                    next
                      case c_xor_case_2
                      by step( contradiction /* cyclic */ )
                    next
                      case c_xor_case_3
                      step( solve( !KU( (~k⊕~k1) ) @ #vk.8 ) )
                        case c_xor
                        by step( solve( !KU( ~k1 ) @ #vk.11 ) )
                      next
                        case coerce
                        step( solve( !KD( (~k⊕~k1) ) ▶₀ #vk.6 ) )
                          case acceptreader
                          by step( solve( (#vl.1, 0) ~~> (#vk.6, 0) ) )
                        next
                          case initiatereader
                          by step( contradiction /* impossible chain */ )
                        next
                          case tag1
                          step( solve( (#vl.1, 0) ~~> (#vk.6, 0) ) )
                            case d_0_fst
                            by step( contradiction /* impossible chain */ )
                          next
                            case d_0_snd
                            by step( solve( (#vr.5, 0) ~~> (#vk.6, 0) ) )
                          qed
                        qed
                      qed
                    next
                      case c_xor_case_4
                      by step( solve( !KU( ~k ) @ #vk.10 ) )
                    next
                      case c_xor_case_5
                      step( solve( !KU( (~k⊕~k1) ) @ #vk.8 ) )
                        case c_xor
                        by step( solve( !KU( ~k1 ) @ #vk.11 ) )
                      next
                        case coerce
                        step( solve( !KD( (~k⊕~k1) ) ▶₀ #vk.6 ) )
                          case acceptreader
                          by step( solve( (#vl.1, 0) ~~> (#vk.6, 0) ) )
                        next
                          case initiatereader
                          by step( contradiction /* impossible chain */ )
                        next
                          case tag1
                          step( solve( (#vl.1, 0) ~~> (#vk.6, 0) ) )
                            case d_0_fst
                            by step( contradiction /* impossible chain */ )
                          next
                            case d_0_snd
                            by step( solve( (#vr.5, 0) ~~> (#vk.6, 0) ) )
                          qed
                        qed
                      qed
                    next
                      case c_xor_case_6
                      by step( contradiction /* cyclic */ )
                    next
                      case c_xor_case_7
                      by step( contradiction /* cyclic */ )
                    next
                      case coerce
                      step( solve( !KD( (~k⊕~r1⊕x⊕~r1.1) ) ▶₀ #vk.5 ) )
                        case acceptreader
                        by step( solve( (#vl.1, 0) ~~> (#vk.5, 0) ) )
                      next
                        case initiatereader
                        by step( contradiction /* impossible chain */ )
                      next
                        case tag1
                        step( solve( (#vl.1, 0) ~~> (#vk.5, 0) ) )
                          case d_0_fst
                          by step( contradiction /* impossible chain */ )
                        next
                          case d_0_snd
                          by step( solve( (#vr.5, 0) ~~> (#vk.5, 0) ) )
                        qed
                      qed
                    qed
                  next
                    case coerce
                    step( solve( !KD( (~k⊕~k1⊕x) ) ▶₀ #vk.4 ) )
                      case acceptreader
                      by step( solve( (#vl.1, 0) ~~> (#vk.4, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.1, 0) ~~> (#vk.4, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.5, 0) ~~> (#vk.4, 0) ) )
                      qed
                    qed
                  qed
                next
                  case tag1_case_1
                  by step( contradiction /* cyclic */ )
                next
                  case tag1_case_2
                  step( solve( !KU( (~k⊕~k1⊕x) ) @ #vk.6 ) )
                    case c_xor_case_1
                    by step( solve( !KU( ~k1 ) @ #vk.9 ) )
                  next
                    case c_xor_case_2
                    by step( solve( !KU( ~k ) @ #vk.9 ) )
                  next
                    case c_xor_case_3
                    step( solve( !KU( (~k⊕~k1) ) @ #vk.8 ) )
                      case c_xor
                      by step( solve( !KU( ~k1 ) @ #vk.9 ) )
                    next
                      case coerce
                      step( solve( !KD( (~k⊕~k1) ) ▶₀ #vk.5 ) )
                        case acceptreader
                        by step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                      next
                        case initiatereader
                        by step( contradiction /* impossible chain */ )
                      next
                        case tag1
                        step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                          case d_0_fst
                          by step( contradiction /* impossible chain */ )
                        next
                          case d_0_snd
                          by step( solve( (#vr.7, 0) ~~> (#vk.5, 0) ) )
                        qed
                      qed
                    qed
                  next
                    case coerce
                    step( solve( !KD( (~k⊕~k1⊕x) ) ▶₀ #vk.4 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.7, 0) ~~> (#vk.4, 0) ) )
                      qed
                    qed
                  qed
                qed
              next
                case coerce
                step( solve( !KD( (~k⊕~k1⊕x⊕h((~k⊕~r1⊕x⊕~r1.1))) ) ▶₀ #vk.2 ) )
                  case acceptreader
                  by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                next
                  case initiatereader
                  by step( contradiction /* impossible chain */ )
                next
                  case tag1
                  step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                    case d_0_fst
                    by step( contradiction /* impossible chain */ )
                  next
                    case d_0_snd
                    by step( solve( (#vr.5, 0) ~~> (#vk.2, 0) ) )
                  qed
                qed
              qed
            next
              case coerce
              step( solve( !KD( (x⊕~r1.1) ) ▶₀ #vk.1 ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.5, 0) ~~> (#vk.1, 0) ) )
                qed
              qed
            qed
          next
            case split_case_7
            step( solve( !KU( (~k⊕~k1⊕r0⊕~r1.1⊕h((~k⊕~r1⊕r0))) ) @ #vk.2 ) )
              case c_xor_case_01
              by step( contradiction /* cyclic */ )
            next
              case c_xor_case_02
              step( solve( !KU( (~k⊕~k1⊕~r1.1⊕h((~k⊕~r1⊕r0))) ) @ #vk.3 ) )
                case c_xor_case_1
                by step( contradiction /* cyclic */ )
              next
                case c_xor_case_2
                by step( solve( !KU( ~k1 ) @ #vk.5 ) )
              next
                case c_xor_case_3
                step( solve( !KU( (~k⊕h((~k⊕~r1⊕r0))) ) @ #vk.4 ) )
                  case c_xor
                  by step( solve( !KU( ~k ) @ #vk.7 ) )
                next
                  case coerce
                  step( solve( !KD( (~k⊕h((~k⊕~r1⊕r0))) ) ▶₀ #vk.3 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.5, 0) ~~> (#vk.3, 0) ) )
                    qed
                  qed
                qed
              next
                case c_xor_case_4
                by step( solve( !KU( ~k ) @ #vk.5 ) )
              next
                case c_xor_case_5
                step( solve( !KU( (~k1⊕h((~k⊕~r1⊕r0))) ) @ #vk.4 ) )
                  case c_xor
                  by step( solve( !KU( ~k1 ) @ #vk.7 ) )
                next
                  case coerce
                  step( solve( !KD( (~k1⊕h((~k⊕~r1⊕r0))) ) ▶₀ #vk.3 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.5, 0) ~~> (#vk.3, 0) ) )
                    qed
                  qed
                qed
              next
                case c_xor_case_6
                step( solve( !KU( (~r1.1⊕h((~k⊕~r1⊕r0))) ) @ #vk.4 ) )
                  case c_xor
                  by step( contradiction /* cyclic */ )
                next
                  case coerce
                  step( solve( !KD( (~r1.1⊕h((~k⊕~r1⊕r0))) ) ▶₀ #vk.3 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.5, 0) ~~> (#vk.3, 0) ) )
                    qed
                  qed
                qed
              next
                case c_xor_case_7
                step( solve( !KU( (~k⊕~k1⊕~r1.1) ) @ #vk.5 ) )
                  case c_xor_case_1
                  by step( solve( !KU( ~k1 ) @ #vk.7 ) )
                next
                  case c_xor_case_2
                  by step( solve( !KU( ~k ) @ #vk.7 ) )
                next
                  case c_xor_case_3
                  by step( contradiction /* cyclic */ )
                next
                  case coerce
                  step( solve( !KD( (~k⊕~k1⊕~r1.1) ) ▶₀ #vk.3 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.5, 0) ~~> (#vk.3, 0) ) )
                    qed
                  qed
                qed
              next
                case coerce
                step( solve( !KD( (~k⊕~k1⊕~r1.1⊕h((~k⊕~r1⊕r0))) ) ▶₀ #vk.2 ) )
                  case acceptreader
                  by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                next
                  case initiatereader
                  by step( contradiction /* impossible chain */ )
                next
                  case tag1
                  step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                    case d_0_fst
                    by step( contradiction /* impossible chain */ )
                  next
                    case d_0_snd
                    by step( solve( (#vr.5, 0) ~~> (#vk.2, 0) ) )
                  qed
                qed
              qed
            next
              case c_xor_case_03
              step( solve( !KU( (~k⊕~k1⊕h((~k⊕~r1⊕r0))) ) @ #vk.3 ) )
                case c_xor_case_1
                by step( solve( !KU( ~k1 ) @ #vk.6 ) )
              next
                case c_xor_case_2
                by step( solve( !KU( ~k ) @ #vk.6 ) )
              next
                case c_xor_case_3
                step( solve( !KU( (r0⊕~r1.1) ) @ #vk.4 ) )
                  case c_xor
                  by step( contradiction /* cyclic */ )
                next
                  case coerce
                  step( solve( !KD( (r0⊕~r1.1) ) ▶₀ #vk.3 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.5, 0) ~~> (#vk.3, 0) ) )
                    qed
                  qed
                qed
              next
                case coerce
                step( solve( !KD( (~k⊕~k1⊕h((~k⊕~r1⊕r0))) ) ▶₀ #vk.2 ) )
                  case acceptreader
                  by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                next
                  case initiatereader
                  by step( contradiction /* impossible chain */ )
                next
                  case tag1
                  step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                    case d_0_fst
                    by step( contradiction /* impossible chain */ )
                  next
                    case d_0_snd
                    by step( solve( (#vr.5, 0) ~~> (#vk.2, 0) ) )
                  qed
                qed
              qed
            next
              case c_xor_case_04
              by step( solve( !KU( ~k1 ) @ #vk.4 ) )
            next
              case c_xor_case_05
              step( solve( !KU( (~k⊕r0⊕h((~k⊕~r1⊕r0))) ) @ #vk.3 ) )
                case c_xor_case_1
                step( solve( !KU( (~k1⊕~r1.1) ) @ #vk.4 ) )
                  case c_xor
                  by step( contradiction /* cyclic */ )
                next
                  case coerce
                  step( solve( !KD( (~k1⊕~r1.1) ) ▶₀ #vk.3 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.5, 0) ~~> (#vk.3, 0) ) )
                    qed
                  qed
                qed
              next
                case c_xor_case_2
                by step( solve( !KU( ~k ) @ #vk.6 ) )
              next
                case c_xor_case_3
                step( solve( !KU( (~k1⊕~r1.1) ) @ #vk.4 ) )
                  case c_xor
                  by step( contradiction /* cyclic */ )
                next
                  case coerce
                  step( solve( !KD( (~k1⊕~r1.1) ) ▶₀ #vk.3 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.5, 0) ~~> (#vk.3, 0) ) )
                    qed
                  qed
                qed
              next
                case coerce
                step( solve( !KD( (~k⊕r0⊕h((~k⊕~r1⊕r0))) ) ▶₀ #vk.2 ) )
                  case acceptreader
                  by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                next
                  case initiatereader
                  by step( contradiction /* impossible chain */ )
                next
                  case tag1
                  step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                    case d_0_fst
                    by step( contradiction /* impossible chain */ )
                  next
                    case d_0_snd
                    by step( solve( (#vr.5, 0) ~~> (#vk.2, 0) ) )
                  qed
                qed
              qed
            next
              case c_xor_case_06
              step( solve( !KU( (~k⊕~r1.1⊕h((~k⊕~r1⊕r0))) ) @ #vk.3 ) )
                case c_xor_case_1
                by step( contradiction /* cyclic */ )
              next
                case c_xor_case_2
                by step( solve( !KU( ~k ) @ #vk.6 ) )
              next
                case c_xor_case_3
                step( solve( !KU( (~k1⊕r0) ) @ #vk.4 ) )
                  case c_xor
                  by step( solve( !KU( ~k1 ) @ #vk.7 ) )
                next
                  case coerce
                  step( solve( !KD( (~k1⊕r0) ) ▶₀ #vk.3 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.5, 0) ~~> (#vk.3, 0) ) )
                    qed
                  qed
                qed
              next
                case coerce
                step( solve( !KD( (~k⊕~r1.1⊕h((~k⊕~r1⊕r0))) ) ▶₀ #vk.2 ) )
                  case acceptreader
                  by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                next
                  case initiatereader
                  by step( contradiction /* impossible chain */ )
                next
                  case tag1
                  step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                    case d_0_fst
                    by step( contradiction /* impossible chain */ )
                  next
                    case d_0_snd
                    by step( solve( (#vr.5, 0) ~~> (#vk.2, 0) ) )
                  qed
                qed
              qed
            next
              case c_xor_case_07
              step( solve( !KU( (~k⊕h((~k⊕~r1⊕r0))) ) @ #vk.3 ) )
                case c_xor
                by step( solve( !KU( ~k ) @ #vk.6 ) )
              next
                case coerce
                step( solve( !KD( (~k⊕h((~k⊕~r1⊕r0))) ) ▶₀ #vk.2 ) )
                  case acceptreader
                  by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                next
                  case initiatereader
                  by step( contradiction /* impossible chain */ )
                next
                  case tag1
                  step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                    case d_0_fst
                    by step( contradiction /* impossible chain */ )
                  next
                    case d_0_snd
                    by step( solve( (#vr.5, 0) ~~> (#vk.2, 0) ) )
                  qed
                qed
              qed
            next
              case c_xor_case_08
              by step( solve( !KU( ~k ) @ #vk.4 ) )
            next
              case c_xor_case_09
              step( solve( !KU( (~k1⊕r0⊕h((~k⊕~r1⊕r0))) ) @ #vk.3 ) )
                case c_xor_case_1
                step( solve( !KU( (~k⊕~r1.1) ) @ #vk.4 ) )
                  case c_xor
                  by step( contradiction /* cyclic */ )
                next
                  case coerce
                  step( solve( !KD( (~k⊕~r1.1) ) ▶₀ #vk.3 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.5, 0) ~~> (#vk.3, 0) ) )
                    qed
                  qed
                qed
              next
                case c_xor_case_2
                by step( solve( !KU( ~k1 ) @ #vk.6 ) )
              next
                case c_xor_case_3
                step( solve( !KU( (~k⊕~r1.1) ) @ #vk.4 ) )
                  case c_xor
                  by step( contradiction /* cyclic */ )
                next
                  case coerce
                  step( solve( !KD( (~k⊕~r1.1) ) ▶₀ #vk.3 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.5, 0) ~~> (#vk.3, 0) ) )
                    qed
                  qed
                qed
              next
                case coerce
                step( solve( !KD( (~k1⊕r0⊕h((~k⊕~r1⊕r0))) ) ▶₀ #vk.2 ) )
                  case acceptreader
                  by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                next
                  case initiatereader
                  by step( contradiction /* impossible chain */ )
                next
                  case tag1
                  step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                    case d_0_fst
                    by step( contradiction /* impossible chain */ )
                  next
                    case d_0_snd
                    by step( solve( (#vr.5, 0) ~~> (#vk.2, 0) ) )
                  qed
                qed
              qed
            next
              case c_xor_case_10
              step( solve( !KU( (~k1⊕~r1.1⊕h((~k⊕~r1⊕r0))) ) @ #vk.3 ) )
                case c_xor_case_1
                by step( contradiction /* cyclic */ )
              next
                case c_xor_case_2
                by step( solve( !KU( ~k1 ) @ #vk.6 ) )
              next
                case c_xor_case_3
                step( solve( !KU( (~k⊕r0) ) @ #vk.4 ) )
                  case c_xor
                  by step( solve( !KU( ~k ) @ #vk.7 ) )
                next
                  case coerce
                  step( solve( !KD( (~k⊕r0) ) ▶₀ #vk.3 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.5, 0) ~~> (#vk.3, 0) ) )
                    qed
                  qed
                qed
              next
                case coerce
                step( solve( !KD( (~k1⊕~r1.1⊕h((~k⊕~r1⊕r0))) ) ▶₀ #vk.2 ) )
                  case acceptreader
                  by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                next
                  case initiatereader
                  by step( contradiction /* impossible chain */ )
                next
                  case tag1
                  step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                    case d_0_fst
                    by step( contradiction /* impossible chain */ )
                  next
                    case d_0_snd
                    by step( solve( (#vr.5, 0) ~~> (#vk.2, 0) ) )
                  qed
                qed
              qed
            next
              case c_xor_case_11
              step( solve( !KU( (~k1⊕h((~k⊕~r1⊕r0))) ) @ #vk.3 ) )
                case c_xor
                by step( solve( !KU( ~k1 ) @ #vk.6 ) )
              next
                case coerce
                step( solve( !KD( (~k1⊕h((~k⊕~r1⊕r0))) ) ▶₀ #vk.2 ) )
                  case acceptreader
                  by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                next
                  case initiatereader
                  by step( contradiction /* impossible chain */ )
                next
                  case tag1
                  step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                    case d_0_fst
                    by step( contradiction /* impossible chain */ )
                  next
                    case d_0_snd
                    by step( solve( (#vr.5, 0) ~~> (#vk.2, 0) ) )
                  qed
                qed
              qed
            next
              case c_xor_case_12
              step( solve( !KU( (r0⊕~r1.1⊕h((~k⊕~r1⊕r0))) ) @ #vk.3 ) )
                case c_xor_case_1
                by step( contradiction /* cyclic */ )
              next
                case c_xor_case_2
                step( solve( !KU( (~k⊕~k1) ) @ #vk.4 ) )
                  case c_xor
                  by step( solve( !KU( ~k1 ) @ #vk.6 ) )
                next
                  case coerce
                  step( solve( !KD( (~k⊕~k1) ) ▶₀ #vk.3 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.5, 0) ~~> (#vk.3, 0) ) )
                    qed
                  qed
                qed
              next
                case c_xor_case_3
                step( solve( !KU( (~k⊕~k1) ) @ #vk.4 ) )
                  case c_xor
                  by step( solve( !KU( ~k1 ) @ #vk.7 ) )
                next
                  case coerce
                  step( solve( !KD( (~k⊕~k1) ) ▶₀ #vk.3 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.5, 0) ~~> (#vk.3, 0) ) )
                    qed
                  qed
                qed
              next
                case coerce
                step( solve( !KD( (r0⊕~r1.1⊕h((~k⊕~r1⊕r0))) ) ▶₀ #vk.2 ) )
                  case acceptreader
                  by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                next
                  case initiatereader
                  by step( contradiction /* impossible chain */ )
                next
                  case tag1
                  step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                    case d_0_fst
                    by step( contradiction /* impossible chain */ )
                  next
                    case d_0_snd
                    by step( solve( (#vr.5, 0) ~~> (#vk.2, 0) ) )
                  qed
                qed
              qed
            next
              case c_xor_case_13
              step( solve( !KU( (r0⊕h((~k⊕~r1⊕r0))) ) @ #vk.3 ) )
                case c_xor
                step( solve( !KU( (~k⊕~k1⊕~r1.1) ) @ #vk.4 ) )
                  case c_xor_case_1
                  by step( solve( !KU( ~k1 ) @ #vk.7 ) )
                next
                  case c_xor_case_2
                  by step( solve( !KU( ~k ) @ #vk.7 ) )
                next
                  case c_xor_case_3
                  by step( contradiction /* cyclic */ )
                next
                  case coerce
                  step( solve( !KD( (~k⊕~k1⊕~r1.1) ) ▶₀ #vk.3 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.5, 0) ~~> (#vk.3, 0) ) )
                    qed
                  qed
                qed
              next
                case coerce
                step( solve( !KD( (r0⊕h((~k⊕~r1⊕r0))) ) ▶₀ #vk.2 ) )
                  case acceptreader
                  by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                next
                  case initiatereader
                  by step( contradiction /* impossible chain */ )
                next
                  case tag1
                  step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                    case d_0_fst
                    by step( contradiction /* impossible chain */ )
                  next
                    case d_0_snd
                    by step( solve( (#vr.5, 0) ~~> (#vk.2, 0) ) )
                  qed
                qed
              qed
            next
              case c_xor_case_14
              step( solve( !KU( (~r1.1⊕h((~k⊕~r1⊕r0))) ) @ #vk.3 ) )
                case c_xor
                by step( contradiction /* cyclic */ )
              next
                case coerce
                step( solve( !KD( (~r1.1⊕h((~k⊕~r1⊕r0))) ) ▶₀ #vk.2 ) )
                  case acceptreader
                  by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                next
                  case initiatereader
                  by step( contradiction /* impossible chain */ )
                next
                  case tag1
                  step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                    case d_0_fst
                    by step( contradiction /* impossible chain */ )
                  next
                    case d_0_snd
                    by step( solve( (#vr.5, 0) ~~> (#vk.2, 0) ) )
                  qed
                qed
              qed
            next
              case c_xor_case_15
              step( solve( !KU( (~k⊕~k1⊕r0⊕~r1.1) ) @ #vk.4 ) )
                case c_xor_case_1
                step( solve( !KU( (~k⊕~k1⊕~r1.1) ) @ #vk.5 ) )
                  case c_xor_case_1
                  by step( solve( !KU( ~k1 ) @ #vk.7 ) )
                next
                  case c_xor_case_2
                  by step( solve( !KU( ~k ) @ #vk.7 ) )
                next
                  case c_xor_case_3
                  by step( contradiction /* cyclic */ )
                next
                  case coerce
                  step( solve( !KD( (~k⊕~k1⊕~r1.1) ) ▶₀ #vk.3 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.5, 0) ~~> (#vk.3, 0) ) )
                    qed
                  qed
                qed
              next
                case c_xor_case_2
                by step( solve( !KU( ~k1 ) @ #vk.6 ) )
              next
                case c_xor_case_3
                step( solve( !KU( (~k⊕~r1.1) ) @ #vk.5 ) )
                  case c_xor
                  by step( contradiction /* cyclic */ )
                next
                  case coerce
                  step( solve( !KD( (~k⊕~r1.1) ) ▶₀ #vk.3 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.5, 0) ~~> (#vk.3, 0) ) )
                    qed
                  qed
                qed
              next
                case c_xor_case_4
                by step( solve( !KU( ~k ) @ #vk.6 ) )
              next
                case c_xor_case_5
                step( solve( !KU( (~k1⊕~r1.1) ) @ #vk.5 ) )
                  case c_xor
                  by step( contradiction /* cyclic */ )
                next
                  case coerce
                  step( solve( !KD( (~k1⊕~r1.1) ) ▶₀ #vk.3 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.5, 0) ~~> (#vk.3, 0) ) )
                    qed
                  qed
                qed
              next
                case c_xor_case_6
                step( solve( !KU( (r0⊕~r1.1) ) @ #vk.5 ) )
                  case c_xor
                  by step( contradiction /* cyclic */ )
                next
                  case coerce
                  step( solve( !KD( (r0⊕~r1.1) ) ▶₀ #vk.3 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.5, 0) ~~> (#vk.3, 0) ) )
                    qed
                  qed
                qed
              next
                case c_xor_case_7
                by step( contradiction /* cyclic */ )
              next
                case coerce
                step( solve( !KD( (~k⊕~k1⊕r0⊕~r1.1) ) ▶₀ #vk.2 ) )
                  case acceptreader
                  by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                next
                  case initiatereader
                  by step( contradiction /* impossible chain */ )
                next
                  case tag1
                  step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                    case d_0_fst
                    by step( contradiction /* impossible chain */ )
                  next
                    case d_0_snd
                    by step( solve( (#vr.5, 0) ~~> (#vk.2, 0) ) )
                  qed
                qed
              qed
            next
              case coerce
              step( solve( !KD( (~k⊕~k1⊕r0⊕~r1.1⊕h((~k⊕~r1⊕r0))) ) ▶₀ #vk.1 ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.5, 0) ~~> (#vk.1, 0) ) )
                qed
              qed
            qed
          qed
        next
          case split_case_4
          step( solve( !KU( (x⊕~x.1) ) @ #vk.2 ) )
            case c_xor
            step( solve( !KU( ~x ) @ #vk.3 ) )
              case fresh
              step( solve( !KU( zero ) @ #vk.3 ) )
                case c_zero
                by step( solve( splitEqs(2) ) )
              next
                case coerce
                step( solve( !KD( zero ) ▶₀ #vk.3 ) )
                  case acceptreader
                  by step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                next
                  case initiatereader
                  by step( contradiction /* impossible chain */ )
                next
                  case tag1
                  step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                    case d_0_fst
                    by step( contradiction /* impossible chain */ )
                  next
                    case d_0_snd
                    by step( solve( (#vr.5, 0) ~~> (#vk.3, 0) ) )
                  qed
                qed
              qed
            next
              case tag1_case_1
              step( solve( !KU( zero ) @ #vk.3 ) )
                case c_zero
                by step( solve( splitEqs(2) ) )
              next
                case coerce
                step( solve( !KD( zero ) ▶₀ #vk.3 ) )
                  case acceptreader
                  by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                next
                  case initiatereader
                  by step( contradiction /* impossible chain */ )
                next
                  case tag1
                  step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                    case d_0_fst
                    by step( contradiction /* impossible chain */ )
                  next
                    case d_0_snd
                    by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                  qed
                qed
              qed
            next
              case tag1_case_2
              step( solve( !KU( zero ) @ #vk.3 ) )
                case c_zero
                by step( solve( splitEqs(2) ) )
              next
                case coerce
                step( solve( !KD( zero ) ▶₀ #vk.3 ) )
                  case acceptreader
                  by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                next
                  case initiatereader
                  by step( contradiction /* impossible chain */ )
                next
                  case tag1
                  step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                    case d_0_fst
                    by step( contradiction /* impossible chain */ )
                  next
                    case d_0_snd
                    by step( solve( (#vr.7, 0) ~~> (#vk.3, 0) ) )
                  qed
                qed
              qed
            qed
          next
            case coerce
            step( solve( !KD( (x⊕~x.1) ) ▶₀ #vk.1 ) )
              case acceptreader
              by step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
            next
              case initiatereader
              by step( contradiction /* impossible chain */ )
            next
              case tag1
              step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                case d_0_fst
                by step( contradiction /* impossible chain */ )
              next
                case d_0_snd
                by step( solve( (#vr.5, 0) ~~> (#vk.1, 0) ) )
              qed
            qed
          qed
        next
          case split_case_5
          step( solve( !KU( (~k⊕~r1) ) @ #vk.1 ) )
            case c_xor
            by step( contradiction /* cyclic */ )
          next
            case coerce
            step( solve( !KD( (~k⊕~r1) ) ▶₀ #vk.1 ) )
              case acceptreader
              by step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
            next
              case initiatereader
              by step( contradiction /* impossible chain */ )
            next
              case tag1
              step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                case d_0_fst
                by step( contradiction /* impossible chain */ )
              next
                case d_0_snd
                by step( solve( (#vr.5, 0) ~~> (#vk.1, 0) ) )
              qed
            qed
          qed
        next
          case split_case_6
          step( solve( !KU( (~r1⊕x) ) @ #vk.1 ) )
            case c_xor
            by step( contradiction /* cyclic */ )
          next
            case coerce
            step( solve( !KD( (~r1⊕x) ) ▶₀ #vk.1 ) )
              case acceptreader
              by step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
            next
              case initiatereader
              by step( contradiction /* impossible chain */ )
            next
              case tag1
              step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                case d_0_fst
                by step( contradiction /* impossible chain */ )
              next
                case d_0_snd
                by step( solve( (#vr.5, 0) ~~> (#vk.1, 0) ) )
              qed
            qed
          qed
        next
          case split_case_7
          step( solve( !KU( (~k⊕~r1⊕z) ) @ #vk.1 ) )
            case c_xor_case_1
            by step( contradiction /* cyclic */ )
          next
            case c_xor_case_2
            by step( solve( !KU( ~k ) @ #vk.4 ) )
          next
            case c_xor_case_3
            step( solve( !KU( (~k⊕~r1) ) @ #vk.4 ) )
              case c_xor
              by step( contradiction /* cyclic */ )
            next
              case coerce
              step( solve( !KD( (~k⊕~r1) ) ▶₀ #vk.2 ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.5, 0) ~~> (#vk.2, 0) ) )
                qed
              qed
            qed
          next
            case coerce
            step( solve( !KD( (~k⊕~r1⊕z) ) ▶₀ #vk.1 ) )
              case acceptreader
              by step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
            next
              case initiatereader
              by step( contradiction /* impossible chain */ )
            next
              case tag1
              step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                case d_0_fst
                by step( contradiction /* impossible chain */ )
              next
                case d_0_snd
                by step( solve( (#vr.5, 0) ~~> (#vk.1, 0) ) )
              qed
            qed
          qed
        next
          case split_case_8
          step( solve( !KU( (~k⊕x) ) @ #vk.1 ) )
            case c_xor
            by step( solve( !KU( ~k ) @ #vk.4 ) )
          next
            case coerce
            step( solve( !KD( (~k⊕x) ) ▶₀ #vk.1 ) )
              case acceptreader
              by step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
            next
              case initiatereader
              by step( contradiction /* impossible chain */ )
            next
              case tag1
              step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                case d_0_fst
                by step( contradiction /* impossible chain */ )
              next
                case d_0_snd
                by step( solve( (#vr.5, 0) ~~> (#vk.1, 0) ) )
              qed
            qed
          qed
        qed
      next
        case tag1_case_2
        by step( solve( splitEqs(0) ) )
      next
        case tag1_case_3
        step( solve( splitEqs(0) ) )
          case split_case_1
          by step( solve( !KU( ~k ) @ #vk.1 ) )
        next
          case split_case_2
          by step( contradiction /* cyclic */ )
        next
          case split_case_3
          step( solve( splitEqs(2) ) )
            case split_case_1
            step( solve( !KU( h((~k⊕~r0⊕~r1)) ) @ #vk.2 ) )
              case c_h
              step( solve( !KU( (~k⊕~r0⊕~r1) ) @ #vk.3 ) )
                case c_xor_case_1
                by step( contradiction /* cyclic */ )
              next
                case c_xor_case_2
                by step( solve( !KU( ~k ) @ #vk.5 ) )
              next
                case c_xor_case_3
                by step( contradiction /* cyclic */ )
              next
                case coerce
                step( solve( !KD( (~k⊕~r0⊕~r1) ) ▶₀ #vk.2 ) )
                  case acceptreader
                  by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                next
                  case initiatereader
                  by step( contradiction /* impossible chain */ )
                next
                  case tag1
                  step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                    case d_0_fst
                    by step( contradiction /* impossible chain */ )
                  next
                    case d_0_snd
                    by step( solve( (#vr.5, 0) ~~> (#vk.2, 0) ) )
                  qed
                qed
              qed
            next
              case tag1_case_1
              step( solve( !KU( ~r0 ) @ #vk.2 ) )
                case tag1
                step( solve( splitEqs(5) ) )
                  case split
                  step( solve( !KU( (~k⊕~k1⊕~r0⊕~r1⊕~r1.1) ) @ #vk.3 ) )
                    case c_xor_case_01
                    by step( contradiction /* cyclic */ )
                  next
                    case c_xor_case_02
                    by step( contradiction /* cyclic */ )
                  next
                    case c_xor_case_03
                    step( solve( !KU( (~k⊕~k1⊕~r1.1) ) @ #vk.4 ) )
                      case c_xor_case_1
                      by step( solve( !KU( ~k1 ) @ #vk.7 ) )
                    next
                      case c_xor_case_2
                      by step( solve( !KU( ~k ) @ #vk.7 ) )
                    next
                      case c_xor_case_3
                      by step( contradiction /* cyclic */ )
                    next
                      case coerce
                      step( solve( !KD( (~k⊕~k1⊕~r1.1) ) ▶₀ #vk.4 ) )
                        case acceptreader
                        by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                      next
                        case initiatereader
                        by step( contradiction /* impossible chain */ )
                      next
                        case tag1
                        step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                          case d_0_fst
                          by step( contradiction /* impossible chain */ )
                        next
                          case d_0_snd
                          by step( solve( (#vr.8, 0) ~~> (#vk.4, 0) ) )
                        qed
                      qed
                    qed
                  next
                    case c_xor_case_04
                    by step( solve( !KU( ~k1 ) @ #vk.5 ) )
                  next
                    case c_xor_case_05
                    step( solve( !KU( (~k⊕~r0⊕~r1.1) ) @ #vk.4 ) )
                      case c_xor_case_1
                      by step( contradiction /* cyclic */ )
                    next
                      case c_xor_case_2
                      by step( solve( !KU( ~k ) @ #vk.7 ) )
                    next
                      case c_xor_case_3
                      by step( contradiction /* cyclic */ )
                    next
                      case coerce
                      step( solve( !KD( (~k⊕~r0⊕~r1.1) ) ▶₀ #vk.4 ) )
                        case acceptreader
                        by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                      next
                        case initiatereader
                        by step( contradiction /* impossible chain */ )
                      next
                        case tag1
                        step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                          case d_0_fst
                          by step( contradiction /* impossible chain */ )
                        next
                          case d_0_snd
                          by step( solve( (#vr.8, 0) ~~> (#vk.4, 0) ) )
                        qed
                      qed
                    qed
                  next
                    case c_xor_case_06
                    step( solve( !KU( (~k⊕~r1⊕~r1.1) ) @ #vk.4 ) )
                      case c_xor_case_1
                      by step( contradiction /* cyclic */ )
                    next
                      case c_xor_case_2
                      by step( solve( !KU( ~k ) @ #vk.7 ) )
                    next
                      case c_xor_case_3
                      by step( contradiction /* cyclic */ )
                    next
                      case coerce
                      step( solve( !KD( (~k⊕~r1⊕~r1.1) ) ▶₀ #vk.4 ) )
                        case acceptreader
                        by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                      next
                        case initiatereader
                        by step( contradiction /* impossible chain */ )
                      next
                        case tag1
                        step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                          case d_0_fst
                          by step( contradiction /* impossible chain */ )
                        next
                          case d_0_snd
                          by step( solve( (#vr.8, 0) ~~> (#vk.4, 0) ) )
                        qed
                      qed
                    qed
                  next
                    case c_xor_case_07
                    step( solve( !KU( (~k⊕~r1.1) ) @ #vk.4 ) )
                      case c_xor
                      by step( contradiction /* cyclic */ )
                    next
                      case coerce
                      step( solve( !KD( (~k⊕~r1.1) ) ▶₀ #vk.4 ) )
                        case acceptreader
                        by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                      next
                        case initiatereader
                        by step( contradiction /* impossible chain */ )
                      next
                        case tag1
                        step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                          case d_0_fst
                          by step( contradiction /* impossible chain */ )
                        next
                          case d_0_snd
                          by step( solve( (#vr.8, 0) ~~> (#vk.4, 0) ) )
                        qed
                      qed
                    qed
                  next
                    case c_xor_case_08
                    by step( solve( !KU( ~k ) @ #vk.5 ) )
                  next
                    case c_xor_case_09
                    step( solve( !KU( (~k1⊕~r0⊕~r1.1) ) @ #vk.4 ) )
                      case c_xor_case_1
                      by step( contradiction /* cyclic */ )
                    next
                      case c_xor_case_2
                      by step( solve( !KU( ~k1 ) @ #vk.7 ) )
                    next
                      case c_xor_case_3
                      by step( contradiction /* cyclic */ )
                    next
                      case coerce
                      step( solve( !KD( (~k1⊕~r0⊕~r1.1) ) ▶₀ #vk.4 ) )
                        case acceptreader
                        by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                      next
                        case initiatereader
                        by step( contradiction /* impossible chain */ )
                      next
                        case tag1
                        step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                          case d_0_fst
                          by step( contradiction /* impossible chain */ )
                        next
                          case d_0_snd
                          by step( solve( (#vr.8, 0) ~~> (#vk.4, 0) ) )
                        qed
                      qed
                    qed
                  next
                    case c_xor_case_10
                    step( solve( !KU( (~k1⊕~r1⊕~r1.1) ) @ #vk.4 ) )
                      case c_xor_case_1
                      by step( contradiction /* cyclic */ )
                    next
                      case c_xor_case_2
                      by step( solve( !KU( ~k1 ) @ #vk.7 ) )
                    next
                      case c_xor_case_3
                      by step( contradiction /* cyclic */ )
                    next
                      case coerce
                      step( solve( !KD( (~k1⊕~r1⊕~r1.1) ) ▶₀ #vk.4 ) )
                        case acceptreader
                        by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                      next
                        case initiatereader
                        by step( contradiction /* impossible chain */ )
                      next
                        case tag1
                        step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                          case d_0_fst
                          by step( contradiction /* impossible chain */ )
                        next
                          case d_0_snd
                          by step( solve( (#vr.8, 0) ~~> (#vk.4, 0) ) )
                        qed
                      qed
                    qed
                  next
                    case c_xor_case_11
                    step( solve( !KU( (~k1⊕~r1.1) ) @ #vk.4 ) )
                      case c_xor
                      by step( contradiction /* cyclic */ )
                    next
                      case coerce
                      step( solve( !KD( (~k1⊕~r1.1) ) ▶₀ #vk.4 ) )
                        case acceptreader
                        by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                      next
                        case initiatereader
                        by step( contradiction /* impossible chain */ )
                      next
                        case tag1
                        step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                          case d_0_fst
                          by step( contradiction /* impossible chain */ )
                        next
                          case d_0_snd
                          by step( solve( (#vr.8, 0) ~~> (#vk.4, 0) ) )
                        qed
                      qed
                    qed
                  next
                    case c_xor_case_12
                    step( solve( !KU( (~r0⊕~r1⊕~r1.1) ) @ #vk.4 ) )
                      case c_xor_case_1
                      by step( contradiction /* cyclic */ )
                    next
                      case c_xor_case_2
                      by step( contradiction /* cyclic */ )
                    next
                      case c_xor_case_3
                      by step( contradiction /* cyclic */ )
                    next
                      case coerce
                      step( solve( !KD( (~r0⊕~r1⊕~r1.1) ) ▶₀ #vk.4 ) )
                        case acceptreader
                        by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                      next
                        case initiatereader
                        by step( contradiction /* impossible chain */ )
                      next
                        case tag1
                        step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                          case d_0_fst
                          by step( contradiction /* impossible chain */ )
                        next
                          case d_0_snd
                          by step( solve( (#vr.8, 0) ~~> (#vk.4, 0) ) )
                        qed
                      qed
                    qed
                  next
                    case c_xor_case_13
                    step( solve( !KU( (~r0⊕~r1.1) ) @ #vk.4 ) )
                      case c_xor
                      by step( contradiction /* cyclic */ )
                    next
                      case coerce
                      step( solve( !KD( (~r0⊕~r1.1) ) ▶₀ #vk.4 ) )
                        case acceptreader
                        by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                      next
                        case initiatereader
                        by step( contradiction /* impossible chain */ )
                      next
                        case tag1
                        step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                          case d_0_fst
                          by step( contradiction /* impossible chain */ )
                        next
                          case d_0_snd
                          by step( solve( (#vr.8, 0) ~~> (#vk.4, 0) ) )
                        qed
                      qed
                    qed
                  next
                    case c_xor_case_14
                    step( solve( !KU( (~r1⊕~r1.1) ) @ #vk.4 ) )
                      case c_xor
                      by step( contradiction /* cyclic */ )
                    next
                      case coerce
                      step( solve( !KD( (~r1⊕~r1.1) ) ▶₀ #vk.4 ) )
                        case acceptreader
                        by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                      next
                        case initiatereader
                        by step( contradiction /* impossible chain */ )
                      next
                        case tag1
                        step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                          case d_0_fst
                          by step( contradiction /* impossible chain */ )
                        next
                          case d_0_snd
                          by step( solve( (#vr.8, 0) ~~> (#vk.4, 0) ) )
                        qed
                      qed
                    qed
                  next
                    case c_xor_case_15
                    by step( contradiction /* cyclic */ )
                  next
                    case coerce
                    step( solve( !KD( (~k⊕~k1⊕~r0⊕~r1⊕~r1.1) ) ▶₀ #vk.3 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.8, 0) ~~> (#vk.3, 0) ) )
                      qed
                    qed
                  qed
                qed
              qed
            next
              case tag1_case_2
              by step( contradiction /* cyclic */ )
            qed
          next
            case split_case_2
            step( solve( !KU( (r0⊕~r1.1⊕h((~k⊕~r1⊕r0))) ) @ #vk.2 ) )
              case c_xor_case_1
              by step( contradiction /* cyclic */ )
            next
              case c_xor_case_2
              step( solve( !KU( (~r1.1⊕h((~k⊕~r1⊕r0))) ) @ #vk.3 ) )
                case c_xor
                by step( contradiction /* cyclic */ )
              next
                case coerce
                step( solve( !KD( (~r1.1⊕h((~k⊕~r1⊕r0))) ) ▶₀ #vk.2 ) )
                  case acceptreader
                  by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                next
                  case initiatereader
                  by step( contradiction /* impossible chain */ )
                next
                  case tag1
                  step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                    case d_0_fst
                    by step( contradiction /* impossible chain */ )
                  next
                    case d_0_snd
                    by step( solve( (#vr.5, 0) ~~> (#vk.2, 0) ) )
                  qed
                qed
              qed
            next
              case c_xor_case_3
              step( solve( !KU( (r0⊕~r1.1) ) @ #vk.4 ) )
                case c_xor
                by step( contradiction /* cyclic */ )
              next
                case coerce
                step( solve( !KD( (r0⊕~r1.1) ) ▶₀ #vk.2 ) )
                  case acceptreader
                  by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                next
                  case initiatereader
                  by step( contradiction /* impossible chain */ )
                next
                  case tag1
                  step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                    case d_0_fst
                    by step( contradiction /* impossible chain */ )
                  next
                    case d_0_snd
                    by step( solve( (#vr.5, 0) ~~> (#vk.2, 0) ) )
                  qed
                qed
              qed
            next
              case coerce
              step( solve( !KD( (r0⊕~r1.1⊕h((~k⊕~r1⊕r0))) ) ▶₀ #vk.1 ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.5, 0) ~~> (#vk.1, 0) ) )
                qed
              qed
            qed
          next
            case split_case_3
            step( solve( !KU( (x⊕~r1.1) ) @ #vk.1 ) )
              case c_xor
              step( solve( !KU( (x⊕h((~k⊕~r1⊕x⊕~r1.1))) ) @ #vk.2 ) )
                case c_xor
                step( solve( !KU( h((~k⊕~r1⊕x⊕~r1.1)) ) @ #vk.5 ) )
                  case c_h
                  step( solve( !KU( (~k⊕~r1⊕x⊕~r1.1) ) @ #vk.6 ) )
                    case c_xor_case_1
                    step( solve( !KU( (~k⊕~r1⊕~r1.1) ) @ #vk.7 ) )
                      case c_xor_case_1
                      by step( contradiction /* cyclic */ )
                    next
                      case c_xor_case_2
                      by step( solve( !KU( ~k ) @ #vk.9 ) )
                    next
                      case c_xor_case_3
                      by step( contradiction /* cyclic */ )
                    next
                      case coerce
                      step( solve( !KD( (~k⊕~r1⊕~r1.1) ) ▶₀ #vk.5 ) )
                        case acceptreader
                        by step( solve( (#vl.1, 0) ~~> (#vk.5, 0) ) )
                      next
                        case initiatereader
                        by step( contradiction /* impossible chain */ )
                      next
                        case tag1
                        step( solve( (#vl.1, 0) ~~> (#vk.5, 0) ) )
                          case d_0_fst
                          by step( contradiction /* impossible chain */ )
                        next
                          case d_0_snd
                          by step( solve( (#vr.5, 0) ~~> (#vk.5, 0) ) )
                        qed
                      qed
                    qed
                  next
                    case c_xor_case_2
                    by step( contradiction /* cyclic */ )
                  next
                    case c_xor_case_3
                    step( solve( !KU( (~k⊕~r1.1) ) @ #vk.7 ) )
                      case c_xor
                      by step( contradiction /* cyclic */ )
                    next
                      case coerce
                      step( solve( !KD( (~k⊕~r1.1) ) ▶₀ #vk.5 ) )
                        case acceptreader
                        by step( solve( (#vl.1, 0) ~~> (#vk.5, 0) ) )
                      next
                        case initiatereader
                        by step( contradiction /* impossible chain */ )
                      next
                        case tag1
                        step( solve( (#vl.1, 0) ~~> (#vk.5, 0) ) )
                          case d_0_fst
                          by step( contradiction /* impossible chain */ )
                        next
                          case d_0_snd
                          by step( solve( (#vr.5, 0) ~~> (#vk.5, 0) ) )
                        qed
                      qed
                    qed
                  next
                    case c_xor_case_4
                    by step( solve( !KU( ~k ) @ #vk.8 ) )
                  next
                    case c_xor_case_5
                    step( solve( !KU( (~r1⊕~r1.1) ) @ #vk.7 ) )
                      case c_xor
                      by step( contradiction /* cyclic */ )
                    next
                      case coerce
                      step( solve( !KD( (~r1⊕~r1.1) ) ▶₀ #vk.5 ) )
                        case acceptreader
                        by step( solve( (#vl.1, 0) ~~> (#vk.5, 0) ) )
                      next
                        case initiatereader
                        by step( contradiction /* impossible chain */ )
                      next
                        case tag1
                        step( solve( (#vl.1, 0) ~~> (#vk.5, 0) ) )
                          case d_0_fst
                          by step( contradiction /* impossible chain */ )
                        next
                          case d_0_snd
                          by step( solve( (#vr.5, 0) ~~> (#vk.5, 0) ) )
                        qed
                      qed
                    qed
                  next
                    case c_xor_case_6
                    by step( contradiction /* cyclic */ )
                  next
                    case c_xor_case_7
                    by step( contradiction /* cyclic */ )
                  next
                    case coerce
                    step( solve( !KD( (~k⊕~r1⊕x⊕~r1.1) ) ▶₀ #vk.4 ) )
                      case acceptreader
                      by step( solve( (#vl.1, 0) ~~> (#vk.4, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.1, 0) ~~> (#vk.4, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.5, 0) ~~> (#vk.4, 0) ) )
                      qed
                    qed
                  qed
                next
                  case tag1_case_1
                  step( solve( !KU( (x.1⊕x.2) ) @ #vk.6 ) )
                    case c_xor
                    step( solve( !KU( ~r1.1 ) @ #vk.5 ) )
                      case tag1
                      step( solve( splitEqs(5) ) )
                        case split_case_1
                        by step( solve( !KU( ~k1 ) @ #vk.6 ) )
                      next
                        case split_case_2
                        by step( solve( !KU( ~k ) @ #vk.8 ) )
                      next
                        case split_case_3
                        by step( solve( !KU( ~k ) @ #vk.8 ) )
                      next
                        case split_case_4
                        step( solve( !KU( (~k1⊕x) ) @ #vk.6 ) )
                          case c_xor
                          by step( solve( !KU( ~k1 ) @ #vk.9 ) )
                        next
                          case coerce
                          step( solve( !KD( (~k1⊕x) ) ▶₀ #vk.6 ) )
                            case acceptreader
                            by step( solve( (#vl.2, 0) ~~> (#vk.6, 0) ) )
                          next
                            case initiatereader
                            by step( contradiction /* impossible chain */ )
                          next
                            case tag1
                            step( solve( (#vl.2, 0) ~~> (#vk.6, 0) ) )
                              case d_0_fst
                              by step( contradiction /* impossible chain */ )
                            next
                              case d_0_snd
                              by step( solve( (#vr.8, 0) ~~> (#vk.6, 0) ) )
                            qed
                          qed
                        qed
                      next
                        case split_case_5
                        step( solve( !KU( (~k1⊕x⊕~r1.2) ) @ #vk.6 ) )
                          case c_xor_case_1
                          step( solve( !KU( (~k⊕~r1⊕~r1.1) ) @ #vk.7 ) )
                            case c_xor_case_1
                            by step( contradiction /* cyclic */ )
                          next
                            case c_xor_case_2
                            by step( solve( !KU( ~k ) @ #vk.11 ) )
                          next
                            case c_xor_case_3
                            by step( contradiction /* cyclic */ )
                          next
                            case coerce
                            step( solve( !KD( (~k⊕~r1⊕~r1.1) ) ▶₀ #vk.7 ) )
                              case acceptreader
                              by step( solve( (#vl.2, 0) ~~> (#vk.7, 0) ) )
                            next
                              case initiatereader
                              by step( contradiction /* impossible chain */ )
                            next
                              case tag1
                              step( solve( (#vl.2, 0) ~~> (#vk.7, 0) ) )
                                case d_0_fst
                                by step( contradiction /* impossible chain */ )
                              next
                                case d_0_snd
                                by step( solve( (#vr.8, 0) ~~> (#vk.7, 0) ) )
                              qed
                            qed
                          qed
                        next
                          case c_xor_case_2
                          by step( solve( !KU( ~k1 ) @ #vk.10 ) )
                        next
                          case c_xor_case_3
                          step( solve( !KU( (~k⊕~r1⊕~r1.1) ) @ #vk.7 ) )
                            case c_xor_case_1
                            by step( contradiction /* cyclic */ )
                          next
                            case c_xor_case_2
                            by step( solve( !KU( ~k ) @ #vk.12 ) )
                          next
                            case c_xor_case_3
                            by step( contradiction /* cyclic */ )
                          next
                            case coerce
                            step( solve( !KD( (~k⊕~r1⊕~r1.1) ) ▶₀ #vk.7 ) )
                              case acceptreader
                              by step( solve( (#vl.2, 0) ~~> (#vk.7, 0) ) )
                            next
                              case initiatereader
                              by step( contradiction /* impossible chain */ )
                            next
                              case tag1
                              step( solve( (#vl.2, 0) ~~> (#vk.7, 0) ) )
                                case d_0_fst
                                by step( contradiction /* impossible chain */ )
                              next
                                case d_0_snd
                                by step( solve( (#vr.8, 0) ~~> (#vk.7, 0) ) )
                              qed
                            qed
                          qed
                        next
                          case coerce
                          step( solve( !KD( (~k1⊕x⊕~r1.2) ) ▶₀ #vk.6 ) )
                            case acceptreader
                            by step( solve( (#vl.2, 0) ~~> (#vk.6, 0) ) )
                          next
                            case initiatereader
                            by step( contradiction /* impossible chain */ )
                          next
                            case tag1
                            step( solve( (#vl.2, 0) ~~> (#vk.6, 0) ) )
                              case d_0_fst
                              by step( contradiction /* impossible chain */ )
                            next
                              case d_0_snd
                              by step( solve( (#vr.8, 0) ~~> (#vk.6, 0) ) )
                            qed
                          qed
                        qed
                      next
                        case split_case_6
                        by step( solve( !KU( ~k ) @ #vk.8 ) )
                      next
                        case split_case_7
                        step( solve( !KU( (x⊕~r1.2) ) @ #vk.6 ) )
                          case c_xor
                          step( solve( !KU( (~k⊕~k1⊕~r1⊕~r1.1) ) @ #vk.7 ) )
                            case c_xor_case_1
                            by step( contradiction /* cyclic */ )
                          next
                            case c_xor_case_2
                            by step( solve( !KU( ~k1 ) @ #vk.11 ) )
                          next
                            case c_xor_case_3
                            step( solve( !KU( (~k⊕~r1.1) ) @ #vk.10 ) )
                              case c_xor
                              by step( contradiction /* cyclic */ )
                            next
                              case coerce
                              step( solve( !KD( (~k⊕~r1.1) ) ▶₀ #vk.8 ) )
                                case acceptreader
                                by step( solve( (#vl.2, 0) ~~> (#vk.8, 0) ) )
                              next
                                case initiatereader
                                by step( contradiction /* impossible chain */ )
                              next
                                case tag1
                                step( solve( (#vl.2, 0) ~~> (#vk.8, 0) ) )
                                  case d_0_fst
                                  by step( contradiction /* impossible chain */ )
                                next
                                  case d_0_snd
                                  by step( solve( (#vr.8, 0) ~~> (#vk.8, 0) ) )
                                qed
                              qed
                            qed
                          next
                            case c_xor_case_4
                            by step( solve( !KU( ~k ) @ #vk.11 ) )
                          next
                            case c_xor_case_5
                            step( solve( !KU( (~k1⊕~r1.1) ) @ #vk.10 ) )
                              case c_xor
                              by step( contradiction /* cyclic */ )
                            next
                              case coerce
                              step( solve( !KD( (~k1⊕~r1.1) ) ▶₀ #vk.8 ) )
                                case acceptreader
                                by step( solve( (#vl.2, 0) ~~> (#vk.8, 0) ) )
                              next
                                case initiatereader
                                by step( contradiction /* impossible chain */ )
                              next
                                case tag1
                                step( solve( (#vl.2, 0) ~~> (#vk.8, 0) ) )
                                  case d_0_fst
                                  by step( contradiction /* impossible chain */ )
                                next
                                  case d_0_snd
                                  by step( solve( (#vr.8, 0) ~~> (#vk.8, 0) ) )
                                qed
                              qed
                            qed
                          next
                            case c_xor_case_6
                            step( solve( !KU( (~r1⊕~r1.1) ) @ #vk.10 ) )
                              case c_xor
                              by step( contradiction /* cyclic */ )
                            next
                              case coerce
                              step( solve( !KD( (~r1⊕~r1.1) ) ▶₀ #vk.8 ) )
                                case acceptreader
                                by step( solve( (#vl.2, 0) ~~> (#vk.8, 0) ) )
                              next
                                case initiatereader
                                by step( contradiction /* impossible chain */ )
                              next
                                case tag1
                                step( solve( (#vl.2, 0) ~~> (#vk.8, 0) ) )
                                  case d_0_fst
                                  by step( contradiction /* impossible chain */ )
                                next
                                  case d_0_snd
                                  by step( solve( (#vr.8, 0) ~~> (#vk.8, 0) ) )
                                qed
                              qed
                            qed
                          next
                            case c_xor_case_7
                            by step( contradiction /* cyclic */ )
                          next
                            case coerce
                            step( solve( !KD( (~k⊕~k1⊕~r1⊕~r1.1) ) ▶₀ #vk.7 ) )
                              case acceptreader
                              by step( solve( (#vl.2, 0) ~~> (#vk.7, 0) ) )
                            next
                              case initiatereader
                              by step( contradiction /* impossible chain */ )
                            next
                              case tag1
                              step( solve( (#vl.2, 0) ~~> (#vk.7, 0) ) )
                                case d_0_fst
                                by step( contradiction /* impossible chain */ )
                              next
                                case d_0_snd
                                by step( solve( (#vr.8, 0) ~~> (#vk.7, 0) ) )
                              qed
                            qed
                          qed
                        next
                          case coerce
                          step( solve( !KD( (x⊕~r1.2) ) ▶₀ #vk.6 ) )
                            case acceptreader
                            by step( solve( (#vl.2, 0) ~~> (#vk.6, 0) ) )
                          next
                            case initiatereader
                            by step( contradiction /* impossible chain */ )
                          next
                            case tag1
                            step( solve( (#vl.2, 0) ~~> (#vk.6, 0) ) )
                              case d_0_fst
                              by step( contradiction /* impossible chain */ )
                            next
                              case d_0_snd
                              by step( solve( (#vr.8, 0) ~~> (#vk.6, 0) ) )
                            qed
                          qed
                        qed
                      qed
                    qed
                  next
                    case coerce
                    step( solve( !KD( (x.1⊕x.2) ) ▶₀ #vk.4 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.7, 0) ~~> (#vk.4, 0) ) )
                      qed
                    qed
                  qed
                next
                  case tag1_case_2
                  by step( contradiction /* cyclic */ )
                qed
              next
                case coerce
                step( solve( !KD( (x⊕h((~k⊕~r1⊕x⊕~r1.1))) ) ▶₀ #vk.2 ) )
                  case acceptreader
                  by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                next
                  case initiatereader
                  by step( contradiction /* impossible chain */ )
                next
                  case tag1
                  step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                    case d_0_fst
                    by step( contradiction /* impossible chain */ )
                  next
                    case d_0_snd
                    by step( solve( (#vr.5, 0) ~~> (#vk.2, 0) ) )
                  qed
                qed
              qed
            next
              case coerce
              step( solve( !KD( (x⊕~r1.1) ) ▶₀ #vk.1 ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.5, 0) ~~> (#vk.1, 0) ) )
                qed
              qed
            qed
          qed
        next
          case split_case_4
          step( solve( !KU( (~r1.1⊕h((~k⊕~r1))) ) @ #vk.2 ) )
            case c_xor
            by step( contradiction /* cyclic */ )
          next
            case coerce
            step( solve( !KD( (~r1.1⊕h((~k⊕~r1))) ) ▶₀ #vk.1 ) )
              case acceptreader
              by step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
            next
              case initiatereader
              by step( contradiction /* impossible chain */ )
            next
              case tag1
              step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                case d_0_fst
                by step( contradiction /* impossible chain */ )
              next
                case d_0_snd
                by step( solve( (#vr.5, 0) ~~> (#vk.1, 0) ) )
              qed
            qed
          qed
        next
          case split_case_5
          step( solve( !KU( (~k⊕~r1) ) @ #vk.1 ) )
            case c_xor
            by step( contradiction /* cyclic */ )
          next
            case coerce
            step( solve( !KD( (~k⊕~r1) ) ▶₀ #vk.1 ) )
              case acceptreader
              by step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
            next
              case initiatereader
              by step( contradiction /* impossible chain */ )
            next
              case tag1
              step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                case d_0_fst
                by step( contradiction /* impossible chain */ )
              next
                case d_0_snd
                by step( solve( (#vr.5, 0) ~~> (#vk.1, 0) ) )
              qed
            qed
          qed
        next
          case split_case_6
          step( solve( !KU( (~r1⊕x) ) @ #vk.1 ) )
            case c_xor
            by step( contradiction /* cyclic */ )
          next
            case coerce
            step( solve( !KD( (~r1⊕x) ) ▶₀ #vk.1 ) )
              case acceptreader
              by step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
            next
              case initiatereader
              by step( contradiction /* impossible chain */ )
            next
              case tag1
              step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                case d_0_fst
                by step( contradiction /* impossible chain */ )
              next
                case d_0_snd
                by step( solve( (#vr.5, 0) ~~> (#vk.1, 0) ) )
              qed
            qed
          qed
        next
          case split_case_7
          step( solve( !KU( (~k⊕~r1⊕z) ) @ #vk.1 ) )
            case c_xor_case_1
            by step( contradiction /* cyclic */ )
          next
            case c_xor_case_2
            by step( solve( !KU( ~k ) @ #vk.4 ) )
          next
            case c_xor_case_3
            step( solve( !KU( (~x⊕x.1⊕x.2) ) @ #vk.2 ) )
              case c_xor_case_1
              step( solve( !KU( (~k⊕~r1) ) @ #vk.4 ) )
                case c_xor
                by step( contradiction /* cyclic */ )
              next
                case coerce
                step( solve( !KD( (~k⊕~r1) ) ▶₀ #vk.3 ) )
                  case acceptreader
                  by step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                next
                  case initiatereader
                  by step( contradiction /* impossible chain */ )
                next
                  case tag1
                  step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                    case d_0_fst
                    by step( contradiction /* impossible chain */ )
                  next
                    case d_0_snd
                    by step( solve( (#vr.5, 0) ~~> (#vk.3, 0) ) )
                  qed
                qed
              qed
            next
              case c_xor_case_2
              step( solve( !KU( ~x.2 ) @ #vk.6 ) )
                case fresh
                step( solve( !KU( (~k⊕~r1) ) @ #vk.5 ) )
                  case c_xor
                  by step( contradiction /* cyclic */ )
                next
                  case coerce
                  step( solve( !KD( (~k⊕~r1) ) ▶₀ #vk.4 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.4, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.4, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.5, 0) ~~> (#vk.4, 0) ) )
                    qed
                  qed
                qed
              next
                case tag1_case_1
                step( solve( !KU( (~k⊕~r1) ) @ #vk.5 ) )
                  case c_xor
                  by step( contradiction /* cyclic */ )
                next
                  case coerce
                  step( solve( !KD( (~k⊕~r1) ) ▶₀ #vk.4 ) )
                    case acceptreader
                    by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.7, 0) ~~> (#vk.4, 0) ) )
                    qed
                  qed
                qed
              next
                case tag1_case_2
                by step( contradiction /* cyclic */ )
              qed
            next
              case c_xor_case_3
              step( solve( !KU( (~k⊕~r1) ) @ #vk.4 ) )
                case c_xor
                by step( contradiction /* cyclic */ )
              next
                case coerce
                step( solve( !KD( (~k⊕~r1) ) ▶₀ #vk.3 ) )
                  case acceptreader
                  by step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                next
                  case initiatereader
                  by step( contradiction /* impossible chain */ )
                next
                  case tag1
                  step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                    case d_0_fst
                    by step( contradiction /* impossible chain */ )
                  next
                    case d_0_snd
                    by step( solve( (#vr.5, 0) ~~> (#vk.3, 0) ) )
                  qed
                qed
              qed
            next
              case coerce
              step( solve( !KD( (~x⊕x.1⊕x.2) ) ▶₀ #vk.2 ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.5, 0) ~~> (#vk.2, 0) ) )
                qed
              qed
            qed
          next
            case coerce
            step( solve( !KD( (~k⊕~r1⊕z) ) ▶₀ #vk.1 ) )
              case acceptreader
              by step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
            next
              case initiatereader
              by step( contradiction /* impossible chain */ )
            next
              case tag1
              step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                case d_0_fst
                by step( contradiction /* impossible chain */ )
              next
                case d_0_snd
                by step( solve( (#vr.5, 0) ~~> (#vk.1, 0) ) )
              qed
            qed
          qed
        next
          case split_case_8
          step( solve( !KU( (~k⊕x) ) @ #vk.1 ) )
            case c_xor
            by step( solve( !KU( ~k ) @ #vk.4 ) )
          next
            case coerce
            step( solve( !KD( (~k⊕x) ) ▶₀ #vk.1 ) )
              case acceptreader
              by step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
            next
              case initiatereader
              by step( contradiction /* impossible chain */ )
            next
              case tag1
              step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                case d_0_fst
                by step( contradiction /* impossible chain */ )
              next
                case d_0_snd
                by step( solve( (#vr.5, 0) ~~> (#vk.1, 0) ) )
              qed
            qed
          qed
        qed
      qed
    next
      case tag1_case_3
      step( solve( !KU( h(z) ) @ #vk ) )
        case c_h
        step( solve( splitEqs(0) ) )
          case split_case_1
          by step( solve( !KU( ~k ) @ #vk.1 ) )
        next
          case split_case_2
          by step( contradiction /* cyclic */ )
        next
          case split_case_3
          step( solve( !KU( (~k⊕h((~k⊕~r1))) ) @ #vk.2 ) )
            case c_xor
            by step( solve( !KU( ~k ) @ #vk.4 ) )
          next
            case coerce
            step( solve( !KD( (~k⊕h((~k⊕~r1))) ) ▶₀ #vk.1 ) )
              case acceptreader
              by step( solve( (#vl, 0) ~~> (#vk.1, 0) ) )
            next
              case initiatereader
              by step( contradiction /* impossible chain */ )
            next
              case tag1
              step( solve( (#vl, 0) ~~> (#vk.1, 0) ) )
                case d_0_fst
                by step( contradiction /* impossible chain */ )
              next
                case d_0_snd
                by step( solve( (#vr.3, 0) ~~> (#vk.1, 0) ) )
              qed
            qed
          qed
        next
          case split_case_4
          step( solve( !KU( (~k⊕~r1) ) @ #vk.1 ) )
            case c_xor
            by step( contradiction /* cyclic */ )
          next
            case coerce
            step( solve( !KD( (~k⊕~r1) ) ▶₀ #vk.1 ) )
              case acceptreader
              by step( solve( (#vl, 0) ~~> (#vk.1, 0) ) )
            next
              case initiatereader
              by step( contradiction /* impossible chain */ )
            next
              case tag1
              step( solve( (#vl, 0) ~~> (#vk.1, 0) ) )
                case d_0_fst
                by step( contradiction /* impossible chain */ )
              next
                case d_0_snd
                by step( solve( (#vr.3, 0) ~~> (#vk.1, 0) ) )
              qed
            qed
          qed
        next
          case split_case_5
          step( solve( !KU( (~k⊕r0⊕h((~k⊕~r1⊕r0))) ) @ #vk.2 ) )
            case c_xor_case_1
            step( solve( !KU( (~k⊕h((~k⊕~r1⊕r0))) ) @ #vk.3 ) )
              case c_xor
              by step( solve( !KU( ~k ) @ #vk.5 ) )
            next
              case coerce
              step( solve( !KD( (~k⊕h((~k⊕~r1⊕r0))) ) ▶₀ #vk.2 ) )
                case acceptreader
                by step( solve( (#vl, 0) ~~> (#vk.2, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl, 0) ~~> (#vk.2, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.3, 0) ~~> (#vk.2, 0) ) )
                qed
              qed
            qed
          next
            case c_xor_case_2
            by step( solve( !KU( ~k ) @ #vk.4 ) )
          next
            case c_xor_case_3
            step( solve( !KU( (~k⊕r0) ) @ #vk.4 ) )
              case c_xor
              by step( solve( !KU( ~k ) @ #vk.5 ) )
            next
              case coerce
              step( solve( !KD( (~k⊕r0) ) ▶₀ #vk.2 ) )
                case acceptreader
                by step( solve( (#vl, 0) ~~> (#vk.2, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl, 0) ~~> (#vk.2, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.3, 0) ~~> (#vk.2, 0) ) )
                qed
              qed
            qed
          next
            case coerce
            step( solve( !KD( (~k⊕r0⊕h((~k⊕~r1⊕r0))) ) ▶₀ #vk.1 ) )
              case acceptreader
              by step( solve( (#vl, 0) ~~> (#vk.1, 0) ) )
            next
              case initiatereader
              by step( contradiction /* impossible chain */ )
            next
              case tag1
              step( solve( (#vl, 0) ~~> (#vk.1, 0) ) )
                case d_0_fst
                by step( contradiction /* impossible chain */ )
              next
                case d_0_snd
                by step( solve( (#vr.3, 0) ~~> (#vk.1, 0) ) )
              qed
            qed
          qed
        next
          case split_case_6
          step( solve( !KU( (~r1⊕x) ) @ #vk.1 ) )
            case c_xor
            by step( contradiction /* cyclic */ )
          next
            case coerce
            step( solve( !KD( (~r1⊕x) ) ▶₀ #vk.1 ) )
              case acceptreader
              by step( solve( (#vl, 0) ~~> (#vk.1, 0) ) )
            next
              case initiatereader
              by step( contradiction /* impossible chain */ )
            next
              case tag1
              step( solve( (#vl, 0) ~~> (#vk.1, 0) ) )
                case d_0_fst
                by step( contradiction /* impossible chain */ )
              next
                case d_0_snd
                by step( solve( (#vr.3, 0) ~~> (#vk.1, 0) ) )
              qed
            qed
          qed
        next
          case split_case_7
          step( solve( !KU( (~k⊕~r1⊕z) ) @ #vk.1 ) )
            case c_xor_case_1
            by step( contradiction /* cyclic */ )
          next
            case c_xor_case_2
            by step( solve( !KU( ~k ) @ #vk.4 ) )
          next
            case c_xor_case_3
            step( solve( !KU( (~r1⊕z⊕h(z)) ) @ #vk.2 ) )
              case c_xor_case_1
              step( solve( !KU( (~k⊕~r1) ) @ #vk.4 ) )
                case c_xor
                by step( contradiction /* cyclic */ )
              next
                case coerce
                step( solve( !KD( (~k⊕~r1) ) ▶₀ #vk.3 ) )
                  case acceptreader
                  by step( solve( (#vl, 0) ~~> (#vk.3, 0) ) )
                next
                  case initiatereader
                  by step( contradiction /* impossible chain */ )
                next
                  case tag1
                  step( solve( (#vl, 0) ~~> (#vk.3, 0) ) )
                    case d_0_fst
                    by step( contradiction /* impossible chain */ )
                  next
                    case d_0_snd
                    by step( solve( (#vr.3, 0) ~~> (#vk.3, 0) ) )
                  qed
                qed
              qed
            next
              case c_xor_case_2
              step( solve( !KU( (~k⊕~r1) ) @ #vk.4 ) )
                case c_xor
                by step( contradiction /* cyclic */ )
              next
                case coerce
                step( solve( !KD( (~k⊕~r1) ) ▶₀ #vk.3 ) )
                  case acceptreader
                  by step( solve( (#vl, 0) ~~> (#vk.3, 0) ) )
                next
                  case initiatereader
                  by step( contradiction /* impossible chain */ )
                next
                  case tag1
                  step( solve( (#vl, 0) ~~> (#vk.3, 0) ) )
                    case d_0_fst
                    by step( contradiction /* impossible chain */ )
                  next
                    case d_0_snd
                    by step( solve( (#vr.3, 0) ~~> (#vk.3, 0) ) )
                  qed
                qed
              qed
            next
              case c_xor_case_3
              step( solve( !KU( (~k⊕~r1) ) @ #vk.4 ) )
                case c_xor
                by step( contradiction /* cyclic */ )
              next
                case coerce
                step( solve( !KD( (~k⊕~r1) ) ▶₀ #vk.3 ) )
                  case acceptreader
                  by step( solve( (#vl, 0) ~~> (#vk.3, 0) ) )
                next
                  case initiatereader
                  by step( contradiction /* impossible chain */ )
                next
                  case tag1
                  step( solve( (#vl, 0) ~~> (#vk.3, 0) ) )
                    case d_0_fst
                    by step( contradiction /* impossible chain */ )
                  next
                    case d_0_snd
                    by step( solve( (#vr.3, 0) ~~> (#vk.3, 0) ) )
                  qed
                qed
              qed
            next
              case coerce
              step( solve( !KD( (~r1⊕z⊕h(z)) ) ▶₀ #vk.2 ) )
                case acceptreader
                by step( solve( (#vl, 0) ~~> (#vk.2, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl, 0) ~~> (#vk.2, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.3, 0) ~~> (#vk.2, 0) ) )
                qed
              qed
            qed
          next
            case coerce
            step( solve( !KD( (~k⊕~r1⊕z) ) ▶₀ #vk.1 ) )
              case acceptreader
              by step( solve( (#vl, 0) ~~> (#vk.1, 0) ) )
            next
              case initiatereader
              by step( contradiction /* impossible chain */ )
            next
              case tag1
              step( solve( (#vl, 0) ~~> (#vk.1, 0) ) )
                case d_0_fst
                by step( contradiction /* impossible chain */ )
              next
                case d_0_snd
                by step( solve( (#vr.3, 0) ~~> (#vk.1, 0) ) )
              qed
            qed
          qed
        next
          case split_case_8
          step( solve( !KU( (~k⊕x) ) @ #vk.1 ) )
            case c_xor
            by step( solve( !KU( ~k ) @ #vk.4 ) )
          next
            case coerce
            step( solve( !KD( (~k⊕x) ) ▶₀ #vk.1 ) )
              case acceptreader
              by step( solve( (#vl, 0) ~~> (#vk.1, 0) ) )
            next
              case initiatereader
              by step( contradiction /* impossible chain */ )
            next
              case tag1
              step( solve( (#vl, 0) ~~> (#vk.1, 0) ) )
                case d_0_fst
                by step( contradiction /* impossible chain */ )
              next
                case d_0_snd
                by step( solve( (#vr.3, 0) ~~> (#vk.1, 0) ) )
              qed
            qed
          qed
        qed
      next
        case tag1_case_1
        step( solve( splitEqs(0) ) )
          case split_case_1
          by step( solve( !KU( ~k ) @ #vk.1 ) )
        next
          case split_case_2
          by step( contradiction /* cyclic */ )
        next
          case split_case_3
          step( solve( splitEqs(2) ) )
            case split_case_1
            by step( solve( !KU( ~k1 ) @ #vk.1 ) )
          next
            case split_case_2
            step( solve( !KU( (~k⊕~k1⊕h((~k⊕~r0⊕~r1))) ) @ #vk.2 ) )
              case c_xor_case_1
              by step( solve( !KU( ~k1 ) @ #vk.4 ) )
            next
              case c_xor_case_2
              by step( solve( !KU( ~k ) @ #vk.4 ) )
            next
              case c_xor_case_3
              step( solve( !KU( h((~k⊕~r0⊕~r1)) ) @ #vk.3 ) )
                case c_h
                step( solve( !KU( (~k⊕~k1) ) @ #vk.4 ) )
                  case c_xor
                  by step( solve( !KU( ~k1 ) @ #vk.6 ) )
                next
                  case coerce
                  step( solve( !KD( (~k⊕~k1) ) ▶₀ #vk.3 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.5, 0) ~~> (#vk.3, 0) ) )
                    qed
                  qed
                qed
              next
                case tag1_case_1
                step( solve( !KU( (~k⊕~k1) ) @ #vk.4 ) )
                  case c_xor
                  by step( solve( !KU( ~k1 ) @ #vk.6 ) )
                next
                  case coerce
                  step( solve( !KD( (~k⊕~k1) ) ▶₀ #vk.3 ) )
                    case acceptreader
                    by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.7, 0) ~~> (#vk.3, 0) ) )
                    qed
                  qed
                qed
              next
                case tag1_case_2
                by step( contradiction /* cyclic */ )
              qed
            next
              case coerce
              step( solve( !KD( (~k⊕~k1⊕h((~k⊕~r0⊕~r1))) ) ▶₀ #vk.1 ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.5, 0) ~~> (#vk.1, 0) ) )
                qed
              qed
            qed
          next
            case split_case_3
            step( solve( !KU( (~k1⊕~r1.1) ) @ #vk.1 ) )
              case c_xor
              by step( solve( !KU( ~k1 ) @ #vk.4 ) )
            next
              case coerce
              step( solve( !KD( (~k1⊕~r1.1) ) ▶₀ #vk.1 ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.5, 0) ~~> (#vk.1, 0) ) )
                qed
              qed
            qed
          next
            case split_case_4
            step( solve( !KU( (~k1⊕x⊕~r1.1) ) @ #vk.1 ) )
              case c_xor_case_1
              step( solve( !KU( (~k⊕x⊕h((~k⊕~k1⊕~r1⊕x⊕~r1.1))) ) @ #vk.2 ) )
                case c_xor_case_1
                step( solve( !KU( (~k1⊕~r1.1) ) @ #vk.3 ) )
                  case c_xor
                  by step( solve( !KU( ~k1 ) @ #vk.7 ) )
                next
                  case coerce
                  step( solve( !KD( (~k1⊕~r1.1) ) ▶₀ #vk.3 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.5, 0) ~~> (#vk.3, 0) ) )
                    qed
                  qed
                qed
              next
                case c_xor_case_2
                by step( solve( !KU( ~k ) @ #vk.6 ) )
              next
                case c_xor_case_3
                step( solve( !KU( (~k1⊕~r1.1) ) @ #vk.3 ) )
                  case c_xor
                  by step( solve( !KU( ~k1 ) @ #vk.8 ) )
                next
                  case coerce
                  step( solve( !KD( (~k1⊕~r1.1) ) ▶₀ #vk.3 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.5, 0) ~~> (#vk.3, 0) ) )
                    qed
                  qed
                qed
              next
                case coerce
                step( solve( !KD( (~k⊕x⊕h((~k⊕~k1⊕~r1⊕x⊕~r1.1))) ) ▶₀ #vk.2 ) )
                  case acceptreader
                  by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                next
                  case initiatereader
                  by step( contradiction /* impossible chain */ )
                next
                  case tag1
                  step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                    case d_0_fst
                    by step( contradiction /* impossible chain */ )
                  next
                    case d_0_snd
                    by step( solve( (#vr.5, 0) ~~> (#vk.2, 0) ) )
                  qed
                qed
              qed
            next
              case c_xor_case_2
              by step( solve( !KU( ~k1 ) @ #vk.4 ) )
            next
              case c_xor_case_3
              step( solve( !KU( (~k⊕x⊕h((~k⊕~k1⊕~r1⊕x⊕~r1.1))) ) @ #vk.2 ) )
                case c_xor_case_1
                step( solve( !KU( (~k1⊕x) ) @ #vk.4 ) )
                  case c_xor
                  by step( solve( !KU( ~k1 ) @ #vk.7 ) )
                next
                  case coerce
                  step( solve( !KD( (~k1⊕x) ) ▶₀ #vk.3 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.5, 0) ~~> (#vk.3, 0) ) )
                    qed
                  qed
                qed
              next
                case c_xor_case_2
                by step( solve( !KU( ~k ) @ #vk.6 ) )
              next
                case c_xor_case_3
                step( solve( !KU( (~k1⊕x) ) @ #vk.4 ) )
                  case c_xor
                  by step( solve( !KU( ~k1 ) @ #vk.8 ) )
                next
                  case coerce
                  step( solve( !KD( (~k1⊕x) ) ▶₀ #vk.3 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.5, 0) ~~> (#vk.3, 0) ) )
                    qed
                  qed
                qed
              next
                case coerce
                step( solve( !KD( (~k⊕x⊕h((~k⊕~k1⊕~r1⊕x⊕~r1.1))) ) ▶₀ #vk.2 ) )
                  case acceptreader
                  by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                next
                  case initiatereader
                  by step( contradiction /* impossible chain */ )
                next
                  case tag1
                  step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                    case d_0_fst
                    by step( contradiction /* impossible chain */ )
                  next
                    case d_0_snd
                    by step( solve( (#vr.5, 0) ~~> (#vk.2, 0) ) )
                  qed
                qed
              qed
            next
              case coerce
              step( solve( !KD( (~k1⊕x⊕~r1.1) ) ▶₀ #vk.1 ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.5, 0) ~~> (#vk.1, 0) ) )
                qed
              qed
            qed
          next
            case split_case_5
            step( solve( !KU( (~k1⊕x) ) @ #vk.1 ) )
              case c_xor
              by step( solve( !KU( ~k1 ) @ #vk.4 ) )
            next
              case coerce
              step( solve( !KD( (~k1⊕x) ) ▶₀ #vk.1 ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.5, 0) ~~> (#vk.1, 0) ) )
                qed
              qed
            qed
          next
            case split_case_6
            step( solve( !KU( (x⊕~r1.1) ) @ #vk.1 ) )
              case c_xor
              step( solve( !KU( (~k⊕~k1⊕x⊕h((~k⊕~r1⊕x⊕~r1.1))) ) @ #vk.2 ) )
                case c_xor_case_1
                step( solve( !KU( (~k⊕~k1⊕h((~k⊕~r1⊕x⊕~r1.1))) ) @ #vk.5 ) )
                  case c_xor_case_1
                  by step( solve( !KU( ~k1 ) @ #vk.7 ) )
                next
                  case c_xor_case_2
                  by step( solve( !KU( ~k ) @ #vk.7 ) )
                next
                  case c_xor_case_3
                  step( solve( !KU( h((~k⊕~r1⊕x⊕~r1.1)) ) @ #vk.6 ) )
                    case c_h
                    step( solve( !KU( (~k⊕~k1) ) @ #vk.7 ) )
                      case c_xor
                      by step( solve( !KU( ~k1 ) @ #vk.9 ) )
                    next
                      case coerce
                      step( solve( !KD( (~k⊕~k1) ) ▶₀ #vk.5 ) )
                        case acceptreader
                        by step( solve( (#vl.1, 0) ~~> (#vk.5, 0) ) )
                      next
                        case initiatereader
                        by step( contradiction /* impossible chain */ )
                      next
                        case tag1
                        step( solve( (#vl.1, 0) ~~> (#vk.5, 0) ) )
                          case d_0_fst
                          by step( contradiction /* impossible chain */ )
                        next
                          case d_0_snd
                          by step( solve( (#vr.5, 0) ~~> (#vk.5, 0) ) )
                        qed
                      qed
                    qed
                  next
                    case tag1_case_1
                    step( solve( !KU( (~k⊕~k1) ) @ #vk.7 ) )
                      case c_xor
                      by step( solve( !KU( ~k1 ) @ #vk.9 ) )
                    next
                      case coerce
                      step( solve( !KD( (~k⊕~k1) ) ▶₀ #vk.5 ) )
                        case acceptreader
                        by step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                      next
                        case initiatereader
                        by step( contradiction /* impossible chain */ )
                      next
                        case tag1
                        step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                          case d_0_fst
                          by step( contradiction /* impossible chain */ )
                        next
                          case d_0_snd
                          by step( solve( (#vr.7, 0) ~~> (#vk.5, 0) ) )
                        qed
                      qed
                    qed
                  next
                    case tag1_case_2
                    by step( contradiction /* cyclic */ )
                  qed
                next
                  case coerce
                  step( solve( !KD( (~k⊕~k1⊕h((~k⊕~r1⊕x⊕~r1.1))) ) ▶₀ #vk.3 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.5, 0) ~~> (#vk.3, 0) ) )
                    qed
                  qed
                qed
              next
                case c_xor_case_2
                by step( solve( !KU( ~k1 ) @ #vk.6 ) )
              next
                case c_xor_case_3
                step( solve( !KU( (~k⊕h((~k⊕~r1⊕x⊕~r1.1))) ) @ #vk.5 ) )
                  case c_xor
                  by step( solve( !KU( ~k ) @ #vk.8 ) )
                next
                  case coerce
                  step( solve( !KD( (~k⊕h((~k⊕~r1⊕x⊕~r1.1))) ) ▶₀ #vk.3 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.5, 0) ~~> (#vk.3, 0) ) )
                    qed
                  qed
                qed
              next
                case c_xor_case_4
                by step( solve( !KU( ~k ) @ #vk.6 ) )
              next
                case c_xor_case_5
                step( solve( !KU( (~k1⊕h((~k⊕~r1⊕x⊕~r1.1))) ) @ #vk.5 ) )
                  case c_xor
                  by step( solve( !KU( ~k1 ) @ #vk.8 ) )
                next
                  case coerce
                  step( solve( !KD( (~k1⊕h((~k⊕~r1⊕x⊕~r1.1))) ) ▶₀ #vk.3 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.5, 0) ~~> (#vk.3, 0) ) )
                    qed
                  qed
                qed
              next
                case c_xor_case_6
                step( solve( !KU( (x⊕h((~k⊕~r1⊕x⊕~r1.1))) ) @ #vk.5 ) )
                  case c_xor
                  step( solve( !KU( (~k⊕~k1) ) @ #vk.6 ) )
                    case c_xor
                    by step( solve( !KU( ~k1 ) @ #vk.8 ) )
                  next
                    case coerce
                    step( solve( !KD( (~k⊕~k1) ) ▶₀ #vk.4 ) )
                      case acceptreader
                      by step( solve( (#vl.1, 0) ~~> (#vk.4, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.1, 0) ~~> (#vk.4, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.5, 0) ~~> (#vk.4, 0) ) )
                      qed
                    qed
                  qed
                next
                  case coerce
                  step( solve( !KD( (x⊕h((~k⊕~r1⊕x⊕~r1.1))) ) ▶₀ #vk.3 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.5, 0) ~~> (#vk.3, 0) ) )
                    qed
                  qed
                qed
              next
                case c_xor_case_7
                step( solve( !KU( h((~k⊕~r1⊕x⊕~r1.1)) ) @ #vk.5 ) )
                  case c_h
                  step( solve( !KU( (~k⊕~k1⊕x) ) @ #vk.6 ) )
                    case c_xor_case_1
                    by step( solve( !KU( ~k1 ) @ #vk.9 ) )
                  next
                    case c_xor_case_2
                    by step( solve( !KU( ~k ) @ #vk.9 ) )
                  next
                    case c_xor_case_3
                    step( solve( !KU( (~k⊕~r1⊕x⊕~r1.1) ) @ #vk.7 ) )
                      case c_xor_case_1
                      step( solve( !KU( (~k⊕~k1) ) @ #vk.8 ) )
                        case c_xor
                        by step( solve( !KU( ~k1 ) @ #vk.10 ) )
                      next
                        case coerce
                        step( solve( !KD( (~k⊕~k1) ) ▶₀ #vk.6 ) )
                          case acceptreader
                          by step( solve( (#vl.1, 0) ~~> (#vk.6, 0) ) )
                        next
                          case initiatereader
                          by step( contradiction /* impossible chain */ )
                        next
                          case tag1
                          step( solve( (#vl.1, 0) ~~> (#vk.6, 0) ) )
                            case d_0_fst
                            by step( contradiction /* impossible chain */ )
                          next
                            case d_0_snd
                            by step( solve( (#vr.5, 0) ~~> (#vk.6, 0) ) )
                          qed
                        qed
                      qed
                    next
                      case c_xor_case_2
                      by step( contradiction /* cyclic */ )
                    next
                      case c_xor_case_3
                      step( solve( !KU( (~k⊕~k1) ) @ #vk.8 ) )
                        case c_xor
                        by step( solve( !KU( ~k1 ) @ #vk.11 ) )
                      next
                        case coerce
                        step( solve( !KD( (~k⊕~k1) ) ▶₀ #vk.6 ) )
                          case acceptreader
                          by step( solve( (#vl.1, 0) ~~> (#vk.6, 0) ) )
                        next
                          case initiatereader
                          by step( contradiction /* impossible chain */ )
                        next
                          case tag1
                          step( solve( (#vl.1, 0) ~~> (#vk.6, 0) ) )
                            case d_0_fst
                            by step( contradiction /* impossible chain */ )
                          next
                            case d_0_snd
                            by step( solve( (#vr.5, 0) ~~> (#vk.6, 0) ) )
                          qed
                        qed
                      qed
                    next
                      case c_xor_case_4
                      by step( solve( !KU( ~k ) @ #vk.10 ) )
                    next
                      case c_xor_case_5
                      step( solve( !KU( (~k⊕~k1) ) @ #vk.8 ) )
                        case c_xor
                        by step( solve( !KU( ~k1 ) @ #vk.11 ) )
                      next
                        case coerce
                        step( solve( !KD( (~k⊕~k1) ) ▶₀ #vk.6 ) )
                          case acceptreader
                          by step( solve( (#vl.1, 0) ~~> (#vk.6, 0) ) )
                        next
                          case initiatereader
                          by step( contradiction /* impossible chain */ )
                        next
                          case tag1
                          step( solve( (#vl.1, 0) ~~> (#vk.6, 0) ) )
                            case d_0_fst
                            by step( contradiction /* impossible chain */ )
                          next
                            case d_0_snd
                            by step( solve( (#vr.5, 0) ~~> (#vk.6, 0) ) )
                          qed
                        qed
                      qed
                    next
                      case c_xor_case_6
                      by step( contradiction /* cyclic */ )
                    next
                      case c_xor_case_7
                      by step( contradiction /* cyclic */ )
                    next
                      case coerce
                      step( solve( !KD( (~k⊕~r1⊕x⊕~r1.1) ) ▶₀ #vk.5 ) )
                        case acceptreader
                        by step( solve( (#vl.1, 0) ~~> (#vk.5, 0) ) )
                      next
                        case initiatereader
                        by step( contradiction /* impossible chain */ )
                      next
                        case tag1
                        step( solve( (#vl.1, 0) ~~> (#vk.5, 0) ) )
                          case d_0_fst
                          by step( contradiction /* impossible chain */ )
                        next
                          case d_0_snd
                          by step( solve( (#vr.5, 0) ~~> (#vk.5, 0) ) )
                        qed
                      qed
                    qed
                  next
                    case coerce
                    step( solve( !KD( (~k⊕~k1⊕x) ) ▶₀ #vk.4 ) )
                      case acceptreader
                      by step( solve( (#vl.1, 0) ~~> (#vk.4, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.1, 0) ~~> (#vk.4, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.5, 0) ~~> (#vk.4, 0) ) )
                      qed
                    qed
                  qed
                next
                  case tag1_case_1
                  step( solve( !KU( (~k⊕~k1⊕x) ) @ #vk.6 ) )
                    case c_xor_case_1
                    by step( solve( !KU( ~k1 ) @ #vk.9 ) )
                  next
                    case c_xor_case_2
                    by step( solve( !KU( ~k ) @ #vk.9 ) )
                  next
                    case c_xor_case_3
                    step( solve( !KU( (~k⊕~k1) ) @ #vk.8 ) )
                      case c_xor
                      by step( solve( !KU( ~k1 ) @ #vk.9 ) )
                    next
                      case coerce
                      step( solve( !KD( (~k⊕~k1) ) ▶₀ #vk.5 ) )
                        case acceptreader
                        by step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                      next
                        case initiatereader
                        by step( contradiction /* impossible chain */ )
                      next
                        case tag1
                        step( solve( (#vl.2, 0) ~~> (#vk.5, 0) ) )
                          case d_0_fst
                          by step( contradiction /* impossible chain */ )
                        next
                          case d_0_snd
                          by step( solve( (#vr.7, 0) ~~> (#vk.5, 0) ) )
                        qed
                      qed
                    qed
                  next
                    case coerce
                    step( solve( !KD( (~k⊕~k1⊕x) ) ▶₀ #vk.4 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.7, 0) ~~> (#vk.4, 0) ) )
                      qed
                    qed
                  qed
                next
                  case tag1_case_2
                  by step( contradiction /* cyclic */ )
                qed
              next
                case coerce
                step( solve( !KD( (~k⊕~k1⊕x⊕h((~k⊕~r1⊕x⊕~r1.1))) ) ▶₀ #vk.2 ) )
                  case acceptreader
                  by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                next
                  case initiatereader
                  by step( contradiction /* impossible chain */ )
                next
                  case tag1
                  step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                    case d_0_fst
                    by step( contradiction /* impossible chain */ )
                  next
                    case d_0_snd
                    by step( solve( (#vr.5, 0) ~~> (#vk.2, 0) ) )
                  qed
                qed
              qed
            next
              case coerce
              step( solve( !KD( (x⊕~r1.1) ) ▶₀ #vk.1 ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.5, 0) ~~> (#vk.1, 0) ) )
                qed
              qed
            qed
          next
            case split_case_7
            step( solve( !KU( (~k⊕~k1⊕r0⊕~r1.1⊕h((~k⊕~r1⊕r0))) ) @ #vk.2 ) )
              case c_xor_case_01
              by step( contradiction /* cyclic */ )
            next
              case c_xor_case_02
              step( solve( !KU( (~k⊕~k1⊕~r1.1⊕h((~k⊕~r1⊕r0))) ) @ #vk.3 ) )
                case c_xor_case_1
                by step( contradiction /* cyclic */ )
              next
                case c_xor_case_2
                by step( solve( !KU( ~k1 ) @ #vk.5 ) )
              next
                case c_xor_case_3
                step( solve( !KU( (~k⊕h((~k⊕~r1⊕r0))) ) @ #vk.4 ) )
                  case c_xor
                  by step( solve( !KU( ~k ) @ #vk.7 ) )
                next
                  case coerce
                  step( solve( !KD( (~k⊕h((~k⊕~r1⊕r0))) ) ▶₀ #vk.3 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.5, 0) ~~> (#vk.3, 0) ) )
                    qed
                  qed
                qed
              next
                case c_xor_case_4
                by step( solve( !KU( ~k ) @ #vk.5 ) )
              next
                case c_xor_case_5
                step( solve( !KU( (~k1⊕h((~k⊕~r1⊕r0))) ) @ #vk.4 ) )
                  case c_xor
                  by step( solve( !KU( ~k1 ) @ #vk.7 ) )
                next
                  case coerce
                  step( solve( !KD( (~k1⊕h((~k⊕~r1⊕r0))) ) ▶₀ #vk.3 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.5, 0) ~~> (#vk.3, 0) ) )
                    qed
                  qed
                qed
              next
                case c_xor_case_6
                step( solve( !KU( (~r1.1⊕h((~k⊕~r1⊕r0))) ) @ #vk.4 ) )
                  case c_xor
                  by step( contradiction /* cyclic */ )
                next
                  case coerce
                  step( solve( !KD( (~r1.1⊕h((~k⊕~r1⊕r0))) ) ▶₀ #vk.3 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.5, 0) ~~> (#vk.3, 0) ) )
                    qed
                  qed
                qed
              next
                case c_xor_case_7
                step( solve( !KU( (~k⊕~k1⊕~r1.1) ) @ #vk.5 ) )
                  case c_xor_case_1
                  by step( solve( !KU( ~k1 ) @ #vk.7 ) )
                next
                  case c_xor_case_2
                  by step( solve( !KU( ~k ) @ #vk.7 ) )
                next
                  case c_xor_case_3
                  by step( contradiction /* cyclic */ )
                next
                  case coerce
                  step( solve( !KD( (~k⊕~k1⊕~r1.1) ) ▶₀ #vk.3 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.5, 0) ~~> (#vk.3, 0) ) )
                    qed
                  qed
                qed
              next
                case coerce
                step( solve( !KD( (~k⊕~k1⊕~r1.1⊕h((~k⊕~r1⊕r0))) ) ▶₀ #vk.2 ) )
                  case acceptreader
                  by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                next
                  case initiatereader
                  by step( contradiction /* impossible chain */ )
                next
                  case tag1
                  step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                    case d_0_fst
                    by step( contradiction /* impossible chain */ )
                  next
                    case d_0_snd
                    by step( solve( (#vr.5, 0) ~~> (#vk.2, 0) ) )
                  qed
                qed
              qed
            next
              case c_xor_case_03
              step( solve( !KU( (~k⊕~k1⊕h((~k⊕~r1⊕r0))) ) @ #vk.3 ) )
                case c_xor_case_1
                by step( solve( !KU( ~k1 ) @ #vk.6 ) )
              next
                case c_xor_case_2
                by step( solve( !KU( ~k ) @ #vk.6 ) )
              next
                case c_xor_case_3
                step( solve( !KU( (r0⊕~r1.1) ) @ #vk.4 ) )
                  case c_xor
                  by step( contradiction /* cyclic */ )
                next
                  case coerce
                  step( solve( !KD( (r0⊕~r1.1) ) ▶₀ #vk.3 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.5, 0) ~~> (#vk.3, 0) ) )
                    qed
                  qed
                qed
              next
                case coerce
                step( solve( !KD( (~k⊕~k1⊕h((~k⊕~r1⊕r0))) ) ▶₀ #vk.2 ) )
                  case acceptreader
                  by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                next
                  case initiatereader
                  by step( contradiction /* impossible chain */ )
                next
                  case tag1
                  step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                    case d_0_fst
                    by step( contradiction /* impossible chain */ )
                  next
                    case d_0_snd
                    by step( solve( (#vr.5, 0) ~~> (#vk.2, 0) ) )
                  qed
                qed
              qed
            next
              case c_xor_case_04
              by step( solve( !KU( ~k1 ) @ #vk.4 ) )
            next
              case c_xor_case_05
              step( solve( !KU( (~k⊕r0⊕h((~k⊕~r1⊕r0))) ) @ #vk.3 ) )
                case c_xor_case_1
                step( solve( !KU( (~k1⊕~r1.1) ) @ #vk.4 ) )
                  case c_xor
                  by step( contradiction /* cyclic */ )
                next
                  case coerce
                  step( solve( !KD( (~k1⊕~r1.1) ) ▶₀ #vk.3 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.5, 0) ~~> (#vk.3, 0) ) )
                    qed
                  qed
                qed
              next
                case c_xor_case_2
                by step( solve( !KU( ~k ) @ #vk.6 ) )
              next
                case c_xor_case_3
                step( solve( !KU( (~k1⊕~r1.1) ) @ #vk.4 ) )
                  case c_xor
                  by step( contradiction /* cyclic */ )
                next
                  case coerce
                  step( solve( !KD( (~k1⊕~r1.1) ) ▶₀ #vk.3 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.5, 0) ~~> (#vk.3, 0) ) )
                    qed
                  qed
                qed
              next
                case coerce
                step( solve( !KD( (~k⊕r0⊕h((~k⊕~r1⊕r0))) ) ▶₀ #vk.2 ) )
                  case acceptreader
                  by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                next
                  case initiatereader
                  by step( contradiction /* impossible chain */ )
                next
                  case tag1
                  step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                    case d_0_fst
                    by step( contradiction /* impossible chain */ )
                  next
                    case d_0_snd
                    by step( solve( (#vr.5, 0) ~~> (#vk.2, 0) ) )
                  qed
                qed
              qed
            next
              case c_xor_case_06
              step( solve( !KU( (~k⊕~r1.1⊕h((~k⊕~r1⊕r0))) ) @ #vk.3 ) )
                case c_xor_case_1
                by step( contradiction /* cyclic */ )
              next
                case c_xor_case_2
                by step( solve( !KU( ~k ) @ #vk.6 ) )
              next
                case c_xor_case_3
                step( solve( !KU( (~k1⊕r0) ) @ #vk.4 ) )
                  case c_xor
                  by step( solve( !KU( ~k1 ) @ #vk.7 ) )
                next
                  case coerce
                  step( solve( !KD( (~k1⊕r0) ) ▶₀ #vk.3 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.5, 0) ~~> (#vk.3, 0) ) )
                    qed
                  qed
                qed
              next
                case coerce
                step( solve( !KD( (~k⊕~r1.1⊕h((~k⊕~r1⊕r0))) ) ▶₀ #vk.2 ) )
                  case acceptreader
                  by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                next
                  case initiatereader
                  by step( contradiction /* impossible chain */ )
                next
                  case tag1
                  step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                    case d_0_fst
                    by step( contradiction /* impossible chain */ )
                  next
                    case d_0_snd
                    by step( solve( (#vr.5, 0) ~~> (#vk.2, 0) ) )
                  qed
                qed
              qed
            next
              case c_xor_case_07
              step( solve( !KU( (~k⊕h((~k⊕~r1⊕r0))) ) @ #vk.3 ) )
                case c_xor
                by step( solve( !KU( ~k ) @ #vk.6 ) )
              next
                case coerce
                step( solve( !KD( (~k⊕h((~k⊕~r1⊕r0))) ) ▶₀ #vk.2 ) )
                  case acceptreader
                  by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                next
                  case initiatereader
                  by step( contradiction /* impossible chain */ )
                next
                  case tag1
                  step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                    case d_0_fst
                    by step( contradiction /* impossible chain */ )
                  next
                    case d_0_snd
                    by step( solve( (#vr.5, 0) ~~> (#vk.2, 0) ) )
                  qed
                qed
              qed
            next
              case c_xor_case_08
              by step( solve( !KU( ~k ) @ #vk.4 ) )
            next
              case c_xor_case_09
              step( solve( !KU( (~k1⊕r0⊕h((~k⊕~r1⊕r0))) ) @ #vk.3 ) )
                case c_xor_case_1
                step( solve( !KU( (~k⊕~r1.1) ) @ #vk.4 ) )
                  case c_xor
                  by step( contradiction /* cyclic */ )
                next
                  case coerce
                  step( solve( !KD( (~k⊕~r1.1) ) ▶₀ #vk.3 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.5, 0) ~~> (#vk.3, 0) ) )
                    qed
                  qed
                qed
              next
                case c_xor_case_2
                by step( solve( !KU( ~k1 ) @ #vk.6 ) )
              next
                case c_xor_case_3
                step( solve( !KU( (~k⊕~r1.1) ) @ #vk.4 ) )
                  case c_xor
                  by step( contradiction /* cyclic */ )
                next
                  case coerce
                  step( solve( !KD( (~k⊕~r1.1) ) ▶₀ #vk.3 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.5, 0) ~~> (#vk.3, 0) ) )
                    qed
                  qed
                qed
              next
                case coerce
                step( solve( !KD( (~k1⊕r0⊕h((~k⊕~r1⊕r0))) ) ▶₀ #vk.2 ) )
                  case acceptreader
                  by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                next
                  case initiatereader
                  by step( contradiction /* impossible chain */ )
                next
                  case tag1
                  step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                    case d_0_fst
                    by step( contradiction /* impossible chain */ )
                  next
                    case d_0_snd
                    by step( solve( (#vr.5, 0) ~~> (#vk.2, 0) ) )
                  qed
                qed
              qed
            next
              case c_xor_case_10
              step( solve( !KU( (~k1⊕~r1.1⊕h((~k⊕~r1⊕r0))) ) @ #vk.3 ) )
                case c_xor_case_1
                by step( contradiction /* cyclic */ )
              next
                case c_xor_case_2
                by step( solve( !KU( ~k1 ) @ #vk.6 ) )
              next
                case c_xor_case_3
                step( solve( !KU( (~k⊕r0) ) @ #vk.4 ) )
                  case c_xor
                  by step( solve( !KU( ~k ) @ #vk.7 ) )
                next
                  case coerce
                  step( solve( !KD( (~k⊕r0) ) ▶₀ #vk.3 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.5, 0) ~~> (#vk.3, 0) ) )
                    qed
                  qed
                qed
              next
                case coerce
                step( solve( !KD( (~k1⊕~r1.1⊕h((~k⊕~r1⊕r0))) ) ▶₀ #vk.2 ) )
                  case acceptreader
                  by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                next
                  case initiatereader
                  by step( contradiction /* impossible chain */ )
                next
                  case tag1
                  step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                    case d_0_fst
                    by step( contradiction /* impossible chain */ )
                  next
                    case d_0_snd
                    by step( solve( (#vr.5, 0) ~~> (#vk.2, 0) ) )
                  qed
                qed
              qed
            next
              case c_xor_case_11
              step( solve( !KU( (~k1⊕h((~k⊕~r1⊕r0))) ) @ #vk.3 ) )
                case c_xor
                by step( solve( !KU( ~k1 ) @ #vk.6 ) )
              next
                case coerce
                step( solve( !KD( (~k1⊕h((~k⊕~r1⊕r0))) ) ▶₀ #vk.2 ) )
                  case acceptreader
                  by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                next
                  case initiatereader
                  by step( contradiction /* impossible chain */ )
                next
                  case tag1
                  step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                    case d_0_fst
                    by step( contradiction /* impossible chain */ )
                  next
                    case d_0_snd
                    by step( solve( (#vr.5, 0) ~~> (#vk.2, 0) ) )
                  qed
                qed
              qed
            next
              case c_xor_case_12
              step( solve( !KU( (r0⊕~r1.1⊕h((~k⊕~r1⊕r0))) ) @ #vk.3 ) )
                case c_xor_case_1
                by step( contradiction /* cyclic */ )
              next
                case c_xor_case_2
                step( solve( !KU( (~k⊕~k1) ) @ #vk.4 ) )
                  case c_xor
                  by step( solve( !KU( ~k1 ) @ #vk.6 ) )
                next
                  case coerce
                  step( solve( !KD( (~k⊕~k1) ) ▶₀ #vk.3 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.5, 0) ~~> (#vk.3, 0) ) )
                    qed
                  qed
                qed
              next
                case c_xor_case_3
                step( solve( !KU( (~k⊕~k1) ) @ #vk.4 ) )
                  case c_xor
                  by step( solve( !KU( ~k1 ) @ #vk.7 ) )
                next
                  case coerce
                  step( solve( !KD( (~k⊕~k1) ) ▶₀ #vk.3 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.5, 0) ~~> (#vk.3, 0) ) )
                    qed
                  qed
                qed
              next
                case coerce
                step( solve( !KD( (r0⊕~r1.1⊕h((~k⊕~r1⊕r0))) ) ▶₀ #vk.2 ) )
                  case acceptreader
                  by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                next
                  case initiatereader
                  by step( contradiction /* impossible chain */ )
                next
                  case tag1
                  step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                    case d_0_fst
                    by step( contradiction /* impossible chain */ )
                  next
                    case d_0_snd
                    by step( solve( (#vr.5, 0) ~~> (#vk.2, 0) ) )
                  qed
                qed
              qed
            next
              case c_xor_case_13
              step( solve( !KU( (r0⊕h((~k⊕~r1⊕r0))) ) @ #vk.3 ) )
                case c_xor
                step( solve( !KU( (~k⊕~k1⊕~r1.1) ) @ #vk.4 ) )
                  case c_xor_case_1
                  by step( solve( !KU( ~k1 ) @ #vk.7 ) )
                next
                  case c_xor_case_2
                  by step( solve( !KU( ~k ) @ #vk.7 ) )
                next
                  case c_xor_case_3
                  by step( contradiction /* cyclic */ )
                next
                  case coerce
                  step( solve( !KD( (~k⊕~k1⊕~r1.1) ) ▶₀ #vk.3 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.5, 0) ~~> (#vk.3, 0) ) )
                    qed
                  qed
                qed
              next
                case coerce
                step( solve( !KD( (r0⊕h((~k⊕~r1⊕r0))) ) ▶₀ #vk.2 ) )
                  case acceptreader
                  by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                next
                  case initiatereader
                  by step( contradiction /* impossible chain */ )
                next
                  case tag1
                  step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                    case d_0_fst
                    by step( contradiction /* impossible chain */ )
                  next
                    case d_0_snd
                    by step( solve( (#vr.5, 0) ~~> (#vk.2, 0) ) )
                  qed
                qed
              qed
            next
              case c_xor_case_14
              step( solve( !KU( (~r1.1⊕h((~k⊕~r1⊕r0))) ) @ #vk.3 ) )
                case c_xor
                by step( contradiction /* cyclic */ )
              next
                case coerce
                step( solve( !KD( (~r1.1⊕h((~k⊕~r1⊕r0))) ) ▶₀ #vk.2 ) )
                  case acceptreader
                  by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                next
                  case initiatereader
                  by step( contradiction /* impossible chain */ )
                next
                  case tag1
                  step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                    case d_0_fst
                    by step( contradiction /* impossible chain */ )
                  next
                    case d_0_snd
                    by step( solve( (#vr.5, 0) ~~> (#vk.2, 0) ) )
                  qed
                qed
              qed
            next
              case c_xor_case_15
              step( solve( !KU( (~k⊕~k1⊕r0⊕~r1.1) ) @ #vk.4 ) )
                case c_xor_case_1
                step( solve( !KU( (~k⊕~k1⊕~r1.1) ) @ #vk.5 ) )
                  case c_xor_case_1
                  by step( solve( !KU( ~k1 ) @ #vk.7 ) )
                next
                  case c_xor_case_2
                  by step( solve( !KU( ~k ) @ #vk.7 ) )
                next
                  case c_xor_case_3
                  by step( contradiction /* cyclic */ )
                next
                  case coerce
                  step( solve( !KD( (~k⊕~k1⊕~r1.1) ) ▶₀ #vk.3 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.5, 0) ~~> (#vk.3, 0) ) )
                    qed
                  qed
                qed
              next
                case c_xor_case_2
                by step( solve( !KU( ~k1 ) @ #vk.6 ) )
              next
                case c_xor_case_3
                step( solve( !KU( (~k⊕~r1.1) ) @ #vk.5 ) )
                  case c_xor
                  by step( contradiction /* cyclic */ )
                next
                  case coerce
                  step( solve( !KD( (~k⊕~r1.1) ) ▶₀ #vk.3 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.5, 0) ~~> (#vk.3, 0) ) )
                    qed
                  qed
                qed
              next
                case c_xor_case_4
                by step( solve( !KU( ~k ) @ #vk.6 ) )
              next
                case c_xor_case_5
                step( solve( !KU( (~k1⊕~r1.1) ) @ #vk.5 ) )
                  case c_xor
                  by step( contradiction /* cyclic */ )
                next
                  case coerce
                  step( solve( !KD( (~k1⊕~r1.1) ) ▶₀ #vk.3 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.5, 0) ~~> (#vk.3, 0) ) )
                    qed
                  qed
                qed
              next
                case c_xor_case_6
                step( solve( !KU( (r0⊕~r1.1) ) @ #vk.5 ) )
                  case c_xor
                  by step( contradiction /* cyclic */ )
                next
                  case coerce
                  step( solve( !KD( (r0⊕~r1.1) ) ▶₀ #vk.3 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.5, 0) ~~> (#vk.3, 0) ) )
                    qed
                  qed
                qed
              next
                case c_xor_case_7
                by step( contradiction /* cyclic */ )
              next
                case coerce
                step( solve( !KD( (~k⊕~k1⊕r0⊕~r1.1) ) ▶₀ #vk.2 ) )
                  case acceptreader
                  by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                next
                  case initiatereader
                  by step( contradiction /* impossible chain */ )
                next
                  case tag1
                  step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                    case d_0_fst
                    by step( contradiction /* impossible chain */ )
                  next
                    case d_0_snd
                    by step( solve( (#vr.5, 0) ~~> (#vk.2, 0) ) )
                  qed
                qed
              qed
            next
              case coerce
              step( solve( !KD( (~k⊕~k1⊕r0⊕~r1.1⊕h((~k⊕~r1⊕r0))) ) ▶₀ #vk.1 ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.5, 0) ~~> (#vk.1, 0) ) )
                qed
              qed
            qed
          qed
        next
          case split_case_4
          step( solve( !KU( (x⊕~x.1) ) @ #vk.2 ) )
            case c_xor
            step( solve( !KU( ~x ) @ #vk.3 ) )
              case fresh
              step( solve( !KU( zero ) @ #vk.3 ) )
                case c_zero
                by step( solve( splitEqs(2) ) )
              next
                case coerce
                step( solve( !KD( zero ) ▶₀ #vk.3 ) )
                  case acceptreader
                  by step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                next
                  case initiatereader
                  by step( contradiction /* impossible chain */ )
                next
                  case tag1
                  step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                    case d_0_fst
                    by step( contradiction /* impossible chain */ )
                  next
                    case d_0_snd
                    by step( solve( (#vr.5, 0) ~~> (#vk.3, 0) ) )
                  qed
                qed
              qed
            next
              case tag1_case_1
              step( solve( !KU( zero ) @ #vk.3 ) )
                case c_zero
                by step( solve( splitEqs(2) ) )
              next
                case coerce
                step( solve( !KD( zero ) ▶₀ #vk.3 ) )
                  case acceptreader
                  by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                next
                  case initiatereader
                  by step( contradiction /* impossible chain */ )
                next
                  case tag1
                  step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                    case d_0_fst
                    by step( contradiction /* impossible chain */ )
                  next
                    case d_0_snd
                    by step( solve( (#vr.7, 0) ~~> (#vk.3, 0) ) )
                  qed
                qed
              qed
            next
              case tag1_case_2
              step( solve( !KU( zero ) @ #vk.3 ) )
                case c_zero
                by step( solve( splitEqs(2) ) )
              next
                case coerce
                step( solve( !KD( zero ) ▶₀ #vk.3 ) )
                  case acceptreader
                  by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                next
                  case initiatereader
                  by step( contradiction /* impossible chain */ )
                next
                  case tag1
                  step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                    case d_0_fst
                    by step( contradiction /* impossible chain */ )
                  next
                    case d_0_snd
                    by step( solve( (#vr.6, 0) ~~> (#vk.3, 0) ) )
                  qed
                qed
              qed
            qed
          next
            case coerce
            step( solve( !KD( (x⊕~x.1) ) ▶₀ #vk.1 ) )
              case acceptreader
              by step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
            next
              case initiatereader
              by step( contradiction /* impossible chain */ )
            next
              case tag1
              step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                case d_0_fst
                by step( contradiction /* impossible chain */ )
              next
                case d_0_snd
                by step( solve( (#vr.5, 0) ~~> (#vk.1, 0) ) )
              qed
            qed
          qed
        next
          case split_case_5
          step( solve( !KU( (~k⊕~r1) ) @ #vk.1 ) )
            case c_xor
            by step( contradiction /* cyclic */ )
          next
            case coerce
            step( solve( !KD( (~k⊕~r1) ) ▶₀ #vk.1 ) )
              case acceptreader
              by step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
            next
              case initiatereader
              by step( contradiction /* impossible chain */ )
            next
              case tag1
              step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                case d_0_fst
                by step( contradiction /* impossible chain */ )
              next
                case d_0_snd
                by step( solve( (#vr.5, 0) ~~> (#vk.1, 0) ) )
              qed
            qed
          qed
        next
          case split_case_6
          step( solve( !KU( (~r1⊕x) ) @ #vk.1 ) )
            case c_xor
            by step( contradiction /* cyclic */ )
          next
            case coerce
            step( solve( !KD( (~r1⊕x) ) ▶₀ #vk.1 ) )
              case acceptreader
              by step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
            next
              case initiatereader
              by step( contradiction /* impossible chain */ )
            next
              case tag1
              step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                case d_0_fst
                by step( contradiction /* impossible chain */ )
              next
                case d_0_snd
                by step( solve( (#vr.5, 0) ~~> (#vk.1, 0) ) )
              qed
            qed
          qed
        next
          case split_case_7
          step( solve( !KU( (~k⊕~r1⊕z) ) @ #vk.1 ) )
            case c_xor_case_1
            by step( contradiction /* cyclic */ )
          next
            case c_xor_case_2
            by step( solve( !KU( ~k ) @ #vk.4 ) )
          next
            case c_xor_case_3
            step( solve( !KU( (~k⊕~r1) ) @ #vk.4 ) )
              case c_xor
              by step( contradiction /* cyclic */ )
            next
              case coerce
              step( solve( !KD( (~k⊕~r1) ) ▶₀ #vk.2 ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.5, 0) ~~> (#vk.2, 0) ) )
                qed
              qed
            qed
          next
            case coerce
            step( solve( !KD( (~k⊕~r1⊕z) ) ▶₀ #vk.1 ) )
              case acceptreader
              by step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
            next
              case initiatereader
              by step( contradiction /* impossible chain */ )
            next
              case tag1
              step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                case d_0_fst
                by step( contradiction /* impossible chain */ )
              next
                case d_0_snd
                by step( solve( (#vr.5, 0) ~~> (#vk.1, 0) ) )
              qed
            qed
          qed
        next
          case split_case_8
          step( solve( !KU( (~k⊕x) ) @ #vk.1 ) )
            case c_xor
            by step( solve( !KU( ~k ) @ #vk.4 ) )
          next
            case coerce
            step( solve( !KD( (~k⊕x) ) ▶₀ #vk.1 ) )
              case acceptreader
              by step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
            next
              case initiatereader
              by step( contradiction /* impossible chain */ )
            next
              case tag1
              step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                case d_0_fst
                by step( contradiction /* impossible chain */ )
              next
                case d_0_snd
                by step( solve( (#vr.5, 0) ~~> (#vk.1, 0) ) )
              qed
            qed
          qed
        qed
      next
        case tag1_case_2
        step( solve( splitEqs(0) ) )
          case split_case_1
          by step( solve( !KU( ~k ) @ #vk.1 ) )
        next
          case split_case_2
          by step( contradiction /* cyclic */ )
        next
          case split_case_3
          step( solve( splitEqs(2) ) )
            case split_case_1
            step( solve( !KU( h((~k⊕~r0⊕~r1)) ) @ #vk.2 ) )
              case c_h
              step( solve( !KU( (~k⊕~r0⊕~r1) ) @ #vk.3 ) )
                case c_xor_case_1
                by step( contradiction /* cyclic */ )
              next
                case c_xor_case_2
                by step( solve( !KU( ~k ) @ #vk.5 ) )
              next
                case c_xor_case_3
                by step( contradiction /* cyclic */ )
              next
                case coerce
                step( solve( !KD( (~k⊕~r0⊕~r1) ) ▶₀ #vk.2 ) )
                  case acceptreader
                  by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                next
                  case initiatereader
                  by step( contradiction /* impossible chain */ )
                next
                  case tag1
                  step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                    case d_0_fst
                    by step( contradiction /* impossible chain */ )
                  next
                    case d_0_snd
                    by step( solve( (#vr.5, 0) ~~> (#vk.2, 0) ) )
                  qed
                qed
              qed
            next
              case tag1_case_1
              step( solve( !KU( ~r0 ) @ #vk.2 ) )
                case tag1
                step( solve( splitEqs(5) ) )
                  case split
                  step( solve( !KU( (~k⊕~k1⊕~r0⊕~r1⊕~r1.1) ) @ #vk.3 ) )
                    case c_xor_case_01
                    by step( contradiction /* cyclic */ )
                  next
                    case c_xor_case_02
                    by step( contradiction /* cyclic */ )
                  next
                    case c_xor_case_03
                    step( solve( !KU( (~k⊕~k1⊕~r1.1) ) @ #vk.4 ) )
                      case c_xor_case_1
                      by step( solve( !KU( ~k1 ) @ #vk.7 ) )
                    next
                      case c_xor_case_2
                      by step( solve( !KU( ~k ) @ #vk.7 ) )
                    next
                      case c_xor_case_3
                      by step( contradiction /* cyclic */ )
                    next
                      case coerce
                      step( solve( !KD( (~k⊕~k1⊕~r1.1) ) ▶₀ #vk.4 ) )
                        case acceptreader
                        by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                      next
                        case initiatereader
                        by step( contradiction /* impossible chain */ )
                      next
                        case tag1
                        step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                          case d_0_fst
                          by step( contradiction /* impossible chain */ )
                        next
                          case d_0_snd
                          by step( solve( (#vr.8, 0) ~~> (#vk.4, 0) ) )
                        qed
                      qed
                    qed
                  next
                    case c_xor_case_04
                    by step( solve( !KU( ~k1 ) @ #vk.5 ) )
                  next
                    case c_xor_case_05
                    step( solve( !KU( (~k⊕~r0⊕~r1.1) ) @ #vk.4 ) )
                      case c_xor_case_1
                      by step( contradiction /* cyclic */ )
                    next
                      case c_xor_case_2
                      by step( solve( !KU( ~k ) @ #vk.7 ) )
                    next
                      case c_xor_case_3
                      by step( contradiction /* cyclic */ )
                    next
                      case coerce
                      step( solve( !KD( (~k⊕~r0⊕~r1.1) ) ▶₀ #vk.4 ) )
                        case acceptreader
                        by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                      next
                        case initiatereader
                        by step( contradiction /* impossible chain */ )
                      next
                        case tag1
                        step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                          case d_0_fst
                          by step( contradiction /* impossible chain */ )
                        next
                          case d_0_snd
                          by step( solve( (#vr.8, 0) ~~> (#vk.4, 0) ) )
                        qed
                      qed
                    qed
                  next
                    case c_xor_case_06
                    step( solve( !KU( (~k⊕~r1⊕~r1.1) ) @ #vk.4 ) )
                      case c_xor_case_1
                      by step( contradiction /* cyclic */ )
                    next
                      case c_xor_case_2
                      by step( solve( !KU( ~k ) @ #vk.7 ) )
                    next
                      case c_xor_case_3
                      by step( contradiction /* cyclic */ )
                    next
                      case coerce
                      step( solve( !KD( (~k⊕~r1⊕~r1.1) ) ▶₀ #vk.4 ) )
                        case acceptreader
                        by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                      next
                        case initiatereader
                        by step( contradiction /* impossible chain */ )
                      next
                        case tag1
                        step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                          case d_0_fst
                          by step( contradiction /* impossible chain */ )
                        next
                          case d_0_snd
                          by step( solve( (#vr.8, 0) ~~> (#vk.4, 0) ) )
                        qed
                      qed
                    qed
                  next
                    case c_xor_case_07
                    step( solve( !KU( (~k⊕~r1.1) ) @ #vk.4 ) )
                      case c_xor
                      by step( contradiction /* cyclic */ )
                    next
                      case coerce
                      step( solve( !KD( (~k⊕~r1.1) ) ▶₀ #vk.4 ) )
                        case acceptreader
                        by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                      next
                        case initiatereader
                        by step( contradiction /* impossible chain */ )
                      next
                        case tag1
                        step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                          case d_0_fst
                          by step( contradiction /* impossible chain */ )
                        next
                          case d_0_snd
                          by step( solve( (#vr.8, 0) ~~> (#vk.4, 0) ) )
                        qed
                      qed
                    qed
                  next
                    case c_xor_case_08
                    by step( solve( !KU( ~k ) @ #vk.5 ) )
                  next
                    case c_xor_case_09
                    step( solve( !KU( (~k1⊕~r0⊕~r1.1) ) @ #vk.4 ) )
                      case c_xor_case_1
                      by step( contradiction /* cyclic */ )
                    next
                      case c_xor_case_2
                      by step( solve( !KU( ~k1 ) @ #vk.7 ) )
                    next
                      case c_xor_case_3
                      by step( contradiction /* cyclic */ )
                    next
                      case coerce
                      step( solve( !KD( (~k1⊕~r0⊕~r1.1) ) ▶₀ #vk.4 ) )
                        case acceptreader
                        by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                      next
                        case initiatereader
                        by step( contradiction /* impossible chain */ )
                      next
                        case tag1
                        step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                          case d_0_fst
                          by step( contradiction /* impossible chain */ )
                        next
                          case d_0_snd
                          by step( solve( (#vr.8, 0) ~~> (#vk.4, 0) ) )
                        qed
                      qed
                    qed
                  next
                    case c_xor_case_10
                    step( solve( !KU( (~k1⊕~r1⊕~r1.1) ) @ #vk.4 ) )
                      case c_xor_case_1
                      by step( contradiction /* cyclic */ )
                    next
                      case c_xor_case_2
                      by step( solve( !KU( ~k1 ) @ #vk.7 ) )
                    next
                      case c_xor_case_3
                      by step( contradiction /* cyclic */ )
                    next
                      case coerce
                      step( solve( !KD( (~k1⊕~r1⊕~r1.1) ) ▶₀ #vk.4 ) )
                        case acceptreader
                        by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                      next
                        case initiatereader
                        by step( contradiction /* impossible chain */ )
                      next
                        case tag1
                        step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                          case d_0_fst
                          by step( contradiction /* impossible chain */ )
                        next
                          case d_0_snd
                          by step( solve( (#vr.8, 0) ~~> (#vk.4, 0) ) )
                        qed
                      qed
                    qed
                  next
                    case c_xor_case_11
                    step( solve( !KU( (~k1⊕~r1.1) ) @ #vk.4 ) )
                      case c_xor
                      by step( contradiction /* cyclic */ )
                    next
                      case coerce
                      step( solve( !KD( (~k1⊕~r1.1) ) ▶₀ #vk.4 ) )
                        case acceptreader
                        by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                      next
                        case initiatereader
                        by step( contradiction /* impossible chain */ )
                      next
                        case tag1
                        step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                          case d_0_fst
                          by step( contradiction /* impossible chain */ )
                        next
                          case d_0_snd
                          by step( solve( (#vr.8, 0) ~~> (#vk.4, 0) ) )
                        qed
                      qed
                    qed
                  next
                    case c_xor_case_12
                    step( solve( !KU( (~r0⊕~r1⊕~r1.1) ) @ #vk.4 ) )
                      case c_xor_case_1
                      by step( contradiction /* cyclic */ )
                    next
                      case c_xor_case_2
                      by step( contradiction /* cyclic */ )
                    next
                      case c_xor_case_3
                      by step( contradiction /* cyclic */ )
                    next
                      case coerce
                      step( solve( !KD( (~r0⊕~r1⊕~r1.1) ) ▶₀ #vk.4 ) )
                        case acceptreader
                        by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                      next
                        case initiatereader
                        by step( contradiction /* impossible chain */ )
                      next
                        case tag1
                        step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                          case d_0_fst
                          by step( contradiction /* impossible chain */ )
                        next
                          case d_0_snd
                          by step( solve( (#vr.8, 0) ~~> (#vk.4, 0) ) )
                        qed
                      qed
                    qed
                  next
                    case c_xor_case_13
                    step( solve( !KU( (~r0⊕~r1.1) ) @ #vk.4 ) )
                      case c_xor
                      by step( contradiction /* cyclic */ )
                    next
                      case coerce
                      step( solve( !KD( (~r0⊕~r1.1) ) ▶₀ #vk.4 ) )
                        case acceptreader
                        by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                      next
                        case initiatereader
                        by step( contradiction /* impossible chain */ )
                      next
                        case tag1
                        step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                          case d_0_fst
                          by step( contradiction /* impossible chain */ )
                        next
                          case d_0_snd
                          by step( solve( (#vr.8, 0) ~~> (#vk.4, 0) ) )
                        qed
                      qed
                    qed
                  next
                    case c_xor_case_14
                    step( solve( !KU( (~r1⊕~r1.1) ) @ #vk.4 ) )
                      case c_xor
                      by step( contradiction /* cyclic */ )
                    next
                      case coerce
                      step( solve( !KD( (~r1⊕~r1.1) ) ▶₀ #vk.4 ) )
                        case acceptreader
                        by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                      next
                        case initiatereader
                        by step( contradiction /* impossible chain */ )
                      next
                        case tag1
                        step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                          case d_0_fst
                          by step( contradiction /* impossible chain */ )
                        next
                          case d_0_snd
                          by step( solve( (#vr.8, 0) ~~> (#vk.4, 0) ) )
                        qed
                      qed
                    qed
                  next
                    case c_xor_case_15
                    by step( contradiction /* cyclic */ )
                  next
                    case coerce
                    step( solve( !KD( (~k⊕~k1⊕~r0⊕~r1⊕~r1.1) ) ▶₀ #vk.3 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.3, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.8, 0) ~~> (#vk.3, 0) ) )
                      qed
                    qed
                  qed
                qed
              qed
            next
              case tag1_case_2
              by step( contradiction /* cyclic */ )
            qed
          next
            case split_case_2
            step( solve( !KU( (r0⊕~r1.1⊕h((~k⊕~r1⊕r0))) ) @ #vk.2 ) )
              case c_xor_case_1
              by step( contradiction /* cyclic */ )
            next
              case c_xor_case_2
              step( solve( !KU( (~r1.1⊕h((~k⊕~r1⊕r0))) ) @ #vk.3 ) )
                case c_xor
                by step( contradiction /* cyclic */ )
              next
                case coerce
                step( solve( !KD( (~r1.1⊕h((~k⊕~r1⊕r0))) ) ▶₀ #vk.2 ) )
                  case acceptreader
                  by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                next
                  case initiatereader
                  by step( contradiction /* impossible chain */ )
                next
                  case tag1
                  step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                    case d_0_fst
                    by step( contradiction /* impossible chain */ )
                  next
                    case d_0_snd
                    by step( solve( (#vr.5, 0) ~~> (#vk.2, 0) ) )
                  qed
                qed
              qed
            next
              case c_xor_case_3
              step( solve( !KU( (r0⊕~r1.1) ) @ #vk.4 ) )
                case c_xor
                by step( contradiction /* cyclic */ )
              next
                case coerce
                step( solve( !KD( (r0⊕~r1.1) ) ▶₀ #vk.2 ) )
                  case acceptreader
                  by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                next
                  case initiatereader
                  by step( contradiction /* impossible chain */ )
                next
                  case tag1
                  step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                    case d_0_fst
                    by step( contradiction /* impossible chain */ )
                  next
                    case d_0_snd
                    by step( solve( (#vr.5, 0) ~~> (#vk.2, 0) ) )
                  qed
                qed
              qed
            next
              case coerce
              step( solve( !KD( (r0⊕~r1.1⊕h((~k⊕~r1⊕r0))) ) ▶₀ #vk.1 ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.5, 0) ~~> (#vk.1, 0) ) )
                qed
              qed
            qed
          next
            case split_case_3
            step( solve( !KU( (x⊕~r1.1) ) @ #vk.1 ) )
              case c_xor
              step( solve( !KU( (x⊕h((~k⊕~r1⊕x⊕~r1.1))) ) @ #vk.2 ) )
                case c_xor
                step( solve( !KU( h((~k⊕~r1⊕x⊕~r1.1)) ) @ #vk.5 ) )
                  case c_h
                  step( solve( !KU( (~k⊕~r1⊕x⊕~r1.1) ) @ #vk.6 ) )
                    case c_xor_case_1
                    step( solve( !KU( (~k⊕~r1⊕~r1.1) ) @ #vk.7 ) )
                      case c_xor_case_1
                      by step( contradiction /* cyclic */ )
                    next
                      case c_xor_case_2
                      by step( solve( !KU( ~k ) @ #vk.9 ) )
                    next
                      case c_xor_case_3
                      by step( contradiction /* cyclic */ )
                    next
                      case coerce
                      step( solve( !KD( (~k⊕~r1⊕~r1.1) ) ▶₀ #vk.5 ) )
                        case acceptreader
                        by step( solve( (#vl.1, 0) ~~> (#vk.5, 0) ) )
                      next
                        case initiatereader
                        by step( contradiction /* impossible chain */ )
                      next
                        case tag1
                        step( solve( (#vl.1, 0) ~~> (#vk.5, 0) ) )
                          case d_0_fst
                          by step( contradiction /* impossible chain */ )
                        next
                          case d_0_snd
                          by step( solve( (#vr.5, 0) ~~> (#vk.5, 0) ) )
                        qed
                      qed
                    qed
                  next
                    case c_xor_case_2
                    by step( contradiction /* cyclic */ )
                  next
                    case c_xor_case_3
                    step( solve( !KU( (~k⊕~r1.1) ) @ #vk.7 ) )
                      case c_xor
                      by step( contradiction /* cyclic */ )
                    next
                      case coerce
                      step( solve( !KD( (~k⊕~r1.1) ) ▶₀ #vk.5 ) )
                        case acceptreader
                        by step( solve( (#vl.1, 0) ~~> (#vk.5, 0) ) )
                      next
                        case initiatereader
                        by step( contradiction /* impossible chain */ )
                      next
                        case tag1
                        step( solve( (#vl.1, 0) ~~> (#vk.5, 0) ) )
                          case d_0_fst
                          by step( contradiction /* impossible chain */ )
                        next
                          case d_0_snd
                          by step( solve( (#vr.5, 0) ~~> (#vk.5, 0) ) )
                        qed
                      qed
                    qed
                  next
                    case c_xor_case_4
                    by step( solve( !KU( ~k ) @ #vk.8 ) )
                  next
                    case c_xor_case_5
                    step( solve( !KU( (~r1⊕~r1.1) ) @ #vk.7 ) )
                      case c_xor
                      by step( contradiction /* cyclic */ )
                    next
                      case coerce
                      step( solve( !KD( (~r1⊕~r1.1) ) ▶₀ #vk.5 ) )
                        case acceptreader
                        by step( solve( (#vl.1, 0) ~~> (#vk.5, 0) ) )
                      next
                        case initiatereader
                        by step( contradiction /* impossible chain */ )
                      next
                        case tag1
                        step( solve( (#vl.1, 0) ~~> (#vk.5, 0) ) )
                          case d_0_fst
                          by step( contradiction /* impossible chain */ )
                        next
                          case d_0_snd
                          by step( solve( (#vr.5, 0) ~~> (#vk.5, 0) ) )
                        qed
                      qed
                    qed
                  next
                    case c_xor_case_6
                    by step( contradiction /* cyclic */ )
                  next
                    case c_xor_case_7
                    by step( contradiction /* cyclic */ )
                  next
                    case coerce
                    step( solve( !KD( (~k⊕~r1⊕x⊕~r1.1) ) ▶₀ #vk.4 ) )
                      case acceptreader
                      by step( solve( (#vl.1, 0) ~~> (#vk.4, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.1, 0) ~~> (#vk.4, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.5, 0) ~~> (#vk.4, 0) ) )
                      qed
                    qed
                  qed
                next
                  case tag1_case_1
                  step( solve( !KU( (x.1⊕x.2) ) @ #vk.6 ) )
                    case c_xor
                    step( solve( !KU( ~r1.1 ) @ #vk.5 ) )
                      case tag1
                      step( solve( splitEqs(5) ) )
                        case split_case_1
                        by step( solve( !KU( ~k1 ) @ #vk.6 ) )
                      next
                        case split_case_2
                        by step( solve( !KU( ~k ) @ #vk.8 ) )
                      next
                        case split_case_3
                        by step( solve( !KU( ~k ) @ #vk.8 ) )
                      next
                        case split_case_4
                        step( solve( !KU( (~k1⊕x) ) @ #vk.6 ) )
                          case c_xor
                          by step( solve( !KU( ~k1 ) @ #vk.9 ) )
                        next
                          case coerce
                          step( solve( !KD( (~k1⊕x) ) ▶₀ #vk.6 ) )
                            case acceptreader
                            by step( solve( (#vl.2, 0) ~~> (#vk.6, 0) ) )
                          next
                            case initiatereader
                            by step( contradiction /* impossible chain */ )
                          next
                            case tag1
                            step( solve( (#vl.2, 0) ~~> (#vk.6, 0) ) )
                              case d_0_fst
                              by step( contradiction /* impossible chain */ )
                            next
                              case d_0_snd
                              by step( solve( (#vr.8, 0) ~~> (#vk.6, 0) ) )
                            qed
                          qed
                        qed
                      next
                        case split_case_5
                        step( solve( !KU( (~k1⊕x⊕~r1.2) ) @ #vk.6 ) )
                          case c_xor_case_1
                          step( solve( !KU( (~k⊕~r1⊕~r1.1) ) @ #vk.7 ) )
                            case c_xor_case_1
                            by step( contradiction /* cyclic */ )
                          next
                            case c_xor_case_2
                            by step( solve( !KU( ~k ) @ #vk.11 ) )
                          next
                            case c_xor_case_3
                            by step( contradiction /* cyclic */ )
                          next
                            case coerce
                            step( solve( !KD( (~k⊕~r1⊕~r1.1) ) ▶₀ #vk.7 ) )
                              case acceptreader
                              by step( solve( (#vl.2, 0) ~~> (#vk.7, 0) ) )
                            next
                              case initiatereader
                              by step( contradiction /* impossible chain */ )
                            next
                              case tag1
                              step( solve( (#vl.2, 0) ~~> (#vk.7, 0) ) )
                                case d_0_fst
                                by step( contradiction /* impossible chain */ )
                              next
                                case d_0_snd
                                by step( solve( (#vr.8, 0) ~~> (#vk.7, 0) ) )
                              qed
                            qed
                          qed
                        next
                          case c_xor_case_2
                          by step( solve( !KU( ~k1 ) @ #vk.10 ) )
                        next
                          case c_xor_case_3
                          step( solve( !KU( (~k⊕~r1⊕~r1.1) ) @ #vk.7 ) )
                            case c_xor_case_1
                            by step( contradiction /* cyclic */ )
                          next
                            case c_xor_case_2
                            by step( solve( !KU( ~k ) @ #vk.12 ) )
                          next
                            case c_xor_case_3
                            by step( contradiction /* cyclic */ )
                          next
                            case coerce
                            step( solve( !KD( (~k⊕~r1⊕~r1.1) ) ▶₀ #vk.7 ) )
                              case acceptreader
                              by step( solve( (#vl.2, 0) ~~> (#vk.7, 0) ) )
                            next
                              case initiatereader
                              by step( contradiction /* impossible chain */ )
                            next
                              case tag1
                              step( solve( (#vl.2, 0) ~~> (#vk.7, 0) ) )
                                case d_0_fst
                                by step( contradiction /* impossible chain */ )
                              next
                                case d_0_snd
                                by step( solve( (#vr.8, 0) ~~> (#vk.7, 0) ) )
                              qed
                            qed
                          qed
                        next
                          case coerce
                          step( solve( !KD( (~k1⊕x⊕~r1.2) ) ▶₀ #vk.6 ) )
                            case acceptreader
                            by step( solve( (#vl.2, 0) ~~> (#vk.6, 0) ) )
                          next
                            case initiatereader
                            by step( contradiction /* impossible chain */ )
                          next
                            case tag1
                            step( solve( (#vl.2, 0) ~~> (#vk.6, 0) ) )
                              case d_0_fst
                              by step( contradiction /* impossible chain */ )
                            next
                              case d_0_snd
                              by step( solve( (#vr.8, 0) ~~> (#vk.6, 0) ) )
                            qed
                          qed
                        qed
                      next
                        case split_case_6
                        by step( solve( !KU( ~k ) @ #vk.8 ) )
                      next
                        case split_case_7
                        step( solve( !KU( (x⊕~r1.2) ) @ #vk.6 ) )
                          case c_xor
                          step( solve( !KU( (~k⊕~k1⊕~r1⊕~r1.1) ) @ #vk.7 ) )
                            case c_xor_case_1
                            by step( contradiction /* cyclic */ )
                          next
                            case c_xor_case_2
                            by step( solve( !KU( ~k1 ) @ #vk.11 ) )
                          next
                            case c_xor_case_3
                            step( solve( !KU( (~k⊕~r1.1) ) @ #vk.10 ) )
                              case c_xor
                              by step( contradiction /* cyclic */ )
                            next
                              case coerce
                              step( solve( !KD( (~k⊕~r1.1) ) ▶₀ #vk.8 ) )
                                case acceptreader
                                by step( solve( (#vl.2, 0) ~~> (#vk.8, 0) ) )
                              next
                                case initiatereader
                                by step( contradiction /* impossible chain */ )
                              next
                                case tag1
                                step( solve( (#vl.2, 0) ~~> (#vk.8, 0) ) )
                                  case d_0_fst
                                  by step( contradiction /* impossible chain */ )
                                next
                                  case d_0_snd
                                  by step( solve( (#vr.8, 0) ~~> (#vk.8, 0) ) )
                                qed
                              qed
                            qed
                          next
                            case c_xor_case_4
                            by step( solve( !KU( ~k ) @ #vk.11 ) )
                          next
                            case c_xor_case_5
                            step( solve( !KU( (~k1⊕~r1.1) ) @ #vk.10 ) )
                              case c_xor
                              by step( contradiction /* cyclic */ )
                            next
                              case coerce
                              step( solve( !KD( (~k1⊕~r1.1) ) ▶₀ #vk.8 ) )
                                case acceptreader
                                by step( solve( (#vl.2, 0) ~~> (#vk.8, 0) ) )
                              next
                                case initiatereader
                                by step( contradiction /* impossible chain */ )
                              next
                                case tag1
                                step( solve( (#vl.2, 0) ~~> (#vk.8, 0) ) )
                                  case d_0_fst
                                  by step( contradiction /* impossible chain */ )
                                next
                                  case d_0_snd
                                  by step( solve( (#vr.8, 0) ~~> (#vk.8, 0) ) )
                                qed
                              qed
                            qed
                          next
                            case c_xor_case_6
                            step( solve( !KU( (~r1⊕~r1.1) ) @ #vk.10 ) )
                              case c_xor
                              by step( contradiction /* cyclic */ )
                            next
                              case coerce
                              step( solve( !KD( (~r1⊕~r1.1) ) ▶₀ #vk.8 ) )
                                case acceptreader
                                by step( solve( (#vl.2, 0) ~~> (#vk.8, 0) ) )
                              next
                                case initiatereader
                                by step( contradiction /* impossible chain */ )
                              next
                                case tag1
                                step( solve( (#vl.2, 0) ~~> (#vk.8, 0) ) )
                                  case d_0_fst
                                  by step( contradiction /* impossible chain */ )
                                next
                                  case d_0_snd
                                  by step( solve( (#vr.8, 0) ~~> (#vk.8, 0) ) )
                                qed
                              qed
                            qed
                          next
                            case c_xor_case_7
                            by step( contradiction /* cyclic */ )
                          next
                            case coerce
                            step( solve( !KD( (~k⊕~k1⊕~r1⊕~r1.1) ) ▶₀ #vk.7 ) )
                              case acceptreader
                              by step( solve( (#vl.2, 0) ~~> (#vk.7, 0) ) )
                            next
                              case initiatereader
                              by step( contradiction /* impossible chain */ )
                            next
                              case tag1
                              step( solve( (#vl.2, 0) ~~> (#vk.7, 0) ) )
                                case d_0_fst
                                by step( contradiction /* impossible chain */ )
                              next
                                case d_0_snd
                                by step( solve( (#vr.8, 0) ~~> (#vk.7, 0) ) )
                              qed
                            qed
                          qed
                        next
                          case coerce
                          step( solve( !KD( (x⊕~r1.2) ) ▶₀ #vk.6 ) )
                            case acceptreader
                            by step( solve( (#vl.2, 0) ~~> (#vk.6, 0) ) )
                          next
                            case initiatereader
                            by step( contradiction /* impossible chain */ )
                          next
                            case tag1
                            step( solve( (#vl.2, 0) ~~> (#vk.6, 0) ) )
                              case d_0_fst
                              by step( contradiction /* impossible chain */ )
                            next
                              case d_0_snd
                              by step( solve( (#vr.8, 0) ~~> (#vk.6, 0) ) )
                            qed
                          qed
                        qed
                      qed
                    qed
                  next
                    case coerce
                    step( solve( !KD( (x.1⊕x.2) ) ▶₀ #vk.4 ) )
                      case acceptreader
                      by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                    next
                      case initiatereader
                      by step( contradiction /* impossible chain */ )
                    next
                      case tag1
                      step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                        case d_0_fst
                        by step( contradiction /* impossible chain */ )
                      next
                        case d_0_snd
                        by step( solve( (#vr.7, 0) ~~> (#vk.4, 0) ) )
                      qed
                    qed
                  qed
                next
                  case tag1_case_2
                  by step( contradiction /* cyclic */ )
                qed
              next
                case coerce
                step( solve( !KD( (x⊕h((~k⊕~r1⊕x⊕~r1.1))) ) ▶₀ #vk.2 ) )
                  case acceptreader
                  by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                next
                  case initiatereader
                  by step( contradiction /* impossible chain */ )
                next
                  case tag1
                  step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                    case d_0_fst
                    by step( contradiction /* impossible chain */ )
                  next
                    case d_0_snd
                    by step( solve( (#vr.5, 0) ~~> (#vk.2, 0) ) )
                  qed
                qed
              qed
            next
              case coerce
              step( solve( !KD( (x⊕~r1.1) ) ▶₀ #vk.1 ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.5, 0) ~~> (#vk.1, 0) ) )
                qed
              qed
            qed
          qed
        next
          case split_case_4
          step( solve( !KU( (~r1.1⊕h((~k⊕~r1))) ) @ #vk.2 ) )
            case c_xor
            by step( contradiction /* cyclic */ )
          next
            case coerce
            step( solve( !KD( (~r1.1⊕h((~k⊕~r1))) ) ▶₀ #vk.1 ) )
              case acceptreader
              by step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
            next
              case initiatereader
              by step( contradiction /* impossible chain */ )
            next
              case tag1
              step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                case d_0_fst
                by step( contradiction /* impossible chain */ )
              next
                case d_0_snd
                by step( solve( (#vr.5, 0) ~~> (#vk.1, 0) ) )
              qed
            qed
          qed
        next
          case split_case_5
          step( solve( !KU( (~k⊕~r1) ) @ #vk.1 ) )
            case c_xor
            by step( contradiction /* cyclic */ )
          next
            case coerce
            step( solve( !KD( (~k⊕~r1) ) ▶₀ #vk.1 ) )
              case acceptreader
              by step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
            next
              case initiatereader
              by step( contradiction /* impossible chain */ )
            next
              case tag1
              step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                case d_0_fst
                by step( contradiction /* impossible chain */ )
              next
                case d_0_snd
                by step( solve( (#vr.5, 0) ~~> (#vk.1, 0) ) )
              qed
            qed
          qed
        next
          case split_case_6
          step( solve( !KU( (~r1⊕x) ) @ #vk.1 ) )
            case c_xor
            by step( contradiction /* cyclic */ )
          next
            case coerce
            step( solve( !KD( (~r1⊕x) ) ▶₀ #vk.1 ) )
              case acceptreader
              by step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
            next
              case initiatereader
              by step( contradiction /* impossible chain */ )
            next
              case tag1
              step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                case d_0_fst
                by step( contradiction /* impossible chain */ )
              next
                case d_0_snd
                by step( solve( (#vr.5, 0) ~~> (#vk.1, 0) ) )
              qed
            qed
          qed
        next
          case split_case_7
          step( solve( !KU( (~k⊕~r1⊕z) ) @ #vk.1 ) )
            case c_xor_case_1
            by step( contradiction /* cyclic */ )
          next
            case c_xor_case_2
            by step( solve( !KU( ~k ) @ #vk.4 ) )
          next
            case c_xor_case_3
            step( solve( !KU( (~x⊕x.1⊕x.2) ) @ #vk.2 ) )
              case c_xor_case_1
              step( solve( !KU( (~k⊕~r1) ) @ #vk.4 ) )
                case c_xor
                by step( contradiction /* cyclic */ )
              next
                case coerce
                step( solve( !KD( (~k⊕~r1) ) ▶₀ #vk.3 ) )
                  case acceptreader
                  by step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                next
                  case initiatereader
                  by step( contradiction /* impossible chain */ )
                next
                  case tag1
                  step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                    case d_0_fst
                    by step( contradiction /* impossible chain */ )
                  next
                    case d_0_snd
                    by step( solve( (#vr.5, 0) ~~> (#vk.3, 0) ) )
                  qed
                qed
              qed
            next
              case c_xor_case_2
              step( solve( !KU( ~x.2 ) @ #vk.6 ) )
                case fresh
                step( solve( !KU( (~k⊕~r1) ) @ #vk.5 ) )
                  case c_xor
                  by step( contradiction /* cyclic */ )
                next
                  case coerce
                  step( solve( !KD( (~k⊕~r1) ) ▶₀ #vk.4 ) )
                    case acceptreader
                    by step( solve( (#vl.1, 0) ~~> (#vk.4, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.1, 0) ~~> (#vk.4, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.5, 0) ~~> (#vk.4, 0) ) )
                    qed
                  qed
                qed
              next
                case tag1_case_1
                step( solve( !KU( (~k⊕~r1) ) @ #vk.5 ) )
                  case c_xor
                  by step( contradiction /* cyclic */ )
                next
                  case coerce
                  step( solve( !KD( (~k⊕~r1) ) ▶₀ #vk.4 ) )
                    case acceptreader
                    by step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                  next
                    case initiatereader
                    by step( contradiction /* impossible chain */ )
                  next
                    case tag1
                    step( solve( (#vl.2, 0) ~~> (#vk.4, 0) ) )
                      case d_0_fst
                      by step( contradiction /* impossible chain */ )
                    next
                      case d_0_snd
                      by step( solve( (#vr.7, 0) ~~> (#vk.4, 0) ) )
                    qed
                  qed
                qed
              next
                case tag1_case_2
                by step( contradiction /* cyclic */ )
              qed
            next
              case c_xor_case_3
              step( solve( !KU( (~k⊕~r1) ) @ #vk.4 ) )
                case c_xor
                by step( contradiction /* cyclic */ )
              next
                case coerce
                step( solve( !KD( (~k⊕~r1) ) ▶₀ #vk.3 ) )
                  case acceptreader
                  by step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                next
                  case initiatereader
                  by step( contradiction /* impossible chain */ )
                next
                  case tag1
                  step( solve( (#vl.1, 0) ~~> (#vk.3, 0) ) )
                    case d_0_fst
                    by step( contradiction /* impossible chain */ )
                  next
                    case d_0_snd
                    by step( solve( (#vr.5, 0) ~~> (#vk.3, 0) ) )
                  qed
                qed
              qed
            next
              case coerce
              step( solve( !KD( (~x⊕x.1⊕x.2) ) ▶₀ #vk.2 ) )
                case acceptreader
                by step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
              next
                case initiatereader
                by step( contradiction /* impossible chain */ )
              next
                case tag1
                step( solve( (#vl.1, 0) ~~> (#vk.2, 0) ) )
                  case d_0_fst
                  by step( contradiction /* impossible chain */ )
                next
                  case d_0_snd
                  by step( solve( (#vr.5, 0) ~~> (#vk.2, 0) ) )
                qed
              qed
            qed
          next
            case coerce
            step( solve( !KD( (~k⊕~r1⊕z) ) ▶₀ #vk.1 ) )
              case acceptreader
              by step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
            next
              case initiatereader
              by step( contradiction /* impossible chain */ )
            next
              case tag1
              step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                case d_0_fst
                by step( contradiction /* impossible chain */ )
              next
                case d_0_snd
                by step( solve( (#vr.5, 0) ~~> (#vk.1, 0) ) )
              qed
            qed
          qed
        next
          case split_case_8
          step( solve( !KU( (~k⊕x) ) @ #vk.1 ) )
            case c_xor
            by step( solve( !KU( ~k ) @ #vk.4 ) )
          next
            case coerce
            step( solve( !KD( (~k⊕x) ) ▶₀ #vk.1 ) )
              case acceptreader
              by step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
            next
              case initiatereader
              by step( contradiction /* impossible chain */ )
            next
              case tag1
              step( solve( (#vl.1, 0) ~~> (#vk.1, 0) ) )
                case d_0_fst
                by step( contradiction /* impossible chain */ )
              next
                case d_0_snd
                by step( solve( (#vr.5, 0) ~~> (#vk.1, 0) ) )
              qed
            qed
          qed
        qed
      next
        case tag1_case_3
        by step( solve( splitEqs(0) ) )
      qed
    qed
  qed
next
  case Rule_initiatereader
  backward-search
    case LHS
    step( simplify )
    by step( solve( ReaderRun( ~k, phase ) ▶₀ #i ) )
  next
    case RHS
    step( simplify )
    by step( solve( ReaderRun( ~k, phase ) ▶₀ #i ) )
  qed
next
  case Rule_setup
  backward-search
    case LHS
    step( simplify )
    MIRRORED
  next
    case RHS
    step( simplify )
    MIRRORED
  qed
next
  case Rule_tag1
  backward-search
    case LHS
    step( simplify )
    step( solve( TagRun( ~k, phase ) ▶₀ #i ) )
      case setup_case_1
      step( solve( splitEqs(0) ) )
        case split_case_1
        by step( solve( !KU( ~k ) @ #vk ) )
      next
        case split_case_2
        by step( contradiction /* cyclic */ )
      next
        case split_case_3
        step( solve( !KU( zero ) @ #vk ) )
          case c_zero
          MIRRORED
        next
          case coerce
          step( solve( !KD( zero ) ▶₀ #vk ) )
            case acceptreader
            by step( solve( (#vl, 0) ~~> (#vk, 0) ) )
          next
            case initiatereader
            by step( contradiction /* impossible chain */ )
          next
            case tag1
            step( solve( (#vl, 0) ~~> (#vk, 0) ) )
              case d_0_fst
              by step( contradiction /* impossible chain */ )
            next
              case d_0_snd
              by step( solve( (#vr.2, 0) ~~> (#vk, 0) ) )
            qed
          qed
        qed
      next
        case split_case_4
        step( solve( !KU( (~k⊕~r1) ) @ #vk ) )
          case c_xor
          by step( contradiction /* cyclic */ )
        next
          case coerce
          step( solve( !KD( (~k⊕~r1) ) ▶₀ #vk ) )
            case acceptreader
            by step( solve( (#vl, 0) ~~> (#vk, 0) ) )
          next
            case initiatereader
            by step( contradiction /* impossible chain */ )
          next
            case tag1
            step( solve( (#vl, 0) ~~> (#vk, 0) ) )
              case d_0_fst
              by step( contradiction /* impossible chain */ )
            next
              case d_0_snd
              by step( solve( (#vr.2, 0) ~~> (#vk, 0) ) )
            qed
          qed
        qed
      next
        case split_case_5
        MIRRORED
      next
        case split_case_6
        step( solve( !KU( (~k⊕~r1⊕z) ) @ #vk ) )
          case c_xor_case_1
          by step( contradiction /* cyclic */ )
        next
          case c_xor_case_2
          by step( solve( !KU( ~k ) @ #vk.2 ) )
        next
          case c_xor_case_3
          step( solve( !KU( (~k⊕~r1) ) @ #vk.2 ) )
            case c_xor
            by step( contradiction /* cyclic */ )
          next
            case coerce
            step( solve( !KD( (~k⊕~r1) ) ▶₀ #vk.1 ) )
              case acceptreader
              by step( solve( (#vl, 0) ~~> (#vk.1, 0) ) )
            next
              case initiatereader
              by step( contradiction /* impossible chain */ )
            next
              case tag1
              step( solve( (#vl, 0) ~~> (#vk.1, 0) ) )
                case d_0_fst
                by step( contradiction /* impossible chain */ )
              next
                case d_0_snd
                by step( solve( (#vr.2, 0) ~~> (#vk.1, 0) ) )
              qed
            qed
          qed
        next
          case coerce
          step( solve( !KD( (~k⊕~r1⊕z) ) ▶₀ #vk ) )
            case acceptreader
            by step( solve( (#vl, 0) ~~> (#vk, 0) ) )
          next
            case initiatereader
            by step( contradiction /* impossible chain */ )
          next
            case tag1
            step( solve( (#vl, 0) ~~> (#vk, 0) ) )
              case d_0_fst
              by step( contradiction /* impossible chain */ )
            next
              case d_0_snd
              by step( solve( (#vr.2, 0) ~~> (#vk, 0) ) )
            qed
          qed
        qed
      next
        case split_case_7
        step( solve( !KU( (~r1⊕x) ) @ #vk ) )
          case c_xor
          by step( contradiction /* cyclic */ )
        next
          case coerce
          step( solve( !KD( (~r1⊕x) ) ▶₀ #vk ) )
            case acceptreader
            by step( solve( (#vl, 0) ~~> (#vk, 0) ) )
          next
            case initiatereader
            by step( contradiction /* impossible chain */ )
          next
            case tag1
            step( solve( (#vl, 0) ~~> (#vk, 0) ) )
              case d_0_fst
              by step( contradiction /* impossible chain */ )
            next
              case d_0_snd
              by step( solve( (#vr.2, 0) ~~> (#vk, 0) ) )
            qed
          qed
        qed
      next
        case split_case_8
        step( solve( !KU( (~k⊕x) ) @ #vk ) )
          case c_xor
          by step( solve( !KU( ~k ) @ #vk.2 ) )
        next
          case coerce
          step( solve( !KD( (~k⊕x) ) ▶₀ #vk ) )
            case acceptreader
            by step( solve( (#vl, 0) ~~> (#vk, 0) ) )
          next
            case initiatereader
            by step( contradiction /* impossible chain */ )
          next
            case tag1
            step( solve( (#vl, 0) ~~> (#vk, 0) ) )
              case d_0_fst
              by step( contradiction /* impossible chain */ )
            next
              case d_0_snd
              by step( solve( (#vr.2, 0) ~~> (#vk, 0) ) )
            qed
          qed
        qed
      qed
    next
      case setup_case_2
      step( solve( splitEqs(0) ) )
        case split_case_1
        by step( solve( !KU( ~k ) @ #vk ) )
      next
        case split_case_2
        by step( contradiction /* cyclic */ )
      next
        case split_case_3
        step( solve( !KU( zero ) @ #vk ) )
          case c_zero
          MIRRORED
        next
          case coerce
          step( solve( !KD( zero ) ▶₀ #vk ) )
            case acceptreader
            by step( solve( (#vl, 0) ~~> (#vk, 0) ) )
          next
            case initiatereader
            by step( contradiction /* impossible chain */ )
          next
            case tag1
            step( solve( (#vl, 0) ~~> (#vk, 0) ) )
              case d_0_fst
              by step( contradiction /* impossible chain */ )
            next
              case d_0_snd
              by step( solve( (#vr.2, 0) ~~> (#vk, 0) ) )
            qed
          qed
        qed
      next
        case split_case_4
        step( solve( !KU( (~k⊕~r1) ) @ #vk ) )
          case c_xor
          by step( contradiction /* cyclic */ )
        next
          case coerce
          step( solve( !KD( (~k⊕~r1) ) ▶₀ #vk ) )
            case acceptreader
            by step( solve( (#vl, 0) ~~> (#vk, 0) ) )
          next
            case initiatereader
            by step( contradiction /* impossible chain */ )
          next
            case tag1
            step( solve( (#vl, 0) ~~> (#vk, 0) ) )
              case d_0_fst
              by step( contradiction /* impossible chain */ )
            next
              case d_0_snd
              by step( solve( (#vr.2, 0) ~~> (#vk, 0) ) )
            qed
          qed
        qed
      next
        case split_case_5
        MIRRORED
      next
        case split_case_6
        step( solve( !KU( (~k⊕~r1⊕z) ) @ #vk ) )
          case c_xor_case_1
          by step( contradiction /* cyclic */ )
        next
          case c_xor_case_2
          by step( solve( !KU( ~k ) @ #vk.2 ) )
        next
          case c_xor_case_3
          step( solve( !KU( (~k⊕~r1) ) @ #vk.2 ) )
            case c_xor
            by step( contradiction /* cyclic */ )
          next
            case coerce
            step( solve( !KD( (~k⊕~r1) ) ▶₀ #vk.1 ) )
              case acceptreader
              by step( solve( (#vl, 0) ~~> (#vk.1, 0) ) )
            next
              case initiatereader
              by step( contradiction /* impossible chain */ )
            next
              case tag1
              step( solve( (#vl, 0) ~~> (#vk.1, 0) ) )
                case d_0_fst
                by step( contradiction /* impossible chain */ )
              next
                case d_0_snd
                by step( solve( (#vr.2, 0) ~~> (#vk.1, 0) ) )
              qed
            qed
          qed
        next
          case coerce
          step( solve( !KD( (~k⊕~r1⊕z) ) ▶₀ #vk ) )
            case acceptreader
            by step( solve( (#vl, 0) ~~> (#vk, 0) ) )
          next
            case initiatereader
            by step( contradiction /* impossible chain */ )
          next
            case tag1
            step( solve( (#vl, 0) ~~> (#vk, 0) ) )
              case d_0_fst
              by step( contradiction /* impossible chain */ )
            next
              case d_0_snd
              by step( solve( (#vr.2, 0) ~~> (#vk, 0) ) )
            qed
          qed
        qed
      next
        case split_case_7
        step( solve( !KU( (~r1⊕x) ) @ #vk ) )
          case c_xor
          by step( contradiction /* cyclic */ )
        next
          case coerce
          step( solve( !KD( (~r1⊕x) ) ▶₀ #vk ) )
            case acceptreader
            by step( solve( (#vl, 0) ~~> (#vk, 0) ) )
          next
            case initiatereader
            by step( contradiction /* impossible chain */ )
          next
            case tag1
            step( solve( (#vl, 0) ~~> (#vk, 0) ) )
              case d_0_fst
              by step( contradiction /* impossible chain */ )
            next
              case d_0_snd
              by step( solve( (#vr.2, 0) ~~> (#vk, 0) ) )
            qed
          qed
        qed
      next
        case split_case_8
        step( solve( !KU( (~k⊕x) ) @ #vk ) )
          case c_xor
          by step( solve( !KU( ~k ) @ #vk.2 ) )
        next
          case coerce
          step( solve( !KD( (~k⊕x) ) ▶₀ #vk ) )
            case acceptreader
            by step( solve( (#vl, 0) ~~> (#vk, 0) ) )
          next
            case initiatereader
            by step( contradiction /* impossible chain */ )
          next
            case tag1
            step( solve( (#vl, 0) ~~> (#vk, 0) ) )
              case d_0_fst
              by step( contradiction /* impossible chain */ )
            next
              case d_0_snd
              by step( solve( (#vr.2, 0) ~~> (#vk, 0) ) )
            qed
          qed
        qed
      qed
    next
      case setup_case_3
      step( solve( splitEqs(0) ) )
        case split_case_1
        by step( solve( !KU( ~k ) @ #vk ) )
      next
        case split_case_2
        by step( contradiction /* cyclic */ )
      next
        case split_case_3
        step( solve( !KU( zero ) @ #vk ) )
          case c_zero
          MIRRORED
        next
          case coerce
          step( solve( !KD( zero ) ▶₀ #vk ) )
            case acceptreader
            by step( solve( (#vl, 0) ~~> (#vk, 0) ) )
          next
            case initiatereader
            by step( contradiction /* impossible chain */ )
          next
            case tag1
            step( solve( (#vl, 0) ~~> (#vk, 0) ) )
              case d_0_fst
              by step( contradiction /* impossible chain */ )
            next
              case d_0_snd
              by step( solve( (#vr.2, 0) ~~> (#vk, 0) ) )
            qed
          qed
        qed
      next
        case split_case_4
        step( solve( !KU( (~k⊕~r1) ) @ #vk ) )
          case c_xor
          by step( contradiction /* cyclic */ )
        next
          case coerce
          step( solve( !KD( (~k⊕~r1) ) ▶₀ #vk ) )
            case acceptreader
            by step( solve( (#vl, 0) ~~> (#vk, 0) ) )
          next
            case initiatereader
            by step( contradiction /* impossible chain */ )
          next
            case tag1
            step( solve( (#vl, 0) ~~> (#vk, 0) ) )
              case d_0_fst
              by step( contradiction /* impossible chain */ )
            next
              case d_0_snd
              by step( solve( (#vr.2, 0) ~~> (#vk, 0) ) )
            qed
          qed
        qed
      next
        case split_case_5
        MIRRORED
      next
        case split_case_6
        step( solve( !KU( (~k⊕~r1⊕z) ) @ #vk ) )
          case c_xor_case_1
          by step( contradiction /* cyclic */ )
        next
          case c_xor_case_2
          by step( solve( !KU( ~k ) @ #vk.2 ) )
        next
          case c_xor_case_3
          step( solve( !KU( (~k⊕~r1) ) @ #vk.2 ) )
            case c_xor
            by step( contradiction /* cyclic */ )
          next
            case coerce
            step( solve( !KD( (~k⊕~r1) ) ▶₀ #vk.1 ) )
              case acceptreader
              by step( solve( (#vl, 0) ~~> (#vk.1, 0) ) )
            next
              case initiatereader
              by step( contradiction /* impossible chain */ )
            next
              case tag1
              step( solve( (#vl, 0) ~~> (#vk.1, 0) ) )
                case d_0_fst
                by step( contradiction /* impossible chain */ )
              next
                case d_0_snd
                by step( solve( (#vr.2, 0) ~~> (#vk.1, 0) ) )
              qed
            qed
          qed
        next
          case coerce
          step( solve( !KD( (~k⊕~r1⊕z) ) ▶₀ #vk ) )
            case acceptreader
            by step( solve( (#vl, 0) ~~> (#vk, 0) ) )
          next
            case initiatereader
            by step( contradiction /* impossible chain */ )
          next
            case tag1
            step( solve( (#vl, 0) ~~> (#vk, 0) ) )
              case d_0_fst
              by step( contradiction /* impossible chain */ )
            next
              case d_0_snd
              by step( solve( (#vr.2, 0) ~~> (#vk, 0) ) )
            qed
          qed
        qed
      next
        case split_case_7
        step( solve( !KU( (~r1⊕x) ) @ #vk ) )
          case c_xor
          by step( contradiction /* cyclic */ )
        next
          case coerce
          step( solve( !KD( (~r1⊕x) ) ▶₀ #vk ) )
            case acceptreader
            by step( solve( (#vl, 0) ~~> (#vk, 0) ) )
          next
            case initiatereader
            by step( contradiction /* impossible chain */ )
          next
            case tag1
            step( solve( (#vl, 0) ~~> (#vk, 0) ) )
              case d_0_fst
              by step( contradiction /* impossible chain */ )
            next
              case d_0_snd
              by step( solve( (#vr.2, 0) ~~> (#vk, 0) ) )
            qed
          qed
        qed
      next
        case split_case_8
        step( solve( !KU( (~k⊕x) ) @ #vk ) )
          case c_xor
          by step( solve( !KU( ~k ) @ #vk.2 ) )
        next
          case coerce
          step( solve( !KD( (~k⊕x) ) ▶₀ #vk ) )
            case acceptreader
            by step( solve( (#vl, 0) ~~> (#vk, 0) ) )
          next
            case initiatereader
            by step( contradiction /* impossible chain */ )
          next
            case tag1
            step( solve( (#vl, 0) ~~> (#vk, 0) ) )
              case d_0_fst
              by step( contradiction /* impossible chain */ )
            next
              case d_0_snd
              by step( solve( (#vr.2, 0) ~~> (#vk, 0) ) )
            qed
          qed
        qed
      qed
    qed
  next
    case RHS
    step( simplify )
    step( solve( TagRun( ~k, phase ) ▶₀ #i ) )
      case setup_case_1
      step( solve( splitEqs(0) ) )
        case split_case_1
        by step( solve( !KU( ~k ) @ #vk ) )
      next
        case split_case_2
        by step( contradiction /* cyclic */ )
      next
        case split_case_3
        step( solve( !KU( zero ) @ #vk ) )
          case c_zero
          MIRRORED
        next
          case coerce
          step( solve( !KD( zero ) ▶₀ #vk ) )
            case acceptreader
            by step( solve( (#vl, 0) ~~> (#vk, 0) ) )
          next
            case initiatereader
            by step( contradiction /* impossible chain */ )
          next
            case tag1
            step( solve( (#vl, 0) ~~> (#vk, 0) ) )
              case d_0_fst
              by step( contradiction /* impossible chain */ )
            next
              case d_0_snd
              by step( solve( (#vr.2, 0) ~~> (#vk, 0) ) )
            qed
          qed
        qed
      next
        case split_case_4
        step( solve( !KU( (~k⊕~r1) ) @ #vk ) )
          case c_xor
          by step( contradiction /* cyclic */ )
        next
          case coerce
          step( solve( !KD( (~k⊕~r1) ) ▶₀ #vk ) )
            case acceptreader
            by step( solve( (#vl, 0) ~~> (#vk, 0) ) )
          next
            case initiatereader
            by step( contradiction /* impossible chain */ )
          next
            case tag1
            step( solve( (#vl, 0) ~~> (#vk, 0) ) )
              case d_0_fst
              by step( contradiction /* impossible chain */ )
            next
              case d_0_snd
              by step( solve( (#vr.2, 0) ~~> (#vk, 0) ) )
            qed
          qed
        qed
      next
        case split_case_5
        MIRRORED
      next
        case split_case_6
        step( solve( !KU( (~k⊕~r1⊕z) ) @ #vk ) )
          case c_xor_case_1
          by step( contradiction /* cyclic */ )
        next
          case c_xor_case_2
          by step( solve( !KU( ~k ) @ #vk.2 ) )
        next
          case c_xor_case_3
          step( solve( !KU( (~k⊕~r1) ) @ #vk.2 ) )
            case c_xor
            by step( contradiction /* cyclic */ )
          next
            case coerce
            step( solve( !KD( (~k⊕~r1) ) ▶₀ #vk.1 ) )
              case acceptreader
              by step( solve( (#vl, 0) ~~> (#vk.1, 0) ) )
            next
              case initiatereader
              by step( contradiction /* impossible chain */ )
            next
              case tag1
              step( solve( (#vl, 0) ~~> (#vk.1, 0) ) )
                case d_0_fst
                by step( contradiction /* impossible chain */ )
              next
                case d_0_snd
                by step( solve( (#vr.2, 0) ~~> (#vk.1, 0) ) )
              qed
            qed
          qed
        next
          case coerce
          step( solve( !KD( (~k⊕~r1⊕z) ) ▶₀ #vk ) )
            case acceptreader
            by step( solve( (#vl, 0) ~~> (#vk, 0) ) )
          next
            case initiatereader
            by step( contradiction /* impossible chain */ )
          next
            case tag1
            step( solve( (#vl, 0) ~~> (#vk, 0) ) )
              case d_0_fst
              by step( contradiction /* impossible chain */ )
            next
              case d_0_snd
              by step( solve( (#vr.2, 0) ~~> (#vk, 0) ) )
            qed
          qed
        qed
      next
        case split_case_7
        step( solve( !KU( (~r1⊕x) ) @ #vk ) )
          case c_xor
          by step( contradiction /* cyclic */ )
        next
          case coerce
          step( solve( !KD( (~r1⊕x) ) ▶₀ #vk ) )
            case acceptreader
            by step( solve( (#vl, 0) ~~> (#vk, 0) ) )
          next
            case initiatereader
            by step( contradiction /* impossible chain */ )
          next
            case tag1
            step( solve( (#vl, 0) ~~> (#vk, 0) ) )
              case d_0_fst
              by step( contradiction /* impossible chain */ )
            next
              case d_0_snd
              by step( solve( (#vr.2, 0) ~~> (#vk, 0) ) )
            qed
          qed
        qed
      next
        case split_case_8
        step( solve( !KU( (~k⊕x) ) @ #vk ) )
          case c_xor
          by step( solve( !KU( ~k ) @ #vk.2 ) )
        next
          case coerce
          step( solve( !KD( (~k⊕x) ) ▶₀ #vk ) )
            case acceptreader
            by step( solve( (#vl, 0) ~~> (#vk, 0) ) )
          next
            case initiatereader
            by step( contradiction /* impossible chain */ )
          next
            case tag1
            step( solve( (#vl, 0) ~~> (#vk, 0) ) )
              case d_0_fst
              by step( contradiction /* impossible chain */ )
            next
              case d_0_snd
              by step( solve( (#vr.2, 0) ~~> (#vk, 0) ) )
            qed
          qed
        qed
      qed
    next
      case setup_case_2
      step( solve( splitEqs(0) ) )
        case split_case_1
        by step( solve( !KU( ~k ) @ #vk ) )
      next
        case split_case_2
        by step( contradiction /* cyclic */ )
      next
        case split_case_3
        step( solve( !KU( zero ) @ #vk ) )
          case c_zero
          MIRRORED
        next
          case coerce
          step( solve( !KD( zero ) ▶₀ #vk ) )
            case acceptreader
            by step( solve( (#vl, 0) ~~> (#vk, 0) ) )
          next
            case initiatereader
            by step( contradiction /* impossible chain */ )
          next
            case tag1
            step( solve( (#vl, 0) ~~> (#vk, 0) ) )
              case d_0_fst
              by step( contradiction /* impossible chain */ )
            next
              case d_0_snd
              by step( solve( (#vr.2, 0) ~~> (#vk, 0) ) )
            qed
          qed
        qed
      next
        case split_case_4
        step( solve( !KU( (~k⊕~r1) ) @ #vk ) )
          case c_xor
          by step( contradiction /* cyclic */ )
        next
          case coerce
          step( solve( !KD( (~k⊕~r1) ) ▶₀ #vk ) )
            case acceptreader
            by step( solve( (#vl, 0) ~~> (#vk, 0) ) )
          next
            case initiatereader
            by step( contradiction /* impossible chain */ )
          next
            case tag1
            step( solve( (#vl, 0) ~~> (#vk, 0) ) )
              case d_0_fst
              by step( contradiction /* impossible chain */ )
            next
              case d_0_snd
              by step( solve( (#vr.2, 0) ~~> (#vk, 0) ) )
            qed
          qed
        qed
      next
        case split_case_5
        MIRRORED
      next
        case split_case_6
        step( solve( !KU( (~k⊕~r1⊕z) ) @ #vk ) )
          case c_xor_case_1
          by step( contradiction /* cyclic */ )
        next
          case c_xor_case_2
          by step( solve( !KU( ~k ) @ #vk.2 ) )
        next
          case c_xor_case_3
          step( solve( !KU( (~k⊕~r1) ) @ #vk.2 ) )
            case c_xor
            by step( contradiction /* cyclic */ )
          next
            case coerce
            step( solve( !KD( (~k⊕~r1) ) ▶₀ #vk.1 ) )
              case acceptreader
              by step( solve( (#vl, 0) ~~> (#vk.1, 0) ) )
            next
              case initiatereader
              by step( contradiction /* impossible chain */ )
            next
              case tag1
              step( solve( (#vl, 0) ~~> (#vk.1, 0) ) )
                case d_0_fst
                by step( contradiction /* impossible chain */ )
              next
                case d_0_snd
                by step( solve( (#vr.2, 0) ~~> (#vk.1, 0) ) )
              qed
            qed
          qed
        next
          case coerce
          step( solve( !KD( (~k⊕~r1⊕z) ) ▶₀ #vk ) )
            case acceptreader
            by step( solve( (#vl, 0) ~~> (#vk, 0) ) )
          next
            case initiatereader
            by step( contradiction /* impossible chain */ )
          next
            case tag1
            step( solve( (#vl, 0) ~~> (#vk, 0) ) )
              case d_0_fst
              by step( contradiction /* impossible chain */ )
            next
              case d_0_snd
              by step( solve( (#vr.2, 0) ~~> (#vk, 0) ) )
            qed
          qed
        qed
      next
        case split_case_7
        step( solve( !KU( (~r1⊕x) ) @ #vk ) )
          case c_xor
          by step( contradiction /* cyclic */ )
        next
          case coerce
          step( solve( !KD( (~r1⊕x) ) ▶₀ #vk ) )
            case acceptreader
            by step( solve( (#vl, 0) ~~> (#vk, 0) ) )
          next
            case initiatereader
            by step( contradiction /* impossible chain */ )
          next
            case tag1
            step( solve( (#vl, 0) ~~> (#vk, 0) ) )
              case d_0_fst
              by step( contradiction /* impossible chain */ )
            next
              case d_0_snd
              by step( solve( (#vr.2, 0) ~~> (#vk, 0) ) )
            qed
          qed
        qed
      next
        case split_case_8
        step( solve( !KU( (~k⊕x) ) @ #vk ) )
          case c_xor
          by step( solve( !KU( ~k ) @ #vk.2 ) )
        next
          case coerce
          step( solve( !KD( (~k⊕x) ) ▶₀ #vk ) )
            case acceptreader
            by step( solve( (#vl, 0) ~~> (#vk, 0) ) )
          next
            case initiatereader
            by step( contradiction /* impossible chain */ )
          next
            case tag1
            step( solve( (#vl, 0) ~~> (#vk, 0) ) )
              case d_0_fst
              by step( contradiction /* impossible chain */ )
            next
              case d_0_snd
              by step( solve( (#vr.2, 0) ~~> (#vk, 0) ) )
            qed
          qed
        qed
      qed
    next
      case setup_case_3
      step( solve( splitEqs(0) ) )
        case split_case_1
        by step( solve( !KU( ~k ) @ #vk ) )
      next
        case split_case_2
        by step( contradiction /* cyclic */ )
      next
        case split_case_3
        step( solve( !KU( zero ) @ #vk ) )
          case c_zero
          MIRRORED
        next
          case coerce
          step( solve( !KD( zero ) ▶₀ #vk ) )
            case acceptreader
            by step( solve( (#vl, 0) ~~> (#vk, 0) ) )
          next
            case initiatereader
            by step( contradiction /* impossible chain */ )
          next
            case tag1
            step( solve( (#vl, 0) ~~> (#vk, 0) ) )
              case d_0_fst
              by step( contradiction /* impossible chain */ )
            next
              case d_0_snd
              by step( solve( (#vr.2, 0) ~~> (#vk, 0) ) )
            qed
          qed
        qed
      next
        case split_case_4
        step( solve( !KU( (~k⊕~r1) ) @ #vk ) )
          case c_xor
          by step( contradiction /* cyclic */ )
        next
          case coerce
          step( solve( !KD( (~k⊕~r1) ) ▶₀ #vk ) )
            case acceptreader
            by step( solve( (#vl, 0) ~~> (#vk, 0) ) )
          next
            case initiatereader
            by step( contradiction /* impossible chain */ )
          next
            case tag1
            step( solve( (#vl, 0) ~~> (#vk, 0) ) )
              case d_0_fst
              by step( contradiction /* impossible chain */ )
            next
              case d_0_snd
              by step( solve( (#vr.2, 0) ~~> (#vk, 0) ) )
            qed
          qed
        qed
      next
        case split_case_5
        MIRRORED
      next
        case split_case_6
        step( solve( !KU( (~k⊕~r1⊕z) ) @ #vk ) )
          case c_xor_case_1
          by step( contradiction /* cyclic */ )
        next
          case c_xor_case_2
          by step( solve( !KU( ~k ) @ #vk.2 ) )
        next
          case c_xor_case_3
          step( solve( !KU( (~k⊕~r1) ) @ #vk.2 ) )
            case c_xor
            by step( contradiction /* cyclic */ )
          next
            case coerce
            step( solve( !KD( (~k⊕~r1) ) ▶₀ #vk.1 ) )
              case acceptreader
              by step( solve( (#vl, 0) ~~> (#vk.1, 0) ) )
            next
              case initiatereader
              by step( contradiction /* impossible chain */ )
            next
              case tag1
              step( solve( (#vl, 0) ~~> (#vk.1, 0) ) )
                case d_0_fst
                by step( contradiction /* impossible chain */ )
              next
                case d_0_snd
                by step( solve( (#vr.2, 0) ~~> (#vk.1, 0) ) )
              qed
            qed
          qed
        next
          case coerce
          step( solve( !KD( (~k⊕~r1⊕z) ) ▶₀ #vk ) )
            case acceptreader
            by step( solve( (#vl, 0) ~~> (#vk, 0) ) )
          next
            case initiatereader
            by step( contradiction /* impossible chain */ )
          next
            case tag1
            step( solve( (#vl, 0) ~~> (#vk, 0) ) )
              case d_0_fst
              by step( contradiction /* impossible chain */ )
            next
              case d_0_snd
              by step( solve( (#vr.2, 0) ~~> (#vk, 0) ) )
            qed
          qed
        qed
      next
        case split_case_7
        step( solve( !KU( (~r1⊕x) ) @ #vk ) )
          case c_xor
          by step( contradiction /* cyclic */ )
        next
          case coerce
          step( solve( !KD( (~r1⊕x) ) ▶₀ #vk ) )
            case acceptreader
            by step( solve( (#vl, 0) ~~> (#vk, 0) ) )
          next
            case initiatereader
            by step( contradiction /* impossible chain */ )
          next
            case tag1
            step( solve( (#vl, 0) ~~> (#vk, 0) ) )
              case d_0_fst
              by step( contradiction /* impossible chain */ )
            next
              case d_0_snd
              by step( solve( (#vr.2, 0) ~~> (#vk, 0) ) )
            qed
          qed
        qed
      next
        case split_case_8
        step( solve( !KU( (~k⊕x) ) @ #vk ) )
          case c_xor
          by step( solve( !KU( ~k ) @ #vk.2 ) )
        next
          case coerce
          step( solve( !KD( (~k⊕x) ) ▶₀ #vk ) )
            case acceptreader
            by step( solve( (#vl, 0) ~~> (#vk, 0) ) )
          next
            case initiatereader
            by step( contradiction /* impossible chain */ )
          next
            case tag1
            step( solve( (#vl, 0) ~~> (#vk, 0) ) )
              case d_0_fst
              by step( contradiction /* impossible chain */ )
            next
              case d_0_snd
              by step( solve( (#vr.2, 0) ~~> (#vk, 0) ) )
            qed
          qed
        qed
      qed
    qed
  qed
qed

end
/* Output
maude tool: 'maude'
 checking version: 2.7.1. OK.
 checking installation: OK.


analyzing: examples/csf18-xor/diff-models/LAK06-UK1.spthy

------------------------------------------------------------------------------
analyzed: examples/csf18-xor/diff-models/LAK06-UK1.spthy

  output:          examples/csf18-xor/diff-models/LAK06-UK1.spthy.tmp
  processing time: 163.993371417s
  RHS :  executable (exists-trace): falsified - no trace found (5324 steps)
  LHS :  executable (exists-trace): falsified - no trace found (5324 steps)
  DiffLemma:  Observational_equivalence : verified (17784 steps)

------------------------------------------------------------------------------

==============================================================================
summary of summaries:

analyzed: examples/csf18-xor/diff-models/LAK06-UK1.spthy

  output:          examples/csf18-xor/diff-models/LAK06-UK1.spthy.tmp
  processing time: 163.993371417s
  RHS :  executable (exists-trace): falsified - no trace found (5324 steps)
  LHS :  executable (exists-trace): falsified - no trace found (5324 steps)
  DiffLemma:  Observational_equivalence : verified (17784 steps)

==============================================================================
*/
