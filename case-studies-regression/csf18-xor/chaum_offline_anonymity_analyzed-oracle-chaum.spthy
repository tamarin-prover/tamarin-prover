theory Chaum_Offline_Anonymity begin

// Function signature and definition of the equational theory E

builtins: xor
functions: blind/2, checksign/2, fst/1, pair/2, pk/1, sign/2, snd/1,
           unblind/2
equations:
    checksign(sign(m, k), pk(k)) = m,
    fst(<x.1, x.2>) = x.1,
    snd(<x.1, x.2>) = x.2,
    unblind(blind(m, r), r) = m,
    unblind(sign(blind(m, r), k), r) = sign(m, k)



rule (modulo E) Register_Corrupted_Bank_pk:
   [ Fr( ~ltkB ) ]
  --[ OnlyOnce( ) ]->
   [ !Bank_Ltk( $B, ~ltkB ), !Bank_Pk( $B, pk(~ltkB) ), Out( ~ltkB ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) regular_agent:
   [ Fr( ~C ) ] --> [ !Customer( ~C ), Out( ~C ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) test_subject:
   [ Fr( ~C ) ] --[ TestSubject( ~C ) ]-> [ !Customer( ~C ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) C_1:
   [ Fr( ~x ), Fr( ~r ), !Customer( ~C ) ]
  --[ Mint( (~C⊕~x), ~x, ~r ), Mint( ~x, ~x, ~r ) ]->
   [ Out( <blind((~C⊕~x), ~r), blind(~x, ~r)> ), !St_C_1( ~C, ~x, ~r ) ]

  /*
  rule (modulo AC) C_1:
     [ Fr( ~x ), Fr( ~r ), !Customer( ~C ) ]
    --[ Mint( z, ~x, ~r ), Mint( ~x, ~x, ~r ) ]->
     [ Out( <blind(z, ~r), blind(~x, ~r)> ), !St_C_1( ~C, ~x, ~r ) ]
    variants (modulo AC)
    1. ~C    = ~C.5
       ~x    = ~x.5
       z     = (~C.5⊕~x.5)
    
    2. ~C    = ~x.5
       ~x    = ~x.5
       z     = zero
  */

rule (modulo E) C_2:
   [
   !St_C_1( C, ~y, ~r ), In( sign(blind(x, ~r), ~skB) ),
   !Bank_Pk( $B, pk(~skB) )
   ]
  --[ Coin( x, ~y, ~r ), Spend( C, ~y, ~r ) ]->
   [ Out( <x, sign(x, ~skB)> ) ]

  /* has exactly the trivial AC variant */

restriction OnlyOnce:
  "∀ #i #j. ((OnlyOnce( ) @ #i) ∧ (OnlyOnce( ) @ #j)) ⇒ (#i = #j)"
  // safety formula

lemma coins [sources]:
  all-traces
  "∀ x y r #i. (Coin( x, y, r ) @ #i) ⇒ (∃ #j. Mint( x, y, r ) @ #j)"
/*
guarded formula characterizing all counter-examples:
"∃ x y r #i. (Coin( x, y, r ) @ #i) ∧ ∀ #j. (Mint( x, y, r ) @ #j) ⇒ ⊥"
*/
induction
  case empty_trace
  by contradiction /* from formulas */
next
  case non_empty_trace
  simplify
  solve( !St_C_1( C, ~y, ~r ) ▶₀ #i )
    case C_1_case_1
    solve( !Bank_Pk( $B, pk(~skB) ) ▶₂ #i )
      case Register_Corrupted_Bank_pk
      solve( (last(#i))  ∥ (∃ #j. (Mint( x, ~y, ~r ) @ #j) ∧ ¬(last(#j))) )
        case case_1
        solve( splitEqs(1) )
          case split
          solve( !KU( sign(blind(x, ~r), ~skB) ) @ #vk )
            case C_2_case_01
            solve( Mint( x.1, ~y.1, ~r.1 ) @ #j )
              case C_1_case_1
              solve( (#vr.4, 0) ~~> (#vk, 0) )
                case d_xor_case_1
                by solve( (#vr.6, 0) ~~> (#vk, 0) )
              next
                case d_xor_case_2
                by solve( (#vr.6, 0) ~~> (#vk, 0) )
              next
                case d_xor_case_3
                by solve( (#vr.6, 0) ~~> (#vk, 0) )
              next
                case d_xor_case_4
                by solve( (#vr.6, 0) ~~> (#vk, 0) )
              qed
            next
              case C_1_case_2
              by solve( (#vr.4, 0) ~~> (#vk, 0) )
            qed
          next
            case C_2_case_02
            solve( Mint( x.1, ~y.1, ~r.1 ) @ #j )
              case C_1_case_1
              solve( (#vr.4, 0) ~~> (#vk, 0) )
                case d_xor_case_1
                by solve( (#vr.6, 0) ~~> (#vk, 0) )
              next
                case d_xor_case_2
                by solve( (#vr.6, 0) ~~> (#vk, 0) )
              next
                case d_xor_case_3
                by solve( (#vr.6, 0) ~~> (#vk, 0) )
              next
                case d_xor_case_4
                by solve( (#vr.6, 0) ~~> (#vk, 0) )
              qed
            next
              case C_1_case_2
              by solve( (#vr.4, 0) ~~> (#vk, 0) )
            qed
          next
            case C_2_case_03
            solve( splitEqs(3) )
              case split
              by solve( Mint( blind(x, ~r), ~y.1, ~r.1 ) @ #j )
            qed
          next
            case C_2_case_04
            solve( splitEqs(3) )
              case split
              by solve( Mint( blind(x, ~r), ~y.1, ~r.1 ) @ #j )
            qed
          next
            case C_2_case_05
            solve( Mint( x.1, ~y.1, ~r.1 ) @ #j )
              case C_1_case_1
              solve( (#vr.5, 0) ~~> (#vk, 0) )
                case d_xor_case_1
                by solve( (#vr.7, 0) ~~> (#vk, 0) )
              next
                case d_xor_case_2
                by solve( (#vr.7, 0) ~~> (#vk, 0) )
              next
                case d_xor_case_3
                by solve( (#vr.7, 0) ~~> (#vk, 0) )
              next
                case d_xor_case_4
                by solve( (#vr.7, 0) ~~> (#vk, 0) )
              qed
            next
              case C_1_case_2
              by solve( (#vr.5, 0) ~~> (#vk, 0) )
            qed
          next
            case C_2_case_06
            solve( Mint( x.1, ~y.1, ~r.1 ) @ #j )
              case C_1_case_1
              solve( (#vr.5, 0) ~~> (#vk, 0) )
                case d_xor_case_1
                by solve( (#vr.7, 0) ~~> (#vk, 0) )
              next
                case d_xor_case_2
                by solve( (#vr.7, 0) ~~> (#vk, 0) )
              next
                case d_xor_case_3
                by solve( (#vr.7, 0) ~~> (#vk, 0) )
              next
                case d_xor_case_4
                by solve( (#vr.7, 0) ~~> (#vk, 0) )
              qed
            next
              case C_1_case_2
              by solve( (#vr.5, 0) ~~> (#vk, 0) )
            qed
          next
            case C_2_case_07
            solve( splitEqs(3) )
              case split
              by solve( Mint( blind(blind(x, ~r), r.1), ~y.1, ~r.2 ) @ #j )
            qed
          next
            case C_2_case_08
            by solve( Mint( blind(m, r.1), ~y.1, ~r.2 ) @ #j )
          next
            case C_2_case_09
            solve( splitEqs(3) )
              case split
              by solve( Mint( blind(blind(blind(x, ~r), r.1), r.2), ~y.1, ~r.3 ) @ #j )
            qed
          next
            case C_2_case_10
            by solve( Mint( blind(blind(m, r.1), r.2), ~y.1, ~r.3 ) @ #j )
          next
            case C_2_case_11
            solve( splitEqs(3) )
              case split
              by solve( Mint( blind(blind(blind(blind(x, ~r), r.1), r.2), r.3), ~y.1,
                              ~r.4
                        ) @ #j )
            qed
          next
            case C_2_case_12
            by solve( Mint( blind(blind(blind(m, r.1), r.2), r.3), ~y.1, ~r.4
                      ) @ #j )
          next
            case C_2_case_13
            solve( splitEqs(3) )
              case split
              by solve( Mint( blind(blind(blind(blind(blind(x, ~r), r.1), r.2), r.3),
                                    r.4),
                              ~y.1, ~r.5
                        ) @ #j )
            qed
          next
            case C_2_case_14
            by solve( Mint( blind(blind(blind(blind(m, r.1), r.2), r.3), r.4), ~y.1,
                            ~r.5
                      ) @ #j )
          next
            case C_2_case_15
            solve( splitEqs(3) )
              case split
              by solve( Mint( blind(blind(blind(blind(blind(blind(x, ~r), r.1), r.2),
                                                r.3),
                                          r.4),
                                    r.5),
                              ~y.1, ~r.6
                        ) @ #j )
            qed
          next
            case C_2_case_16
            by solve( Mint( blind(blind(blind(blind(blind(m, r.1), r.2), r.3), r.4),
                                  r.5),
                            ~y.1, ~r.6
                      ) @ #j )
          next
            case C_2_case_17
            solve( splitEqs(3) )
              case split
              by solve( Mint( blind(blind(blind(blind(blind(blind(m, r.1), r.2), r.3),
                                                r.4),
                                          r.5),
                                    r.6),
                              ~y.1, ~r.7
                        ) @ #j )
            qed
          next
            case C_2_case_18
            solve( splitEqs(3) )
              case split
              by solve( Mint( blind(blind(x, ~r), r.1), ~y.1, ~r.2 ) @ #j )
            qed
          next
            case C_2_case_19
            by solve( Mint( blind(m, r.1), ~y.1, ~r.2 ) @ #j )
          next
            case C_2_case_20
            solve( splitEqs(3) )
              case split
              by solve( Mint( blind(blind(blind(x, ~r), r.1), r.2), ~y.1, ~r.3 ) @ #j )
            qed
          next
            case C_2_case_21
            by solve( Mint( blind(blind(m, r.1), r.2), ~y.1, ~r.3 ) @ #j )
          next
            case C_2_case_22
            solve( splitEqs(3) )
              case split
              by solve( Mint( blind(blind(blind(blind(x, ~r), r.1), r.2), r.3), ~y.1,
                              ~r.4
                        ) @ #j )
            qed
          next
            case C_2_case_23
            by solve( Mint( blind(blind(blind(m, r.1), r.2), r.3), ~y.1, ~r.4
                      ) @ #j )
          next
            case C_2_case_24
            solve( splitEqs(3) )
              case split
              by solve( Mint( blind(blind(blind(blind(blind(x, ~r), r.1), r.2), r.3),
                                    r.4),
                              ~y.1, ~r.5
                        ) @ #j )
            qed
          next
            case C_2_case_25
            by solve( Mint( blind(blind(blind(blind(m, r.1), r.2), r.3), r.4), ~y.1,
                            ~r.5
                      ) @ #j )
          next
            case C_2_case_26
            solve( splitEqs(3) )
              case split
              by solve( Mint( blind(blind(blind(blind(blind(blind(x, ~r), r.1), r.2),
                                                r.3),
                                          r.4),
                                    r.5),
                              ~y.1, ~r.6
                        ) @ #j )
            qed
          next
            case C_2_case_27
            by solve( Mint( blind(blind(blind(blind(blind(m, r.1), r.2), r.3), r.4),
                                  r.5),
                            ~y.1, ~r.6
                      ) @ #j )
          next
            case C_2_case_28
            solve( splitEqs(3) )
              case split
              by solve( Mint( blind(blind(blind(blind(blind(blind(m, r.1), r.2), r.3),
                                                r.4),
                                          r.5),
                                    r.6),
                              ~y.1, ~r.7
                        ) @ #j )
            qed
          next
            case c_sign
            solve( !KU( blind(x, ~r) ) @ #vk.1 )
              case C_1_case_1
              by contradiction /* from formulas */
            next
              case C_1_case_2
              by contradiction /* from formulas */
            next
              case C_2_case_01
              solve( Mint( x.1, ~y.1, ~r.1 ) @ #j )
                case C_1_case_1
                solve( (#vr.4, 0) ~~> (#vk.1, 0) )
                  case d_xor_case_1
                  by solve( (#vr.6, 0) ~~> (#vk.1, 0) )
                next
                  case d_xor_case_2
                  by solve( (#vr.6, 0) ~~> (#vk.1, 0) )
                next
                  case d_xor_case_3
                  by solve( (#vr.6, 0) ~~> (#vk.1, 0) )
                next
                  case d_xor_case_4
                  by solve( (#vr.6, 0) ~~> (#vk.1, 0) )
                qed
              next
                case C_1_case_2
                by solve( (#vr.4, 0) ~~> (#vk.1, 0) )
              qed
            next
              case C_2_case_02
              solve( Mint( x.1, ~y.1, ~r.1 ) @ #j )
                case C_1_case_1
                solve( (#vr.4, 0) ~~> (#vk.1, 0) )
                  case d_xor_case_1
                  by solve( (#vr.6, 0) ~~> (#vk.1, 0) )
                next
                  case d_xor_case_2
                  by solve( (#vr.6, 0) ~~> (#vk.1, 0) )
                next
                  case d_xor_case_3
                  by solve( (#vr.6, 0) ~~> (#vk.1, 0) )
                next
                  case d_xor_case_4
                  by solve( (#vr.6, 0) ~~> (#vk.1, 0) )
                qed
              next
                case C_1_case_2
                by solve( (#vr.4, 0) ~~> (#vk.1, 0) )
              qed
            next
              case C_2_case_03
              solve( Mint( x.1, ~y.1, ~r.1 ) @ #j )
                case C_1_case_1
                solve( (#vr.5, 0) ~~> (#vk.1, 0) )
                  case d_xor_case_1
                  by solve( (#vr.7, 0) ~~> (#vk.1, 0) )
                next
                  case d_xor_case_2
                  by solve( (#vr.7, 0) ~~> (#vk.1, 0) )
                next
                  case d_xor_case_3
                  by solve( (#vr.7, 0) ~~> (#vk.1, 0) )
                next
                  case d_xor_case_4
                  by solve( (#vr.7, 0) ~~> (#vk.1, 0) )
                qed
              next
                case C_1_case_2
                by solve( (#vr.5, 0) ~~> (#vk.1, 0) )
              qed
            next
              case C_2_case_04
              solve( Mint( x.1, ~y.1, ~r.1 ) @ #j )
                case C_1_case_1
                solve( (#vr.5, 0) ~~> (#vk.1, 0) )
                  case d_xor_case_1
                  by solve( (#vr.7, 0) ~~> (#vk.1, 0) )
                next
                  case d_xor_case_2
                  by solve( (#vr.7, 0) ~~> (#vk.1, 0) )
                next
                  case d_xor_case_3
                  by solve( (#vr.7, 0) ~~> (#vk.1, 0) )
                next
                  case d_xor_case_4
                  by solve( (#vr.7, 0) ~~> (#vk.1, 0) )
                qed
              next
                case C_1_case_2
                by solve( (#vr.5, 0) ~~> (#vk.1, 0) )
              qed
            next
              case C_2_case_05
              by solve( Mint( blind(m, r.1), ~y.1, ~r.2 ) @ #j )
            next
              case C_2_case_06
              by solve( Mint( blind(blind(m, r.1), r.2), ~y.1, ~r.3 ) @ #j )
            next
              case C_2_case_07
              by solve( Mint( blind(blind(blind(m, r.1), r.2), r.3), ~y.1, ~r.4
                        ) @ #j )
            next
              case C_2_case_08
              by solve( Mint( blind(blind(blind(blind(m, r.1), r.2), r.3), r.4), ~y.1,
                              ~r.5
                        ) @ #j )
            next
              case C_2_case_09
              by solve( Mint( blind(blind(blind(blind(blind(m, r.1), r.2), r.3), r.4),
                                    r.5),
                              ~y.1, ~r.6
                        ) @ #j )
            next
              case C_2_case_10
              solve( splitEqs(3) )
                case split
                by solve( Mint( blind(blind(blind(blind(blind(blind(m, r.1), r.2), r.3),
                                                  r.4),
                                            r.5),
                                      r.6),
                                ~y.1, ~r.7
                          ) @ #j )
              qed
            next
              case C_2_case_11
              by solve( Mint( blind(m, r.1), ~y.1, ~r.2 ) @ #j )
            next
              case C_2_case_12
              by solve( Mint( blind(blind(m, r.1), r.2), ~y.1, ~r.3 ) @ #j )
            next
              case C_2_case_13
              by solve( Mint( blind(blind(blind(m, r.1), r.2), r.3), ~y.1, ~r.4
                        ) @ #j )
            next
              case C_2_case_14
              by solve( Mint( blind(blind(blind(blind(m, r.1), r.2), r.3), r.4), ~y.1,
                              ~r.5
                        ) @ #j )
            next
              case C_2_case_15
              by solve( Mint( blind(blind(blind(blind(blind(m, r.1), r.2), r.3), r.4),
                                    r.5),
                              ~y.1, ~r.6
                        ) @ #j )
            next
              case C_2_case_16
              solve( splitEqs(3) )
                case split
                by solve( Mint( blind(blind(blind(blind(blind(blind(m, r.1), r.2), r.3),
                                                  r.4),
                                            r.5),
                                      r.6),
                                ~y.1, ~r.7
                          ) @ #j )
              qed
            next
              case c_blind
              solve( !KU( ~r ) @ #vk.4 )
                case C_2_case_01
                solve( Mint( x.1, ~y.1, ~r.1 ) @ #j )
                  case C_1_case_1
                  solve( (#vr.4, 0) ~~> (#vk.2, 0) )
                    case d_xor_case_1
                    by solve( (#vr.6, 0) ~~> (#vk.2, 0) )
                  next
                    case d_xor_case_2
                    by solve( (#vr.6, 0) ~~> (#vk.2, 0) )
                  next
                    case d_xor_case_3
                    by solve( (#vr.6, 0) ~~> (#vk.2, 0) )
                  next
                    case d_xor_case_4
                    by solve( (#vr.6, 0) ~~> (#vk.2, 0) )
                  qed
                next
                  case C_1_case_2
                  by solve( (#vr.4, 0) ~~> (#vk.2, 0) )
                qed
              next
                case C_2_case_02
                solve( Mint( x.1, ~y.1, ~r.1 ) @ #j )
                  case C_1_case_1
                  solve( (#vr.4, 0) ~~> (#vk.2, 0) )
                    case d_xor_case_1
                    by solve( (#vr.6, 0) ~~> (#vk.2, 0) )
                  next
                    case d_xor_case_2
                    by solve( (#vr.6, 0) ~~> (#vk.2, 0) )
                  next
                    case d_xor_case_3
                    by solve( (#vr.6, 0) ~~> (#vk.2, 0) )
                  next
                    case d_xor_case_4
                    by solve( (#vr.6, 0) ~~> (#vk.2, 0) )
                  qed
                next
                  case C_1_case_2
                  by solve( (#vr.4, 0) ~~> (#vk.2, 0) )
                qed
              next
                case C_2_case_03
                solve( Mint( x.1, ~y.1, ~r.1 ) @ #j )
                  case C_1_case_1
                  solve( (#vr.5, 0) ~~> (#vk.2, 0) )
                    case d_xor_case_1
                    by solve( (#vr.7, 0) ~~> (#vk.2, 0) )
                  next
                    case d_xor_case_2
                    by solve( (#vr.7, 0) ~~> (#vk.2, 0) )
                  next
                    case d_xor_case_3
                    by solve( (#vr.7, 0) ~~> (#vk.2, 0) )
                  next
                    case d_xor_case_4
                    by solve( (#vr.7, 0) ~~> (#vk.2, 0) )
                  qed
                next
                  case C_1_case_2
                  by solve( (#vr.5, 0) ~~> (#vk.2, 0) )
                qed
              next
                case C_2_case_04
                solve( Mint( x.1, ~y.1, ~r.1 ) @ #j )
                  case C_1_case_1
                  solve( (#vr.5, 0) ~~> (#vk.2, 0) )
                    case d_xor_case_1
                    by solve( (#vr.7, 0) ~~> (#vk.2, 0) )
                  next
                    case d_xor_case_2
                    by solve( (#vr.7, 0) ~~> (#vk.2, 0) )
                  next
                    case d_xor_case_3
                    by solve( (#vr.7, 0) ~~> (#vk.2, 0) )
                  next
                    case d_xor_case_4
                    by solve( (#vr.7, 0) ~~> (#vk.2, 0) )
                  qed
                next
                  case C_1_case_2
                  by solve( (#vr.5, 0) ~~> (#vk.2, 0) )
                qed
              next
                case C_2_case_05
                by solve( Mint( blind(m, r.1), ~y.1, ~r.2 ) @ #j )
              next
                case C_2_case_06
                by solve( Mint( blind(blind(m, r.1), r.2), ~y.1, ~r.3 ) @ #j )
              next
                case C_2_case_07
                by solve( Mint( blind(blind(blind(m, r.1), r.2), r.3), ~y.1, ~r.4
                          ) @ #j )
              next
                case C_2_case_08
                by solve( Mint( blind(blind(blind(blind(m, r.1), r.2), r.3), r.4), ~y.1,
                                ~r.5
                          ) @ #j )
              next
                case C_2_case_09
                by solve( Mint( blind(blind(blind(blind(blind(m, r.1), r.2), r.3), r.4),
                                      r.5),
                                ~y.1, ~r.6
                          ) @ #j )
              next
                case C_2_case_10
                solve( splitEqs(3) )
                  case split
                  by solve( Mint( blind(blind(blind(blind(blind(blind(m, r.1), r.2), r.3),
                                                    r.4),
                                              r.5),
                                        r.6),
                                  ~y.1, ~r.7
                            ) @ #j )
                qed
              next
                case C_2_case_11
                by solve( Mint( blind(m, r.1), ~y.1, ~r.2 ) @ #j )
              next
                case C_2_case_12
                by solve( Mint( blind(blind(m, r.1), r.2), ~y.1, ~r.3 ) @ #j )
              next
                case C_2_case_13
                by solve( Mint( blind(blind(blind(m, r.1), r.2), r.3), ~y.1, ~r.4
                          ) @ #j )
              next
                case C_2_case_14
                by solve( Mint( blind(blind(blind(blind(m, r.1), r.2), r.3), r.4), ~y.1,
                                ~r.5
                          ) @ #j )
              next
                case C_2_case_15
                by solve( Mint( blind(blind(blind(blind(blind(m, r.1), r.2), r.3), r.4),
                                      r.5),
                                ~y.1, ~r.6
                          ) @ #j )
              next
                case C_2_case_16
                solve( splitEqs(3) )
                  case split
                  by solve( Mint( blind(blind(blind(blind(blind(blind(m, r.1), r.2), r.3),
                                                    r.4),
                                              r.5),
                                        r.6),
                                  ~y.1, ~r.7
                            ) @ #j )
                qed
              qed
            qed
          qed
        qed
      next
        case case_2
        by contradiction /* from formulas */
      qed
    qed
  next
    case C_1_case_2
    solve( !Bank_Pk( $B, pk(~skB) ) ▶₂ #i )
      case Register_Corrupted_Bank_pk
      solve( (last(#i))  ∥ (∃ #j. (Mint( x, ~y, ~r ) @ #j) ∧ ¬(last(#j))) )
        case case_1
        solve( splitEqs(1) )
          case split
          solve( !KU( sign(blind(x, ~r), ~skB) ) @ #vk )
            case C_2_case_01
            solve( Mint( x.1, ~y.1, ~r.1 ) @ #j )
              case C_1_case_1
              solve( (#vr.4, 0) ~~> (#vk, 0) )
                case d_xor_case_1
                by solve( (#vr.6, 0) ~~> (#vk, 0) )
              next
                case d_xor_case_2
                by solve( (#vr.6, 0) ~~> (#vk, 0) )
              next
                case d_xor_case_3
                by solve( (#vr.6, 0) ~~> (#vk, 0) )
              next
                case d_xor_case_4
                by solve( (#vr.6, 0) ~~> (#vk, 0) )
              qed
            next
              case C_1_case_2
              by solve( (#vr.4, 0) ~~> (#vk, 0) )
            qed
          next
            case C_2_case_02
            solve( Mint( x.1, ~y.1, ~r.1 ) @ #j )
              case C_1_case_1
              solve( (#vr.4, 0) ~~> (#vk, 0) )
                case d_xor_case_1
                by solve( (#vr.6, 0) ~~> (#vk, 0) )
              next
                case d_xor_case_2
                by solve( (#vr.6, 0) ~~> (#vk, 0) )
              next
                case d_xor_case_3
                by solve( (#vr.6, 0) ~~> (#vk, 0) )
              next
                case d_xor_case_4
                by solve( (#vr.6, 0) ~~> (#vk, 0) )
              qed
            next
              case C_1_case_2
              by solve( (#vr.4, 0) ~~> (#vk, 0) )
            qed
          next
            case C_2_case_03
            solve( splitEqs(3) )
              case split
              by solve( Mint( blind(x, ~r), ~y.1, ~r.1 ) @ #j )
            qed
          next
            case C_2_case_04
            solve( splitEqs(3) )
              case split
              by solve( Mint( blind(x, ~r), ~y.1, ~r.1 ) @ #j )
            qed
          next
            case C_2_case_05
            solve( Mint( x.1, ~y.1, ~r.1 ) @ #j )
              case C_1_case_1
              solve( (#vr.5, 0) ~~> (#vk, 0) )
                case d_xor_case_1
                by solve( (#vr.7, 0) ~~> (#vk, 0) )
              next
                case d_xor_case_2
                by solve( (#vr.7, 0) ~~> (#vk, 0) )
              next
                case d_xor_case_3
                by solve( (#vr.7, 0) ~~> (#vk, 0) )
              next
                case d_xor_case_4
                by solve( (#vr.7, 0) ~~> (#vk, 0) )
              qed
            next
              case C_1_case_2
              by solve( (#vr.5, 0) ~~> (#vk, 0) )
            qed
          next
            case C_2_case_06
            solve( Mint( x.1, ~y.1, ~r.1 ) @ #j )
              case C_1_case_1
              solve( (#vr.5, 0) ~~> (#vk, 0) )
                case d_xor_case_1
                by solve( (#vr.7, 0) ~~> (#vk, 0) )
              next
                case d_xor_case_2
                by solve( (#vr.7, 0) ~~> (#vk, 0) )
              next
                case d_xor_case_3
                by solve( (#vr.7, 0) ~~> (#vk, 0) )
              next
                case d_xor_case_4
                by solve( (#vr.7, 0) ~~> (#vk, 0) )
              qed
            next
              case C_1_case_2
              by solve( (#vr.5, 0) ~~> (#vk, 0) )
            qed
          next
            case C_2_case_07
            solve( splitEqs(3) )
              case split
              by solve( Mint( blind(blind(x, ~r), r.1), ~y.1, ~r.2 ) @ #j )
            qed
          next
            case C_2_case_08
            by solve( Mint( blind(m, r.1), ~y.1, ~r.2 ) @ #j )
          next
            case C_2_case_09
            solve( splitEqs(3) )
              case split
              by solve( Mint( blind(blind(blind(x, ~r), r.1), r.2), ~y.1, ~r.3 ) @ #j )
            qed
          next
            case C_2_case_10
            by solve( Mint( blind(blind(m, r.1), r.2), ~y.1, ~r.3 ) @ #j )
          next
            case C_2_case_11
            solve( splitEqs(3) )
              case split
              by solve( Mint( blind(blind(blind(blind(x, ~r), r.1), r.2), r.3), ~y.1,
                              ~r.4
                        ) @ #j )
            qed
          next
            case C_2_case_12
            by solve( Mint( blind(blind(blind(m, r.1), r.2), r.3), ~y.1, ~r.4
                      ) @ #j )
          next
            case C_2_case_13
            solve( splitEqs(3) )
              case split
              by solve( Mint( blind(blind(blind(blind(blind(x, ~r), r.1), r.2), r.3),
                                    r.4),
                              ~y.1, ~r.5
                        ) @ #j )
            qed
          next
            case C_2_case_14
            by solve( Mint( blind(blind(blind(blind(m, r.1), r.2), r.3), r.4), ~y.1,
                            ~r.5
                      ) @ #j )
          next
            case C_2_case_15
            solve( splitEqs(3) )
              case split
              by solve( Mint( blind(blind(blind(blind(blind(blind(x, ~r), r.1), r.2),
                                                r.3),
                                          r.4),
                                    r.5),
                              ~y.1, ~r.6
                        ) @ #j )
            qed
          next
            case C_2_case_16
            by solve( Mint( blind(blind(blind(blind(blind(m, r.1), r.2), r.3), r.4),
                                  r.5),
                            ~y.1, ~r.6
                      ) @ #j )
          next
            case C_2_case_17
            solve( splitEqs(3) )
              case split
              by solve( Mint( blind(blind(blind(blind(blind(blind(m, r.1), r.2), r.3),
                                                r.4),
                                          r.5),
                                    r.6),
                              ~y.1, ~r.7
                        ) @ #j )
            qed
          next
            case C_2_case_18
            solve( splitEqs(3) )
              case split
              by solve( Mint( blind(blind(x, ~r), r.1), ~y.1, ~r.2 ) @ #j )
            qed
          next
            case C_2_case_19
            by solve( Mint( blind(m, r.1), ~y.1, ~r.2 ) @ #j )
          next
            case C_2_case_20
            solve( splitEqs(3) )
              case split
              by solve( Mint( blind(blind(blind(x, ~r), r.1), r.2), ~y.1, ~r.3 ) @ #j )
            qed
          next
            case C_2_case_21
            by solve( Mint( blind(blind(m, r.1), r.2), ~y.1, ~r.3 ) @ #j )
          next
            case C_2_case_22
            solve( splitEqs(3) )
              case split
              by solve( Mint( blind(blind(blind(blind(x, ~r), r.1), r.2), r.3), ~y.1,
                              ~r.4
                        ) @ #j )
            qed
          next
            case C_2_case_23
            by solve( Mint( blind(blind(blind(m, r.1), r.2), r.3), ~y.1, ~r.4
                      ) @ #j )
          next
            case C_2_case_24
            solve( splitEqs(3) )
              case split
              by solve( Mint( blind(blind(blind(blind(blind(x, ~r), r.1), r.2), r.3),
                                    r.4),
                              ~y.1, ~r.5
                        ) @ #j )
            qed
          next
            case C_2_case_25
            by solve( Mint( blind(blind(blind(blind(m, r.1), r.2), r.3), r.4), ~y.1,
                            ~r.5
                      ) @ #j )
          next
            case C_2_case_26
            solve( splitEqs(3) )
              case split
              by solve( Mint( blind(blind(blind(blind(blind(blind(x, ~r), r.1), r.2),
                                                r.3),
                                          r.4),
                                    r.5),
                              ~y.1, ~r.6
                        ) @ #j )
            qed
          next
            case C_2_case_27
            by solve( Mint( blind(blind(blind(blind(blind(m, r.1), r.2), r.3), r.4),
                                  r.5),
                            ~y.1, ~r.6
                      ) @ #j )
          next
            case C_2_case_28
            solve( splitEqs(3) )
              case split
              by solve( Mint( blind(blind(blind(blind(blind(blind(m, r.1), r.2), r.3),
                                                r.4),
                                          r.5),
                                    r.6),
                              ~y.1, ~r.7
                        ) @ #j )
            qed
          next
            case c_sign
            solve( !KU( blind(x, ~r) ) @ #vk.1 )
              case C_1_case_1
              by contradiction /* from formulas */
            next
              case C_1_case_2
              by contradiction /* from formulas */
            next
              case C_2_case_01
              solve( Mint( x.1, ~y.1, ~r.1 ) @ #j )
                case C_1_case_1
                solve( (#vr.4, 0) ~~> (#vk.1, 0) )
                  case d_xor_case_1
                  by solve( (#vr.6, 0) ~~> (#vk.1, 0) )
                next
                  case d_xor_case_2
                  by solve( (#vr.6, 0) ~~> (#vk.1, 0) )
                next
                  case d_xor_case_3
                  by solve( (#vr.6, 0) ~~> (#vk.1, 0) )
                next
                  case d_xor_case_4
                  by solve( (#vr.6, 0) ~~> (#vk.1, 0) )
                qed
              next
                case C_1_case_2
                by solve( (#vr.4, 0) ~~> (#vk.1, 0) )
              qed
            next
              case C_2_case_02
              solve( Mint( x.1, ~y.1, ~r.1 ) @ #j )
                case C_1_case_1
                solve( (#vr.4, 0) ~~> (#vk.1, 0) )
                  case d_xor_case_1
                  by solve( (#vr.6, 0) ~~> (#vk.1, 0) )
                next
                  case d_xor_case_2
                  by solve( (#vr.6, 0) ~~> (#vk.1, 0) )
                next
                  case d_xor_case_3
                  by solve( (#vr.6, 0) ~~> (#vk.1, 0) )
                next
                  case d_xor_case_4
                  by solve( (#vr.6, 0) ~~> (#vk.1, 0) )
                qed
              next
                case C_1_case_2
                by solve( (#vr.4, 0) ~~> (#vk.1, 0) )
              qed
            next
              case C_2_case_03
              solve( Mint( x.1, ~y.1, ~r.1 ) @ #j )
                case C_1_case_1
                solve( (#vr.5, 0) ~~> (#vk.1, 0) )
                  case d_xor_case_1
                  by solve( (#vr.7, 0) ~~> (#vk.1, 0) )
                next
                  case d_xor_case_2
                  by solve( (#vr.7, 0) ~~> (#vk.1, 0) )
                next
                  case d_xor_case_3
                  by solve( (#vr.7, 0) ~~> (#vk.1, 0) )
                next
                  case d_xor_case_4
                  by solve( (#vr.7, 0) ~~> (#vk.1, 0) )
                qed
              next
                case C_1_case_2
                by solve( (#vr.5, 0) ~~> (#vk.1, 0) )
              qed
            next
              case C_2_case_04
              solve( Mint( x.1, ~y.1, ~r.1 ) @ #j )
                case C_1_case_1
                solve( (#vr.5, 0) ~~> (#vk.1, 0) )
                  case d_xor_case_1
                  by solve( (#vr.7, 0) ~~> (#vk.1, 0) )
                next
                  case d_xor_case_2
                  by solve( (#vr.7, 0) ~~> (#vk.1, 0) )
                next
                  case d_xor_case_3
                  by solve( (#vr.7, 0) ~~> (#vk.1, 0) )
                next
                  case d_xor_case_4
                  by solve( (#vr.7, 0) ~~> (#vk.1, 0) )
                qed
              next
                case C_1_case_2
                by solve( (#vr.5, 0) ~~> (#vk.1, 0) )
              qed
            next
              case C_2_case_05
              by solve( Mint( blind(m, r.1), ~y.1, ~r.2 ) @ #j )
            next
              case C_2_case_06
              by solve( Mint( blind(blind(m, r.1), r.2), ~y.1, ~r.3 ) @ #j )
            next
              case C_2_case_07
              by solve( Mint( blind(blind(blind(m, r.1), r.2), r.3), ~y.1, ~r.4
                        ) @ #j )
            next
              case C_2_case_08
              by solve( Mint( blind(blind(blind(blind(m, r.1), r.2), r.3), r.4), ~y.1,
                              ~r.5
                        ) @ #j )
            next
              case C_2_case_09
              by solve( Mint( blind(blind(blind(blind(blind(m, r.1), r.2), r.3), r.4),
                                    r.5),
                              ~y.1, ~r.6
                        ) @ #j )
            next
              case C_2_case_10
              solve( splitEqs(3) )
                case split
                by solve( Mint( blind(blind(blind(blind(blind(blind(m, r.1), r.2), r.3),
                                                  r.4),
                                            r.5),
                                      r.6),
                                ~y.1, ~r.7
                          ) @ #j )
              qed
            next
              case C_2_case_11
              by solve( Mint( blind(m, r.1), ~y.1, ~r.2 ) @ #j )
            next
              case C_2_case_12
              by solve( Mint( blind(blind(m, r.1), r.2), ~y.1, ~r.3 ) @ #j )
            next
              case C_2_case_13
              by solve( Mint( blind(blind(blind(m, r.1), r.2), r.3), ~y.1, ~r.4
                        ) @ #j )
            next
              case C_2_case_14
              by solve( Mint( blind(blind(blind(blind(m, r.1), r.2), r.3), r.4), ~y.1,
                              ~r.5
                        ) @ #j )
            next
              case C_2_case_15
              by solve( Mint( blind(blind(blind(blind(blind(m, r.1), r.2), r.3), r.4),
                                    r.5),
                              ~y.1, ~r.6
                        ) @ #j )
            next
              case C_2_case_16
              solve( splitEqs(3) )
                case split
                by solve( Mint( blind(blind(blind(blind(blind(blind(m, r.1), r.2), r.3),
                                                  r.4),
                                            r.5),
                                      r.6),
                                ~y.1, ~r.7
                          ) @ #j )
              qed
            next
              case c_blind
              solve( !KU( ~r ) @ #vk.4 )
                case C_2_case_01
                solve( Mint( x.1, ~y.1, ~r.1 ) @ #j )
                  case C_1_case_1
                  solve( (#vr.4, 0) ~~> (#vk.2, 0) )
                    case d_xor_case_1
                    by solve( (#vr.6, 0) ~~> (#vk.2, 0) )
                  next
                    case d_xor_case_2
                    by solve( (#vr.6, 0) ~~> (#vk.2, 0) )
                  next
                    case d_xor_case_3
                    by solve( (#vr.6, 0) ~~> (#vk.2, 0) )
                  next
                    case d_xor_case_4
                    by solve( (#vr.6, 0) ~~> (#vk.2, 0) )
                  qed
                next
                  case C_1_case_2
                  by solve( (#vr.4, 0) ~~> (#vk.2, 0) )
                qed
              next
                case C_2_case_02
                solve( Mint( x.1, ~y.1, ~r.1 ) @ #j )
                  case C_1_case_1
                  solve( (#vr.4, 0) ~~> (#vk.2, 0) )
                    case d_xor_case_1
                    by solve( (#vr.6, 0) ~~> (#vk.2, 0) )
                  next
                    case d_xor_case_2
                    by solve( (#vr.6, 0) ~~> (#vk.2, 0) )
                  next
                    case d_xor_case_3
                    by solve( (#vr.6, 0) ~~> (#vk.2, 0) )
                  next
                    case d_xor_case_4
                    by solve( (#vr.6, 0) ~~> (#vk.2, 0) )
                  qed
                next
                  case C_1_case_2
                  by solve( (#vr.4, 0) ~~> (#vk.2, 0) )
                qed
              next
                case C_2_case_03
                solve( Mint( x.1, ~y.1, ~r.1 ) @ #j )
                  case C_1_case_1
                  solve( (#vr.5, 0) ~~> (#vk.2, 0) )
                    case d_xor_case_1
                    by solve( (#vr.7, 0) ~~> (#vk.2, 0) )
                  next
                    case d_xor_case_2
                    by solve( (#vr.7, 0) ~~> (#vk.2, 0) )
                  next
                    case d_xor_case_3
                    by solve( (#vr.7, 0) ~~> (#vk.2, 0) )
                  next
                    case d_xor_case_4
                    by solve( (#vr.7, 0) ~~> (#vk.2, 0) )
                  qed
                next
                  case C_1_case_2
                  by solve( (#vr.5, 0) ~~> (#vk.2, 0) )
                qed
              next
                case C_2_case_04
                solve( Mint( x.1, ~y.1, ~r.1 ) @ #j )
                  case C_1_case_1
                  solve( (#vr.5, 0) ~~> (#vk.2, 0) )
                    case d_xor_case_1
                    by solve( (#vr.7, 0) ~~> (#vk.2, 0) )
                  next
                    case d_xor_case_2
                    by solve( (#vr.7, 0) ~~> (#vk.2, 0) )
                  next
                    case d_xor_case_3
                    by solve( (#vr.7, 0) ~~> (#vk.2, 0) )
                  next
                    case d_xor_case_4
                    by solve( (#vr.7, 0) ~~> (#vk.2, 0) )
                  qed
                next
                  case C_1_case_2
                  by solve( (#vr.5, 0) ~~> (#vk.2, 0) )
                qed
              next
                case C_2_case_05
                by solve( Mint( blind(m, r.1), ~y.1, ~r.2 ) @ #j )
              next
                case C_2_case_06
                by solve( Mint( blind(blind(m, r.1), r.2), ~y.1, ~r.3 ) @ #j )
              next
                case C_2_case_07
                by solve( Mint( blind(blind(blind(m, r.1), r.2), r.3), ~y.1, ~r.4
                          ) @ #j )
              next
                case C_2_case_08
                by solve( Mint( blind(blind(blind(blind(m, r.1), r.2), r.3), r.4), ~y.1,
                                ~r.5
                          ) @ #j )
              next
                case C_2_case_09
                by solve( Mint( blind(blind(blind(blind(blind(m, r.1), r.2), r.3), r.4),
                                      r.5),
                                ~y.1, ~r.6
                          ) @ #j )
              next
                case C_2_case_10
                solve( splitEqs(3) )
                  case split
                  by solve( Mint( blind(blind(blind(blind(blind(blind(m, r.1), r.2), r.3),
                                                    r.4),
                                              r.5),
                                        r.6),
                                  ~y.1, ~r.7
                            ) @ #j )
                qed
              next
                case C_2_case_11
                by solve( Mint( blind(m, r.1), ~y.1, ~r.2 ) @ #j )
              next
                case C_2_case_12
                by solve( Mint( blind(blind(m, r.1), r.2), ~y.1, ~r.3 ) @ #j )
              next
                case C_2_case_13
                by solve( Mint( blind(blind(blind(m, r.1), r.2), r.3), ~y.1, ~r.4
                          ) @ #j )
              next
                case C_2_case_14
                by solve( Mint( blind(blind(blind(blind(m, r.1), r.2), r.3), r.4), ~y.1,
                                ~r.5
                          ) @ #j )
              next
                case C_2_case_15
                by solve( Mint( blind(blind(blind(blind(blind(m, r.1), r.2), r.3), r.4),
                                      r.5),
                                ~y.1, ~r.6
                          ) @ #j )
              next
                case C_2_case_16
                solve( splitEqs(3) )
                  case split
                  by solve( Mint( blind(blind(blind(blind(blind(blind(m, r.1), r.2), r.3),
                                                    r.4),
                                              r.5),
                                        r.6),
                                  ~y.1, ~r.7
                            ) @ #j )
                qed
              qed
            qed
          qed
        qed
      next
        case case_2
        by contradiction /* from formulas */
      qed
    qed
  qed
qed

lemma exec:
  exists-trace "∃ x y r #i. Spend( x, y, r ) @ #i"
/*
guarded formula characterizing all satisfying traces:
"∃ x y r #i. (Spend( x, y, r ) @ #i)"
*/
simplify
solve( !Bank_Pk( $B, pk(~skB) ) ▶₂ #i )
  case Register_Corrupted_Bank_pk
  solve( !KU( sign(blind(x.1, ~r), ~skB) ) @ #vk )
    case c_sign
    solve( !KU( blind(x.1, ~r) ) @ #vk.1 )
      case C_1_case_1
      solve( splitEqs(1) )
        case split
        solve( !KU( ~skB ) @ #vk.2 )
          case Register_Corrupted_Bank_pk
          solve( !St_C_1( x, ~y, ~r ) ▶₀ #i )
            case C_1
            SOLVED // trace found
          qed
        qed
      qed
    qed
  qed
qed

lemma anonymity:
  all-traces
  "∀ C #i.
    (TestSubject( C ) @ #i) ⇒
    ((¬(∃ #j. !KU( C ) @ #j)) ∨
     (∃ x r #i.1 #j.
       ((Spend( C, x, r ) @ #i.1) ∧ (Spend( C, x, r ) @ #j)) ∧ (¬(#i.1 = #j))))"
/*
guarded formula characterizing all counter-examples:
"∃ C #i.
  (TestSubject( C ) @ #i)
 ∧
  (∃ #j. (!KU( C ) @ #j)) ∧
  (∀ x r #i.1 #j.
    (Spend( C, x, r ) @ #i.1) ∧ (Spend( C, x, r ) @ #j) ⇒ #i.1 = #j)"
*/
simplify
solve( !KU( ~C ) @ #j )
  case C_1_case_1
  solve( !KU( ~x ) @ #vk.1 )
    case C_1_case_1
    by contradiction /* cyclic */
  next
    case C_1_case_2
    by solve( !KU( ~r ) @ #vk.1 )
  next
    case C_1_case_3
    solve( !KU( pk(k) ) @ #vk.3 )
      case c_pk
      by solve( !KU( ~r ) @ #vk.2 )
    qed
  next
    case C_2_case_1
    solve( !KU( sign(blind(~x, ~r), ~skB) ) @ #vk.2 )
      case c_sign
      solve( !KU( ~skB ) @ #vk.4 )
        case Register_Corrupted_Bank_pk
        solve( !KU( blind(~x, ~r) ) @ #vk.4 )
          case C_1
          by solve( !KU( ~r ) @ #vk.4 )
        next
          case c_blind
          by contradiction /* cyclic */
        qed
      qed
    qed
  next
    case C_2_case_2
    solve( !KU( sign(blind(~x, ~r), ~skB) ) @ #vk.3 )
      case c_sign
      solve( !KU( ~skB ) @ #vk.4 )
        case Register_Corrupted_Bank_pk
        solve( !KU( blind(~x, ~r) ) @ #vk.5 )
          case C_1
          by solve( !KU( ~r ) @ #vk.5 )
        next
          case c_blind
          by contradiction /* cyclic */
        qed
      qed
    qed
  qed
next
  case C_1_case_2
  solve( !KU( ~x ) @ #vk.3 )
    case C_1_case_1
    by contradiction /* cyclic */
  next
    case C_1_case_2
    solve( !KU( pk(k) ) @ #vk.3 )
      case c_pk
      by solve( !KU( ~r ) @ #vk.2 )
    qed
  next
    case C_1_case_3
    solve( !KU( pk(k) ) @ #vk.3 )
      case c_pk
      solve( !KU( pk(k.1) ) @ #vk.5 )
        case c_pk
        by solve( !KU( ~r ) @ #vk.3 )
      qed
    qed
  next
    case C_2_case_1
    solve( !KU( sign(blind(~x, ~r), ~skB) ) @ #vk.4 )
      case c_sign
      solve( !KU( pk(k) ) @ #vk.4 )
        case c_pk
        solve( !KU( ~skB ) @ #vk.6 )
          case Register_Corrupted_Bank_pk
          solve( !KU( blind(~x, ~r) ) @ #vk.6 )
            case C_1
            by solve( !KU( ~r ) @ #vk.5 )
          next
            case c_blind
            by contradiction /* cyclic */
          qed
        qed
      qed
    qed
  next
    case C_2_case_2
    solve( !KU( sign(blind(~x, ~r), ~skB) ) @ #vk.5 )
      case c_sign
      solve( !KU( pk(k) ) @ #vk.5 )
        case c_pk
        solve( !KU( ~skB ) @ #vk.6 )
          case Register_Corrupted_Bank_pk
          solve( !KU( blind(~x, ~r) ) @ #vk.7 )
            case C_1
            by solve( !KU( ~r ) @ #vk.6 )
          next
            case c_blind
            by contradiction /* cyclic */
          qed
        qed
      qed
    qed
  qed
next
  case C_2_case_1
  solve( !KU( sign(blind((~C⊕~y), ~r), ~skB) ) @ #vk )
    case c_sign
    solve( !KU( ~skB ) @ #vk.3 )
      case Register_Corrupted_Bank_pk
      solve( !KU( blind((~C⊕~y), ~r) ) @ #vk.3 )
        case C_1
        solve( !KU( ~y ) @ #vk.3 )
          case C_1_case_1
          by solve( !KU( ~r ) @ #vk.4 )
        next
          case C_1_case_2
          solve( !KU( pk(k) ) @ #vk.6 )
            case c_pk
            by solve( !KU( ~r ) @ #vk.5 )
          qed
        next
          case C_2
          by contradiction /* cyclic */
        qed
      next
        case c_blind
        by contradiction /* cyclic */
      qed
    qed
  qed
next
  case C_2_case_2
  solve( !KU( sign(blind((~C⊕~y), ~r), ~skB) ) @ #vk.1 )
    case c_sign
    solve( !KU( ~skB ) @ #vk.3 )
      case Register_Corrupted_Bank_pk
      solve( !KU( blind((~C⊕~y), ~r) ) @ #vk.4 )
        case C_1
        solve( !KU( ~y ) @ #vk.4 )
          case C_1_case_1
          by solve( !KU( ~r ) @ #vk.5 )
        next
          case C_1_case_2
          solve( !KU( pk(k) ) @ #vk.7 )
            case c_pk
            by solve( !KU( ~r ) @ #vk.6 )
          qed
        next
          case C_2
          by contradiction /* cyclic */
        qed
      next
        case c_blind
        by contradiction /* cyclic */
      qed
    qed
  qed
qed

lemma caught:
  exists-trace
  "∃ C #j x r #i1 #i2 #k.
    ((((TestSubject( C ) @ #j) ∧ (!KU( C ) @ #k)) ∧
      (Spend( C, x, r ) @ #i1)) ∧
     (Spend( C, x, r ) @ #i2)) ∧
    (¬(#i1 = #i2))"
/*
guarded formula characterizing all satisfying traces:
"∃ C #j x r #i1 #i2 #k.
  (TestSubject( C ) @ #j) ∧
  (!KU( C ) @ #k) ∧
  (Spend( C, x, r ) @ #i1) ∧
  (Spend( C, x, r ) @ #i2)
 ∧
  ¬(#i1 = #i2)"
*/
simplify
solve( !St_C_1( ~C, ~y, ~r ) ▶₀ #i1 )
  case C_1
  solve( !Bank_Pk( $B, pk(~skB) ) ▶₂ #i1 )
    case Register_Corrupted_Bank_pk
    solve( !St_C_1( ~C, ~y, ~r ) ▶₀ #i2 )
      case C_1
      solve( !Bank_Pk( $B.1, pk(~skB.1) ) ▶₂ #i2 )
        case Register_Corrupted_Bank_pk
        solve( !KU( ~C ) @ #k )
          case C_2_case_1
          solve( !KU( ~y.1 ) @ #vk.3 )
            case C_2_case_2
            solve( splitEqs(3) )
              case split
              solve( !KU( sign(blind(x, ~r), ~skB) ) @ #vk.1 )
                case c_sign
                solve( !KU( sign(blind(x.1, ~r), ~skB) ) @ #vk.2 )
                  case c_sign
                  solve( !KU( sign(blind((~C⊕~y.1), ~r.1), ~skB) ) @ #vk.3 )
                    case c_sign
                    solve( !KU( sign(blind(~y.1, ~r.1), ~skB) ) @ #vk.4 )
                      case c_sign
                      solve( !KU( blind(x, ~r) ) @ #vk.5 )
                        case C_1_case_1
                        solve( !KU( blind(x, ~r) ) @ #vk.7 )
                          case C_1_case_1
                          solve( !KU( ~skB ) @ #vk.5 )
                            case Register_Corrupted_Bank_pk
                            solve( !KU( blind((~C⊕~y.1), ~r.1) ) @ #vk.6 )
                              case C_1
                              solve( !KU( blind(~y.1, ~r.1) ) @ #vk.7 )
                                case C_1
                                solve( (#i1 < #i2)  ∥ (#i2 < #i1) )
                                  case case_1
                                  SOLVED // trace found
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    qed
                  qed
                qed
              qed
            qed
          qed
        qed
      qed
    qed
  qed
qed

/* All well-formedness checks were successful. */

end
/* Output
maude tool: 'maude'
 checking version: 2.7.1. OK.
 checking installation: OK.


analyzing: examples/csf18-xor/chaum_offline_anonymity.spthy

------------------------------------------------------------------------------
analyzed: examples/csf18-xor/chaum_offline_anonymity.spthy

  output:          examples/csf18-xor/chaum_offline_anonymity.spthy.tmp
  processing time: 8.635000966s
  coins (all-traces): verified (322 steps)
  exec (exists-trace): verified (8 steps)
  anonymity (all-traces): verified (54 steps)
  caught (exists-trace): verified (19 steps)

------------------------------------------------------------------------------

==============================================================================
summary of summaries:

analyzed: examples/csf18-xor/chaum_offline_anonymity.spthy

  output:          examples/csf18-xor/chaum_offline_anonymity.spthy.tmp
  processing time: 8.635000966s
  coins (all-traces): verified (322 steps)
  exec (exists-trace): verified (8 steps)
  anonymity (all-traces): verified (54 steps)
  caught (exists-trace): verified (19 steps)

==============================================================================
*/
