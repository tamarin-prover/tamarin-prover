theory CH07_UK3 begin

// Function signature and definition of the equational theory E

builtins: multiset, xor
functions: fst/1, h/1, lh/1, pair/2, rh/1, rot/2, snd/1
equations: fst(<x.1, x.2>) = x.1, snd(<x.1, x.2>) = x.2



rule (modulo E) Setup:
   [ Fr( ~k1 ), Fr( ~id1 ), Fr( ~k2 ), Fr( ~id2 ) ]
  --[ OnlyOnce( ) ]->
   [
   Reader( ('1'+diff((<~k1, ~id1>+<~k2, ~id2>), (<~k1, ~id1>+<~k1, ~id1>)))
   ),
   Tag( ('1'+diff((<~k1, ~id1>+<~k2, ~id2>), (<~k1, ~id1>+<~k1, ~id1>))) )
   ]

rule (modulo E) select_tag:
   [ Tag( (z+<~k, ~id>) ) ]
  --[ Tag( (z+<~k, ~id>) ) ]->
   [ TagRun( ~k, ~id ), Tag( z ) ]

rule (modulo E) select_reader:
   [ Reader( (z+<~k, ~id>) ) ]
  --[ Reader( (z+<~k, ~id>) ) ]->
   [ ReaderRun( ~k, ~id ), Reader( z ) ]

rule (modulo E) reader1:
   [ Fr( ~r1 ) ]
  --[ Challenge( ~r1, 'Reader' ) ]->
   [ Out( ~r1 ), Initiated( ~r1 ) ]

rule (modulo E) tag1:
   [ In( r1 ), Fr( ~r2 ), TagRun( ~k, ~id ) ]
  --[ Response( ~k, 'Tag' ), Challenge( ~r2, 'Tag' ) ]->
   [
   Out( <~r2, lh((h((~k⊕~r2⊕r1))⊕rot(~id, h((~k⊕~r2⊕r1)))))> ),
   TagState( ~k, ~id, r1, ~r2, h((~k⊕~r2⊕r1)) )
   ]

rule (modulo E) reader2:
   [
   Initiated( ~r1 ), ReaderRun( ~k, ~id ),
   In( <r2, lh((hash⊕rot(~id, hash)))> )
   ]
  --[
  Alive( ~k, 'Tag' ), Response( ~k, 'Reader' ), Eq( h((~k⊕~r1⊕r2)), hash )
  ]->
   [ Out( rh((hash⊕rot(~id, hash))) ) ]

rule (modulo E) tag2:
   [ In( rh((hash⊕rot(~id, hash))) ), TagState( ~k, ~id, r1, ~r2, hash ) ]
  --[ Alive( ~k, 'Reader' ) ]->
   [ ]

restriction equality [right]:
  "∀ x y #i. (Eq( x, y ) @ #i) ⇒ (x = y)"
  // safety formula

restriction equality [left]:
  "∀ x y #i. (Eq( x, y ) @ #i) ⇒ (x = y)"
  // safety formula

restriction max_number_of_tags_tag [right]:
  "∀ a b c d #i. (Tag( (a+b+c+d) ) @ #i) ⇒ (⊥)"
  // safety formula

restriction max_number_of_tags_tag [left]:
  "∀ a b c d #i. (Tag( (a+b+c+d) ) @ #i) ⇒ (⊥)"
  // safety formula

restriction max_number_of_tags_tag_reader [right]:
  "∀ a b c d #i. (Reader( (a+b+c+d) ) @ #i) ⇒ (⊥)"
  // safety formula

restriction max_number_of_tags_tag_reader [left]:
  "∀ a b c d #i. (Reader( (a+b+c+d) ) @ #i) ⇒ (⊥)"
  // safety formula

restriction unique [right]:
  "∀ #i #j. ((OnlyOnce( ) @ #i) ∧ (OnlyOnce( ) @ #j)) ⇒ (#i = #j)"
  // safety formula

restriction unique [left]:
  "∀ #i #j. ((OnlyOnce( ) @ #i) ∧ (OnlyOnce( ) @ #j)) ⇒ (#i = #j)"
  // safety formula

lemma recentalive_tag [right]:
  all-traces
  "∀ x #i.
    (Alive( x, 'Tag' ) @ #i) ⇒
    (∃ y #j #k.
      (((Challenge( y, 'Reader' ) @ #k) ∧ (Response( x, 'Tag' ) @ #j)) ∧
       (#k < #j)) ∧
      (#j < #i))"
/*
guarded formula characterizing all counter-examples:
"∃ x #i.
  (Alive( x, 'Tag' ) @ #i)
 ∧
  ∀ y #j #k.
   (Challenge( y, 'Reader' ) @ #k) ∧ (Response( x, 'Tag' ) @ #j)
  ⇒
   ((¬(#k < #j)) ∨ (¬(#j < #i)))"
*/
by sorry

lemma recentalive_tag [left]:
  all-traces
  "∀ x #i.
    (Alive( x, 'Tag' ) @ #i) ⇒
    (∃ y #j #k.
      (((Challenge( y, 'Reader' ) @ #k) ∧ (Response( x, 'Tag' ) @ #j)) ∧
       (#k < #j)) ∧
      (#j < #i))"
/*
guarded formula characterizing all counter-examples:
"∃ x #i.
  (Alive( x, 'Tag' ) @ #i)
 ∧
  ∀ y #j #k.
   (Challenge( y, 'Reader' ) @ #k) ∧ (Response( x, 'Tag' ) @ #j)
  ⇒
   ((¬(#k < #j)) ∨ (¬(#j < #i)))"
*/
by sorry

lemma recentalive_reader [right]:
  all-traces
  "∀ x #i.
    (Alive( x, 'Reader' ) @ #i) ⇒
    (∃ y #j #k.
      (((Challenge( y, 'Tag' ) @ #k) ∧ (Response( x, 'Reader' ) @ #j)) ∧
       (#k < #j)) ∧
      (#j < #i))"
/*
guarded formula characterizing all counter-examples:
"∃ x #i.
  (Alive( x, 'Reader' ) @ #i)
 ∧
  ∀ y #j #k.
   (Challenge( y, 'Tag' ) @ #k) ∧ (Response( x, 'Reader' ) @ #j)
  ⇒
   ((¬(#k < #j)) ∨ (¬(#j < #i)))"
*/
by sorry

lemma recentalive_reader [left]:
  all-traces
  "∀ x #i.
    (Alive( x, 'Reader' ) @ #i) ⇒
    (∃ y #j #k.
      (((Challenge( y, 'Tag' ) @ #k) ∧ (Response( x, 'Reader' ) @ #j)) ∧
       (#k < #j)) ∧
      (#j < #i))"
/*
guarded formula characterizing all counter-examples:
"∃ x #i.
  (Alive( x, 'Reader' ) @ #i)
 ∧
  ∀ y #j #k.
   (Challenge( y, 'Tag' ) @ #k) ∧ (Response( x, 'Reader' ) @ #j)
  ⇒
   ((¬(#k < #j)) ∨ (¬(#j < #i)))"
*/
by sorry

lemma executable [right]:
  exists-trace
  "∃ x #i #j. (Alive( x, 'Reader' ) @ #i) ∧ (Response( x, 'Tag' ) @ #j)"
/*
guarded formula characterizing all satisfying traces:
"∃ x #i #j. (Alive( x, 'Reader' ) @ #i) ∧ (Response( x, 'Tag' ) @ #j)"
*/
by sorry

lemma executable [left]:
  exists-trace
  "∃ x #i #j. (Alive( x, 'Reader' ) @ #i) ∧ (Response( x, 'Tag' ) @ #j)"
/*
guarded formula characterizing all satisfying traces:
"∃ x #i #j. (Alive( x, 'Reader' ) @ #i) ∧ (Response( x, 'Tag' ) @ #j)"
*/
by sorry

/* All well-formedness checks were successful. */

diffLemma Observational_equivalence:
rule-equivalence
  case Rule_Equality
  backward-search
    case RHS
    step( simplify )
    step( solve( !KD( x ) ▶₁ #i ) )
      case reader2
      step( solve( (#vl, 0) ~~> (#i, 1) ) )
        case rh
        step( solve( Initiated( ~r1 ) ▶₀ #vr ) )
          case reader1
          step( solve( ReaderRun( ~k, ~id ) ▶₁ #vr ) )
            case select_reader
            step( solve( !KU( lh((h(z)⊕rot(~id, h(z)))) ) @ #vk.3 ) )
              case tag1
              step( solve( Reader( (z.1+<~k, ~id>) ) ▶₀ #vr.2 ) )
                case Setup
                step( solve( Tag( (z.1+<~k.1, ~id>) ) ▶₀ #vr.5 ) )
                  case Setup
                  step( solve( !KU( rh((h(z)⊕rot(~id, h(z)))) ) @ #vk.2 ) )
                    case reader2
                    step( solve( Reader( (z.1+<~k.1, ~id>) ) ▶₀ #vr.9 ) )
                      case select_reader
                      step( solve( Reader( (z.1+<~k.1, ~id>+<~k.2, ~id.1>) ) ▶₀ #vr.10 ) )
                        case Setup
                        step( solve( splitEqs(0) ) )
                          case split_case_3
                          step( solve( splitEqs(1) ) )
                            case split_case_1
                            step( solve( !KU( ~r2 ) @ #vk.4 ) )
                              case tag1
                              step( solve( !KU( ~r1 ) @ #vk.5 ) )
                                case reader1
                                step( solve( splitEqs(2) ) )
                                  case split
                                  step( solve( !KU( (~r1⊕~r2⊕~r1.1) ) @ #vk.6 ) )
                                    case c_xor_case_1
                                    step( solve( !KU( (~r1⊕~r1.1) ) @ #vk.7 ) )
                                      case c_xor
                                      step( solve( !KU( ~r1.1 ) @ #vk.8 ) )
                                        case reader1
                                        by ATTACK // trace found
                                      qed
                                    qed
                                  qed
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    qed
                  qed
                qed
              qed
            qed
          qed
        qed
      qed
    qed
  qed
qed

end
/* Output
maude tool: 'maude'
 checking version: 2.7.1. OK.
 checking installation: OK.


analyzing: examples/csf18-xor/diff-models/CH07-UK3.spthy

------------------------------------------------------------------------------
analyzed: examples/csf18-xor/diff-models/CH07-UK3.spthy

  output:          examples/csf18-xor/diff-models/CH07-UK3.spthy.tmp
  processing time: 216.856310026s
  RHS :  recentalive_tag (all-traces): analysis incomplete (1 steps)
  LHS :  recentalive_tag (all-traces): analysis incomplete (1 steps)
  RHS :  recentalive_reader (all-traces): analysis incomplete (1 steps)
  LHS :  recentalive_reader (all-traces): analysis incomplete (1 steps)
  RHS :  executable (exists-trace): analysis incomplete (1 steps)
  LHS :  executable (exists-trace): analysis incomplete (1 steps)
  DiffLemma:  Observational_equivalence : falsified - found trace (22 steps)

------------------------------------------------------------------------------

==============================================================================
summary of summaries:

analyzed: examples/csf18-xor/diff-models/CH07-UK3.spthy

  output:          examples/csf18-xor/diff-models/CH07-UK3.spthy.tmp
  processing time: 216.856310026s
  RHS :  recentalive_tag (all-traces): analysis incomplete (1 steps)
  LHS :  recentalive_tag (all-traces): analysis incomplete (1 steps)
  RHS :  recentalive_reader (all-traces): analysis incomplete (1 steps)
  LHS :  recentalive_reader (all-traces): analysis incomplete (1 steps)
  RHS :  executable (exists-trace): analysis incomplete (1 steps)
  LHS :  executable (exists-trace): analysis incomplete (1 steps)
  DiffLemma:  Observational_equivalence : falsified - found trace (22 steps)

==============================================================================
*/
