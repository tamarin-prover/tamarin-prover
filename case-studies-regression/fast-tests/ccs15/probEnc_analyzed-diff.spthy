theory probEnc begin

// Function signature and definition of the equational theory E

functions: fst/1, pair/2, pdec/2, penc/3, pk/1, snd/1
equations:
    fst(<x.1, x.2>) = x.1,
    pdec(penc(m, pk(k), r), k) = m,
    snd(<x.1, x.2>) = x.2



rule (modulo E) gen:
   [ Fr( ~k ) ] --> [ !Key( ~k ), Out( pk(~k) ) ]

rule (modulo E) enc:
   [ !Key( k ), Fr( ~r1 ), Fr( ~r2 ), In( x ) ]
  -->
   [ Out( diff(~r1, penc(x, pk(k), ~r2)) ) ]

/* All well-formedness checks were successful. */

diffLemma Observational_equivalence:
rule-equivalence
  case Rule_Destrd_0_fst
  backward-search
    case LHS
    step( simplify )
    step( solve( !KD( <x, x.1> ) ▶₀ #i ) )
      case enc
      by step( contradiction /* impossible chain */ )
    next
      case gen
      by step( contradiction /* impossible chain */ )
    qed
  next
    case RHS
    step( simplify )
    step( solve( !KD( <x, x.1> ) ▶₀ #i ) )
      case enc
      step( solve( (#vl, 0) ~~> (#i, 0) ) )
        case d_0_pdec
        by step( contradiction /* forbidden chain */ )
      qed
    next
      case gen
      by step( contradiction /* impossible chain */ )
    qed
  qed
next
  case Rule_Destrd_0_pdec
  backward-search
    case LHS
    step( simplify )
    step( solve( !KD( penc(m, pk(k), r) ) ▶₀ #i ) )
      case enc
      by step( contradiction /* impossible chain */ )
    next
      case gen
      by step( contradiction /* impossible chain */ )
    qed
  next
    case RHS
    step( simplify )
    step( solve( !KD( penc(m, pk(k), r) ) ▶₀ #i ) )
      case enc
      step( solve( (#vl, 0) ~~> (#i, 0) ) )
        case d_0_pdec
        by step( contradiction /* forbidden chain */ )
      next
        case penc
        step( solve( !Key( k ) ▶₀ #vr ) )
          case gen
          by step( solve( !KU( ~k ) @ #vk ) )
        qed
      qed
    next
      case gen
      by step( contradiction /* impossible chain */ )
    qed
  qed
next
  case Rule_Destrd_0_snd
  backward-search
    case LHS
    step( simplify )
    step( solve( !KD( <x, x.1> ) ▶₀ #i ) )
      case enc
      by step( contradiction /* impossible chain */ )
    next
      case gen
      by step( contradiction /* impossible chain */ )
    qed
  next
    case RHS
    step( simplify )
    step( solve( !KD( <x, x.1> ) ▶₀ #i ) )
      case enc
      step( solve( (#vl, 0) ~~> (#i, 0) ) )
        case d_0_pdec
        by step( contradiction /* forbidden chain */ )
      qed
    next
      case gen
      by step( contradiction /* impossible chain */ )
    qed
  qed
next
  case Rule_Equality
  backward-search
    case LHS
    step( simplify )
    step( solve( !KD( x ) ▶₁ #i ) )
      case enc
      step( solve( (#vl, 0) ~~> (#i, 1) ) )
        case Var_fresh_r1
        step( solve( !Key( k ) ▶₀ #vr ) )
          case gen
          step( solve( !KU( ~r1 ) @ #vk ) )
            case enc
            MIRRORED
          qed
        qed
      qed
    next
      case gen
      step( solve( (#vl, 0) ~~> (#i, 1) ) )
        case pk
        step( solve( !KU( pk(~k) ) @ #vk ) )
          case c_pk
          by step( solve( !KU( ~k ) @ #vk.1 ) )
        next
          case gen
          MIRRORED
        qed
      qed
    qed
  next
    case RHS
    step( simplify )
    step( solve( !KD( x ) ▶₁ #i ) )
      case enc
      step( solve( (#vl, 0) ~~> (#i, 1) ) )
        case d_0_pdec
        step( solve( (#vr.1, 0) ~~> (#i, 1) ) )
          case Var_msg_1_x
          step( solve( !Key( k ) ▶₀ #vr ) )
            case gen
            by step( solve( !KU( ~k ) @ #vk.1 ) )
          qed
        qed
      next
        case penc
        step( solve( !Key( k ) ▶₀ #vr ) )
          case gen
          step( solve( !KU( penc(x, pk(~k), ~r2) ) @ #vk ) )
            case c_penc
            by step( solve( !KU( ~r2 ) @ #vk.3 ) )
          next
            case enc
            MIRRORED
          qed
        qed
      qed
    next
      case gen
      step( solve( (#vl, 0) ~~> (#i, 1) ) )
        case pk
        step( solve( !KU( pk(~k) ) @ #vk ) )
          case c_pk
          by step( solve( !KU( ~k ) @ #vk.1 ) )
        next
          case gen
          MIRRORED
        qed
      qed
    qed
  qed
next
  case Rule_Send
  backward-search
    case LHS
    step( simplify )
    MIRRORED
  next
    case RHS
    step( simplify )
    MIRRORED
  qed
next
  case Rule_enc
  backward-search
    case LHS
    step( simplify )
    step( solve( !Key( k ) ▶₀ #i ) )
      case gen
      MIRRORED
    qed
  next
    case RHS
    step( simplify )
    step( solve( !Key( k ) ▶₀ #i ) )
      case gen
      MIRRORED
    qed
  qed
next
  case Rule_gen
  backward-search
    case LHS
    step( simplify )
    MIRRORED
  next
    case RHS
    step( simplify )
    MIRRORED
  qed
qed

end
/* Output
maude tool: 'maude'
 checking version: 2.7.1. OK.
 checking installation: OK.


analyzing: examples/ccs15/probEnc.spthy

------------------------------------------------------------------------------
analyzed: examples/ccs15/probEnc.spthy

  output:          examples/ccs15/probEnc.spthy.tmp
  processing time: 0.136208112s
  DiffLemma:  Observational_equivalence : verified (75 steps)

------------------------------------------------------------------------------

==============================================================================
summary of summaries:

analyzed: examples/ccs15/probEnc.spthy

  output:          examples/ccs15/probEnc.spthy.tmp
  processing time: 0.136208112s
  DiffLemma:  Observational_equivalence : verified (75 steps)

==============================================================================
*/
