theory Issue331 begin

// Function signature and definition of the equational theory E

functions: fst/1, g/2, pair/2, snd/1
equations: fst(<x.1, x.2>) = x.1, snd(<x.1, x.2>) = x.2



rule (modulo E) R:
   [ Fr( ~k ), Fr( ~p ), Fr( ~n ) ]
  --[ A( ~k ) ]->
   [ Out( diff(g(~k, ~p), ~n) ) ]

restriction secrecy [right]:
  "¬(∃ #i1 #i2 k. (A( k ) @ #i1) ∧ (!KU( k ) @ #i2))"
  // safety formula

restriction secrecy [left]:
  "¬(∃ #i1 #i2 k. (A( k ) @ #i1) ∧ (!KU( k ) @ #i2))"
  // safety formula

/* All well-formedness checks were successful. */

diffLemma Observational_equivalence:
rule-equivalence
  case Rule_Destrd_0_fst
  backward-search
    case LHS
    step( simplify )
    step( solve( !KD( <x, x.1> ) ▶₀ #i ) )
      case R
      by step( contradiction /* impossible chain */ )
    qed
  next
    case RHS
    step( simplify )
    step( solve( !KD( <x, x.1> ) ▶₀ #i ) )
      case R
      by step( contradiction /* impossible chain */ )
    qed
  qed
next
  case Rule_Destrd_0_snd
  backward-search
    case LHS
    step( simplify )
    step( solve( !KD( <x, x.1> ) ▶₀ #i ) )
      case R
      by step( contradiction /* impossible chain */ )
    qed
  next
    case RHS
    step( simplify )
    step( solve( !KD( <x, x.1> ) ▶₀ #i ) )
      case R
      by step( contradiction /* impossible chain */ )
    qed
  qed
next
  case Rule_Equality
  backward-search
    case LHS
    step( simplify )
    step( solve( !KD( x ) ▶₁ #i ) )
      case R
      step( solve( (#vl, 0) ~~> (#i, 1) ) )
        case g
        step( solve( !KU( g(~k, ~p) ) @ #vk ) )
          case R
          MIRRORED
        next
          case c_g
          by step( contradiction /* from formulas */ )
        qed
      qed
    qed
  next
    case RHS
    step( simplify )
    step( solve( !KD( x ) ▶₁ #i ) )
      case R
      step( solve( (#vl, 0) ~~> (#i, 1) ) )
        case Var_fresh_n
        step( solve( !KU( ~n ) @ #vk ) )
          case R
          MIRRORED
        qed
      qed
    qed
  qed
next
  case Rule_R
  backward-search
    case LHS
    step( simplify )
    MIRRORED
  next
    case RHS
    step( simplify )
    MIRRORED
  qed
next
  case Rule_Send
  backward-search
    case LHS
    step( simplify )
    MIRRORED
  next
    case RHS
    step( simplify )
    MIRRORED
  qed
qed

end
/* Output
maude tool: 'maude'
 checking version: 2.7.1. OK.
 checking installation: OK.


analyzing: examples/regression/diff/issue331.spthy

------------------------------------------------------------------------------
analyzed: examples/regression/diff/issue331.spthy

  output:          examples/regression/diff/issue331.spthy.tmp
  processing time: 0.094464386s
  DiffLemma:  Observational_equivalence : verified (37 steps)

------------------------------------------------------------------------------

==============================================================================
summary of summaries:

analyzed: examples/regression/diff/issue331.spthy

  output:          examples/regression/diff/issue331.spthy.tmp
  processing time: 0.094464386s
  DiffLemma:  Observational_equivalence : verified (37 steps)

==============================================================================
*/
