theory Yubikey begin

// Function signature and definition of the equational theory E

functions: S/1, fst/1, myzero/0, pair/2, sdec/2, senc/2, snd/1
equations:
    fst(<x.1, x.2>) = x.1,
    sdec(senc(x.1, x.2), x.2) = x.1,
    snd(<x.1, x.2>) = x.2



/* looping facts with injective instances: Server/3, Y_counter/2 */

section{* The Yubikey-Protocol *}

rule (modulo E) InitSucc:
   [ In( myzero ), In( S(myzero) ) ]
  --[ Theory( ), IsSucc( myzero, S(myzero) ), IsZero( myzero ) ]->
   [ !Succ( myzero, S(myzero) ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) StepSucc:
   [ In( y ), In( S(y) ), !Succ( x, y ) ]
  --[ Theory( ), IsSucc( y, S(y) ) ]->
   [ !Succ( y, S(y) ) ]

  // loop breaker: [2]
  /* has exactly the trivial AC variant */

rule (modulo E) SimpleSmaller:
   [ !Succ( x, y ) ]
  --[ Theory( ), IsSmaller( x, y ) ]->
   [ !Smaller( x, y ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) ZExtendedSmaller:
   [ !Smaller( x, y ), !Succ( y, z ) ]
  --[ Theory( ), IsSmaller( x, z ) ]->
   [ !Smaller( x, z ) ]

  // loop breaker: [0]
  /* has exactly the trivial AC variant */

rule (modulo E) BuyANewYubikey:
   [ Fr( ~k ), Fr( ~pid ), Fr( ~sid ) ]
  --[
  Protocol( ), Init( ~pid, ~k ), ExtendedInit( ~pid, ~sid, ~k ),
  IsZero( myzero )
  ]->
   [
   !Y( ~pid, ~sid ), Y_counter( ~pid, myzero ),
   Server( ~pid, ~sid, myzero ), !SharedKey( ~pid, ~k ), Out( ~pid )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) Yubikey_Plugin:
   [ Y_counter( pid, sc ), !Smaller( sc, Ssc ) ]
  --[ Yubi( pid, Ssc ) ]->
   [ Y_counter( pid, Ssc ) ]

  // loop breaker: [0]
  /* has exactly the trivial AC variant */

rule (modulo E) Yubikey_PressButton:
   [
   !Y( pid, sid ), Y_counter( pid, tc ), !SharedKey( pid, k ),
   !Succ( tc, Stc ), Fr( ~npr ), Fr( ~nonce )
   ]
  --[
  YubiPress( pid, tc ), YubiOTP( pid, senc(<sid, tc, ~npr>, k) ),
  YubiSid( pid, sid, k )
  ]->
   [ Y_counter( pid, Stc ), Out( <pid, ~nonce, senc(<sid, tc, ~npr>, k)> ) ]

  // loop breaker: [1]
  /* has exactly the trivial AC variant */

rule (modulo E) Server_ReceiveOTP_NewSession:
   [
   Server( pid, sid, otc ), In( <pid, nonce, senc(<sid, tc, ~pr>, k)> ),
   !SharedKey( pid, k ), !Smaller( otc, tc )
   ]
  --[
  Login( pid, sid, tc, senc(<sid, tc, ~pr>, k) ),
  LoginCounter( pid, otc, tc )
  ]->
   [ Server( pid, sid, tc ) ]

  // loop breaker: [0]
  /* has exactly the trivial AC variant */

restriction transitivity:
  "∀ #t1 #t2 a b c.
    ((IsSmaller( a, b ) @ #t1) ∧ (IsSmaller( b, c ) @ #t2)) ⇒
    (∃ #t3. IsSmaller( a, c ) @ #t3)"

restriction smaller_implies_unequal:
  "¬(∃ a #t. IsSmaller( a, a ) @ #t)"
  // safety formula

restriction theory_before_protocol:
  "∀ #i #j. ((Theory( ) @ #i) ∧ (Protocol( ) @ #j)) ⇒ (#i < #j)"
  // safety formula

lemma Login_reachable:
  exists-trace "∃ #i pid sid x otp1. Login( pid, sid, x, otp1 ) @ #i"
/*
guarded formula characterizing all satisfying traces:
"∃ #i pid sid x otp1. (Login( pid, sid, x, otp1 ) @ #i)"
*/
simplify
solve( !SharedKey( pid, k ) ▶₂ #i )
  case BuyANewYubikey
  solve( !Smaller( otc, x ) ▶₃ #i )
    case SimpleSmaller_case_1
    solve( !KU( senc(<sid, S(myzero), ~pr>, ~k) ) @ #vk.4 )
      case Yubikey_PressButton
      solve( Server( ~pid, ~sid, myzero ) ▶₀ #i )
        case BuyANewYubikey
        solve( Y_counter( ~pid, S(myzero) ) ▶₁ #vr.3 )
          case Yubikey_Plugin_case_1
          solve( !Succ( x, S(myzero) ) ▶₂ #vr.6 )
            case InitSucc
            solve( Y_counter( ~pid, myzero ) ▶₀ #vr.7 )
              case BuyANewYubikey
              solve( !KU( ~pid ) @ #vk.3 )
                case BuyANewYubikey
                solve( !KU( S(myzero) ) @ #vk.6 )
                  case c_S
                  solve( !KU( S(S(myzero)) ) @ #vk.7 )
                    case c_S
                    SOLVED // trace found
                  qed
                qed
              qed
            qed
          qed
        qed
      qed
    qed
  qed
qed

lemma one_count_foreach_login [reuse, use_induction]:
  all-traces
  "∀ pid sid x otp #t2.
    (Login( pid, sid, x, otp ) @ #t2) ⇒
    (∃ #t1. (YubiPress( pid, x ) @ #t1) ∧ (#t1 < #t2))"
/*
guarded formula characterizing all counter-examples:
"∃ pid sid x otp #t2.
  (Login( pid, sid, x, otp ) @ #t2)
 ∧
  ∀ #t1. (YubiPress( pid, x ) @ #t1) ⇒ ¬(#t1 < #t2)"
*/
induction
  case empty_trace
  by contradiction /* from formulas */
next
  case non_empty_trace
  simplify
  solve( (∀ pid sid x otp #t2.
           (Login( pid, sid, x, otp ) @ #t2)
          ⇒
           ((last(#t2)) ∨
            (∃ #t1. (YubiPress( pid, x ) @ #t1) ∧ (¬(last(#t1))) ∧ (#t1 < #t2))))  ∥
         (∃ #t1 #t2 a b c.
           (IsSmaller( a, b ) @ #t1) ∧ (IsSmaller( b, c ) @ #t2)
          ∧
           (¬(last(#t2))) ∧
           (¬(last(#t1))) ∧
           (∀ #t3. (IsSmaller( a, c ) @ #t3) ⇒ last(#t3))) )
    case case_1
    solve( (last(#t2))  ∥
           (∃ #t1. (YubiPress( pid, x ) @ #t1) ∧ (¬(last(#t1))) ∧ (#t1 < #t2)) )
      case case_1
      solve( !SharedKey( pid, k ) ▶₂ #t2 )
        case BuyANewYubikey
        solve( !Smaller( otc, x ) ▶₃ #t2 )
          case SimpleSmaller_case_1
          solve( !KU( senc(<sid, S(myzero), ~pr>, ~k) ) @ #vk.4 )
            case Yubikey_PressButton
            by contradiction /* from formulas */
          next
            case c_senc
            by solve( !KU( ~k ) @ #vk.9 )
          qed
        next
          case SimpleSmaller_case_2
          solve( !KU( senc(<sid, S(otc), ~pr>, ~k) ) @ #vk.4 )
            case Yubikey_PressButton
            by contradiction /* from formulas */
          next
            case c_senc
            by solve( !KU( ~k ) @ #vk.9 )
          qed
        next
          case ZExtendedSmaller_case_1
          solve( !KU( senc(<sid, S(myzero), ~pr>, ~k) ) @ #vk.4 )
            case Yubikey_PressButton
            by contradiction /* from formulas */
          next
            case c_senc
            by solve( !KU( ~k ) @ #vk.9 )
          qed
        next
          case ZExtendedSmaller_case_2
          solve( !KU( senc(<sid, S(y), ~pr>, ~k) ) @ #vk.4 )
            case Yubikey_PressButton
            by contradiction /* from formulas */
          next
            case c_senc
            by solve( !KU( ~k ) @ #vk.9 )
          qed
        qed
      qed
    next
      case case_2
      by contradiction /* from formulas */
    qed
  next
    case case_2
    solve( !SharedKey( pid, k ) ▶₂ #t2 )
      case BuyANewYubikey
      solve( !Smaller( otc, x ) ▶₃ #t2 )
        case SimpleSmaller_case_1
        solve( IsSmaller( a, b ) @ #t1 )
          case SimpleSmaller
          solve( !Succ( a, b ) ▶₀ #t1 )
            case InitSucc
            solve( IsSmaller( S(myzero), c ) @ #t2.1 )
              case SimpleSmaller
              solve( !Succ( S(myzero), c ) ▶₀ #t2.1 )
                case StepSucc
                solve( IsSmaller( myzero, S(S(myzero)) ) @ #last )
                  case SimpleSmaller
                  by contradiction /* node #t2 after last node #last */
                next
                  case ZExtendedSmaller
                  by contradiction /* node #t2 after last node #last */
                qed
              qed
            next
              case ZExtendedSmaller
              solve( !Succ( y, c ) ▶₁ #t2.1 )
                case InitSucc
                by contradiction /* cyclic */
              next
                case StepSucc
                solve( IsSmaller( myzero, S(y) ) @ #last )
                  case SimpleSmaller
                  by contradiction /* node #t2 after last node #last */
                next
                  case ZExtendedSmaller
                  by contradiction /* node #t2 after last node #last */
                qed
              qed
            qed
          next
            case StepSucc
            solve( IsSmaller( S(a), c ) @ #t2.1 )
              case SimpleSmaller
              solve( !Succ( S(a), c ) ▶₀ #t2.1 )
                case StepSucc
                solve( IsSmaller( a, S(S(a)) ) @ #last )
                  case SimpleSmaller
                  by contradiction /* node #t2 after last node #last */
                next
                  case ZExtendedSmaller
                  by contradiction /* node #t2 after last node #last */
                qed
              qed
            next
              case ZExtendedSmaller
              solve( !Succ( y, c ) ▶₁ #t2.1 )
                case InitSucc
                solve( IsSmaller( a, S(myzero) ) @ #last )
                  case SimpleSmaller
                  by contradiction /* node #t2 after last node #last */
                next
                  case ZExtendedSmaller
                  by contradiction /* node #t2 after last node #last */
                qed
              next
                case StepSucc
                solve( IsSmaller( a, S(y) ) @ #last )
                  case SimpleSmaller
                  by contradiction /* node #t2 after last node #last */
                next
                  case ZExtendedSmaller
                  by contradiction /* node #t2 after last node #last */
                qed
              qed
            qed
          qed
        next
          case ZExtendedSmaller
          solve( !Succ( y, b ) ▶₁ #t1 )
            case InitSucc
            solve( IsSmaller( S(myzero), c ) @ #t2.1 )
              case SimpleSmaller
              solve( !Succ( S(myzero), c ) ▶₀ #t2.1 )
                case StepSucc
                solve( IsSmaller( a, S(S(myzero)) ) @ #last )
                  case SimpleSmaller
                  by contradiction /* node #t2 after last node #last */
                next
                  case ZExtendedSmaller
                  by contradiction /* node #t2 after last node #last */
                qed
              qed
            next
              case ZExtendedSmaller
              solve( !Succ( y, c ) ▶₁ #t2.1 )
                case InitSucc
                by contradiction /* cyclic */
              next
                case StepSucc
                solve( IsSmaller( a, S(y) ) @ #last )
                  case SimpleSmaller
                  by contradiction /* node #t2 after last node #last */
                next
                  case ZExtendedSmaller
                  by contradiction /* node #t2 after last node #last */
                qed
              qed
            qed
          next
            case StepSucc
            solve( IsSmaller( S(y), c ) @ #t2.1 )
              case SimpleSmaller
              solve( !Succ( S(y), c ) ▶₀ #t2.1 )
                case StepSucc
                solve( IsSmaller( a, S(S(y)) ) @ #last )
                  case SimpleSmaller
                  by contradiction /* node #t2 after last node #last */
                next
                  case ZExtendedSmaller
                  by contradiction /* node #t2 after last node #last */
                qed
              qed
            next
              case ZExtendedSmaller
              solve( !Succ( y.1, c ) ▶₁ #t2.1 )
                case InitSucc
                solve( IsSmaller( a, S(myzero) ) @ #last )
                  case SimpleSmaller
                  by contradiction /* node #t2 after last node #last */
                next
                  case ZExtendedSmaller
                  by contradiction /* node #t2 after last node #last */
                qed
              next
                case StepSucc
                solve( IsSmaller( a, S(y.1) ) @ #last )
                  case SimpleSmaller
                  by contradiction /* node #t2 after last node #last */
                next
                  case ZExtendedSmaller
                  by contradiction /* node #t2 after last node #last */
                qed
              qed
            qed
          qed
        qed
      next
        case SimpleSmaller_case_2
        solve( IsSmaller( a, b ) @ #t1 )
          case SimpleSmaller
          solve( !Succ( a, b ) ▶₀ #t1 )
            case InitSucc
            solve( IsSmaller( S(myzero), c ) @ #t2.1 )
              case SimpleSmaller
              solve( !Succ( S(myzero), c ) ▶₀ #t2.1 )
                case StepSucc
                solve( IsSmaller( myzero, S(S(myzero)) ) @ #last )
                  case SimpleSmaller
                  by contradiction /* node #t2 after last node #last */
                next
                  case ZExtendedSmaller
                  by contradiction /* node #t2 after last node #last */
                qed
              qed
            next
              case ZExtendedSmaller
              solve( !Succ( y, c ) ▶₁ #t2.1 )
                case InitSucc
                by contradiction /* cyclic */
              next
                case StepSucc
                solve( IsSmaller( myzero, S(y) ) @ #last )
                  case SimpleSmaller
                  by contradiction /* node #t2 after last node #last */
                next
                  case ZExtendedSmaller
                  by contradiction /* node #t2 after last node #last */
                qed
              qed
            qed
          next
            case StepSucc
            solve( IsSmaller( S(a), c ) @ #t2.1 )
              case SimpleSmaller
              solve( !Succ( S(a), c ) ▶₀ #t2.1 )
                case StepSucc
                solve( IsSmaller( a, S(S(a)) ) @ #last )
                  case SimpleSmaller
                  by contradiction /* node #t2 after last node #last */
                next
                  case ZExtendedSmaller
                  by contradiction /* node #t2 after last node #last */
                qed
              qed
            next
              case ZExtendedSmaller
              solve( !Succ( y, c ) ▶₁ #t2.1 )
                case InitSucc
                solve( IsSmaller( a, S(myzero) ) @ #last )
                  case SimpleSmaller
                  by contradiction /* node #t2 after last node #last */
                next
                  case ZExtendedSmaller
                  by contradiction /* node #t2 after last node #last */
                qed
              next
                case StepSucc
                solve( IsSmaller( a, S(y) ) @ #last )
                  case SimpleSmaller
                  by contradiction /* node #t2 after last node #last */
                next
                  case ZExtendedSmaller
                  by contradiction /* node #t2 after last node #last */
                qed
              qed
            qed
          qed
        next
          case ZExtendedSmaller
          solve( !Succ( y, b ) ▶₁ #t1 )
            case InitSucc
            solve( IsSmaller( S(myzero), c ) @ #t2.1 )
              case SimpleSmaller
              solve( !Succ( S(myzero), c ) ▶₀ #t2.1 )
                case StepSucc
                solve( IsSmaller( a, S(S(myzero)) ) @ #last )
                  case SimpleSmaller
                  by contradiction /* node #t2 after last node #last */
                next
                  case ZExtendedSmaller
                  by contradiction /* node #t2 after last node #last */
                qed
              qed
            next
              case ZExtendedSmaller
              solve( !Succ( y, c ) ▶₁ #t2.1 )
                case InitSucc
                by contradiction /* cyclic */
              next
                case StepSucc
                solve( IsSmaller( a, S(y) ) @ #last )
                  case SimpleSmaller
                  by contradiction /* node #t2 after last node #last */
                next
                  case ZExtendedSmaller
                  by contradiction /* node #t2 after last node #last */
                qed
              qed
            qed
          next
            case StepSucc
            solve( IsSmaller( S(y), c ) @ #t2.1 )
              case SimpleSmaller
              solve( !Succ( S(y), c ) ▶₀ #t2.1 )
                case StepSucc
                solve( IsSmaller( a, S(S(y)) ) @ #last )
                  case SimpleSmaller
                  by contradiction /* node #t2 after last node #last */
                next
                  case ZExtendedSmaller
                  by contradiction /* node #t2 after last node #last */
                qed
              qed
            next
              case ZExtendedSmaller
              solve( !Succ( y.1, c ) ▶₁ #t2.1 )
                case InitSucc
                solve( IsSmaller( a, S(myzero) ) @ #last )
                  case SimpleSmaller
                  by contradiction /* node #t2 after last node #last */
                next
                  case ZExtendedSmaller
                  by contradiction /* node #t2 after last node #last */
                qed
              next
                case StepSucc
                solve( IsSmaller( a, S(y.1) ) @ #last )
                  case SimpleSmaller
                  by contradiction /* node #t2 after last node #last */
                next
                  case ZExtendedSmaller
                  by contradiction /* node #t2 after last node #last */
                qed
              qed
            qed
          qed
        qed
      next
        case ZExtendedSmaller_case_1
        solve( IsSmaller( a, b ) @ #t1 )
          case SimpleSmaller
          solve( !Succ( a, b ) ▶₀ #t1 )
            case InitSucc
            solve( IsSmaller( S(myzero), c ) @ #t2.1 )
              case SimpleSmaller
              solve( !Succ( S(myzero), c ) ▶₀ #t2.1 )
                case StepSucc
                solve( IsSmaller( myzero, S(S(myzero)) ) @ #last )
                  case SimpleSmaller
                  by contradiction /* node #t2 after last node #last */
                next
                  case ZExtendedSmaller
                  by contradiction /* node #t2 after last node #last */
                qed
              qed
            next
              case ZExtendedSmaller
              solve( !Succ( y, c ) ▶₁ #t2.1 )
                case InitSucc
                by contradiction /* cyclic */
              next
                case StepSucc
                solve( IsSmaller( myzero, S(y) ) @ #last )
                  case SimpleSmaller
                  by contradiction /* node #t2 after last node #last */
                next
                  case ZExtendedSmaller
                  by contradiction /* node #t2 after last node #last */
                qed
              qed
            qed
          next
            case StepSucc
            solve( IsSmaller( S(a), c ) @ #t2.1 )
              case SimpleSmaller
              solve( !Succ( S(a), c ) ▶₀ #t2.1 )
                case StepSucc
                solve( IsSmaller( a, S(S(a)) ) @ #last )
                  case SimpleSmaller
                  by contradiction /* node #t2 after last node #last */
                next
                  case ZExtendedSmaller
                  by contradiction /* node #t2 after last node #last */
                qed
              qed
            next
              case ZExtendedSmaller
              solve( !Succ( y, c ) ▶₁ #t2.1 )
                case InitSucc
                solve( IsSmaller( a, S(myzero) ) @ #last )
                  case SimpleSmaller
                  by contradiction /* node #t2 after last node #last */
                next
                  case ZExtendedSmaller
                  by contradiction /* node #t2 after last node #last */
                qed
              next
                case StepSucc
                solve( IsSmaller( a, S(y) ) @ #last )
                  case SimpleSmaller
                  by contradiction /* node #t2 after last node #last */
                next
                  case ZExtendedSmaller
                  by contradiction /* node #t2 after last node #last */
                qed
              qed
            qed
          qed
        next
          case ZExtendedSmaller
          solve( !Succ( y, b ) ▶₁ #t1 )
            case InitSucc
            solve( IsSmaller( S(myzero), c ) @ #t2.1 )
              case SimpleSmaller
              solve( !Succ( S(myzero), c ) ▶₀ #t2.1 )
                case StepSucc
                solve( IsSmaller( a, S(S(myzero)) ) @ #last )
                  case SimpleSmaller
                  by contradiction /* node #t2 after last node #last */
                next
                  case ZExtendedSmaller
                  by contradiction /* node #t2 after last node #last */
                qed
              qed
            next
              case ZExtendedSmaller
              solve( !Succ( y, c ) ▶₁ #t2.1 )
                case InitSucc
                by contradiction /* cyclic */
              next
                case StepSucc
                solve( IsSmaller( a, S(y) ) @ #last )
                  case SimpleSmaller
                  by contradiction /* node #t2 after last node #last */
                next
                  case ZExtendedSmaller
                  by contradiction /* node #t2 after last node #last */
                qed
              qed
            qed
          next
            case StepSucc
            solve( IsSmaller( S(y), c ) @ #t2.1 )
              case SimpleSmaller
              solve( !Succ( S(y), c ) ▶₀ #t2.1 )
                case StepSucc
                solve( IsSmaller( a, S(S(y)) ) @ #last )
                  case SimpleSmaller
                  by contradiction /* node #t2 after last node #last */
                next
                  case ZExtendedSmaller
                  by contradiction /* node #t2 after last node #last */
                qed
              qed
            next
              case ZExtendedSmaller
              solve( !Succ( y.1, c ) ▶₁ #t2.1 )
                case InitSucc
                solve( IsSmaller( a, S(myzero) ) @ #last )
                  case SimpleSmaller
                  by contradiction /* node #t2 after last node #last */
                next
                  case ZExtendedSmaller
                  by contradiction /* node #t2 after last node #last */
                qed
              next
                case StepSucc
                solve( IsSmaller( a, S(y.1) ) @ #last )
                  case SimpleSmaller
                  by contradiction /* node #t2 after last node #last */
                next
                  case ZExtendedSmaller
                  by contradiction /* node #t2 after last node #last */
                qed
              qed
            qed
          qed
        qed
      next
        case ZExtendedSmaller_case_2
        solve( IsSmaller( a, b ) @ #t1 )
          case SimpleSmaller
          solve( !Succ( a, b ) ▶₀ #t1 )
            case InitSucc
            solve( IsSmaller( S(myzero), c ) @ #t2.1 )
              case SimpleSmaller
              solve( !Succ( S(myzero), c ) ▶₀ #t2.1 )
                case StepSucc
                solve( IsSmaller( myzero, S(S(myzero)) ) @ #last )
                  case SimpleSmaller
                  by contradiction /* node #t2 after last node #last */
                next
                  case ZExtendedSmaller
                  by contradiction /* node #t2 after last node #last */
                qed
              qed
            next
              case ZExtendedSmaller
              solve( !Succ( y.1, c ) ▶₁ #t2.1 )
                case InitSucc
                by contradiction /* cyclic */
              next
                case StepSucc
                solve( IsSmaller( myzero, S(y.1) ) @ #last )
                  case SimpleSmaller
                  by contradiction /* node #t2 after last node #last */
                next
                  case ZExtendedSmaller
                  by contradiction /* node #t2 after last node #last */
                qed
              qed
            qed
          next
            case StepSucc
            solve( IsSmaller( S(a), c ) @ #t2.1 )
              case SimpleSmaller
              solve( !Succ( S(a), c ) ▶₀ #t2.1 )
                case StepSucc
                solve( IsSmaller( a, S(S(a)) ) @ #last )
                  case SimpleSmaller
                  by contradiction /* node #t2 after last node #last */
                next
                  case ZExtendedSmaller
                  by contradiction /* node #t2 after last node #last */
                qed
              qed
            next
              case ZExtendedSmaller
              solve( !Succ( y.1, c ) ▶₁ #t2.1 )
                case InitSucc
                solve( IsSmaller( a, S(myzero) ) @ #last )
                  case SimpleSmaller
                  by contradiction /* node #t2 after last node #last */
                next
                  case ZExtendedSmaller
                  by contradiction /* node #t2 after last node #last */
                qed
              next
                case StepSucc
                solve( IsSmaller( a, S(y.1) ) @ #last )
                  case SimpleSmaller
                  by contradiction /* node #t2 after last node #last */
                next
                  case ZExtendedSmaller
                  by contradiction /* node #t2 after last node #last */
                qed
              qed
            qed
          qed
        next
          case ZExtendedSmaller
          solve( !Succ( y, b ) ▶₁ #t1 )
            case InitSucc
            solve( IsSmaller( S(myzero), c ) @ #t2.1 )
              case SimpleSmaller
              solve( !Succ( S(myzero), c ) ▶₀ #t2.1 )
                case StepSucc
                solve( IsSmaller( a, S(S(myzero)) ) @ #last )
                  case SimpleSmaller
                  by contradiction /* node #t2 after last node #last */
                next
                  case ZExtendedSmaller
                  by contradiction /* node #t2 after last node #last */
                qed
              qed
            next
              case ZExtendedSmaller
              solve( !Succ( y.1, c ) ▶₁ #t2.1 )
                case InitSucc
                by contradiction /* cyclic */
              next
                case StepSucc
                solve( IsSmaller( a, S(y.1) ) @ #last )
                  case SimpleSmaller
                  by contradiction /* node #t2 after last node #last */
                next
                  case ZExtendedSmaller
                  by contradiction /* node #t2 after last node #last */
                qed
              qed
            qed
          next
            case StepSucc
            solve( IsSmaller( S(y), c ) @ #t2.1 )
              case SimpleSmaller
              solve( !Succ( S(y), c ) ▶₀ #t2.1 )
                case StepSucc
                solve( IsSmaller( a, S(S(y)) ) @ #last )
                  case SimpleSmaller
                  by contradiction /* node #t2 after last node #last */
                next
                  case ZExtendedSmaller
                  by contradiction /* node #t2 after last node #last */
                qed
              qed
            next
              case ZExtendedSmaller
              solve( !Succ( y.2, c ) ▶₁ #t2.1 )
                case InitSucc
                solve( IsSmaller( a, S(myzero) ) @ #last )
                  case SimpleSmaller
                  by contradiction /* node #t2 after last node #last */
                next
                  case ZExtendedSmaller
                  by contradiction /* node #t2 after last node #last */
                qed
              next
                case StepSucc
                solve( IsSmaller( a, S(y.2) ) @ #last )
                  case SimpleSmaller
                  by contradiction /* node #t2 after last node #last */
                next
                  case ZExtendedSmaller
                  by contradiction /* node #t2 after last node #last */
                qed
              qed
            qed
          qed
        qed
      qed
    qed
  qed
qed

lemma slightly_weaker_invariant [reuse, use_induction]:
  all-traces
  "∀ pid otc1 tc1 otc2 tc2 #t1 #t2.
    ((LoginCounter( pid, otc1, tc1 ) @ #t1) ∧
     (LoginCounter( pid, otc2, tc2 ) @ #t2)) ⇒
    ((((#t1 < #t2) ∧ (∃ #t3. IsSmaller( tc1, tc2 ) @ #t3)) ∨ (#t2 < #t1)) ∨
     (#t1 = #t2))"
/*
guarded formula characterizing all counter-examples:
"∃ pid otc1 tc1 otc2 tc2 #t1 #t2.
  (LoginCounter( pid, otc1, tc1 ) @ #t1) ∧
  (LoginCounter( pid, otc2, tc2 ) @ #t2)
 ∧
  (((¬(#t1 < #t2)) ∨ (∀ #t3. (IsSmaller( tc1, tc2 ) @ #t3) ⇒ ⊥))) ∧
  (¬(#t2 < #t1)) ∧
  (¬(#t1 = #t2))"
*/
induction
  case empty_trace
  by contradiction
next
  case non_empty_trace
  simplify
  solve( (∀ pid otc1 tc1 otc2 tc2 #t1 #t2.
           (LoginCounter( pid, otc1, tc1 ) @ #t1) ∧
           (LoginCounter( pid, otc2, tc2 ) @ #t2)
          ⇒
           ((last(#t2)) ∨
            (last(#t1)) ∨
            ((#t1 < #t2) ∧ (∃ #t3. (IsSmaller( tc1, tc2 ) @ #t3) ∧ ¬(last(#t3)))) ∨
            (#t2 < #t1) ∨
            (#t1 = #t2)))  ∥
         (∃ #t1 #t2 a b c.
           (IsSmaller( a, b ) @ #t1) ∧ (IsSmaller( b, c ) @ #t2)
          ∧
           (¬(last(#t2))) ∧
           (¬(last(#t1))) ∧
           (∀ #t3. (IsSmaller( a, c ) @ #t3) ⇒ last(#t3))) )
    case case_1
    solve( (last(#t2))  ∥ (last(#t1))  ∥
           ((#t1 < #t2) ∧ (∃ #t3. (IsSmaller( tc1, tc2 ) @ #t3) ∧ ¬(last(#t3))))  ∥
           (#t2 < #t1)  ∥ (#t1 = #t2) )
      case case_1
      solve( Server( pid, sid, otc1 ) ▶₀ #t1 )
        case BuyANewYubikey
        solve( Server( ~pid, sid.1, otc2 ) ▶₀ #t2 )
          case 
          by sorry /* unannotated */
        next
          case BuyANewYubikey
          by contradiction /* cyclic */
        next
          case Server_ReceiveOTP_NewSession_case_1
          solve( ((#vr.1 < #t1) ∧
                  (∃ #t3. (IsSmaller( S(myzero), tc1 ) @ #t3) ∧ ¬(last(#t3))))  ∥
                 (#t1 < #vr.1)  ∥ (#vr.1 = #t1) )
            case case_1
            by contradiction /* non-injective facts (#vr,#vr.1,#t1) */
          next
            case case_2
            solve( !SharedKey( ~pid, k ) ▶₂ #t1 )
              case BuyANewYubikey
              solve( !Smaller( myzero, tc1 ) ▶₃ #t1 )
                case SimpleSmaller_case_1
                by contradiction /* from formulas */
              next
                case SimpleSmaller_case_2
                by contradiction /* from formulas */
              next
                case ZExtendedSmaller_case_1
                by contradiction /* from formulas */
              next
                case ZExtendedSmaller_case_2
                solve( !SharedKey( ~pid, k.1 ) ▶₂ #t2 )
                  case BuyANewYubikey
                  solve( !Smaller( S(myzero), tc2 ) ▶₃ #t2 )
                    case SimpleSmaller
                    by contradiction /* from formulas */
                  next
                    case ZExtendedSmaller_case_1
                    by contradiction /* from formulas */
                  next
                    case ZExtendedSmaller_case_2
                    by contradiction /* from formulas */
                  qed
                qed
              qed
            qed
          next
            case case_3
            solve( !SharedKey( ~pid, k.1 ) ▶₂ #t2 )
              case BuyANewYubikey
              solve( !Smaller( S(myzero), tc2 ) ▶₃ #t2 )
                case SimpleSmaller
                by contradiction /* from formulas */
              next
                case ZExtendedSmaller_case_1
                by contradiction /* from formulas */
              next
                case ZExtendedSmaller_case_2
                by contradiction /* from formulas */
              qed
            qed
          qed
        next
          case Server_ReceiveOTP_NewSession_case_2
          solve( ((#vr.1 < #t1) ∧
                  (∃ #t3. (IsSmaller( S(otc), tc1 ) @ #t3) ∧ ¬(last(#t3))))  ∥
                 (#t1 < #vr.1)  ∥ (#vr.1 = #t1) )
            case case_1
            by contradiction /* non-injective facts (#vr,#vr.1,#t1) */
          next
            case case_2
            solve( !SharedKey( ~pid, k ) ▶₂ #t1 )
              case BuyANewYubikey
              solve( !Smaller( myzero, tc1 ) ▶₃ #t1 )
                case SimpleSmaller_case_1
                solve( !SharedKey( ~pid, k.1 ) ▶₂ #t2 )
                  case BuyANewYubikey
                  solve( !Smaller( S(otc), tc2 ) ▶₃ #t2 )
                    case SimpleSmaller
                    by contradiction /* from formulas */
                  next
                    case ZExtendedSmaller_case_1
                    by contradiction /* from formulas */
                  next
                    case ZExtendedSmaller_case_2
                    by contradiction /* from formulas */
                  qed
                qed
              next
                case SimpleSmaller_case_2
                solve( !SharedKey( ~pid, k.1 ) ▶₂ #t2 )
                  case BuyANewYubikey
                  solve( !Smaller( S(otc), tc2 ) ▶₃ #t2 )
                    case SimpleSmaller
                    by contradiction /* from formulas */
                  next
                    case ZExtendedSmaller_case_1
                    by contradiction /* from formulas */
                  next
                    case ZExtendedSmaller_case_2
                    by contradiction /* from formulas */
                  qed
                qed
              next
                case ZExtendedSmaller_case_1
                solve( !SharedKey( ~pid, k.1 ) ▶₂ #t2 )
                  case BuyANewYubikey
                  solve( !Smaller( S(otc), tc2 ) ▶₃ #t2 )
                    case SimpleSmaller
                    by contradiction /* from formulas */
                  next
                    case ZExtendedSmaller_case_1
                    by contradiction /* from formulas */
                  next
                    case ZExtendedSmaller_case_2
                    by contradiction /* from formulas */
                  qed
                qed
              next
                case ZExtendedSmaller_case_2
                solve( !SharedKey( ~pid, k.1 ) ▶₂ #t2 )
                  case BuyANewYubikey
                  solve( !Smaller( S(otc), tc2 ) ▶₃ #t2 )
                    case SimpleSmaller
                    by contradiction /* from formulas */
                  next
                    case ZExtendedSmaller_case_1
                    by contradiction /* from formulas */
                  next
                    case ZExtendedSmaller_case_2
                    by contradiction /* from formulas */
                  qed
                qed
              qed
            qed
          next
            case case_3
            solve( !SharedKey( ~pid, k.1 ) ▶₂ #t2 )
              case BuyANewYubikey
              solve( !Smaller( S(myzero), tc2 ) ▶₃ #t2 )
                case SimpleSmaller
                by contradiction /* from formulas */
              next
                case ZExtendedSmaller_case_1
                by contradiction /* from formulas */
              next
                case ZExtendedSmaller_case_2
                by contradiction /* from formulas */
              qed
            qed
          qed
        next
          case Server_ReceiveOTP_NewSession_case_3
          solve( ((#vr.1 < #t1) ∧
                  (∃ #t3. (IsSmaller( S(myzero), tc1 ) @ #t3) ∧ ¬(last(#t3))))  ∥
                 (#t1 < #vr.1)  ∥ (#vr.1 = #t1) )
            case case_1
            by contradiction /* non-injective facts (#vr,#vr.1,#t1) */
          next
            case case_2
            solve( !SharedKey( ~pid, k ) ▶₂ #t1 )
              case BuyANewYubikey
              solve( !Smaller( myzero, tc1 ) ▶₃ #t1 )
                case SimpleSmaller_case_1
                by contradiction /* from formulas */
              next
                case SimpleSmaller_case_2
                by contradiction /* from formulas */
              next
                case ZExtendedSmaller_case_1
                by contradiction /* from formulas */
              next
                case ZExtendedSmaller_case_2
                solve( !SharedKey( ~pid, k.1 ) ▶₂ #t2 )
                  case BuyANewYubikey
                  solve( !Smaller( S(myzero), tc2 ) ▶₃ #t2 )
                    case SimpleSmaller
                    by contradiction /* from formulas */
                  next
                    case ZExtendedSmaller_case_1
                    by contradiction /* from formulas */
                  next
                    case ZExtendedSmaller_case_2
                    by contradiction /* from formulas */
                  qed
                qed
              qed
            qed
          next
            case case_3
            solve( !SharedKey( ~pid, k.1 ) ▶₂ #t2 )
              case BuyANewYubikey
              solve( !Smaller( S(myzero), tc2 ) ▶₃ #t2 )
                case SimpleSmaller
                by contradiction /* from formulas */
              next
                case ZExtendedSmaller_case_1
                by contradiction /* from formulas */
              next
                case ZExtendedSmaller_case_2
                by contradiction /* from formulas */
              qed
            qed
          qed
        next
          case Server_ReceiveOTP_NewSession_case_4
          solve( ((#vr.1 < #t1) ∧
                  (∃ #t3. (IsSmaller( S(y), tc1 ) @ #t3) ∧ ¬(last(#t3))))  ∥
                 (#t1 < #vr.1)  ∥ (#vr.1 = #t1) )
            case case_1
            by contradiction /* non-injective facts (#vr,#vr.1,#t1) */
          next
            case case_2
            solve( !SharedKey( ~pid, k ) ▶₂ #t1 )
              case BuyANewYubikey
              solve( !Smaller( myzero, tc1 ) ▶₃ #t1 )
                case SimpleSmaller_case_1
                solve( !SharedKey( ~pid, k.1 ) ▶₂ #t2 )
                  case BuyANewYubikey
                  solve( !Smaller( S(y), tc2 ) ▶₃ #t2 )
                    case SimpleSmaller
                    by contradiction /* from formulas */
                  next
                    case ZExtendedSmaller_case_1
                    by contradiction /* from formulas */
                  next
                    case ZExtendedSmaller_case_2
                    by contradiction /* from formulas */
                  qed
                qed
              next
                case SimpleSmaller_case_2
                solve( !SharedKey( ~pid, k.1 ) ▶₂ #t2 )
                  case BuyANewYubikey
                  solve( !Smaller( S(y), tc2 ) ▶₃ #t2 )
                    case SimpleSmaller
                    by contradiction /* from formulas */
                  next
                    case ZExtendedSmaller_case_1
                    by contradiction /* from formulas */
                  next
                    case ZExtendedSmaller_case_2
                    by contradiction /* from formulas */
                  qed
                qed
              next
                case ZExtendedSmaller_case_1
                solve( !SharedKey( ~pid, k.1 ) ▶₂ #t2 )
                  case BuyANewYubikey
                  solve( !Smaller( S(y), tc2 ) ▶₃ #t2 )
                    case SimpleSmaller
                    by contradiction /* from formulas */
                  next
                    case ZExtendedSmaller_case_1
                    by contradiction /* from formulas */
                  next
                    case ZExtendedSmaller_case_2
                    by contradiction /* from formulas */
                  qed
                qed
              next
                case ZExtendedSmaller_case_2
                solve( !SharedKey( ~pid, k.1 ) ▶₂ #t2 )
                  case BuyANewYubikey
                  solve( !Smaller( S(y.1), tc2 ) ▶₃ #t2 )
                    case SimpleSmaller
                    by contradiction /* from formulas */
                  next
                    case ZExtendedSmaller_case_1
                    by contradiction /* from formulas */
                  next
                    case ZExtendedSmaller_case_2
                    by contradiction /* from formulas */
                  qed
                qed
              qed
            qed
          next
            case case_3
            solve( !SharedKey( ~pid, k.1 ) ▶₂ #t2 )
              case BuyANewYubikey
              solve( !Smaller( S(y), tc2 ) ▶₃ #t2 )
                case SimpleSmaller
                by contradiction /* from formulas */
              next
                case ZExtendedSmaller_case_1
                by contradiction /* from formulas */
              next
                case ZExtendedSmaller_case_2
                by contradiction /* from formulas */
              qed
            qed
          qed
        qed
      next
        case Server_ReceiveOTP_NewSession_case_1
        solve( Server( ~pid, sid.1, otc2 ) ▶₀ #t2 )
          case 
          by sorry /* unannotated */
        next
          case BuyANewYubikey
          by contradiction /* non-injective facts (#vr.1,#t1,#t2) */
        next
          case Server_ReceiveOTP_NewSession_case_1
          solve( ((#vr.4 < #t1) ∧
                  (∃ #t3. (IsSmaller( S(myzero), tc1 ) @ #t3) ∧ ¬(last(#t3))))  ∥
                 (#t1 < #vr.4) )
            case case_1
            by contradiction /* non-injective facts (#vr.4,#t1,#t2) */
          next
            case case_2
            by contradiction /* from formulas */
          qed
        next
          case Server_ReceiveOTP_NewSession_case_2
          solve( ((#vr.4 < #t1) ∧
                  (∃ #t3. (IsSmaller( S(otc), tc1 ) @ #t3) ∧ ¬(last(#t3))))  ∥
                 (#t1 < #vr.4)  ∥ (#vr.4 = #t1) )
            case case_1
            by contradiction /* non-injective facts (#vr.4,#t1,#t2) */
          next
            case case_2
            solve( !SharedKey( ~pid, k ) ▶₂ #t1 )
              case BuyANewYubikey
              solve( !Smaller( S(myzero), tc1 ) ▶₃ #t1 )
                case SimpleSmaller
                solve( !SharedKey( ~pid, k.1 ) ▶₂ #t2 )
                  case BuyANewYubikey
                  solve( !Smaller( S(otc), tc2 ) ▶₃ #t2 )
                    case SimpleSmaller
                    by contradiction /* from formulas */
                  next
                    case ZExtendedSmaller_case_1
                    by contradiction /* from formulas */
                  next
                    case ZExtendedSmaller_case_2
                    by contradiction /* from formulas */
                  qed
                qed
              next
                case ZExtendedSmaller_case_1
                by contradiction /* from formulas */
              next
                case ZExtendedSmaller_case_2
                solve( !SharedKey( ~pid, k.1 ) ▶₂ #t2 )
                  case BuyANewYubikey
                  solve( !Smaller( S(otc), tc2 ) ▶₃ #t2 )
                    case SimpleSmaller
                    by contradiction /* from formulas */
                  next
                    case ZExtendedSmaller_case_1
                    by contradiction /* from formulas */
                  next
                    case ZExtendedSmaller_case_2
                    by contradiction /* from formulas */
                  qed
                qed
              qed
            qed
          next
            case case_3
            solve( !SharedKey( ~pid, k.1 ) ▶₂ #t2 )
              case BuyANewYubikey
              solve( !Smaller( S(S(myzero)), tc2 ) ▶₃ #t2 )
                case SimpleSmaller
                by contradiction /* from formulas */
              next
                case ZExtendedSmaller_case_1
                by contradiction /* from formulas */
              next
                case ZExtendedSmaller_case_2
                by contradiction /* from formulas */
              qed
            qed
          qed
        next
          case Server_ReceiveOTP_NewSession_case_3
          solve( ((#vr.4 < #t1) ∧
                  (∃ #t3. (IsSmaller( S(myzero), tc1 ) @ #t3) ∧ ¬(last(#t3))))  ∥
                 (#t1 < #vr.4)  ∥ (#vr.4 = #t1) )
            case case_1
            by contradiction /* non-injective facts (#vr.4,#t1,#t2) */
          next
            case case_2
            by contradiction /* from formulas */
          next
            case case_3
            by contradiction /* from formulas */
          qed
        next
          case Server_ReceiveOTP_NewSession_case_4
          solve( ((#vr.4 < #t1) ∧
                  (∃ #t3. (IsSmaller( S(y), tc1 ) @ #t3) ∧ ¬(last(#t3))))  ∥
                 (#t1 < #vr.4)  ∥ (#vr.4 = #t1) )
            case case_1
            by contradiction /* non-injective facts (#vr.4,#t1,#t2) */
          next
            case case_2
            solve( !SharedKey( ~pid, k ) ▶₂ #t1 )
              case BuyANewYubikey
              solve( !Smaller( S(myzero), tc1 ) ▶₃ #t1 )
                case SimpleSmaller
                solve( !SharedKey( ~pid, k.1 ) ▶₂ #t2 )
                  case BuyANewYubikey
                  solve( !Smaller( S(y), tc2 ) ▶₃ #t2 )
                    case SimpleSmaller
                    by contradiction /* from formulas */
                  next
                    case ZExtendedSmaller_case_1
                    by contradiction /* from formulas */
                  next
                    case ZExtendedSmaller_case_2
                    by contradiction /* from formulas */
                  qed
                qed
              next
                case ZExtendedSmaller_case_1
                by contradiction /* from formulas */
              next
                case ZExtendedSmaller_case_2
                solve( !SharedKey( ~pid, k.1 ) ▶₂ #t2 )
                  case BuyANewYubikey
                  solve( !Smaller( S(y.1), tc2 ) ▶₃ #t2 )
                    case SimpleSmaller
                    by contradiction /* from formulas */
                  next
                    case ZExtendedSmaller_case_1
                    by contradiction /* from formulas */
                  next
                    case ZExtendedSmaller_case_2
                    by contradiction /* from formulas */
                  qed
                qed
              qed
            qed
          next
            case case_3
            solve( !SharedKey( ~pid, k.1 ) ▶₂ #t2 )
              case BuyANewYubikey
              solve( !Smaller( S(y), tc2 ) ▶₃ #t2 )
                case SimpleSmaller
                by contradiction /* from formulas */
              next
                case ZExtendedSmaller_case_1
                by contradiction /* from formulas */
              next
                case ZExtendedSmaller_case_2
                by contradiction /* from formulas */
              qed
            qed
          qed
        qed
      next
        case Server_ReceiveOTP_NewSession_case_2
        solve( Server( ~pid, sid.1, otc2 ) ▶₀ #t2 )
          case 
          by sorry /* unannotated */
        next
          case BuyANewYubikey
          by contradiction /* non-injective facts (#vr.1,#t1,#t2) */
        next
          case Server_ReceiveOTP_NewSession_case_1
          solve( ((#vr.4 < #t1) ∧
                  (∃ #t3. (IsSmaller( S(myzero), tc1 ) @ #t3) ∧ ¬(last(#t3))))  ∥
                 (#t1 < #vr.4) )
            case case_1
            by contradiction /* non-injective facts (#vr.4,#t1,#t2) */
          next
            case case_2
            solve( !SharedKey( ~pid, k ) ▶₂ #t1 )
              case BuyANewYubikey
              solve( !Smaller( S(otc), tc1 ) ▶₃ #t1 )
                case SimpleSmaller
                solve( !SharedKey( ~pid, k.1 ) ▶₂ #t2 )
                  case BuyANewYubikey
                  solve( !Smaller( S(myzero), tc2 ) ▶₃ #t2 )
                    case SimpleSmaller
                    by contradiction /* from formulas */
                  next
                    case ZExtendedSmaller_case_1
                    by contradiction /* from formulas */
                  next
                    case ZExtendedSmaller_case_2
                    by contradiction /* from formulas */
                  qed
                qed
              next
                case ZExtendedSmaller_case_1
                by contradiction /* from formulas */
              next
                case ZExtendedSmaller_case_2
                solve( !SharedKey( ~pid, k.1 ) ▶₂ #t2 )
                  case BuyANewYubikey
                  solve( !Smaller( S(myzero), tc2 ) ▶₃ #t2 )
                    case SimpleSmaller
                    by contradiction /* from formulas */
                  next
                    case ZExtendedSmaller_case_1
                    by contradiction /* from formulas */
                  next
                    case ZExtendedSmaller_case_2
                    by contradiction /* from formulas */
                  qed
                qed
              qed
            qed
          qed
        next
          case Server_ReceiveOTP_NewSession_case_2
          solve( ((#vr.4 < #t1) ∧
                  (∃ #t3. (IsSmaller( S(otc.1), tc1 ) @ #t3) ∧ ¬(last(#t3))))  ∥
                 (#t1 < #vr.4)  ∥ (#vr.4 = #t1) )
            case case_1
            by contradiction /* non-injective facts (#vr.4,#t1,#t2) */
          next
            case case_2
            solve( !SharedKey( ~pid, k ) ▶₂ #t1 )
              case BuyANewYubikey
              solve( !Smaller( S(otc), tc1 ) ▶₃ #t1 )
                case SimpleSmaller
                solve( !SharedKey( ~pid, k.1 ) ▶₂ #t2 )
                  case BuyANewYubikey
                  solve( !Smaller( S(otc.1), tc2 ) ▶₃ #t2 )
                    case SimpleSmaller
                    by contradiction /* from formulas */
                  next
                    case ZExtendedSmaller_case_1
                    by contradiction /* from formulas */
                  next
                    case ZExtendedSmaller_case_2
                    by contradiction /* from formulas */
                  qed
                qed
              next
                case ZExtendedSmaller_case_1
                solve( !SharedKey( ~pid, k.1 ) ▶₂ #t2 )
                  case BuyANewYubikey
                  solve( !Smaller( S(otc.1), tc2 ) ▶₃ #t2 )
                    case SimpleSmaller
                    by contradiction /* from formulas */
                  next
                    case ZExtendedSmaller_case_1
                    by contradiction /* from formulas */
                  next
                    case ZExtendedSmaller_case_2
                    by contradiction /* from formulas */
                  qed
                qed
              next
                case ZExtendedSmaller_case_2
                solve( !SharedKey( ~pid, k.1 ) ▶₂ #t2 )
                  case BuyANewYubikey
                  solve( !Smaller( S(otc.1), tc2 ) ▶₃ #t2 )
                    case SimpleSmaller
                    by contradiction /* from formulas */
                  next
                    case ZExtendedSmaller_case_1
                    by contradiction /* from formulas */
                  next
                    case ZExtendedSmaller_case_2
                    by contradiction /* from formulas */
                  qed
                qed
              qed
            qed
          next
            case case_3
            solve( !SharedKey( ~pid, k.1 ) ▶₂ #t2 )
              case BuyANewYubikey
              solve( !Smaller( S(S(otc)), tc2 ) ▶₃ #t2 )
                case SimpleSmaller
                by contradiction /* from formulas */
              next
                case ZExtendedSmaller_case_1
                by contradiction /* from formulas */
              next
                case ZExtendedSmaller_case_2
                by contradiction /* from formulas */
              qed
            qed
          qed
        next
          case Server_ReceiveOTP_NewSession_case_3
          solve( ((#vr.4 < #t1) ∧
                  (∃ #t3. (IsSmaller( S(myzero), tc1 ) @ #t3) ∧ ¬(last(#t3))))  ∥
                 (#t1 < #vr.4)  ∥ (#vr.4 = #t1) )
            case case_1
            by contradiction /* non-injective facts (#vr.4,#t1,#t2) */
          next
            case case_2
            solve( !SharedKey( ~pid, k ) ▶₂ #t1 )
              case BuyANewYubikey
              solve( !Smaller( S(otc), tc1 ) ▶₃ #t1 )
                case SimpleSmaller
                solve( !SharedKey( ~pid, k.1 ) ▶₂ #t2 )
                  case BuyANewYubikey
                  solve( !Smaller( S(myzero), tc2 ) ▶₃ #t2 )
                    case SimpleSmaller
                    by contradiction /* from formulas */
                  next
                    case ZExtendedSmaller_case_1
                    by contradiction /* from formulas */
                  next
                    case ZExtendedSmaller_case_2
                    by contradiction /* from formulas */
                  qed
                qed
              next
                case ZExtendedSmaller_case_1
                by contradiction /* from formulas */
              next
                case ZExtendedSmaller_case_2
                solve( !SharedKey( ~pid, k.1 ) ▶₂ #t2 )
                  case BuyANewYubikey
                  solve( !Smaller( S(myzero), tc2 ) ▶₃ #t2 )
                    case SimpleSmaller
                    by contradiction /* from formulas */
                  next
                    case ZExtendedSmaller_case_1
                    by contradiction /* from formulas */
                  next
                    case ZExtendedSmaller_case_2
                    by contradiction /* from formulas */
                  qed
                qed
              qed
            qed
          next
            case case_3
            solve( !SharedKey( ~pid, k.1 ) ▶₂ #t2 )
              case BuyANewYubikey
              solve( !Smaller( S(myzero), tc2 ) ▶₃ #t2 )
                case SimpleSmaller
                by contradiction /* from formulas */
              next
                case ZExtendedSmaller_case_1
                by contradiction /* from formulas */
              next
                case ZExtendedSmaller_case_2
                by contradiction /* from formulas */
              qed
            qed
          qed
        next
          case Server_ReceiveOTP_NewSession_case_4
          solve( ((#vr.4 < #t1) ∧
                  (∃ #t3. (IsSmaller( S(y), tc1 ) @ #t3) ∧ ¬(last(#t3))))  ∥
                 (#t1 < #vr.4)  ∥ (#vr.4 = #t1) )
            case case_1
            by contradiction /* non-injective facts (#vr.4,#t1,#t2) */
          next
            case case_2
            solve( !SharedKey( ~pid, k ) ▶₂ #t1 )
              case BuyANewYubikey
              solve( !Smaller( S(otc), tc1 ) ▶₃ #t1 )
                case SimpleSmaller
                solve( !SharedKey( ~pid, k.1 ) ▶₂ #t2 )
                  case BuyANewYubikey
                  solve( !Smaller( S(y), tc2 ) ▶₃ #t2 )
                    case SimpleSmaller
                    by contradiction /* from formulas */
                  next
                    case ZExtendedSmaller_case_1
                    by contradiction /* from formulas */
                  next
                    case ZExtendedSmaller_case_2
                    by contradiction /* from formulas */
                  qed
                qed
              next
                case ZExtendedSmaller_case_1
                solve( !SharedKey( ~pid, k.1 ) ▶₂ #t2 )
                  case BuyANewYubikey
                  solve( !Smaller( S(y), tc2 ) ▶₃ #t2 )
                    case SimpleSmaller
                    by contradiction /* from formulas */
                  next
                    case ZExtendedSmaller_case_1
                    by contradiction /* from formulas */
                  next
                    case ZExtendedSmaller_case_2
                    by contradiction /* from formulas */
                  qed
                qed
              next
                case ZExtendedSmaller_case_2
                solve( !SharedKey( ~pid, k.1 ) ▶₂ #t2 )
                  case BuyANewYubikey
                  solve( !Smaller( S(y.1), tc2 ) ▶₃ #t2 )
                    case SimpleSmaller
                    by contradiction /* from formulas */
                  next
                    case ZExtendedSmaller_case_1
                    by contradiction /* from formulas */
                  next
                    case ZExtendedSmaller_case_2
                    by contradiction /* from formulas */
                  qed
                qed
              qed
            qed
          next
            case case_3
            solve( !SharedKey( ~pid, k.1 ) ▶₂ #t2 )
              case BuyANewYubikey
              solve( !Smaller( S(y), tc2 ) ▶₃ #t2 )
                case SimpleSmaller
                by contradiction /* from formulas */
              next
                case ZExtendedSmaller_case_1
                by contradiction /* from formulas */
              next
                case ZExtendedSmaller_case_2
                by contradiction /* from formulas */
              qed
            qed
          qed
        qed
      next
        case Server_ReceiveOTP_NewSession_case_3
        solve( Server( ~pid, sid.1, otc2 ) ▶₀ #t2 )
          case 
          by sorry /* unannotated */
        next
          case BuyANewYubikey
          by contradiction /* non-injective facts (#vr.1,#t1,#t2) */
        next
          case Server_ReceiveOTP_NewSession_case_1
          solve( ((#vr.4 < #t1) ∧
                  (∃ #t3. (IsSmaller( S(myzero), tc1 ) @ #t3) ∧ ¬(last(#t3))))  ∥
                 (#t1 < #vr.4) )
            case case_1
            by contradiction /* non-injective facts (#vr.4,#t1,#t2) */
          next
            case case_2
            by contradiction /* from formulas */
          qed
        next
          case Server_ReceiveOTP_NewSession_case_2
          solve( ((#vr.4 < #t1) ∧
                  (∃ #t3. (IsSmaller( S(otc), tc1 ) @ #t3) ∧ ¬(last(#t3))))  ∥
                 (#t1 < #vr.4)  ∥ (#vr.4 = #t1) )
            case case_1
            by contradiction /* non-injective facts (#vr.4,#t1,#t2) */
          next
            case case_2
            solve( !SharedKey( ~pid, k ) ▶₂ #t1 )
              case BuyANewYubikey
              solve( !Smaller( S(myzero), tc1 ) ▶₃ #t1 )
                case SimpleSmaller
                solve( !SharedKey( ~pid, k.1 ) ▶₂ #t2 )
                  case BuyANewYubikey
                  solve( !Smaller( S(otc), tc2 ) ▶₃ #t2 )
                    case SimpleSmaller
                    by contradiction /* from formulas */
                  next
                    case ZExtendedSmaller_case_1
                    by contradiction /* from formulas */
                  next
                    case ZExtendedSmaller_case_2
                    by contradiction /* from formulas */
                  qed
                qed
              next
                case ZExtendedSmaller_case_1
                by contradiction /* from formulas */
              next
                case ZExtendedSmaller_case_2
                solve( !SharedKey( ~pid, k.1 ) ▶₂ #t2 )
                  case BuyANewYubikey
                  solve( !Smaller( S(otc), tc2 ) ▶₃ #t2 )
                    case SimpleSmaller
                    by contradiction /* from formulas */
                  next
                    case ZExtendedSmaller_case_1
                    by contradiction /* from formulas */
                  next
                    case ZExtendedSmaller_case_2
                    by contradiction /* from formulas */
                  qed
                qed
              qed
            qed
          next
            case case_3
            solve( !SharedKey( ~pid, k.1 ) ▶₂ #t2 )
              case BuyANewYubikey
              solve( !Smaller( S(S(myzero)), tc2 ) ▶₃ #t2 )
                case SimpleSmaller
                by contradiction /* from formulas */
              next
                case ZExtendedSmaller_case_1
                by contradiction /* from formulas */
              next
                case ZExtendedSmaller_case_2
                by contradiction /* from formulas */
              qed
            qed
          qed
        next
          case Server_ReceiveOTP_NewSession_case_3
          solve( ((#vr.4 < #t1) ∧
                  (∃ #t3. (IsSmaller( S(myzero), tc1 ) @ #t3) ∧ ¬(last(#t3))))  ∥
                 (#t1 < #vr.4)  ∥ (#vr.4 = #t1) )
            case case_1
            by contradiction /* non-injective facts (#vr.4,#t1,#t2) */
          next
            case case_2
            by contradiction /* from formulas */
          next
            case case_3
            by contradiction /* from formulas */
          qed
        next
          case Server_ReceiveOTP_NewSession_case_4
          solve( ((#vr.4 < #t1) ∧
                  (∃ #t3. (IsSmaller( S(y), tc1 ) @ #t3) ∧ ¬(last(#t3))))  ∥
                 (#t1 < #vr.4)  ∥ (#vr.4 = #t1) )
            case case_1
            by contradiction /* non-injective facts (#vr.4,#t1,#t2) */
          next
            case case_2
            solve( !SharedKey( ~pid, k ) ▶₂ #t1 )
              case BuyANewYubikey
              solve( !Smaller( S(myzero), tc1 ) ▶₃ #t1 )
                case SimpleSmaller
                solve( !SharedKey( ~pid, k.1 ) ▶₂ #t2 )
                  case BuyANewYubikey
                  solve( !Smaller( S(y), tc2 ) ▶₃ #t2 )
                    case SimpleSmaller
                    by contradiction /* from formulas */
                  next
                    case ZExtendedSmaller_case_1
                    by contradiction /* from formulas */
                  next
                    case ZExtendedSmaller_case_2
                    by contradiction /* from formulas */
                  qed
                qed
              next
                case ZExtendedSmaller_case_1
                by contradiction /* from formulas */
              next
                case ZExtendedSmaller_case_2
                solve( !SharedKey( ~pid, k.1 ) ▶₂ #t2 )
                  case BuyANewYubikey
                  solve( !Smaller( S(y.1), tc2 ) ▶₃ #t2 )
                    case SimpleSmaller
                    by contradiction /* from formulas */
                  next
                    case ZExtendedSmaller_case_1
                    by contradiction /* from formulas */
                  next
                    case ZExtendedSmaller_case_2
                    by contradiction /* from formulas */
                  qed
                qed
              qed
            qed
          next
            case case_3
            solve( !SharedKey( ~pid, k.1 ) ▶₂ #t2 )
              case BuyANewYubikey
              solve( !Smaller( S(y), tc2 ) ▶₃ #t2 )
                case SimpleSmaller
                by contradiction /* from formulas */
              next
                case ZExtendedSmaller_case_1
                by contradiction /* from formulas */
              next
                case ZExtendedSmaller_case_2
                by contradiction /* from formulas */
              qed
            qed
          qed
        qed
      next
        case Server_ReceiveOTP_NewSession_case_4
        solve( Server( ~pid, sid.1, otc2 ) ▶₀ #t2 )
          case 
          by sorry /* unannotated */
        next
          case BuyANewYubikey
          by contradiction /* non-injective facts (#vr.1,#t1,#t2) */
        next
          case Server_ReceiveOTP_NewSession_case_1
          solve( ((#vr.4 < #t1) ∧
                  (∃ #t3. (IsSmaller( S(myzero), tc1 ) @ #t3) ∧ ¬(last(#t3))))  ∥
                 (#t1 < #vr.4) )
            case case_1
            by contradiction /* non-injective facts (#vr.4,#t1,#t2) */
          next
            case case_2
            solve( !SharedKey( ~pid, k ) ▶₂ #t1 )
              case BuyANewYubikey
              solve( !Smaller( S(y), tc1 ) ▶₃ #t1 )
                case SimpleSmaller
                solve( !SharedKey( ~pid, k.1 ) ▶₂ #t2 )
                  case BuyANewYubikey
                  solve( !Smaller( S(myzero), tc2 ) ▶₃ #t2 )
                    case SimpleSmaller
                    by contradiction /* from formulas */
                  next
                    case ZExtendedSmaller_case_1
                    by contradiction /* from formulas */
                  next
                    case ZExtendedSmaller_case_2
                    by contradiction /* from formulas */
                  qed
                qed
              next
                case ZExtendedSmaller_case_1
                by contradiction /* from formulas */
              next
                case ZExtendedSmaller_case_2
                solve( !SharedKey( ~pid, k.1 ) ▶₂ #t2 )
                  case BuyANewYubikey
                  solve( !Smaller( S(myzero), tc2 ) ▶₃ #t2 )
                    case SimpleSmaller
                    by contradiction /* from formulas */
                  next
                    case ZExtendedSmaller_case_1
                    by contradiction /* from formulas */
                  next
                    case ZExtendedSmaller_case_2
                    by contradiction /* from formulas */
                  qed
                qed
              qed
            qed
          qed
        next
          case Server_ReceiveOTP_NewSession_case_2
          solve( ((#vr.4 < #t1) ∧
                  (∃ #t3. (IsSmaller( S(otc), tc1 ) @ #t3) ∧ ¬(last(#t3))))  ∥
                 (#t1 < #vr.4)  ∥ (#vr.4 = #t1) )
            case case_1
            by contradiction /* non-injective facts (#vr.4,#t1,#t2) */
          next
            case case_2
            solve( !SharedKey( ~pid, k ) ▶₂ #t1 )
              case BuyANewYubikey
              solve( !Smaller( S(y), tc1 ) ▶₃ #t1 )
                case SimpleSmaller
                solve( !SharedKey( ~pid, k.1 ) ▶₂ #t2 )
                  case BuyANewYubikey
                  solve( !Smaller( S(otc), tc2 ) ▶₃ #t2 )
                    case SimpleSmaller
                    by contradiction /* from formulas */
                  next
                    case ZExtendedSmaller_case_1
                    by contradiction /* from formulas */
                  next
                    case ZExtendedSmaller_case_2
                    by contradiction /* from formulas */
                  qed
                qed
              next
                case ZExtendedSmaller_case_1
                solve( !SharedKey( ~pid, k.1 ) ▶₂ #t2 )
                  case BuyANewYubikey
                  solve( !Smaller( S(otc), tc2 ) ▶₃ #t2 )
                    case SimpleSmaller
                    by contradiction /* from formulas */
                  next
                    case ZExtendedSmaller_case_1
                    by contradiction /* from formulas */
                  next
                    case ZExtendedSmaller_case_2
                    by contradiction /* from formulas */
                  qed
                qed
              next
                case ZExtendedSmaller_case_2
                solve( !SharedKey( ~pid, k.1 ) ▶₂ #t2 )
                  case BuyANewYubikey
                  solve( !Smaller( S(otc), tc2 ) ▶₃ #t2 )
                    case SimpleSmaller
                    by contradiction /* from formulas */
                  next
                    case ZExtendedSmaller_case_1
                    by contradiction /* from formulas */
                  next
                    case ZExtendedSmaller_case_2
                    by contradiction /* from formulas */
                  qed
                qed
              qed
            qed
          next
            case case_3
            solve( !SharedKey( ~pid, k.1 ) ▶₂ #t2 )
              case BuyANewYubikey
              solve( !Smaller( S(S(y)), tc2 ) ▶₃ #t2 )
                case SimpleSmaller
                by contradiction /* from formulas */
              next
                case ZExtendedSmaller_case_1
                by contradiction /* from formulas */
              next
                case ZExtendedSmaller_case_2
                by contradiction /* from formulas */
              qed
            qed
          qed
        next
          case Server_ReceiveOTP_NewSession_case_3
          solve( ((#vr.4 < #t1) ∧
                  (∃ #t3. (IsSmaller( S(myzero), tc1 ) @ #t3) ∧ ¬(last(#t3))))  ∥
                 (#t1 < #vr.4)  ∥ (#vr.4 = #t1) )
            case case_1
            by contradiction /* non-injective facts (#vr.4,#t1,#t2) */
          next
            case case_2
            solve( !SharedKey( ~pid, k ) ▶₂ #t1 )
              case BuyANewYubikey
              solve( !Smaller( S(y), tc1 ) ▶₃ #t1 )
                case SimpleSmaller
                solve( !SharedKey( ~pid, k.1 ) ▶₂ #t2 )
                  case BuyANewYubikey
                  solve( !Smaller( S(myzero), tc2 ) ▶₃ #t2 )
                    case SimpleSmaller
                    by contradiction /* from formulas */
                  next
                    case ZExtendedSmaller_case_1
                    by contradiction /* from formulas */
                  next
                    case ZExtendedSmaller_case_2
                    by contradiction /* from formulas */
                  qed
                qed
              next
                case ZExtendedSmaller_case_1
                by contradiction /* from formulas */
              next
                case ZExtendedSmaller_case_2
                solve( !SharedKey( ~pid, k.1 ) ▶₂ #t2 )
                  case BuyANewYubikey
                  solve( !Smaller( S(myzero), tc2 ) ▶₃ #t2 )
                    case SimpleSmaller
                    by contradiction /* from formulas */
                  next
                    case ZExtendedSmaller_case_1
                    by contradiction /* from formulas */
                  next
                    case ZExtendedSmaller_case_2
                    by contradiction /* from formulas */
                  qed
                qed
              qed
            qed
          next
            case case_3
            solve( !SharedKey( ~pid, k.1 ) ▶₂ #t2 )
              case BuyANewYubikey
              solve( !Smaller( S(myzero), tc2 ) ▶₃ #t2 )
                case SimpleSmaller
                by contradiction /* from formulas */
              next
                case ZExtendedSmaller_case_1
                by contradiction /* from formulas */
              next
                case ZExtendedSmaller_case_2
                by contradiction /* from formulas */
              qed
            qed
          qed
        next
          case Server_ReceiveOTP_NewSession_case_4
          solve( ((#vr.4 < #t1) ∧
                  (∃ #t3. (IsSmaller( S(y.1), tc1 ) @ #t3) ∧ ¬(last(#t3))))  ∥
                 (#t1 < #vr.4)  ∥ (#vr.4 = #t1) )
            case case_1
            by contradiction /* non-injective facts (#vr.4,#t1,#t2) */
          next
            case case_2
            solve( !SharedKey( ~pid, k ) ▶₂ #t1 )
              case BuyANewYubikey
              solve( !Smaller( S(y), tc1 ) ▶₃ #t1 )
                case SimpleSmaller
                solve( !SharedKey( ~pid, k.1 ) ▶₂ #t2 )
                  case BuyANewYubikey
                  solve( !Smaller( S(y.1), tc2 ) ▶₃ #t2 )
                    case SimpleSmaller
                    by contradiction /* from formulas */
                  next
                    case ZExtendedSmaller_case_1
                    by contradiction /* from formulas */
                  next
                    case ZExtendedSmaller_case_2
                    by contradiction /* from formulas */
                  qed
                qed
              next
                case ZExtendedSmaller_case_1
                solve( !SharedKey( ~pid, k.1 ) ▶₂ #t2 )
                  case BuyANewYubikey
                  solve( !Smaller( S(y.1), tc2 ) ▶₃ #t2 )
                    case SimpleSmaller
                    by contradiction /* from formulas */
                  next
                    case ZExtendedSmaller_case_1
                    by contradiction /* from formulas */
                  next
                    case ZExtendedSmaller_case_2
                    by contradiction /* from formulas */
                  qed
                qed
              next
                case ZExtendedSmaller_case_2
                solve( !SharedKey( ~pid, k.1 ) ▶₂ #t2 )
                  case BuyANewYubikey
                  solve( !Smaller( S(y.2), tc2 ) ▶₃ #t2 )
                    case SimpleSmaller
                    by contradiction /* from formulas */
                  next
                    case ZExtendedSmaller_case_1
                    by contradiction /* from formulas */
                  next
                    case ZExtendedSmaller_case_2
                    by contradiction /* from formulas */
                  qed
                qed
              qed
            qed
          next
            case case_3
            solve( !SharedKey( ~pid, k.1 ) ▶₂ #t2 )
              case BuyANewYubikey
              solve( !Smaller( S(y.1), tc2 ) ▶₃ #t2 )
                case SimpleSmaller
                by contradiction /* from formulas */
              next
                case ZExtendedSmaller_case_1
                by contradiction /* from formulas */
              next
                case ZExtendedSmaller_case_2
                by contradiction /* from formulas */
              qed
            qed
          qed
        qed
      qed
    next
      case case_2
      by contradiction
    next
      case case_3
      by contradiction
    next
      case case_4
      by contradiction
    next
      case case_5
      by contradiction
    qed
  next
    case case_2
    solve( (¬(#t1 < #t2))  ∥ (∀ #t3. (IsSmaller( tc1, tc2 ) @ #t3) ⇒ ⊥) )
      case case_1
      solve( (#t2 = #t1)  ∥ (#t1 < #t2) )
        case case_1
        by contradiction /* from formulas */
      next
        case case_2
        by contradiction /* from formulas */
      qed
    next
      case case_2
      solve( (#t2 = #t1)  ∥ (#t1 < #t2) )
        case case_1
        by contradiction /* from formulas */
      next
        case case_2
        solve( !SharedKey( pid, k ) ▶₂ #t1 )
          case BuyANewYubikey
          solve( !Smaller( otc1, tc1 ) ▶₃ #t1 )
            case SimpleSmaller_case_1
            solve( !SharedKey( ~pid, k.1 ) ▶₂ #t2 )
              case BuyANewYubikey
              solve( !Smaller( otc2, tc2 ) ▶₃ #t2 )
                case SimpleSmaller_case_1
                solve( !Y( ~pid, sid.3 ) ▶₀ #t1.1 )
                  case BuyANewYubikey
                  solve( !SharedKey( ~pid, k.1 ) ▶₂ #t1.1 )
                    case BuyANewYubikey
                    solve( !Succ( S(myzero), Stc ) ▶₃ #t1.1 )
                      case StepSucc
                      solve( !Y( ~pid, sid.3 ) ▶₀ #t1.2 )
                        case BuyANewYubikey
                        solve( !SharedKey( ~pid, k.1 ) ▶₂ #t1.2 )
                          case BuyANewYubikey
                          solve( !Succ( S(myzero), Stc ) ▶₃ #t1.2 )
                            case StepSucc
                            solve( IsSmaller( a, b ) @ #t1.3 )
                              case SimpleSmaller
                              solve( !Succ( a, b ) ▶₀ #t1.3 )
                                case InitSucc
                                solve( IsSmaller( S(myzero), c ) @ #t2.1 )
                                  case SimpleSmaller
                                  solve( !Succ( S(myzero), c ) ▶₀ #t2.1 )
                                    case StepSucc
                                    solve( IsSmaller( myzero, S(S(myzero)) ) @ #last )
                                      case SimpleSmaller
                                      by contradiction /* node #t1 after last node #last */
                                    next
                                      case ZExtendedSmaller
                                      by contradiction /* node #t1 after last node #last */
                                    qed
                                  qed
                                next
                                  case ZExtendedSmaller
                                  solve( !Succ( y, c ) ▶₁ #t2.1 )
                                    case InitSucc
                                    by contradiction /* cyclic */
                                  next
                                    case StepSucc
                                    solve( IsSmaller( myzero, S(y) ) @ #last )
                                      case SimpleSmaller
                                      by contradiction /* node #t1 after last node #last */
                                    next
                                      case ZExtendedSmaller
                                      by contradiction /* node #t1 after last node #last */
                                    qed
                                  qed
                                qed
                              next
                                case StepSucc
                                solve( IsSmaller( S(a), c ) @ #t2.1 )
                                  case SimpleSmaller
                                  solve( !Succ( S(a), c ) ▶₀ #t2.1 )
                                    case StepSucc
                                    solve( IsSmaller( a, S(S(a)) ) @ #last )
                                      case SimpleSmaller
                                      by contradiction /* node #t1 after last node #last */
                                    next
                                      case ZExtendedSmaller
                                      by contradiction /* node #t1 after last node #last */
                                    qed
                                  qed
                                next
                                  case ZExtendedSmaller
                                  solve( !Succ( y, c ) ▶₁ #t2.1 )
                                    case InitSucc
                                    solve( IsSmaller( a, S(myzero) ) @ #last )
                                      case SimpleSmaller
                                      by contradiction /* node #t1 after last node #last */
                                    next
                                      case ZExtendedSmaller
                                      by contradiction /* node #t1 after last node #last */
                                    qed
                                  next
                                    case StepSucc
                                    solve( IsSmaller( a, S(y) ) @ #last )
                                      case SimpleSmaller
                                      by contradiction /* node #t1 after last node #last */
                                    next
                                      case ZExtendedSmaller
                                      by contradiction /* node #t1 after last node #last */
                                    qed
                                  qed
                                qed
                              qed
                            next
                              case ZExtendedSmaller
                              solve( !Succ( y, b ) ▶₁ #t1.3 )
                                case InitSucc
                                solve( IsSmaller( S(myzero), c ) @ #t2.1 )
                                  case SimpleSmaller
                                  solve( !Succ( S(myzero), c ) ▶₀ #t2.1 )
                                    case StepSucc
                                    solve( IsSmaller( a, S(S(myzero)) ) @ #last )
                                      case SimpleSmaller
                                      by contradiction /* node #t1 after last node #last */
                                    next
                                      case ZExtendedSmaller
                                      by contradiction /* node #t1 after last node #last */
                                    qed
                                  qed
                                next
                                  case ZExtendedSmaller
                                  solve( !Succ( y, c ) ▶₁ #t2.1 )
                                    case InitSucc
                                    by contradiction /* cyclic */
                                  next
                                    case StepSucc
                                    solve( IsSmaller( a, S(y) ) @ #last )
                                      case SimpleSmaller
                                      by contradiction /* node #t1 after last node #last */
                                    next
                                      case ZExtendedSmaller
                                      by contradiction /* node #t1 after last node #last */
                                    qed
                                  qed
                                qed
                              next
                                case StepSucc
                                solve( IsSmaller( S(y), c ) @ #t2.1 )
                                  case SimpleSmaller
                                  solve( !Succ( S(y), c ) ▶₀ #t2.1 )
                                    case StepSucc
                                    solve( IsSmaller( a, S(S(y)) ) @ #last )
                                      case SimpleSmaller
                                      by contradiction /* node #t1 after last node #last */
                                    next
                                      case ZExtendedSmaller
                                      by contradiction /* node #t1 after last node #last */
                                    qed
                                  qed
                                next
                                  case ZExtendedSmaller
                                  solve( !Succ( y.1, c ) ▶₁ #t2.1 )
                                    case InitSucc
                                    solve( IsSmaller( a, S(myzero) ) @ #last )
                                      case SimpleSmaller
                                      by contradiction /* node #t1 after last node #last */
                                    next
                                      case ZExtendedSmaller
                                      by contradiction /* node #t1 after last node #last */
                                    qed
                                  next
                                    case StepSucc
                                    solve( IsSmaller( a, S(y.1) ) @ #last )
                                      case SimpleSmaller
                                      by contradiction /* node #t1 after last node #last */
                                    next
                                      case ZExtendedSmaller
                                      by contradiction /* node #t1 after last node #last */
                                    qed
                                  qed
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    qed
                  qed
                qed
              next
                case SimpleSmaller_case_2
                solve( !Y( ~pid, sid.3 ) ▶₀ #t1.1 )
                  case BuyANewYubikey
                  solve( !SharedKey( ~pid, k.1 ) ▶₂ #t1.1 )
                    case BuyANewYubikey
                    solve( !Succ( S(myzero), Stc ) ▶₃ #t1.1 )
                      case StepSucc
                      solve( !Y( ~pid, sid.3 ) ▶₀ #t1.2 )
                        case BuyANewYubikey
                        solve( !SharedKey( ~pid, k.1 ) ▶₂ #t1.2 )
                          case BuyANewYubikey
                          solve( !Succ( S(otc2), Stc ) ▶₃ #t1.2 )
                            case StepSucc
                            solve( IsSmaller( a, b ) @ #t1.3 )
                              case SimpleSmaller
                              solve( !Succ( a, b ) ▶₀ #t1.3 )
                                case InitSucc
                                solve( IsSmaller( S(myzero), c ) @ #t2.1 )
                                  case SimpleSmaller
                                  solve( !Succ( S(myzero), c ) ▶₀ #t2.1 )
                                    case StepSucc
                                    solve( IsSmaller( myzero, S(S(myzero)) ) @ #last )
                                      case SimpleSmaller
                                      by contradiction /* node #t1 after last node #last */
                                    next
                                      case ZExtendedSmaller
                                      by contradiction /* node #t1 after last node #last */
                                    qed
                                  qed
                                next
                                  case ZExtendedSmaller
                                  solve( !Succ( y, c ) ▶₁ #t2.1 )
                                    case InitSucc
                                    by contradiction /* cyclic */
                                  next
                                    case StepSucc
                                    solve( IsSmaller( myzero, S(y) ) @ #last )
                                      case SimpleSmaller
                                      by contradiction /* node #t1 after last node #last */
                                    next
                                      case ZExtendedSmaller
                                      by contradiction /* node #t1 after last node #last */
                                    qed
                                  qed
                                qed
                              next
                                case StepSucc
                                solve( IsSmaller( S(a), c ) @ #t2.1 )
                                  case SimpleSmaller
                                  solve( !Succ( S(a), c ) ▶₀ #t2.1 )
                                    case StepSucc
                                    solve( IsSmaller( a, S(S(a)) ) @ #last )
                                      case SimpleSmaller
                                      by contradiction /* node #t1 after last node #last */
                                    next
                                      case ZExtendedSmaller
                                      by contradiction /* node #t1 after last node #last */
                                    qed
                                  qed
                                next
                                  case ZExtendedSmaller
                                  solve( !Succ( y, c ) ▶₁ #t2.1 )
                                    case InitSucc
                                    solve( IsSmaller( a, S(myzero) ) @ #last )
                                      case SimpleSmaller
                                      by contradiction /* node #t1 after last node #last */
                                    next
                                      case ZExtendedSmaller
                                      by contradiction /* node #t1 after last node #last */
                                    qed
                                  next
                                    case StepSucc
                                    solve( IsSmaller( a, S(y) ) @ #last )
                                      case SimpleSmaller
                                      by contradiction /* node #t1 after last node #last */
                                    next
                                      case ZExtendedSmaller
                                      by contradiction /* node #t1 after last node #last */
                                    qed
                                  qed
                                qed
                              qed
                            next
                              case ZExtendedSmaller
                              solve( !Succ( y, b ) ▶₁ #t1.3 )
                                case InitSucc
                                solve( IsSmaller( S(myzero), c ) @ #t2.1 )
                                  case SimpleSmaller
                                  solve( !Succ( S(myzero), c ) ▶₀ #t2.1 )
                                    case StepSucc
                                    solve( IsSmaller( a, S(S(myzero)) ) @ #last )
                                      case SimpleSmaller
                                      by contradiction /* node #t1 after last node #last */
                                    next
                                      case ZExtendedSmaller
                                      by contradiction /* node #t1 after last node #last */
                                    qed
                                  qed
                                next
                                  case ZExtendedSmaller
                                  solve( !Succ( y, c ) ▶₁ #t2.1 )
                                    case InitSucc
                                    by contradiction /* cyclic */
                                  next
                                    case StepSucc
                                    solve( IsSmaller( a, S(y) ) @ #last )
                                      case SimpleSmaller
                                      by contradiction /* node #t1 after last node #last */
                                    next
                                      case ZExtendedSmaller
                                      by contradiction /* node #t1 after last node #last */
                                    qed
                                  qed
                                qed
                              next
                                case StepSucc
                                solve( IsSmaller( S(y), c ) @ #t2.1 )
                                  case SimpleSmaller
                                  solve( !Succ( S(y), c ) ▶₀ #t2.1 )
                                    case StepSucc
                                    solve( IsSmaller( a, S(S(y)) ) @ #last )
                                      case SimpleSmaller
                                      by contradiction /* node #t1 after last node #last */
                                    next
                                      case ZExtendedSmaller
                                      by contradiction /* node #t1 after last node #last */
                                    qed
                                  qed
                                next
                                  case ZExtendedSmaller
                                  solve( !Succ( y.1, c ) ▶₁ #t2.1 )
                                    case InitSucc
                                    solve( IsSmaller( a, S(myzero) ) @ #last )
                                      case SimpleSmaller
                                      by contradiction /* node #t1 after last node #last */
                                    next
                                      case ZExtendedSmaller
                                      by contradiction /* node #t1 after last node #last */
                                    qed
                                  next
                                    case StepSucc
                                    solve( IsSmaller( a, S(y.1) ) @ #last )
                                      case SimpleSmaller
                                      by contradiction /* node #t1 after last node #last */
                                    next
                                      case ZExtendedSmaller
                                      by contradiction /* node #t1 after last node #last */
                                    qed
                                  qed
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    qed
                  qed
                qed
              next
                case ZExtendedSmaller_case_1
                solve( !Y( ~pid, sid.3 ) ▶₀ #t1.1 )
                  case BuyANewYubikey
                  solve( !SharedKey( ~pid, k.1 ) ▶₂ #t1.1 )
                    case BuyANewYubikey
                    solve( !Succ( S(myzero), Stc ) ▶₃ #t1.1 )
                      case StepSucc
                      solve( !Y( ~pid, sid.3 ) ▶₀ #t1.2 )
                        case BuyANewYubikey
                        solve( !SharedKey( ~pid, k.1 ) ▶₂ #t1.2 )
                          case BuyANewYubikey
                          solve( !Succ( S(myzero), Stc ) ▶₃ #t1.2 )
                            case StepSucc
                            solve( IsSmaller( a, b ) @ #t1.3 )
                              case SimpleSmaller
                              solve( !Succ( a, b ) ▶₀ #t1.3 )
                                case InitSucc
                                solve( IsSmaller( S(myzero), c ) @ #t2.1 )
                                  case SimpleSmaller
                                  solve( !Succ( S(myzero), c ) ▶₀ #t2.1 )
                                    case StepSucc
                                    solve( IsSmaller( myzero, S(S(myzero)) ) @ #last )
                                      case SimpleSmaller
                                      by contradiction /* node #t1 after last node #last */
                                    next
                                      case ZExtendedSmaller
                                      by contradiction /* node #t1 after last node #last */
                                    qed
                                  qed
                                next
                                  case ZExtendedSmaller
                                  solve( !Succ( y, c ) ▶₁ #t2.1 )
                                    case InitSucc
                                    by contradiction /* cyclic */
                                  next
                                    case StepSucc
                                    solve( IsSmaller( myzero, S(y) ) @ #last )
                                      case SimpleSmaller
                                      by contradiction /* node #t1 after last node #last */
                                    next
                                      case ZExtendedSmaller
                                      by contradiction /* node #t1 after last node #last */
                                    qed
                                  qed
                                qed
                              next
                                case StepSucc
                                solve( IsSmaller( S(a), c ) @ #t2.1 )
                                  case SimpleSmaller
                                  solve( !Succ( S(a), c ) ▶₀ #t2.1 )
                                    case StepSucc
                                    solve( IsSmaller( a, S(S(a)) ) @ #last )
                                      case SimpleSmaller
                                      by contradiction /* node #t1 after last node #last */
                                    next
                                      case ZExtendedSmaller
                                      by contradiction /* node #t1 after last node #last */
                                    qed
                                  qed
                                next
                                  case ZExtendedSmaller
                                  solve( !Succ( y, c ) ▶₁ #t2.1 )
                                    case InitSucc
                                    solve( IsSmaller( a, S(myzero) ) @ #last )
                                      case SimpleSmaller
                                      by contradiction /* node #t1 after last node #last */
                                    next
                                      case ZExtendedSmaller
                                      by contradiction /* node #t1 after last node #last */
                                    qed
                                  next
                                    case StepSucc
                                    solve( IsSmaller( a, S(y) ) @ #last )
                                      case SimpleSmaller
                                      by contradiction /* node #t1 after last node #last */
                                    next
                                      case ZExtendedSmaller
                                      by contradiction /* node #t1 after last node #last */
                                    qed
                                  qed
                                qed
                              qed
                            next
                              case ZExtendedSmaller
                              solve( !Succ( y, b ) ▶₁ #t1.3 )
                                case InitSucc
                                solve( IsSmaller( S(myzero), c ) @ #t2.1 )
                                  case SimpleSmaller
                                  solve( !Succ( S(myzero), c ) ▶₀ #t2.1 )
                                    case StepSucc
                                    solve( IsSmaller( a, S(S(myzero)) ) @ #last )
                                      case SimpleSmaller
                                      by contradiction /* node #t1 after last node #last */
                                    next
                                      case ZExtendedSmaller
                                      by contradiction /* node #t1 after last node #last */
                                    qed
                                  qed
                                next
                                  case ZExtendedSmaller
                                  solve( !Succ( y, c ) ▶₁ #t2.1 )
                                    case InitSucc
                                    by contradiction /* cyclic */
                                  next
                                    case StepSucc
                                    solve( IsSmaller( a, S(y) ) @ #last )
                                      case SimpleSmaller
                                      by contradiction /* node #t1 after last node #last */
                                    next
                                      case ZExtendedSmaller
                                      by contradiction /* node #t1 after last node #last */
                                    qed
                                  qed
                                qed
                              next
                                case StepSucc
                                solve( IsSmaller( S(y), c ) @ #t2.1 )
                                  case SimpleSmaller
                                  solve( !Succ( S(y), c ) ▶₀ #t2.1 )
                                    case StepSucc
                                    solve( IsSmaller( a, S(S(y)) ) @ #last )
                                      case SimpleSmaller
                                      by contradiction /* node #t1 after last node #last */
                                    next
                                      case ZExtendedSmaller
                                      by contradiction /* node #t1 after last node #last */
                                    qed
                                  qed
                                next
                                  case ZExtendedSmaller
                                  solve( !Succ( y.1, c ) ▶₁ #t2.1 )
                                    case InitSucc
                                    solve( IsSmaller( a, S(myzero) ) @ #last )
                                      case SimpleSmaller
                                      by contradiction /* node #t1 after last node #last */
                                    next
                                      case ZExtendedSmaller
                                      by contradiction /* node #t1 after last node #last */
                                    qed
                                  next
                                    case StepSucc
                                    solve( IsSmaller( a, S(y.1) ) @ #last )
                                      case SimpleSmaller
                                      by contradiction /* node #t1 after last node #last */
                                    next
                                      case ZExtendedSmaller
                                      by contradiction /* node #t1 after last node #last */
                                    qed
                                  qed
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    qed
                  qed
                qed
              next
                case ZExtendedSmaller_case_2
                solve( !Y( ~pid, sid.3 ) ▶₀ #t1.1 )
                  case BuyANewYubikey
                  solve( !SharedKey( ~pid, k.1 ) ▶₂ #t1.1 )
                    case BuyANewYubikey
                    solve( !Succ( S(myzero), Stc ) ▶₃ #t1.1 )
                      case StepSucc
                      solve( !Y( ~pid, sid.3 ) ▶₀ #t1.2 )
                        case BuyANewYubikey
                        solve( !SharedKey( ~pid, k.1 ) ▶₂ #t1.2 )
                          case BuyANewYubikey
                          solve( !Succ( S(y), Stc ) ▶₃ #t1.2 )
                            case StepSucc
                            solve( IsSmaller( a, b ) @ #t1.3 )
                              case SimpleSmaller
                              solve( !Succ( a, b ) ▶₀ #t1.3 )
                                case InitSucc
                                solve( IsSmaller( S(myzero), c ) @ #t2.1 )
                                  case SimpleSmaller
                                  solve( !Succ( S(myzero), c ) ▶₀ #t2.1 )
                                    case StepSucc
                                    solve( IsSmaller( myzero, S(S(myzero)) ) @ #last )
                                      case SimpleSmaller
                                      by contradiction /* node #t1 after last node #last */
                                    next
                                      case ZExtendedSmaller
                                      by contradiction /* node #t1 after last node #last */
                                    qed
                                  qed
                                next
                                  case ZExtendedSmaller
                                  solve( !Succ( y.1, c ) ▶₁ #t2.1 )
                                    case InitSucc
                                    by contradiction /* cyclic */
                                  next
                                    case StepSucc
                                    solve( IsSmaller( myzero, S(y.1) ) @ #last )
                                      case SimpleSmaller
                                      by contradiction /* node #t1 after last node #last */
                                    next
                                      case ZExtendedSmaller
                                      by contradiction /* node #t1 after last node #last */
                                    qed
                                  qed
                                qed
                              next
                                case StepSucc
                                solve( IsSmaller( S(a), c ) @ #t2.1 )
                                  case SimpleSmaller
                                  solve( !Succ( S(a), c ) ▶₀ #t2.1 )
                                    case StepSucc
                                    solve( IsSmaller( a, S(S(a)) ) @ #last )
                                      case SimpleSmaller
                                      by contradiction /* node #t1 after last node #last */
                                    next
                                      case ZExtendedSmaller
                                      by contradiction /* node #t1 after last node #last */
                                    qed
                                  qed
                                next
                                  case ZExtendedSmaller
                                  solve( !Succ( y.1, c ) ▶₁ #t2.1 )
                                    case InitSucc
                                    solve( IsSmaller( a, S(myzero) ) @ #last )
                                      case SimpleSmaller
                                      by contradiction /* node #t1 after last node #last */
                                    next
                                      case ZExtendedSmaller
                                      by contradiction /* node #t1 after last node #last */
                                    qed
                                  next
                                    case StepSucc
                                    solve( IsSmaller( a, S(y.1) ) @ #last )
                                      case SimpleSmaller
                                      by contradiction /* node #t1 after last node #last */
                                    next
                                      case ZExtendedSmaller
                                      by contradiction /* node #t1 after last node #last */
                                    qed
                                  qed
                                qed
                              qed
                            next
                              case ZExtendedSmaller
                              solve( !Succ( y.1, b ) ▶₁ #t1.3 )
                                case InitSucc
                                solve( IsSmaller( S(myzero), c ) @ #t2.1 )
                                  case SimpleSmaller
                                  solve( !Succ( S(myzero), c ) ▶₀ #t2.1 )
                                    case StepSucc
                                    solve( IsSmaller( a, S(S(myzero)) ) @ #last )
                                      case SimpleSmaller
                                      by contradiction /* node #t1 after last node #last */
                                    next
                                      case ZExtendedSmaller
                                      by contradiction /* node #t1 after last node #last */
                                    qed
                                  qed
                                next
                                  case ZExtendedSmaller
                                  solve( !Succ( y.1, c ) ▶₁ #t2.1 )
                                    case InitSucc
                                    by contradiction /* cyclic */
                                  next
                                    case StepSucc
                                    solve( IsSmaller( a, S(y.1) ) @ #last )
                                      case SimpleSmaller
                                      by contradiction /* node #t1 after last node #last */
                                    next
                                      case ZExtendedSmaller
                                      by contradiction /* node #t1 after last node #last */
                                    qed
                                  qed
                                qed
                              next
                                case StepSucc
                                solve( IsSmaller( S(y.1), c ) @ #t2.1 )
                                  case SimpleSmaller
                                  solve( !Succ( S(y.1), c ) ▶₀ #t2.1 )
                                    case StepSucc
                                    solve( IsSmaller( a, S(S(y.1)) ) @ #last )
                                      case SimpleSmaller
                                      by contradiction /* node #t1 after last node #last */
                                    next
                                      case ZExtendedSmaller
                                      by contradiction /* node #t1 after last node #last */
                                    qed
                                  qed
                                next
                                  case ZExtendedSmaller
                                  solve( !Succ( y.2, c ) ▶₁ #t2.1 )
                                    case InitSucc
                                    solve( IsSmaller( a, S(myzero) ) @ #last )
                                      case SimpleSmaller
                                      by contradiction /* node #t1 after last node #last */
                                    next
                                      case ZExtendedSmaller
                                      by contradiction /* node #t1 after last node #last */
                                    qed
                                  next
                                    case StepSucc
                                    solve( IsSmaller( a, S(y.2) ) @ #last )
                                      case SimpleSmaller
                                      by contradiction /* node #t1 after last node #last */
                                    next
                                      case ZExtendedSmaller
                                      by contradiction /* node #t1 after last node #last */
                                    qed
                                  qed
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    qed
                  qed
                qed
              qed
            qed
          next
            case SimpleSmaller_case_2
            solve( !SharedKey( ~pid, k.1 ) ▶₂ #t2 )
              case BuyANewYubikey
              solve( !Smaller( otc2, tc2 ) ▶₃ #t2 )
                case SimpleSmaller_case_1
                solve( !Y( ~pid, sid.3 ) ▶₀ #t1.1 )
                  case BuyANewYubikey
                  solve( !SharedKey( ~pid, k.1 ) ▶₂ #t1.1 )
                    case BuyANewYubikey
                    solve( !Succ( S(otc1), Stc ) ▶₃ #t1.1 )
                      case StepSucc
                      solve( !Y( ~pid, sid.3 ) ▶₀ #t1.2 )
                        case BuyANewYubikey
                        solve( !SharedKey( ~pid, k.1 ) ▶₂ #t1.2 )
                          case BuyANewYubikey
                          solve( !Succ( S(myzero), Stc ) ▶₃ #t1.2 )
                            case StepSucc
                            solve( IsSmaller( a, b ) @ #t1.3 )
                              case SimpleSmaller
                              solve( !Succ( a, b ) ▶₀ #t1.3 )
                                case InitSucc
                                solve( IsSmaller( S(myzero), c ) @ #t2.1 )
                                  case SimpleSmaller
                                  solve( !Succ( S(myzero), c ) ▶₀ #t2.1 )
                                    case StepSucc
                                    solve( IsSmaller( myzero, S(S(myzero)) ) @ #last )
                                      case SimpleSmaller
                                      by contradiction /* node #t1 after last node #last */
                                    next
                                      case ZExtendedSmaller
                                      by contradiction /* node #t1 after last node #last */
                                    qed
                                  qed
                                next
                                  case ZExtendedSmaller
                                  solve( !Succ( y, c ) ▶₁ #t2.1 )
                                    case InitSucc
                                    by contradiction /* cyclic */
                                  next
                                    case StepSucc
                                    solve( IsSmaller( myzero, S(y) ) @ #last )
                                      case SimpleSmaller
                                      by contradiction /* node #t1 after last node #last */
                                    next
                                      case ZExtendedSmaller
                                      by contradiction /* node #t1 after last node #last */
                                    qed
                                  qed
                                qed
                              next
                                case StepSucc
                                solve( IsSmaller( S(a), c ) @ #t2.1 )
                                  case SimpleSmaller
                                  solve( !Succ( S(a), c ) ▶₀ #t2.1 )
                                    case StepSucc
                                    solve( IsSmaller( a, S(S(a)) ) @ #last )
                                      case SimpleSmaller
                                      by contradiction /* node #t1 after last node #last */
                                    next
                                      case ZExtendedSmaller
                                      by contradiction /* node #t1 after last node #last */
                                    qed
                                  qed
                                next
                                  case ZExtendedSmaller
                                  solve( !Succ( y, c ) ▶₁ #t2.1 )
                                    case InitSucc
                                    solve( IsSmaller( a, S(myzero) ) @ #last )
                                      case SimpleSmaller
                                      by contradiction /* node #t1 after last node #last */
                                    next
                                      case ZExtendedSmaller
                                      by contradiction /* node #t1 after last node #last */
                                    qed
                                  next
                                    case StepSucc
                                    solve( IsSmaller( a, S(y) ) @ #last )
                                      case SimpleSmaller
                                      by contradiction /* node #t1 after last node #last */
                                    next
                                      case ZExtendedSmaller
                                      by contradiction /* node #t1 after last node #last */
                                    qed
                                  qed
                                qed
                              qed
                            next
                              case ZExtendedSmaller
                              solve( !Succ( y, b ) ▶₁ #t1.3 )
                                case InitSucc
                                solve( IsSmaller( S(myzero), c ) @ #t2.1 )
                                  case SimpleSmaller
                                  solve( !Succ( S(myzero), c ) ▶₀ #t2.1 )
                                    case StepSucc
                                    solve( IsSmaller( a, S(S(myzero)) ) @ #last )
                                      case SimpleSmaller
                                      by contradiction /* node #t1 after last node #last */
                                    next
                                      case ZExtendedSmaller
                                      by contradiction /* node #t1 after last node #last */
                                    qed
                                  qed
                                next
                                  case ZExtendedSmaller
                                  solve( !Succ( y, c ) ▶₁ #t2.1 )
                                    case InitSucc
                                    by contradiction /* cyclic */
                                  next
                                    case StepSucc
                                    solve( IsSmaller( a, S(y) ) @ #last )
                                      case SimpleSmaller
                                      by contradiction /* node #t1 after last node #last */
                                    next
                                      case ZExtendedSmaller
                                      by contradiction /* node #t1 after last node #last */
                                    qed
                                  qed
                                qed
                              next
                                case StepSucc
                                solve( IsSmaller( S(y), c ) @ #t2.1 )
                                  case SimpleSmaller
                                  solve( !Succ( S(y), c ) ▶₀ #t2.1 )
                                    case StepSucc
                                    solve( IsSmaller( a, S(S(y)) ) @ #last )
                                      case SimpleSmaller
                                      by contradiction /* node #t1 after last node #last */
                                    next
                                      case ZExtendedSmaller
                                      by contradiction /* node #t1 after last node #last */
                                    qed
                                  qed
                                next
                                  case ZExtendedSmaller
                                  solve( !Succ( y.1, c ) ▶₁ #t2.1 )
                                    case InitSucc
                                    solve( IsSmaller( a, S(myzero) ) @ #last )
                                      case SimpleSmaller
                                      by contradiction /* node #t1 after last node #last */
                                    next
                                      case ZExtendedSmaller
                                      by contradiction /* node #t1 after last node #last */
                                    qed
                                  next
                                    case StepSucc
                                    solve( IsSmaller( a, S(y.1) ) @ #last )
                                      case SimpleSmaller
                                      by contradiction /* node #t1 after last node #last */
                                    next
                                      case ZExtendedSmaller
                                      by contradiction /* node #t1 after last node #last */
                                    qed
                                  qed
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    qed
                  qed
                qed
              next
                case SimpleSmaller_case_2
                solve( !Y( ~pid, sid.3 ) ▶₀ #t1.1 )
                  case BuyANewYubikey
                  solve( !SharedKey( ~pid, k.1 ) ▶₂ #t1.1 )
                    case BuyANewYubikey
                    solve( !Succ( S(otc1), Stc ) ▶₃ #t1.1 )
                      case StepSucc
                      solve( !Y( ~pid, sid.3 ) ▶₀ #t1.2 )
                        case BuyANewYubikey
                        solve( !SharedKey( ~pid, k.1 ) ▶₂ #t1.2 )
                          case BuyANewYubikey
                          solve( !Succ( S(otc2), Stc ) ▶₃ #t1.2 )
                            case StepSucc
                            solve( IsSmaller( a, b ) @ #t1.3 )
                              case SimpleSmaller
                              solve( !Succ( a, b ) ▶₀ #t1.3 )
                                case InitSucc
                                solve( IsSmaller( S(myzero), c ) @ #t2.1 )
                                  case SimpleSmaller
                                  solve( !Succ( S(myzero), c ) ▶₀ #t2.1 )
                                    case StepSucc
                                    solve( IsSmaller( myzero, S(S(myzero)) ) @ #last )
                                      case SimpleSmaller
                                      by contradiction /* node #t1 after last node #last */
                                    next
                                      case ZExtendedSmaller
                                      by contradiction /* node #t1 after last node #last */
                                    qed
                                  qed
                                next
                                  case ZExtendedSmaller
                                  solve( !Succ( y, c ) ▶₁ #t2.1 )
                                    case InitSucc
                                    by contradiction /* cyclic */
                                  next
                                    case StepSucc
                                    solve( IsSmaller( myzero, S(y) ) @ #last )
                                      case SimpleSmaller
                                      by contradiction /* node #t1 after last node #last */
                                    next
                                      case ZExtendedSmaller
                                      by contradiction /* node #t1 after last node #last */
                                    qed
                                  qed
                                qed
                              next
                                case StepSucc
                                solve( IsSmaller( S(a), c ) @ #t2.1 )
                                  case SimpleSmaller
                                  solve( !Succ( S(a), c ) ▶₀ #t2.1 )
                                    case StepSucc
                                    solve( IsSmaller( a, S(S(a)) ) @ #last )
                                      case SimpleSmaller
                                      by contradiction /* node #t1 after last node #last */
                                    next
                                      case ZExtendedSmaller
                                      by contradiction /* node #t1 after last node #last */
                                    qed
                                  qed
                                next
                                  case ZExtendedSmaller
                                  solve( !Succ( y, c ) ▶₁ #t2.1 )
                                    case InitSucc
                                    solve( IsSmaller( a, S(myzero) ) @ #last )
                                      case SimpleSmaller
                                      by contradiction /* node #t1 after last node #last */
                                    next
                                      case ZExtendedSmaller
                                      by contradiction /* node #t1 after last node #last */
                                    qed
                                  next
                                    case StepSucc
                                    solve( IsSmaller( a, S(y) ) @ #last )
                                      case SimpleSmaller
                                      by contradiction /* node #t1 after last node #last */
                                    next
                                      case ZExtendedSmaller
                                      by contradiction /* node #t1 after last node #last */
                                    qed
                                  qed
                                qed
                              qed
                            next
                              case ZExtendedSmaller
                              solve( !Succ( y, b ) ▶₁ #t1.3 )
                                case InitSucc
                                solve( IsSmaller( S(myzero), c ) @ #t2.1 )
                                  case SimpleSmaller
                                  solve( !Succ( S(myzero), c ) ▶₀ #t2.1 )
                                    case StepSucc
                                    solve( IsSmaller( a, S(S(myzero)) ) @ #last )
                                      case SimpleSmaller
                                      by contradiction /* node #t1 after last node #last */
                                    next
                                      case ZExtendedSmaller
                                      by contradiction /* node #t1 after last node #last */
                                    qed
                                  qed
                                next
                                  case ZExtendedSmaller
                                  solve( !Succ( y, c ) ▶₁ #t2.1 )
                                    case InitSucc
                                    by contradiction /* cyclic */
                                  next
                                    case StepSucc
                                    solve( IsSmaller( a, S(y) ) @ #last )
                                      case SimpleSmaller
                                      by contradiction /* node #t1 after last node #last */
                                    next
                                      case ZExtendedSmaller
                                      by contradiction /* node #t1 after last node #last */
                                    qed
                                  qed
                                qed
                              next
                                case StepSucc
                                solve( IsSmaller( S(y), c ) @ #t2.1 )
                                  case SimpleSmaller
                                  solve( !Succ( S(y), c ) ▶₀ #t2.1 )
                                    case StepSucc
                                    solve( IsSmaller( a, S(S(y)) ) @ #last )
                                      case SimpleSmaller
                                      by contradiction /* node #t1 after last node #last */
                                    next
                                      case ZExtendedSmaller
                                      by contradiction /* node #t1 after last node #last */
                                    qed
                                  qed
                                next
                                  case ZExtendedSmaller
                                  solve( !Succ( y.1, c ) ▶₁ #t2.1 )
                                    case InitSucc
                                    solve( IsSmaller( a, S(myzero) ) @ #last )
                                      case SimpleSmaller
                                      by contradiction /* node #t1 after last node #last */
                                    next
                                      case ZExtendedSmaller
                                      by contradiction /* node #t1 after last node #last */
                                    qed
                                  next
                                    case StepSucc
                                    solve( IsSmaller( a, S(y.1) ) @ #last )
                                      case SimpleSmaller
                                      by contradiction /* node #t1 after last node #last */
                                    next
                                      case ZExtendedSmaller
                                      by contradiction /* node #t1 after last node #last */
                                    qed
                                  qed
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    qed
                  qed
                qed
              next
                case ZExtendedSmaller_case_1
                solve( !Y( ~pid, sid.3 ) ▶₀ #t1.1 )
                  case BuyANewYubikey
                  solve( !SharedKey( ~pid, k.1 ) ▶₂ #t1.1 )
                    case BuyANewYubikey
                    solve( !Succ( S(otc1), Stc ) ▶₃ #t1.1 )
                      case StepSucc
                      solve( !Y( ~pid, sid.3 ) ▶₀ #t1.2 )
                        case BuyANewYubikey
                        solve( !SharedKey( ~pid, k.1 ) ▶₂ #t1.2 )
                          case BuyANewYubikey
                          solve( !Succ( S(myzero), Stc ) ▶₃ #t1.2 )
                            case StepSucc
                            solve( IsSmaller( a, b ) @ #t1.3 )
                              case SimpleSmaller
                              solve( !Succ( a, b ) ▶₀ #t1.3 )
                                case InitSucc
                                solve( IsSmaller( S(myzero), c ) @ #t2.1 )
                                  case SimpleSmaller
                                  solve( !Succ( S(myzero), c ) ▶₀ #t2.1 )
                                    case StepSucc
                                    solve( IsSmaller( myzero, S(S(myzero)) ) @ #last )
                                      case SimpleSmaller
                                      by contradiction /* node #t1 after last node #last */
                                    next
                                      case ZExtendedSmaller
                                      by contradiction /* node #t1 after last node #last */
                                    qed
                                  qed
                                next
                                  case ZExtendedSmaller
                                  solve( !Succ( y, c ) ▶₁ #t2.1 )
                                    case InitSucc
                                    by contradiction /* cyclic */
                                  next
                                    case StepSucc
                                    solve( IsSmaller( myzero, S(y) ) @ #last )
                                      case SimpleSmaller
                                      by contradiction /* node #t1 after last node #last */
                                    next
                                      case ZExtendedSmaller
                                      by contradiction /* node #t1 after last node #last */
                                    qed
                                  qed
                                qed
                              next
                                case StepSucc
                                solve( IsSmaller( S(a), c ) @ #t2.1 )
                                  case SimpleSmaller
                                  solve( !Succ( S(a), c ) ▶₀ #t2.1 )
                                    case StepSucc
                                    solve( IsSmaller( a, S(S(a)) ) @ #last )
                                      case SimpleSmaller
                                      by contradiction /* node #t1 after last node #last */
                                    next
                                      case ZExtendedSmaller
                                      by contradiction /* node #t1 after last node #last */
                                    qed
                                  qed
                                next
                                  case ZExtendedSmaller
                                  solve( !Succ( y, c ) ▶₁ #t2.1 )
                                    case InitSucc
                                    solve( IsSmaller( a, S(myzero) ) @ #last )
                                      case SimpleSmaller
                                      by contradiction /* node #t1 after last node #last */
                                    next
                                      case ZExtendedSmaller
                                      by contradiction /* node #t1 after last node #last */
                                    qed
                                  next
                                    case StepSucc
                                    solve( IsSmaller( a, S(y) ) @ #last )
                                      case SimpleSmaller
                                      by contradiction /* node #t1 after last node #last */
                                    next
                                      case ZExtendedSmaller
                                      by contradiction /* node #t1 after last node #last */
                                    qed
                                  qed
                                qed
                              qed
                            next
                              case ZExtendedSmaller
                              solve( !Succ( y, b ) ▶₁ #t1.3 )
                                case InitSucc
                                solve( IsSmaller( S(myzero), c ) @ #t2.1 )
                                  case SimpleSmaller
                                  solve( !Succ( S(myzero), c ) ▶₀ #t2.1 )
                                    case StepSucc
                                    solve( IsSmaller( a, S(S(myzero)) ) @ #last )
                                      case SimpleSmaller
                                      by contradiction /* node #t1 after last node #last */
                                    next
                                      case ZExtendedSmaller
                                      by contradiction /* node #t1 after last node #last */
                                    qed
                                  qed
                                next
                                  case ZExtendedSmaller
                                  solve( !Succ( y, c ) ▶₁ #t2.1 )
                                    case InitSucc
                                    by contradiction /* cyclic */
                                  next
                                    case StepSucc
                                    solve( IsSmaller( a, S(y) ) @ #last )
                                      case SimpleSmaller
                                      by contradiction /* node #t1 after last node #last */
                                    next
                                      case ZExtendedSmaller
                                      by contradiction /* node #t1 after last node #last */
                                    qed
                                  qed
                                qed
                              next
                                case StepSucc
                                solve( IsSmaller( S(y), c ) @ #t2.1 )
                                  case SimpleSmaller
                                  solve( !Succ( S(y), c ) ▶₀ #t2.1 )
                                    case StepSucc
                                    solve( IsSmaller( a, S(S(y)) ) @ #last )
                                      case SimpleSmaller
                                      by contradiction /* node #t1 after last node #last */
                                    next
                                      case ZExtendedSmaller
                                      by contradiction /* node #t1 after last node #last */
                                    qed
                                  qed
                                next
                                  case ZExtendedSmaller
                                  solve( !Succ( y.1, c ) ▶₁ #t2.1 )
                                    case InitSucc
                                    solve( IsSmaller( a, S(myzero) ) @ #last )
                                      case SimpleSmaller
                                      by contradiction /* node #t1 after last node #last */
                                    next
                                      case ZExtendedSmaller
                                      by contradiction /* node #t1 after last node #last */
                                    qed
                                  next
                                    case StepSucc
                                    solve( IsSmaller( a, S(y.1) ) @ #last )
                                      case SimpleSmaller
                                      by contradiction /* node #t1 after last node #last */
                                    next
                                      case ZExtendedSmaller
                                      by contradiction /* node #t1 after last node #last */
                                    qed
                                  qed
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    qed
                  qed
                qed
              next
                case ZExtendedSmaller_case_2
                solve( !Y( ~pid, sid.3 ) ▶₀ #t1.1 )
                  case BuyANewYubikey
                  solve( !SharedKey( ~pid, k.1 ) ▶₂ #t1.1 )
                    case BuyANewYubikey
                    solve( !Succ( S(otc1), Stc ) ▶₃ #t1.1 )
                      case StepSucc
                      solve( !Y( ~pid, sid.3 ) ▶₀ #t1.2 )
                        case BuyANewYubikey
                        solve( !SharedKey( ~pid, k.1 ) ▶₂ #t1.2 )
                          case BuyANewYubikey
                          solve( !Succ( S(y), Stc ) ▶₃ #t1.2 )
                            case StepSucc
                            solve( IsSmaller( a, b ) @ #t1.3 )
                              case SimpleSmaller
                              solve( !Succ( a, b ) ▶₀ #t1.3 )
                                case InitSucc
                                solve( IsSmaller( S(myzero), c ) @ #t2.1 )
                                  case SimpleSmaller
                                  solve( !Succ( S(myzero), c ) ▶₀ #t2.1 )
                                    case StepSucc
                                    solve( IsSmaller( myzero, S(S(myzero)) ) @ #last )
                                      case SimpleSmaller
                                      by contradiction /* node #t1 after last node #last */
                                    next
                                      case ZExtendedSmaller
                                      by contradiction /* node #t1 after last node #last */
                                    qed
                                  qed
                                next
                                  case ZExtendedSmaller
                                  solve( !Succ( y.1, c ) ▶₁ #t2.1 )
                                    case InitSucc
                                    by contradiction /* cyclic */
                                  next
                                    case StepSucc
                                    solve( IsSmaller( myzero, S(y.1) ) @ #last )
                                      case SimpleSmaller
                                      by contradiction /* node #t1 after last node #last */
                                    next
                                      case ZExtendedSmaller
                                      by contradiction /* node #t1 after last node #last */
                                    qed
                                  qed
                                qed
                              next
                                case StepSucc
                                solve( IsSmaller( S(a), c ) @ #t2.1 )
                                  case SimpleSmaller
                                  solve( !Succ( S(a), c ) ▶₀ #t2.1 )
                                    case StepSucc
                                    solve( IsSmaller( a, S(S(a)) ) @ #last )
                                      case SimpleSmaller
                                      by contradiction /* node #t1 after last node #last */
                                    next
                                      case ZExtendedSmaller
                                      by contradiction /* node #t1 after last node #last */
                                    qed
                                  qed
                                next
                                  case ZExtendedSmaller
                                  solve( !Succ( y.1, c ) ▶₁ #t2.1 )
                                    case InitSucc
                                    solve( IsSmaller( a, S(myzero) ) @ #last )
                                      case SimpleSmaller
                                      by contradiction /* node #t1 after last node #last */
                                    next
                                      case ZExtendedSmaller
                                      by contradiction /* node #t1 after last node #last */
                                    qed
                                  next
                                    case StepSucc
                                    solve( IsSmaller( a, S(y.1) ) @ #last )
                                      case SimpleSmaller
                                      by contradiction /* node #t1 after last node #last */
                                    next
                                      case ZExtendedSmaller
                                      by contradiction /* node #t1 after last node #last */
                                    qed
                                  qed
                                qed
                              qed
                            next
                              case ZExtendedSmaller
                              solve( !Succ( y.1, b ) ▶₁ #t1.3 )
                                case InitSucc
                                solve( IsSmaller( S(myzero), c ) @ #t2.1 )
                                  case SimpleSmaller
                                  solve( !Succ( S(myzero), c ) ▶₀ #t2.1 )
                                    case StepSucc
                                    solve( IsSmaller( a, S(S(myzero)) ) @ #last )
                                      case SimpleSmaller
                                      by contradiction /* node #t1 after last node #last */
                                    next
                                      case ZExtendedSmaller
                                      by contradiction /* node #t1 after last node #last */
                                    qed
                                  qed
                                next
                                  case ZExtendedSmaller
                                  solve( !Succ( y.1, c ) ▶₁ #t2.1 )
                                    case InitSucc
                                    by contradiction /* cyclic */
                                  next
                                    case StepSucc
                                    solve( IsSmaller( a, S(y.1) ) @ #last )
                                      case SimpleSmaller
                                      by contradiction /* node #t1 after last node #last */
                                    next
                                      case ZExtendedSmaller
                                      by contradiction /* node #t1 after last node #last */
                                    qed
                                  qed
                                qed
                              next
                                case StepSucc
                                solve( IsSmaller( S(y.1), c ) @ #t2.1 )
                                  case SimpleSmaller
                                  solve( !Succ( S(y.1), c ) ▶₀ #t2.1 )
                                    case StepSucc
                                    solve( IsSmaller( a, S(S(y.1)) ) @ #last )
                                      case SimpleSmaller
                                      by contradiction /* node #t1 after last node #last */
                                    next
                                      case ZExtendedSmaller
                                      by contradiction /* node #t1 after last node #last */
                                    qed
                                  qed
                                next
                                  case ZExtendedSmaller
                                  solve( !Succ( y.2, c ) ▶₁ #t2.1 )
                                    case InitSucc
                                    solve( IsSmaller( a, S(myzero) ) @ #last )
                                      case SimpleSmaller
                                      by contradiction /* node #t1 after last node #last */
                                    next
                                      case ZExtendedSmaller
                                      by contradiction /* node #t1 after last node #last */
                                    qed
                                  next
                                    case StepSucc
                                    solve( IsSmaller( a, S(y.2) ) @ #last )
                                      case SimpleSmaller
                                      by contradiction /* node #t1 after last node #last */
                                    next
                                      case ZExtendedSmaller
                                      by contradiction /* node #t1 after last node #last */
                                    qed
                                  qed
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    qed
                  qed
                qed
              qed
            qed
          next
            case ZExtendedSmaller_case_1
            solve( !SharedKey( ~pid, k.1 ) ▶₂ #t2 )
              case BuyANewYubikey
              solve( !Smaller( otc2, tc2 ) ▶₃ #t2 )
                case SimpleSmaller_case_1
                solve( !Y( ~pid, sid.3 ) ▶₀ #t1.1 )
                  case BuyANewYubikey
                  solve( !SharedKey( ~pid, k.1 ) ▶₂ #t1.1 )
                    case BuyANewYubikey
                    solve( !Succ( S(myzero), Stc ) ▶₃ #t1.1 )
                      case StepSucc
                      solve( !Y( ~pid, sid.3 ) ▶₀ #t1.2 )
                        case BuyANewYubikey
                        solve( !SharedKey( ~pid, k.1 ) ▶₂ #t1.2 )
                          case BuyANewYubikey
                          solve( !Succ( S(myzero), Stc ) ▶₃ #t1.2 )
                            case StepSucc
                            solve( IsSmaller( a, b ) @ #t1.3 )
                              case SimpleSmaller
                              solve( !Succ( a, b ) ▶₀ #t1.3 )
                                case InitSucc
                                solve( IsSmaller( S(myzero), c ) @ #t2.1 )
                                  case SimpleSmaller
                                  solve( !Succ( S(myzero), c ) ▶₀ #t2.1 )
                                    case StepSucc
                                    solve( IsSmaller( myzero, S(S(myzero)) ) @ #last )
                                      case SimpleSmaller
                                      by contradiction /* node #t1 after last node #last */
                                    next
                                      case ZExtendedSmaller
                                      by contradiction /* node #t1 after last node #last */
                                    qed
                                  qed
                                next
                                  case ZExtendedSmaller
                                  solve( !Succ( y, c ) ▶₁ #t2.1 )
                                    case InitSucc
                                    by contradiction /* cyclic */
                                  next
                                    case StepSucc
                                    solve( IsSmaller( myzero, S(y) ) @ #last )
                                      case SimpleSmaller
                                      by contradiction /* node #t1 after last node #last */
                                    next
                                      case ZExtendedSmaller
                                      by contradiction /* node #t1 after last node #last */
                                    qed
                                  qed
                                qed
                              next
                                case StepSucc
                                solve( IsSmaller( S(a), c ) @ #t2.1 )
                                  case SimpleSmaller
                                  solve( !Succ( S(a), c ) ▶₀ #t2.1 )
                                    case StepSucc
                                    solve( IsSmaller( a, S(S(a)) ) @ #last )
                                      case SimpleSmaller
                                      by contradiction /* node #t1 after last node #last */
                                    next
                                      case ZExtendedSmaller
                                      by contradiction /* node #t1 after last node #last */
                                    qed
                                  qed
                                next
                                  case ZExtendedSmaller
                                  solve( !Succ( y, c ) ▶₁ #t2.1 )
                                    case InitSucc
                                    solve( IsSmaller( a, S(myzero) ) @ #last )
                                      case SimpleSmaller
                                      by contradiction /* node #t1 after last node #last */
                                    next
                                      case ZExtendedSmaller
                                      by contradiction /* node #t1 after last node #last */
                                    qed
                                  next
                                    case StepSucc
                                    solve( IsSmaller( a, S(y) ) @ #last )
                                      case SimpleSmaller
                                      by contradiction /* node #t1 after last node #last */
                                    next
                                      case ZExtendedSmaller
                                      by contradiction /* node #t1 after last node #last */
                                    qed
                                  qed
                                qed
                              qed
                            next
                              case ZExtendedSmaller
                              solve( !Succ( y, b ) ▶₁ #t1.3 )
                                case InitSucc
                                solve( IsSmaller( S(myzero), c ) @ #t2.1 )
                                  case SimpleSmaller
                                  solve( !Succ( S(myzero), c ) ▶₀ #t2.1 )
                                    case StepSucc
                                    solve( IsSmaller( a, S(S(myzero)) ) @ #last )
                                      case SimpleSmaller
                                      by contradiction /* node #t1 after last node #last */
                                    next
                                      case ZExtendedSmaller
                                      by contradiction /* node #t1 after last node #last */
                                    qed
                                  qed
                                next
                                  case ZExtendedSmaller
                                  solve( !Succ( y, c ) ▶₁ #t2.1 )
                                    case InitSucc
                                    by contradiction /* cyclic */
                                  next
                                    case StepSucc
                                    solve( IsSmaller( a, S(y) ) @ #last )
                                      case SimpleSmaller
                                      by contradiction /* node #t1 after last node #last */
                                    next
                                      case ZExtendedSmaller
                                      by contradiction /* node #t1 after last node #last */
                                    qed
                                  qed
                                qed
                              next
                                case StepSucc
                                solve( IsSmaller( S(y), c ) @ #t2.1 )
                                  case SimpleSmaller
                                  solve( !Succ( S(y), c ) ▶₀ #t2.1 )
                                    case StepSucc
                                    solve( IsSmaller( a, S(S(y)) ) @ #last )
                                      case SimpleSmaller
                                      by contradiction /* node #t1 after last node #last */
                                    next
                                      case ZExtendedSmaller
                                      by contradiction /* node #t1 after last node #last */
                                    qed
                                  qed
                                next
                                  case ZExtendedSmaller
                                  solve( !Succ( y.1, c ) ▶₁ #t2.1 )
                                    case InitSucc
                                    solve( IsSmaller( a, S(myzero) ) @ #last )
                                      case SimpleSmaller
                                      by contradiction /* node #t1 after last node #last */
                                    next
                                      case ZExtendedSmaller
                                      by contradiction /* node #t1 after last node #last */
                                    qed
                                  next
                                    case StepSucc
                                    solve( IsSmaller( a, S(y.1) ) @ #last )
                                      case SimpleSmaller
                                      by contradiction /* node #t1 after last node #last */
                                    next
                                      case ZExtendedSmaller
                                      by contradiction /* node #t1 after last node #last */
                                    qed
                                  qed
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    qed
                  qed
                qed
              next
                case SimpleSmaller_case_2
                solve( !Y( ~pid, sid.3 ) ▶₀ #t1.1 )
                  case BuyANewYubikey
                  solve( !SharedKey( ~pid, k.1 ) ▶₂ #t1.1 )
                    case BuyANewYubikey
                    solve( !Succ( S(myzero), Stc ) ▶₃ #t1.1 )
                      case StepSucc
                      solve( !Y( ~pid, sid.3 ) ▶₀ #t1.2 )
                        case BuyANewYubikey
                        solve( !SharedKey( ~pid, k.1 ) ▶₂ #t1.2 )
                          case BuyANewYubikey
                          solve( !Succ( S(otc2), Stc ) ▶₃ #t1.2 )
                            case StepSucc
                            solve( IsSmaller( a, b ) @ #t1.3 )
                              case SimpleSmaller
                              solve( !Succ( a, b ) ▶₀ #t1.3 )
                                case InitSucc
                                solve( IsSmaller( S(myzero), c ) @ #t2.1 )
                                  case SimpleSmaller
                                  solve( !Succ( S(myzero), c ) ▶₀ #t2.1 )
                                    case StepSucc
                                    solve( IsSmaller( myzero, S(S(myzero)) ) @ #last )
                                      case SimpleSmaller
                                      by contradiction /* node #t1 after last node #last */
                                    next
                                      case ZExtendedSmaller
                                      by contradiction /* node #t1 after last node #last */
                                    qed
                                  qed
                                next
                                  case ZExtendedSmaller
                                  solve( !Succ( y, c ) ▶₁ #t2.1 )
                                    case InitSucc
                                    by contradiction /* cyclic */
                                  next
                                    case StepSucc
                                    solve( IsSmaller( myzero, S(y) ) @ #last )
                                      case SimpleSmaller
                                      by contradiction /* node #t1 after last node #last */
                                    next
                                      case ZExtendedSmaller
                                      by contradiction /* node #t1 after last node #last */
                                    qed
                                  qed
                                qed
                              next
                                case StepSucc
                                solve( IsSmaller( S(a), c ) @ #t2.1 )
                                  case SimpleSmaller
                                  solve( !Succ( S(a), c ) ▶₀ #t2.1 )
                                    case StepSucc
                                    solve( IsSmaller( a, S(S(a)) ) @ #last )
                                      case SimpleSmaller
                                      by contradiction /* node #t1 after last node #last */
                                    next
                                      case ZExtendedSmaller
                                      by contradiction /* node #t1 after last node #last */
                                    qed
                                  qed
                                next
                                  case ZExtendedSmaller
                                  solve( !Succ( y, c ) ▶₁ #t2.1 )
                                    case InitSucc
                                    solve( IsSmaller( a, S(myzero) ) @ #last )
                                      case SimpleSmaller
                                      by contradiction /* node #t1 after last node #last */
                                    next
                                      case ZExtendedSmaller
                                      by contradiction /* node #t1 after last node #last */
                                    qed
                                  next
                                    case StepSucc
                                    solve( IsSmaller( a, S(y) ) @ #last )
                                      case SimpleSmaller
                                      by contradiction /* node #t1 after last node #last */
                                    next
                                      case ZExtendedSmaller
                                      by contradiction /* node #t1 after last node #last */
                                    qed
                                  qed
                                qed
                              qed
                            next
                              case ZExtendedSmaller
                              solve( !Succ( y, b ) ▶₁ #t1.3 )
                                case InitSucc
                                solve( IsSmaller( S(myzero), c ) @ #t2.1 )
                                  case SimpleSmaller
                                  solve( !Succ( S(myzero), c ) ▶₀ #t2.1 )
                                    case StepSucc
                                    solve( IsSmaller( a, S(S(myzero)) ) @ #last )
                                      case SimpleSmaller
                                      by contradiction /* node #t1 after last node #last */
                                    next
                                      case ZExtendedSmaller
                                      by contradiction /* node #t1 after last node #last */
                                    qed
                                  qed
                                next
                                  case ZExtendedSmaller
                                  solve( !Succ( y, c ) ▶₁ #t2.1 )
                                    case InitSucc
                                    by contradiction /* cyclic */
                                  next
                                    case StepSucc
                                    solve( IsSmaller( a, S(y) ) @ #last )
                                      case SimpleSmaller
                                      by contradiction /* node #t1 after last node #last */
                                    next
                                      case ZExtendedSmaller
                                      by contradiction /* node #t1 after last node #last */
                                    qed
                                  qed
                                qed
                              next
                                case StepSucc
                                solve( IsSmaller( S(y), c ) @ #t2.1 )
                                  case SimpleSmaller
                                  solve( !Succ( S(y), c ) ▶₀ #t2.1 )
                                    case StepSucc
                                    solve( IsSmaller( a, S(S(y)) ) @ #last )
                                      case SimpleSmaller
                                      by contradiction /* node #t1 after last node #last */
                                    next
                                      case ZExtendedSmaller
                                      by contradiction /* node #t1 after last node #last */
                                    qed
                                  qed
                                next
                                  case ZExtendedSmaller
                                  solve( !Succ( y.1, c ) ▶₁ #t2.1 )
                                    case InitSucc
                                    solve( IsSmaller( a, S(myzero) ) @ #last )
                                      case SimpleSmaller
                                      by contradiction /* node #t1 after last node #last */
                                    next
                                      case ZExtendedSmaller
                                      by contradiction /* node #t1 after last node #last */
                                    qed
                                  next
                                    case StepSucc
                                    solve( IsSmaller( a, S(y.1) ) @ #last )
                                      case SimpleSmaller
                                      by contradiction /* node #t1 after last node #last */
                                    next
                                      case ZExtendedSmaller
                                      by contradiction /* node #t1 after last node #last */
                                    qed
                                  qed
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    qed
                  qed
                qed
              next
                case ZExtendedSmaller_case_1
                solve( !Y( ~pid, sid.3 ) ▶₀ #t1.1 )
                  case BuyANewYubikey
                  solve( !SharedKey( ~pid, k.1 ) ▶₂ #t1.1 )
                    case BuyANewYubikey
                    solve( !Succ( S(myzero), Stc ) ▶₃ #t1.1 )
                      case StepSucc
                      solve( !Y( ~pid, sid.3 ) ▶₀ #t1.2 )
                        case BuyANewYubikey
                        solve( !SharedKey( ~pid, k.1 ) ▶₂ #t1.2 )
                          case BuyANewYubikey
                          solve( !Succ( S(myzero), Stc ) ▶₃ #t1.2 )
                            case StepSucc
                            solve( IsSmaller( a, b ) @ #t1.3 )
                              case SimpleSmaller
                              solve( !Succ( a, b ) ▶₀ #t1.3 )
                                case InitSucc
                                solve( IsSmaller( S(myzero), c ) @ #t2.1 )
                                  case SimpleSmaller
                                  solve( !Succ( S(myzero), c ) ▶₀ #t2.1 )
                                    case StepSucc
                                    solve( IsSmaller( myzero, S(S(myzero)) ) @ #last )
                                      case SimpleSmaller
                                      by contradiction /* node #t1 after last node #last */
                                    next
                                      case ZExtendedSmaller
                                      by contradiction /* node #t1 after last node #last */
                                    qed
                                  qed
                                next
                                  case ZExtendedSmaller
                                  solve( !Succ( y, c ) ▶₁ #t2.1 )
                                    case InitSucc
                                    by contradiction /* cyclic */
                                  next
                                    case StepSucc
                                    solve( IsSmaller( myzero, S(y) ) @ #last )
                                      case SimpleSmaller
                                      by contradiction /* node #t1 after last node #last */
                                    next
                                      case ZExtendedSmaller
                                      by contradiction /* node #t1 after last node #last */
                                    qed
                                  qed
                                qed
                              next
                                case StepSucc
                                solve( IsSmaller( S(a), c ) @ #t2.1 )
                                  case SimpleSmaller
                                  solve( !Succ( S(a), c ) ▶₀ #t2.1 )
                                    case StepSucc
                                    solve( IsSmaller( a, S(S(a)) ) @ #last )
                                      case SimpleSmaller
                                      by contradiction /* node #t1 after last node #last */
                                    next
                                      case ZExtendedSmaller
                                      by contradiction /* node #t1 after last node #last */
                                    qed
                                  qed
                                next
                                  case ZExtendedSmaller
                                  solve( !Succ( y, c ) ▶₁ #t2.1 )
                                    case InitSucc
                                    solve( IsSmaller( a, S(myzero) ) @ #last )
                                      case SimpleSmaller
                                      by contradiction /* node #t1 after last node #last */
                                    next
                                      case ZExtendedSmaller
                                      by contradiction /* node #t1 after last node #last */
                                    qed
                                  next
                                    case StepSucc
                                    solve( IsSmaller( a, S(y) ) @ #last )
                                      case SimpleSmaller
                                      by contradiction /* node #t1 after last node #last */
                                    next
                                      case ZExtendedSmaller
                                      by contradiction /* node #t1 after last node #last */
                                    qed
                                  qed
                                qed
                              qed
                            next
                              case ZExtendedSmaller
                              solve( !Succ( y, b ) ▶₁ #t1.3 )
                                case InitSucc
                                solve( IsSmaller( S(myzero), c ) @ #t2.1 )
                                  case SimpleSmaller
                                  solve( !Succ( S(myzero), c ) ▶₀ #t2.1 )
                                    case StepSucc
                                    solve( IsSmaller( a, S(S(myzero)) ) @ #last )
                                      case SimpleSmaller
                                      by contradiction /* node #t1 after last node #last */
                                    next
                                      case ZExtendedSmaller
                                      by contradiction /* node #t1 after last node #last */
                                    qed
                                  qed
                                next
                                  case ZExtendedSmaller
                                  solve( !Succ( y, c ) ▶₁ #t2.1 )
                                    case InitSucc
                                    by contradiction /* cyclic */
                                  next
                                    case StepSucc
                                    solve( IsSmaller( a, S(y) ) @ #last )
                                      case SimpleSmaller
                                      by contradiction /* node #t1 after last node #last */
                                    next
                                      case ZExtendedSmaller
                                      by contradiction /* node #t1 after last node #last */
                                    qed
                                  qed
                                qed
                              next
                                case StepSucc
                                solve( IsSmaller( S(y), c ) @ #t2.1 )
                                  case SimpleSmaller
                                  solve( !Succ( S(y), c ) ▶₀ #t2.1 )
                                    case StepSucc
                                    solve( IsSmaller( a, S(S(y)) ) @ #last )
                                      case SimpleSmaller
                                      by contradiction /* node #t1 after last node #last */
                                    next
                                      case ZExtendedSmaller
                                      by contradiction /* node #t1 after last node #last */
                                    qed
                                  qed
                                next
                                  case ZExtendedSmaller
                                  solve( !Succ( y.1, c ) ▶₁ #t2.1 )
                                    case InitSucc
                                    solve( IsSmaller( a, S(myzero) ) @ #last )
                                      case SimpleSmaller
                                      by contradiction /* node #t1 after last node #last */
                                    next
                                      case ZExtendedSmaller
                                      by contradiction /* node #t1 after last node #last */
                                    qed
                                  next
                                    case StepSucc
                                    solve( IsSmaller( a, S(y.1) ) @ #last )
                                      case SimpleSmaller
                                      by contradiction /* node #t1 after last node #last */
                                    next
                                      case ZExtendedSmaller
                                      by contradiction /* node #t1 after last node #last */
                                    qed
                                  qed
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    qed
                  qed
                qed
              next
                case ZExtendedSmaller_case_2
                solve( !Y( ~pid, sid.3 ) ▶₀ #t1.1 )
                  case BuyANewYubikey
                  solve( !SharedKey( ~pid, k.1 ) ▶₂ #t1.1 )
                    case BuyANewYubikey
                    solve( !Succ( S(myzero), Stc ) ▶₃ #t1.1 )
                      case StepSucc
                      solve( !Y( ~pid, sid.3 ) ▶₀ #t1.2 )
                        case BuyANewYubikey
                        solve( !SharedKey( ~pid, k.1 ) ▶₂ #t1.2 )
                          case BuyANewYubikey
                          solve( !Succ( S(y), Stc ) ▶₃ #t1.2 )
                            case StepSucc
                            solve( IsSmaller( a, b ) @ #t1.3 )
                              case SimpleSmaller
                              solve( !Succ( a, b ) ▶₀ #t1.3 )
                                case InitSucc
                                solve( IsSmaller( S(myzero), c ) @ #t2.1 )
                                  case SimpleSmaller
                                  solve( !Succ( S(myzero), c ) ▶₀ #t2.1 )
                                    case StepSucc
                                    solve( IsSmaller( myzero, S(S(myzero)) ) @ #last )
                                      case SimpleSmaller
                                      by contradiction /* node #t1 after last node #last */
                                    next
                                      case ZExtendedSmaller
                                      by contradiction /* node #t1 after last node #last */
                                    qed
                                  qed
                                next
                                  case ZExtendedSmaller
                                  solve( !Succ( y.1, c ) ▶₁ #t2.1 )
                                    case InitSucc
                                    by contradiction /* cyclic */
                                  next
                                    case StepSucc
                                    solve( IsSmaller( myzero, S(y.1) ) @ #last )
                                      case SimpleSmaller
                                      by contradiction /* node #t1 after last node #last */
                                    next
                                      case ZExtendedSmaller
                                      by contradiction /* node #t1 after last node #last */
                                    qed
                                  qed
                                qed
                              next
                                case StepSucc
                                solve( IsSmaller( S(a), c ) @ #t2.1 )
                                  case SimpleSmaller
                                  solve( !Succ( S(a), c ) ▶₀ #t2.1 )
                                    case StepSucc
                                    solve( IsSmaller( a, S(S(a)) ) @ #last )
                                      case SimpleSmaller
                                      by contradiction /* node #t1 after last node #last */
                                    next
                                      case ZExtendedSmaller
                                      by contradiction /* node #t1 after last node #last */
                                    qed
                                  qed
                                next
                                  case ZExtendedSmaller
                                  solve( !Succ( y.1, c ) ▶₁ #t2.1 )
                                    case InitSucc
                                    solve( IsSmaller( a, S(myzero) ) @ #last )
                                      case SimpleSmaller
                                      by contradiction /* node #t1 after last node #last */
                                    next
                                      case ZExtendedSmaller
                                      by contradiction /* node #t1 after last node #last */
                                    qed
                                  next
                                    case StepSucc
                                    solve( IsSmaller( a, S(y.1) ) @ #last )
                                      case SimpleSmaller
                                      by contradiction /* node #t1 after last node #last */
                                    next
                                      case ZExtendedSmaller
                                      by contradiction /* node #t1 after last node #last */
                                    qed
                                  qed
                                qed
                              qed
                            next
                              case ZExtendedSmaller
                              solve( !Succ( y.1, b ) ▶₁ #t1.3 )
                                case InitSucc
                                solve( IsSmaller( S(myzero), c ) @ #t2.1 )
                                  case SimpleSmaller
                                  solve( !Succ( S(myzero), c ) ▶₀ #t2.1 )
                                    case StepSucc
                                    solve( IsSmaller( a, S(S(myzero)) ) @ #last )
                                      case SimpleSmaller
                                      by contradiction /* node #t1 after last node #last */
                                    next
                                      case ZExtendedSmaller
                                      by contradiction /* node #t1 after last node #last */
                                    qed
                                  qed
                                next
                                  case ZExtendedSmaller
                                  solve( !Succ( y.1, c ) ▶₁ #t2.1 )
                                    case InitSucc
                                    by contradiction /* cyclic */
                                  next
                                    case StepSucc
                                    solve( IsSmaller( a, S(y.1) ) @ #last )
                                      case SimpleSmaller
                                      by contradiction /* node #t1 after last node #last */
                                    next
                                      case ZExtendedSmaller
                                      by contradiction /* node #t1 after last node #last */
                                    qed
                                  qed
                                qed
                              next
                                case StepSucc
                                solve( IsSmaller( S(y.1), c ) @ #t2.1 )
                                  case SimpleSmaller
                                  solve( !Succ( S(y.1), c ) ▶₀ #t2.1 )
                                    case StepSucc
                                    solve( IsSmaller( a, S(S(y.1)) ) @ #last )
                                      case SimpleSmaller
                                      by contradiction /* node #t1 after last node #last */
                                    next
                                      case ZExtendedSmaller
                                      by contradiction /* node #t1 after last node #last */
                                    qed
                                  qed
                                next
                                  case ZExtendedSmaller
                                  solve( !Succ( y.2, c ) ▶₁ #t2.1 )
                                    case InitSucc
                                    solve( IsSmaller( a, S(myzero) ) @ #last )
                                      case SimpleSmaller
                                      by contradiction /* node #t1 after last node #last */
                                    next
                                      case ZExtendedSmaller
                                      by contradiction /* node #t1 after last node #last */
                                    qed
                                  next
                                    case StepSucc
                                    solve( IsSmaller( a, S(y.2) ) @ #last )
                                      case SimpleSmaller
                                      by contradiction /* node #t1 after last node #last */
                                    next
                                      case ZExtendedSmaller
                                      by contradiction /* node #t1 after last node #last */
                                    qed
                                  qed
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    qed
                  qed
                qed
              qed
            qed
          next
            case ZExtendedSmaller_case_2
            solve( !SharedKey( ~pid, k.1 ) ▶₂ #t2 )
              case BuyANewYubikey
              solve( !Smaller( otc2, tc2 ) ▶₃ #t2 )
                case SimpleSmaller_case_1
                solve( !Y( ~pid, sid.3 ) ▶₀ #t1.1 )
                  case BuyANewYubikey
                  solve( !SharedKey( ~pid, k.1 ) ▶₂ #t1.1 )
                    case BuyANewYubikey
                    solve( !Succ( S(y), Stc ) ▶₃ #t1.1 )
                      case StepSucc
                      solve( !Y( ~pid, sid.3 ) ▶₀ #t1.2 )
                        case BuyANewYubikey
                        solve( !SharedKey( ~pid, k.1 ) ▶₂ #t1.2 )
                          case BuyANewYubikey
                          solve( !Succ( S(myzero), Stc ) ▶₃ #t1.2 )
                            case StepSucc
                            solve( IsSmaller( a, b ) @ #t1.3 )
                              case SimpleSmaller
                              solve( !Succ( a, b ) ▶₀ #t1.3 )
                                case InitSucc
                                solve( IsSmaller( S(myzero), c ) @ #t2.1 )
                                  case SimpleSmaller
                                  solve( !Succ( S(myzero), c ) ▶₀ #t2.1 )
                                    case StepSucc
                                    solve( IsSmaller( myzero, S(S(myzero)) ) @ #last )
                                      case SimpleSmaller
                                      by contradiction /* node #t1 after last node #last */
                                    next
                                      case ZExtendedSmaller
                                      by contradiction /* node #t1 after last node #last */
                                    qed
                                  qed
                                next
                                  case ZExtendedSmaller
                                  solve( !Succ( y.1, c ) ▶₁ #t2.1 )
                                    case InitSucc
                                    by contradiction /* cyclic */
                                  next
                                    case StepSucc
                                    solve( IsSmaller( myzero, S(y.1) ) @ #last )
                                      case SimpleSmaller
                                      by contradiction /* node #t1 after last node #last */
                                    next
                                      case ZExtendedSmaller
                                      by contradiction /* node #t1 after last node #last */
                                    qed
                                  qed
                                qed
                              next
                                case StepSucc
                                solve( IsSmaller( S(a), c ) @ #t2.1 )
                                  case SimpleSmaller
                                  solve( !Succ( S(a), c ) ▶₀ #t2.1 )
                                    case StepSucc
                                    solve( IsSmaller( a, S(S(a)) ) @ #last )
                                      case SimpleSmaller
                                      by contradiction /* node #t1 after last node #last */
                                    next
                                      case ZExtendedSmaller
                                      by contradiction /* node #t1 after last node #last */
                                    qed
                                  qed
                                next
                                  case ZExtendedSmaller
                                  solve( !Succ( y.1, c ) ▶₁ #t2.1 )
                                    case InitSucc
                                    solve( IsSmaller( a, S(myzero) ) @ #last )
                                      case SimpleSmaller
                                      by contradiction /* node #t1 after last node #last */
                                    next
                                      case ZExtendedSmaller
                                      by contradiction /* node #t1 after last node #last */
                                    qed
                                  next
                                    case StepSucc
                                    solve( IsSmaller( a, S(y.1) ) @ #last )
                                      case SimpleSmaller
                                      by contradiction /* node #t1 after last node #last */
                                    next
                                      case ZExtendedSmaller
                                      by contradiction /* node #t1 after last node #last */
                                    qed
                                  qed
                                qed
                              qed
                            next
                              case ZExtendedSmaller
                              solve( !Succ( y.1, b ) ▶₁ #t1.3 )
                                case InitSucc
                                solve( IsSmaller( S(myzero), c ) @ #t2.1 )
                                  case SimpleSmaller
                                  solve( !Succ( S(myzero), c ) ▶₀ #t2.1 )
                                    case StepSucc
                                    solve( IsSmaller( a, S(S(myzero)) ) @ #last )
                                      case SimpleSmaller
                                      by contradiction /* node #t1 after last node #last */
                                    next
                                      case ZExtendedSmaller
                                      by contradiction /* node #t1 after last node #last */
                                    qed
                                  qed
                                next
                                  case ZExtendedSmaller
                                  solve( !Succ( y.1, c ) ▶₁ #t2.1 )
                                    case InitSucc
                                    by contradiction /* cyclic */
                                  next
                                    case StepSucc
                                    solve( IsSmaller( a, S(y.1) ) @ #last )
                                      case SimpleSmaller
                                      by contradiction /* node #t1 after last node #last */
                                    next
                                      case ZExtendedSmaller
                                      by contradiction /* node #t1 after last node #last */
                                    qed
                                  qed
                                qed
                              next
                                case StepSucc
                                solve( IsSmaller( S(y.1), c ) @ #t2.1 )
                                  case SimpleSmaller
                                  solve( !Succ( S(y.1), c ) ▶₀ #t2.1 )
                                    case StepSucc
                                    solve( IsSmaller( a, S(S(y.1)) ) @ #last )
                                      case SimpleSmaller
                                      by contradiction /* node #t1 after last node #last */
                                    next
                                      case ZExtendedSmaller
                                      by contradiction /* node #t1 after last node #last */
                                    qed
                                  qed
                                next
                                  case ZExtendedSmaller
                                  solve( !Succ( y.2, c ) ▶₁ #t2.1 )
                                    case InitSucc
                                    solve( IsSmaller( a, S(myzero) ) @ #last )
                                      case SimpleSmaller
                                      by contradiction /* node #t1 after last node #last */
                                    next
                                      case ZExtendedSmaller
                                      by contradiction /* node #t1 after last node #last */
                                    qed
                                  next
                                    case StepSucc
                                    solve( IsSmaller( a, S(y.2) ) @ #last )
                                      case SimpleSmaller
                                      by contradiction /* node #t1 after last node #last */
                                    next
                                      case ZExtendedSmaller
                                      by contradiction /* node #t1 after last node #last */
                                    qed
                                  qed
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    qed
                  qed
                qed
              next
                case SimpleSmaller_case_2
                solve( !Y( ~pid, sid.3 ) ▶₀ #t1.1 )
                  case BuyANewYubikey
                  solve( !SharedKey( ~pid, k.1 ) ▶₂ #t1.1 )
                    case BuyANewYubikey
                    solve( !Succ( S(y), Stc ) ▶₃ #t1.1 )
                      case StepSucc
                      solve( !Y( ~pid, sid.3 ) ▶₀ #t1.2 )
                        case BuyANewYubikey
                        solve( !SharedKey( ~pid, k.1 ) ▶₂ #t1.2 )
                          case BuyANewYubikey
                          solve( !Succ( S(otc2), Stc ) ▶₃ #t1.2 )
                            case StepSucc
                            solve( IsSmaller( a, b ) @ #t1.3 )
                              case SimpleSmaller
                              solve( !Succ( a, b ) ▶₀ #t1.3 )
                                case InitSucc
                                solve( IsSmaller( S(myzero), c ) @ #t2.1 )
                                  case SimpleSmaller
                                  solve( !Succ( S(myzero), c ) ▶₀ #t2.1 )
                                    case StepSucc
                                    solve( IsSmaller( myzero, S(S(myzero)) ) @ #last )
                                      case SimpleSmaller
                                      by contradiction /* node #t1 after last node #last */
                                    next
                                      case ZExtendedSmaller
                                      by contradiction /* node #t1 after last node #last */
                                    qed
                                  qed
                                next
                                  case ZExtendedSmaller
                                  solve( !Succ( y.1, c ) ▶₁ #t2.1 )
                                    case InitSucc
                                    by contradiction /* cyclic */
                                  next
                                    case StepSucc
                                    solve( IsSmaller( myzero, S(y.1) ) @ #last )
                                      case SimpleSmaller
                                      by contradiction /* node #t1 after last node #last */
                                    next
                                      case ZExtendedSmaller
                                      by contradiction /* node #t1 after last node #last */
                                    qed
                                  qed
                                qed
                              next
                                case StepSucc
                                solve( IsSmaller( S(a), c ) @ #t2.1 )
                                  case SimpleSmaller
                                  solve( !Succ( S(a), c ) ▶₀ #t2.1 )
                                    case StepSucc
                                    solve( IsSmaller( a, S(S(a)) ) @ #last )
                                      case SimpleSmaller
                                      by contradiction /* node #t1 after last node #last */
                                    next
                                      case ZExtendedSmaller
                                      by contradiction /* node #t1 after last node #last */
                                    qed
                                  qed
                                next
                                  case ZExtendedSmaller
                                  solve( !Succ( y.1, c ) ▶₁ #t2.1 )
                                    case InitSucc
                                    solve( IsSmaller( a, S(myzero) ) @ #last )
                                      case SimpleSmaller
                                      by contradiction /* node #t1 after last node #last */
                                    next
                                      case ZExtendedSmaller
                                      by contradiction /* node #t1 after last node #last */
                                    qed
                                  next
                                    case StepSucc
                                    solve( IsSmaller( a, S(y.1) ) @ #last )
                                      case SimpleSmaller
                                      by contradiction /* node #t1 after last node #last */
                                    next
                                      case ZExtendedSmaller
                                      by contradiction /* node #t1 after last node #last */
                                    qed
                                  qed
                                qed
                              qed
                            next
                              case ZExtendedSmaller
                              solve( !Succ( y.1, b ) ▶₁ #t1.3 )
                                case InitSucc
                                solve( IsSmaller( S(myzero), c ) @ #t2.1 )
                                  case SimpleSmaller
                                  solve( !Succ( S(myzero), c ) ▶₀ #t2.1 )
                                    case StepSucc
                                    solve( IsSmaller( a, S(S(myzero)) ) @ #last )
                                      case SimpleSmaller
                                      by contradiction /* node #t1 after last node #last */
                                    next
                                      case ZExtendedSmaller
                                      by contradiction /* node #t1 after last node #last */
                                    qed
                                  qed
                                next
                                  case ZExtendedSmaller
                                  solve( !Succ( y.1, c ) ▶₁ #t2.1 )
                                    case InitSucc
                                    by contradiction /* cyclic */
                                  next
                                    case StepSucc
                                    solve( IsSmaller( a, S(y.1) ) @ #last )
                                      case SimpleSmaller
                                      by contradiction /* node #t1 after last node #last */
                                    next
                                      case ZExtendedSmaller
                                      by contradiction /* node #t1 after last node #last */
                                    qed
                                  qed
                                qed
                              next
                                case StepSucc
                                solve( IsSmaller( S(y.1), c ) @ #t2.1 )
                                  case SimpleSmaller
                                  solve( !Succ( S(y.1), c ) ▶₀ #t2.1 )
                                    case StepSucc
                                    solve( IsSmaller( a, S(S(y.1)) ) @ #last )
                                      case SimpleSmaller
                                      by contradiction /* node #t1 after last node #last */
                                    next
                                      case ZExtendedSmaller
                                      by contradiction /* node #t1 after last node #last */
                                    qed
                                  qed
                                next
                                  case ZExtendedSmaller
                                  solve( !Succ( y.2, c ) ▶₁ #t2.1 )
                                    case InitSucc
                                    solve( IsSmaller( a, S(myzero) ) @ #last )
                                      case SimpleSmaller
                                      by contradiction /* node #t1 after last node #last */
                                    next
                                      case ZExtendedSmaller
                                      by contradiction /* node #t1 after last node #last */
                                    qed
                                  next
                                    case StepSucc
                                    solve( IsSmaller( a, S(y.2) ) @ #last )
                                      case SimpleSmaller
                                      by contradiction /* node #t1 after last node #last */
                                    next
                                      case ZExtendedSmaller
                                      by contradiction /* node #t1 after last node #last */
                                    qed
                                  qed
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    qed
                  qed
                qed
              next
                case ZExtendedSmaller_case_1
                solve( !Y( ~pid, sid.3 ) ▶₀ #t1.1 )
                  case BuyANewYubikey
                  solve( !SharedKey( ~pid, k.1 ) ▶₂ #t1.1 )
                    case BuyANewYubikey
                    solve( !Succ( S(y), Stc ) ▶₃ #t1.1 )
                      case StepSucc
                      solve( !Y( ~pid, sid.3 ) ▶₀ #t1.2 )
                        case BuyANewYubikey
                        solve( !SharedKey( ~pid, k.1 ) ▶₂ #t1.2 )
                          case BuyANewYubikey
                          solve( !Succ( S(myzero), Stc ) ▶₃ #t1.2 )
                            case StepSucc
                            solve( IsSmaller( a, b ) @ #t1.3 )
                              case SimpleSmaller
                              solve( !Succ( a, b ) ▶₀ #t1.3 )
                                case InitSucc
                                solve( IsSmaller( S(myzero), c ) @ #t2.1 )
                                  case SimpleSmaller
                                  solve( !Succ( S(myzero), c ) ▶₀ #t2.1 )
                                    case StepSucc
                                    solve( IsSmaller( myzero, S(S(myzero)) ) @ #last )
                                      case SimpleSmaller
                                      by contradiction /* node #t1 after last node #last */
                                    next
                                      case ZExtendedSmaller
                                      by contradiction /* node #t1 after last node #last */
                                    qed
                                  qed
                                next
                                  case ZExtendedSmaller
                                  solve( !Succ( y.1, c ) ▶₁ #t2.1 )
                                    case InitSucc
                                    by contradiction /* cyclic */
                                  next
                                    case StepSucc
                                    solve( IsSmaller( myzero, S(y.1) ) @ #last )
                                      case SimpleSmaller
                                      by contradiction /* node #t1 after last node #last */
                                    next
                                      case ZExtendedSmaller
                                      by contradiction /* node #t1 after last node #last */
                                    qed
                                  qed
                                qed
                              next
                                case StepSucc
                                solve( IsSmaller( S(a), c ) @ #t2.1 )
                                  case SimpleSmaller
                                  solve( !Succ( S(a), c ) ▶₀ #t2.1 )
                                    case StepSucc
                                    solve( IsSmaller( a, S(S(a)) ) @ #last )
                                      case SimpleSmaller
                                      by contradiction /* node #t1 after last node #last */
                                    next
                                      case ZExtendedSmaller
                                      by contradiction /* node #t1 after last node #last */
                                    qed
                                  qed
                                next
                                  case ZExtendedSmaller
                                  solve( !Succ( y.1, c ) ▶₁ #t2.1 )
                                    case InitSucc
                                    solve( IsSmaller( a, S(myzero) ) @ #last )
                                      case SimpleSmaller
                                      by contradiction /* node #t1 after last node #last */
                                    next
                                      case ZExtendedSmaller
                                      by contradiction /* node #t1 after last node #last */
                                    qed
                                  next
                                    case StepSucc
                                    solve( IsSmaller( a, S(y.1) ) @ #last )
                                      case SimpleSmaller
                                      by contradiction /* node #t1 after last node #last */
                                    next
                                      case ZExtendedSmaller
                                      by contradiction /* node #t1 after last node #last */
                                    qed
                                  qed
                                qed
                              qed
                            next
                              case ZExtendedSmaller
                              solve( !Succ( y.1, b ) ▶₁ #t1.3 )
                                case InitSucc
                                solve( IsSmaller( S(myzero), c ) @ #t2.1 )
                                  case SimpleSmaller
                                  solve( !Succ( S(myzero), c ) ▶₀ #t2.1 )
                                    case StepSucc
                                    solve( IsSmaller( a, S(S(myzero)) ) @ #last )
                                      case SimpleSmaller
                                      by contradiction /* node #t1 after last node #last */
                                    next
                                      case ZExtendedSmaller
                                      by contradiction /* node #t1 after last node #last */
                                    qed
                                  qed
                                next
                                  case ZExtendedSmaller
                                  solve( !Succ( y.1, c ) ▶₁ #t2.1 )
                                    case InitSucc
                                    by contradiction /* cyclic */
                                  next
                                    case StepSucc
                                    solve( IsSmaller( a, S(y.1) ) @ #last )
                                      case SimpleSmaller
                                      by contradiction /* node #t1 after last node #last */
                                    next
                                      case ZExtendedSmaller
                                      by contradiction /* node #t1 after last node #last */
                                    qed
                                  qed
                                qed
                              next
                                case StepSucc
                                solve( IsSmaller( S(y.1), c ) @ #t2.1 )
                                  case SimpleSmaller
                                  solve( !Succ( S(y.1), c ) ▶₀ #t2.1 )
                                    case StepSucc
                                    solve( IsSmaller( a, S(S(y.1)) ) @ #last )
                                      case SimpleSmaller
                                      by contradiction /* node #t1 after last node #last */
                                    next
                                      case ZExtendedSmaller
                                      by contradiction /* node #t1 after last node #last */
                                    qed
                                  qed
                                next
                                  case ZExtendedSmaller
                                  solve( !Succ( y.2, c ) ▶₁ #t2.1 )
                                    case InitSucc
                                    solve( IsSmaller( a, S(myzero) ) @ #last )
                                      case SimpleSmaller
                                      by contradiction /* node #t1 after last node #last */
                                    next
                                      case ZExtendedSmaller
                                      by contradiction /* node #t1 after last node #last */
                                    qed
                                  next
                                    case StepSucc
                                    solve( IsSmaller( a, S(y.2) ) @ #last )
                                      case SimpleSmaller
                                      by contradiction /* node #t1 after last node #last */
                                    next
                                      case ZExtendedSmaller
                                      by contradiction /* node #t1 after last node #last */
                                    qed
                                  qed
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    qed
                  qed
                qed
              next
                case ZExtendedSmaller_case_2
                solve( !Y( ~pid, sid.3 ) ▶₀ #t1.1 )
                  case BuyANewYubikey
                  solve( !SharedKey( ~pid, k.1 ) ▶₂ #t1.1 )
                    case BuyANewYubikey
                    solve( !Succ( S(y), Stc ) ▶₃ #t1.1 )
                      case StepSucc
                      solve( !Y( ~pid, sid.3 ) ▶₀ #t1.2 )
                        case BuyANewYubikey
                        solve( !SharedKey( ~pid, k.1 ) ▶₂ #t1.2 )
                          case BuyANewYubikey
                          solve( !Succ( S(y.1), Stc ) ▶₃ #t1.2 )
                            case StepSucc
                            solve( IsSmaller( a, b ) @ #t1.3 )
                              case SimpleSmaller
                              solve( !Succ( a, b ) ▶₀ #t1.3 )
                                case InitSucc
                                solve( IsSmaller( S(myzero), c ) @ #t2.1 )
                                  case SimpleSmaller
                                  solve( !Succ( S(myzero), c ) ▶₀ #t2.1 )
                                    case StepSucc
                                    solve( IsSmaller( myzero, S(S(myzero)) ) @ #last )
                                      case SimpleSmaller
                                      by contradiction /* node #t1 after last node #last */
                                    next
                                      case ZExtendedSmaller
                                      by contradiction /* node #t1 after last node #last */
                                    qed
                                  qed
                                next
                                  case ZExtendedSmaller
                                  solve( !Succ( y.2, c ) ▶₁ #t2.1 )
                                    case InitSucc
                                    by contradiction /* cyclic */
                                  next
                                    case StepSucc
                                    solve( IsSmaller( myzero, S(y.2) ) @ #last )
                                      case SimpleSmaller
                                      by contradiction /* node #t1 after last node #last */
                                    next
                                      case ZExtendedSmaller
                                      by contradiction /* node #t1 after last node #last */
                                    qed
                                  qed
                                qed
                              next
                                case StepSucc
                                solve( IsSmaller( S(a), c ) @ #t2.1 )
                                  case SimpleSmaller
                                  solve( !Succ( S(a), c ) ▶₀ #t2.1 )
                                    case StepSucc
                                    solve( IsSmaller( a, S(S(a)) ) @ #last )
                                      case SimpleSmaller
                                      by contradiction /* node #t1 after last node #last */
                                    next
                                      case ZExtendedSmaller
                                      by contradiction /* node #t1 after last node #last */
                                    qed
                                  qed
                                next
                                  case ZExtendedSmaller
                                  solve( !Succ( y.2, c ) ▶₁ #t2.1 )
                                    case InitSucc
                                    solve( IsSmaller( a, S(myzero) ) @ #last )
                                      case SimpleSmaller
                                      by contradiction /* node #t1 after last node #last */
                                    next
                                      case ZExtendedSmaller
                                      by contradiction /* node #t1 after last node #last */
                                    qed
                                  next
                                    case StepSucc
                                    solve( IsSmaller( a, S(y.2) ) @ #last )
                                      case SimpleSmaller
                                      by contradiction /* node #t1 after last node #last */
                                    next
                                      case ZExtendedSmaller
                                      by contradiction /* node #t1 after last node #last */
                                    qed
                                  qed
                                qed
                              qed
                            next
                              case ZExtendedSmaller
                              solve( !Succ( y.2, b ) ▶₁ #t1.3 )
                                case InitSucc
                                solve( IsSmaller( S(myzero), c ) @ #t2.1 )
                                  case SimpleSmaller
                                  solve( !Succ( S(myzero), c ) ▶₀ #t2.1 )
                                    case StepSucc
                                    solve( IsSmaller( a, S(S(myzero)) ) @ #last )
                                      case SimpleSmaller
                                      by contradiction /* node #t1 after last node #last */
                                    next
                                      case ZExtendedSmaller
                                      by contradiction /* node #t1 after last node #last */
                                    qed
                                  qed
                                next
                                  case ZExtendedSmaller
                                  solve( !Succ( y.2, c ) ▶₁ #t2.1 )
                                    case InitSucc
                                    by contradiction /* cyclic */
                                  next
                                    case StepSucc
                                    solve( IsSmaller( a, S(y.2) ) @ #last )
                                      case SimpleSmaller
                                      by contradiction /* node #t1 after last node #last */
                                    next
                                      case ZExtendedSmaller
                                      by contradiction /* node #t1 after last node #last */
                                    qed
                                  qed
                                qed
                              next
                                case StepSucc
                                solve( IsSmaller( S(y.2), c ) @ #t2.1 )
                                  case SimpleSmaller
                                  solve( !Succ( S(y.2), c ) ▶₀ #t2.1 )
                                    case StepSucc
                                    solve( IsSmaller( a, S(S(y.2)) ) @ #last )
                                      case SimpleSmaller
                                      by contradiction /* node #t1 after last node #last */
                                    next
                                      case ZExtendedSmaller
                                      by contradiction /* node #t1 after last node #last */
                                    qed
                                  qed
                                next
                                  case ZExtendedSmaller
                                  solve( !Succ( y.3, c ) ▶₁ #t2.1 )
                                    case InitSucc
                                    solve( IsSmaller( a, S(myzero) ) @ #last )
                                      case SimpleSmaller
                                      by contradiction /* node #t1 after last node #last */
                                    next
                                      case ZExtendedSmaller
                                      by contradiction /* node #t1 after last node #last */
                                    qed
                                  next
                                    case StepSucc
                                    solve( IsSmaller( a, S(y.3) ) @ #last )
                                      case SimpleSmaller
                                      by contradiction /* node #t1 after last node #last */
                                    next
                                      case ZExtendedSmaller
                                      by contradiction /* node #t1 after last node #last */
                                    qed
                                  qed
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    qed
                  qed
                qed
              qed
            qed
          qed
        qed
      qed
    qed
  qed
qed

lemma no_replay:
  all-traces
  "¬(∃ #i #j pid sid x otp1 otp2.
      ((Login( pid, sid, x, otp1 ) @ #i) ∧ (Login( pid, sid, x, otp2 ) @ #j)) ∧
      (¬(#i = #j)))"
/*
guarded formula characterizing all counter-examples:
"∃ #i #j pid sid x otp1 otp2.
  (Login( pid, sid, x, otp1 ) @ #i) ∧ (Login( pid, sid, x, otp2 ) @ #j)
 ∧
  ¬(#i = #j)"
*/
simplify
solve( (#i < #j)  ∥ (#j < #i) )
  case case_1
  by contradiction /* from formulas */
next
  case case_2
  by contradiction /* from formulas */
qed

lemma injective_correspondance:
  all-traces
  "∀ pid sid x otp #t2.
    (Login( pid, sid, x, otp ) @ #t2) ⇒
    (∃ #t1.
      ((YubiPress( pid, x ) @ #t1) ∧ (#t1 < #t2)) ∧
      (∀ otp2 #t3. (Login( pid, sid, x, otp2 ) @ #t3) ⇒ (#t3 = #t2)))"
/*
guarded formula characterizing all counter-examples:
"∃ pid sid x otp #t2.
  (Login( pid, sid, x, otp ) @ #t2)
 ∧
  ∀ #t1.
   (YubiPress( pid, x ) @ #t1)
  ⇒
   ((¬(#t1 < #t2)) ∨
    (∃ otp2 #t3. (Login( pid, sid, x, otp2 ) @ #t3) ∧ ¬(#t3 = #t2)))"
*/
simplify
solve( (#t3 < #t2)  ∥ (#t2 < #t3) )
  case case_1
  by contradiction /* from formulas */
next
  case case_2
  by contradiction /* from formulas */
qed

lemma Login_invalidates_smaller_counters:
  all-traces
  "∀ pid otc1 tc1 otc2 tc2 #t1 #t2 #t3.
    (((LoginCounter( pid, otc1, tc1 ) @ #t1) ∧
      (LoginCounter( pid, otc2, tc2 ) @ #t2)) ∧
     (IsSmaller( tc1, tc2 ) @ #t3)) ⇒
    (#t1 < #t2)"
/*
guarded formula characterizing all counter-examples:
"∃ pid otc1 tc1 otc2 tc2 #t1 #t2 #t3.
  (LoginCounter( pid, otc1, tc1 ) @ #t1) ∧
  (LoginCounter( pid, otc2, tc2 ) @ #t2) ∧
  (IsSmaller( tc1, tc2 ) @ #t3)
 ∧
  ¬(#t1 < #t2)"
*/
simplify
solve( (#t1 = #t2)  ∥ (#t2 < #t1) )
  case case_1
  by contradiction /* from formulas */
next
  case case_2
  by contradiction /* from formulas */
qed

/* All well-formedness checks were successful. */

end
/* Output
maude tool: 'maude'
 checking version: 2.7.1. OK.
 checking installation: OK.


analyzing: examples/related_work/YubiSecure_KS_STM12/Yubikey.spthy

------------------------------------------------------------------------------
analyzed: examples/related_work/YubiSecure_KS_STM12/Yubikey.spthy

  output:          examples/related_work/YubiSecure_KS_STM12/Yubikey.spthy.tmp
  processing time: 17.343379798s
  Login_reachable (exists-trace): verified (12 steps)
  one_count_foreach_login (all-traces): verified (210 steps)
  slightly_weaker_invariant (all-traces): verified (1241 steps)
  no_replay (all-traces): verified (4 steps)
  injective_correspondance (all-traces): verified (4 steps)
  Login_invalidates_smaller_counters (all-traces): verified (4 steps)

------------------------------------------------------------------------------

==============================================================================
summary of summaries:

analyzed: examples/related_work/YubiSecure_KS_STM12/Yubikey.spthy

  output:          examples/related_work/YubiSecure_KS_STM12/Yubikey.spthy.tmp
  processing time: 17.343379798s
  Login_reachable (exists-trace): verified (12 steps)
  one_count_foreach_login (all-traces): verified (210 steps)
  slightly_weaker_invariant (all-traces): verified (1241 steps)
  no_replay (all-traces): verified (4 steps)
  injective_correspondance (all-traces): verified (4 steps)
  Login_invalidates_smaller_counters (all-traces): verified (4 steps)

==============================================================================
*/
