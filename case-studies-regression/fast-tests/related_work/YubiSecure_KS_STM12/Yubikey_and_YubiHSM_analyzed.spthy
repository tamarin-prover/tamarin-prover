theory YubikeyHSM begin

// Function signature and definition of the equational theory E

functions: S/1, demac/2, dexor1/2, dexor2/2, fst/1, keystream/2,
           keystream_kh/1, keystream_n/1, mac/2, myzero/0, pair/2, sdec/2, senc/2,
           snd/1, xorc/2
equations:
    demac(mac(m, k), k) = m,
    dexor1(xorc(a, b), a) = b,
    dexor2(xorc(a, b), b) = a,
    fst(<x.1, x.2>) = x.1,
    keystream_kh(keystream(kh, n)) = kh,
    keystream_n(keystream(n, n)) = n,
    sdec(senc(x.1, x.2), x.2) = x.1,
    snd(<x.1, x.2>) = x.2



/* looping facts with injective instances: S_Counter/2, Y_counter/2 */

section{* The Yubikey-Protocol with a YubiHSM *}

rule (modulo E) InitSucc:
   [ In( myzero ), In( S(myzero) ) ]
  --[ Theory( ), IsSucc( myzero, S(myzero) ), IsZero( myzero ) ]->
   [ !Succ( myzero, S(myzero) ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) StepSucc:
   [ In( y ), In( S(y) ), !Succ( x, y ) ]
  --[ Theory( ), IsSucc( y, S(y) ) ]->
   [ !Succ( y, S(y) ) ]

  // loop breaker: [2]
  /* has exactly the trivial AC variant */

rule (modulo E) SimpleSmaller:
   [ !Succ( x, y ) ]
  --[ Theory( ), IsSmaller( x, y ) ]->
   [ !Smaller( x, y ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) ZExtendedSmaller:
   [ !Smaller( x, y ), !Succ( y, z ) ]
  --[ Theory( ), IsSmaller( x, z ) ]->
   [ !Smaller( x, z ) ]

  // loop breaker: [0]
  /* has exactly the trivial AC variant */

rule (modulo E) isendHSM:
   [ In( x ) ] --[ HSMWrite( x ) ]-> [ InHSM( x ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) irecvHSM:
   [ OutHSM( x ) ] --[ HSMRead( x ) ]-> [ Out( x ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) read_AEAD:
   [ !S_AEAD( pid, aead ) ]
  --[ AEADRead( aead ), HSMRead( aead ) ]->
   [ Out( aead ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) write_AEAD:
   [ In( aead ), In( pid ) ]
  --[ AEADWrite( aead ), HSMWrite( aead ) ]->
   [ !S_AEAD( pid, aead ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) HSMInit:
   [ Fr( ~k ), Fr( ~kh ) ]
  --[ Protocol( ), GenerateRole1( ~k ), MasterKey( ~k ), OneTime( ) ]->
   [ !HSM( ~kh, ~k ), Out( ~kh ), !YSM_AEAD_YUBIKEY_OTP_DECODE( ~kh ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) YSM_AEAD_RANDOM_GENERATE:
   [
   Fr( ~data ), InHSM( <N, kh> ), !HSM( kh, k ),
   !YSM_AEAD_RANDOM_GENERATE( kh )
   ]
  --[ GenerateRandomAEAD( ~data ) ]->
   [ OutHSM( <xorc(senc(keystream(kh, N), k), ~data), mac(~data, k)> ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) YSM_AEAD_GENERATE:
   [ InHSM( <N, kh, data> ), !HSM( kh, k ), !YSM_AEAD_GENERATE( kh ) ]
  --[
  GenerateAEAD( data, <xorc(senc(keystream(kh, N), k), data), mac(data, k)>
  )
  ]->
   [ OutHSM( <xorc(senc(keystream(kh, N), k), data), mac(data, k)> ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) YSM_AES_ESC_BLOCK_ENCRYPT:
   [ InHSM( <kh, data> ), !HSM( kh, k ), !YSM_AES_ESC_BLOCK_ENCRYPT( kh ) ]
  -->
   [ OutHSM( senc(data, k) ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) YSM_AEAD_YUBIKEY_OTP_DECODE:
   [
   InHSM( <did, kh, 
           <xorc(senc(keystream(kh, N), k), <k2, did>), mac(<k2, did>, k)>, 
           senc(<did, sc, rand>, k2)>
   ),
   !HSM( kh, k ), !YSM_AEAD_YUBIKEY_OTP_DECODE( kh )
   ]
  --[
  OtpDecode( k2, k, <did, sc, rand>, sc,
             xorc(senc(keystream(kh, N), k), <k2, did>), mac(<k2, did>, k)
  ),
  OtpDecodeMaster( k2, k )
  ]->
   [ OutHSM( sc ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) BuyANewYubikey:
   [ Fr( ~k2 ), Fr( ~pid ), Fr( ~sid ), !HSM( kh, ~k ), !Succ( myzero, one )
   ]
  --[ Init( ~pid, ~k2 ) ]->
   [
   Y_counter( ~pid, one ), !Y_Key( ~pid, ~k2 ), !Y_sid( ~pid, ~sid ),
   S_Counter( ~pid, myzero ),
   !S_AEAD( ~pid,
            <xorc(senc(keystream(kh, ~pid), ~k), <~k2, ~sid>), mac(<~k2, ~sid>, ~k)>
   ),
   !S_sid( ~pid, ~sid ), Out( ~pid )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) Yubikey_Plugin:
   [ Y_counter( pid, sc ), !Smaller( sc, Ssc ) ]
  --[ Yubi( pid, Ssc ) ]->
   [ Y_counter( pid, Ssc ) ]

  // loop breaker: [0]
  /* has exactly the trivial AC variant */

rule (modulo E) Yubikey_PressButton:
   [
   Y_counter( pid, tc ), !Y_Key( pid, k2 ), !Y_sid( pid, sid ),
   !Succ( tc, Stc ), Fr( ~pr ), Fr( ~nonce )
   ]
  --[ YubiPress( pid, tc ), YubiPressOtp( pid, <sid, tc, ~pr>, tc, k2 ) ]->
   [ Y_counter( pid, Stc ), Out( <pid, ~nonce, senc(<sid, tc, ~pr>, k2)> ) ]

  // loop breaker: [0]
  /* has exactly the trivial AC variant */

rule (modulo E) Server_ReceiveOTP_NewSession:
   [
   In( <pid, nonce, senc(<sid, tc, ~pr>, k2)> ), !HSM( kh, k ),
   !S_AEAD( pid,
            <xorc(senc(keystream(kh, pid), k), <k2, sid>), mac(<k2, sid>, k)>
   ),
   S_Counter( pid, otc ), !S_sid( pid, sid ), !Smaller( otc, tc )
   ]
  --[
  Login( pid, sid, tc, senc(<sid, tc, ~pr>, k2) ),
  LoginCounter( pid, otc, tc )
  ]->
   [ S_Counter( pid, tc ) ]

  // loop breaker: [3]
  /* has exactly the trivial AC variant */

restriction transitivity:
  "∀ #t1 #t2 a b c.
    ((IsSmaller( a, b ) @ #t1) ∧ (IsSmaller( b, c ) @ #t2)) ⇒
    (∃ #t3. IsSmaller( a, c ) @ #t3)"

restriction smaller_implies_unequal:
  "¬(∃ a #t. IsSmaller( a, a ) @ #t)"
  // safety formula

restriction theory_before_protocol:
  "∀ #i #j. ((Theory( ) @ #i) ∧ (Protocol( ) @ #j)) ⇒ (#i < #j)"
  // safety formula

restriction onetime:
  "∀ #t3 #t4. ((OneTime( ) @ #t3) ∧ (OneTime( ) @ #t4)) ⇒ (#t3 = #t4)"
  // safety formula

lemma adv_can_guess_counter [reuse, use_induction]:
  all-traces
  "∀ pid sc #t2.
    (YubiPress( pid, sc ) @ #t2) ⇒ (∃ #t1. (K( sc ) @ #t1) ∧ (#t1 < #t2))"
/*
guarded formula characterizing all counter-examples:
"∃ pid sc #t2.
  (YubiPress( pid, sc ) @ #t2) ∧ ∀ #t1. (K( sc ) @ #t1) ⇒ ¬(#t1 < #t2)"
*/
induction
  case empty_trace
  by contradiction /* from formulas */
next
  case non_empty_trace
  simplify
  solve( (∀ pid sc #t2.
           (YubiPress( pid, sc ) @ #t2)
          ⇒
           ((last(#t2)) ∨
            (∃ #t1. (K( sc ) @ #t1) ∧ (¬(last(#t1))) ∧ (#t1 < #t2))))  ∥
         (∃ #t1 #t2 a b c.
           (IsSmaller( a, b ) @ #t1) ∧ (IsSmaller( b, c ) @ #t2)
          ∧
           (¬(last(#t2))) ∧
           (¬(last(#t1))) ∧
           (∀ #t3. (IsSmaller( a, c ) @ #t3) ⇒ last(#t3))) )
    case case_1
    solve( (last(#t2))  ∥
           (∃ #t1. (K( sc ) @ #t1) ∧ (¬(last(#t1))) ∧ (#t1 < #t2)) )
      case case_1
      solve( !Y_Key( pid, k2 ) ▶₁ #t2 )
        case BuyANewYubikey_case_1
        solve( !Y_sid( ~pid, sid ) ▶₂ #t2 )
          case BuyANewYubikey
          solve( !Succ( sc, Stc ) ▶₃ #t2 )
            case InitSucc
            by contradiction /* from formulas */
          next
            case StepSucc
            by contradiction /* from formulas */
          qed
        qed
      next
        case BuyANewYubikey_case_2
        solve( !Y_sid( ~pid, sid ) ▶₂ #t2 )
          case BuyANewYubikey
          solve( !Succ( sc, Stc ) ▶₃ #t2 )
            case InitSucc
            by contradiction /* from formulas */
          next
            case StepSucc
            by contradiction /* from formulas */
          qed
        qed
      qed
    next
      case case_2
      by contradiction /* from formulas */
    qed
  next
    case case_2
    solve( !Y_Key( pid, k2 ) ▶₁ #t2 )
      case BuyANewYubikey_case_1
      solve( !Y_sid( ~pid, sid ) ▶₂ #t2 )
        case BuyANewYubikey
        solve( !Succ( sc, Stc ) ▶₃ #t2 )
          case InitSucc
          by contradiction /* from formulas */
        next
          case StepSucc
          by contradiction /* from formulas */
        qed
      qed
    next
      case BuyANewYubikey_case_2
      solve( !Y_sid( ~pid, sid ) ▶₂ #t2 )
        case BuyANewYubikey
        solve( !Succ( sc, Stc ) ▶₃ #t2 )
          case InitSucc
          by contradiction /* from formulas */
        next
          case StepSucc
          by contradiction /* from formulas */
        qed
      qed
    qed
  qed
qed

lemma otp_decode_does_not_help_adv_use_induction [reuse, use_induction]:
  all-traces
  "∀ #t3 k2 k m sc enc mac.
    (OtpDecode( k2, k, m, sc, enc, mac ) @ #t3) ⇒
    (∃ #t1 pid. (YubiPress( pid, sc ) @ #t1) ∧ (#t1 < #t3))"
/*
guarded formula characterizing all counter-examples:
"∃ #t3 k2 k m sc enc mac.
  (OtpDecode( k2, k, m, sc, enc, mac ) @ #t3)
 ∧
  ∀ #t1 pid. (YubiPress( pid, sc ) @ #t1) ⇒ ¬(#t1 < #t3)"
*/
induction
  case empty_trace
  by contradiction /* from formulas */
next
  case non_empty_trace
  simplify
  solve( (∀ #t3 k2 k m sc enc mac.
           (OtpDecode( k2, k, m, sc, enc, mac ) @ #t3)
          ⇒
           ((last(#t3)) ∨
            (∃ #t1 pid.
              (YubiPress( pid, sc ) @ #t1) ∧ (¬(last(#t1))) ∧ (#t1 < #t3))))  ∥
         (∃ #t1 #t2 a b c.
           (IsSmaller( a, b ) @ #t1) ∧ (IsSmaller( b, c ) @ #t2)
          ∧
           (¬(last(#t2))) ∧
           (¬(last(#t1))) ∧
           (∀ #t3. (IsSmaller( a, c ) @ #t3) ⇒ last(#t3))) )
    case case_1
    solve( (last(#t3))  ∥
           (∃ #t1 pid.
             (YubiPress( pid, sc ) @ #t1) ∧ (¬(last(#t1))) ∧ (#t1 < #t3)) )
      case case_1
      solve( InHSM( <did, kh, 
                     <xorc(senc(keystream(kh, N), k), <k2, did>), mac(<k2, did>, k)>, 
                     senc(<did, sc, rand>, k2)>
             ) ▶₀ #t3 )
        case isendHSM
        solve( !HSM( kh, k ) ▶₁ #t3 )
          case HSMInit
          solve( !YSM_AEAD_YUBIKEY_OTP_DECODE( ~kh ) ▶₂ #t3 )
            case HSMInit
            solve( !KU( xorc(senc(keystream(~kh, N), ~k), <k2, did>) ) @ #vk.6 )
              case c_xorc
              solve( !KU( mac(<k2, did>, ~k) ) @ #vk.8 )
                case c_mac
                solve( !KU( ~k ) @ #vk.12 )
                  case irecvHSM
                  by contradiction /* cyclic */
                qed
              next
                case irecvHSM
                by contradiction /* cyclic */
              next
                case read_AEAD_case_1
                solve( !KU( ~sid ) @ #vk.4 )
                  case Yubikey_PressButton_case_1
                  solve( !KU( ~k2 ) @ #vk.11 )
                    case irecvHSM
                    by contradiction /* cyclic */
                  next
                    case read_AEAD_case_1
                    solve( !KU( senc(<~sid, sc, rand>, ~k2) ) @ #vk.10 )
                      case Yubikey_PressButton_case_1
                      by contradiction /* from formulas */
                    next
                      case Yubikey_PressButton_case_2
                      by contradiction /* from formulas */
                    next
                      case c_senc
                      solve( !KU( senc(keystream(~kh, N), ~k) ) @ #vk.12 )
                        case c_senc
                        solve( !KU( ~k ) @ #vk.20 )
                          case irecvHSM
                          by contradiction /* cyclic */
                        qed
                      next
                        case irecvHSM
                        by contradiction /* cyclic */
                      next
                        case read_AEAD_case_1
                        solve( !KU( ~k2.1 ) @ #vk.20 )
                          case irecvHSM
                          by contradiction /* cyclic */
                        next
                          case read_AEAD_case_1
                          by contradiction /* cyclic */
                        next
                          case read_AEAD_case_2
                          solve( !KU( ~k ) @ #vk.22 )
                            case irecvHSM
                            by contradiction /* cyclic */
                          qed
                        qed
                      next
                        case read_AEAD_case_2
                        solve( !KU( ~k2.1 ) @ #vk.20 )
                          case irecvHSM
                          by contradiction /* cyclic */
                        next
                          case read_AEAD_case_1
                          by contradiction /* cyclic */
                        next
                          case read_AEAD_case_2
                          solve( !KU( ~k ) @ #vk.22 )
                            case irecvHSM
                            by contradiction /* cyclic */
                          qed
                        qed
                      qed
                    next
                      case irecvHSM
                      by contradiction /* cyclic */
                    qed
                  next
                    case read_AEAD_case_2
                    solve( !KU( ~k ) @ #vk.14 )
                      case irecvHSM
                      by contradiction /* cyclic */
                    qed
                  qed
                next
                  case Yubikey_PressButton_case_2
                  solve( !KU( ~k2 ) @ #vk.11 )
                    case irecvHSM
                    by contradiction /* cyclic */
                  next
                    case read_AEAD_case_1
                    solve( !KU( senc(<~sid, sc, rand>, ~k2) ) @ #vk.10 )
                      case Yubikey_PressButton_case_1
                      by contradiction /* from formulas */
                    next
                      case Yubikey_PressButton_case_2
                      by contradiction /* from formulas */
                    next
                      case c_senc
                      solve( !KU( senc(keystream(~kh, N), ~k) ) @ #vk.12 )
                        case c_senc
                        solve( !KU( ~k ) @ #vk.22 )
                          case irecvHSM
                          by contradiction /* cyclic */
                        qed
                      next
                        case irecvHSM
                        by contradiction /* cyclic */
                      next
                        case read_AEAD_case_1
                        solve( !KU( ~k2.1 ) @ #vk.22 )
                          case irecvHSM
                          by contradiction /* cyclic */
                        next
                          case read_AEAD_case_1
                          by contradiction /* cyclic */
                        next
                          case read_AEAD_case_2
                          solve( !KU( ~k ) @ #vk.24 )
                            case irecvHSM
                            by contradiction /* cyclic */
                          qed
                        qed
                      next
                        case read_AEAD_case_2
                        solve( !KU( ~k2.1 ) @ #vk.22 )
                          case irecvHSM
                          by contradiction /* cyclic */
                        next
                          case read_AEAD_case_1
                          by contradiction /* cyclic */
                        next
                          case read_AEAD_case_2
                          solve( !KU( ~k ) @ #vk.24 )
                            case irecvHSM
                            by contradiction /* cyclic */
                          qed
                        qed
                      qed
                    next
                      case irecvHSM
                      by contradiction /* cyclic */
                    qed
                  next
                    case read_AEAD_case_2
                    solve( !KU( ~k ) @ #vk.16 )
                      case irecvHSM
                      by contradiction /* cyclic */
                    qed
                  qed
                next
                  case irecvHSM
                  by contradiction /* cyclic */
                next
                  case read_AEAD_case_1
                  solve( !KU( senc(<~sid, sc, rand>, ~k2) ) @ #vk.9 )
                    case Yubikey_PressButton_case_1
                    by contradiction /* from formulas */
                  next
                    case Yubikey_PressButton_case_2
                    by contradiction /* from formulas */
                  next
                    case c_senc
                    solve( !KU( senc(keystream(~kh, N), ~k) ) @ #vk.11 )
                      case c_senc
                      solve( !KU( ~k ) @ #vk.20 )
                        case irecvHSM
                        by contradiction /* cyclic */
                      qed
                    next
                      case irecvHSM
                      by contradiction /* cyclic */
                    next
                      case read_AEAD_case_1
                      solve( !KU( ~k2.1 ) @ #vk.20 )
                        case irecvHSM
                        by contradiction /* cyclic */
                      next
                        case read_AEAD_case_1
                        by contradiction /* cyclic */
                      next
                        case read_AEAD_case_2
                        solve( !KU( ~k ) @ #vk.22 )
                          case irecvHSM
                          by contradiction /* cyclic */
                        qed
                      qed
                    next
                      case read_AEAD_case_2
                      solve( !KU( ~k2.1 ) @ #vk.20 )
                        case irecvHSM
                        by contradiction /* cyclic */
                      next
                        case read_AEAD_case_1
                        by contradiction /* cyclic */
                      next
                        case read_AEAD_case_2
                        solve( !KU( ~k ) @ #vk.22 )
                          case irecvHSM
                          by contradiction /* cyclic */
                        qed
                      qed
                    qed
                  next
                    case irecvHSM
                    by contradiction /* cyclic */
                  qed
                next
                  case read_AEAD_case_2
                  solve( !KU( ~k ) @ #vk.14 )
                    case irecvHSM
                    by contradiction /* cyclic */
                  qed
                qed
              next
                case read_AEAD_case_2
                solve( !KU( ~sid ) @ #vk.4 )
                  case Yubikey_PressButton_case_1
                  solve( !KU( ~k2 ) @ #vk.11 )
                    case irecvHSM
                    by contradiction /* cyclic */
                  next
                    case read_AEAD_case_1
                    solve( !KU( senc(<~sid, sc, rand>, ~k2) ) @ #vk.10 )
                      case Yubikey_PressButton_case_1
                      by contradiction /* from formulas */
                    next
                      case Yubikey_PressButton_case_2
                      by contradiction /* from formulas */
                    next
                      case c_senc
                      solve( !KU( senc(keystream(~kh, N), ~k) ) @ #vk.12 )
                        case c_senc
                        solve( !KU( ~k ) @ #vk.20 )
                          case irecvHSM
                          by contradiction /* cyclic */
                        qed
                      next
                        case irecvHSM
                        by contradiction /* cyclic */
                      next
                        case read_AEAD_case_1
                        solve( !KU( ~k2.1 ) @ #vk.20 )
                          case irecvHSM
                          by contradiction /* cyclic */
                        next
                          case read_AEAD_case_1
                          by contradiction /* cyclic */
                        next
                          case read_AEAD_case_2
                          solve( !KU( ~k ) @ #vk.22 )
                            case irecvHSM
                            by contradiction /* cyclic */
                          qed
                        qed
                      next
                        case read_AEAD_case_2
                        solve( !KU( ~k2.1 ) @ #vk.20 )
                          case irecvHSM
                          by contradiction /* cyclic */
                        next
                          case read_AEAD_case_1
                          by contradiction /* cyclic */
                        next
                          case read_AEAD_case_2
                          solve( !KU( ~k ) @ #vk.22 )
                            case irecvHSM
                            by contradiction /* cyclic */
                          qed
                        qed
                      qed
                    next
                      case irecvHSM
                      by contradiction /* cyclic */
                    qed
                  next
                    case read_AEAD_case_2
                    solve( !KU( ~k ) @ #vk.14 )
                      case irecvHSM
                      by contradiction /* cyclic */
                    qed
                  qed
                next
                  case Yubikey_PressButton_case_2
                  solve( !KU( ~k2 ) @ #vk.11 )
                    case irecvHSM
                    by contradiction /* cyclic */
                  next
                    case read_AEAD_case_1
                    solve( !KU( senc(<~sid, sc, rand>, ~k2) ) @ #vk.10 )
                      case Yubikey_PressButton_case_1
                      by contradiction /* from formulas */
                    next
                      case Yubikey_PressButton_case_2
                      by contradiction /* from formulas */
                    next
                      case c_senc
                      solve( !KU( senc(keystream(~kh, N), ~k) ) @ #vk.12 )
                        case c_senc
                        solve( !KU( ~k ) @ #vk.22 )
                          case irecvHSM
                          by contradiction /* cyclic */
                        qed
                      next
                        case irecvHSM
                        by contradiction /* cyclic */
                      next
                        case read_AEAD_case_1
                        solve( !KU( ~k2.1 ) @ #vk.22 )
                          case irecvHSM
                          by contradiction /* cyclic */
                        next
                          case read_AEAD_case_1
                          by contradiction /* cyclic */
                        next
                          case read_AEAD_case_2
                          solve( !KU( ~k ) @ #vk.24 )
                            case irecvHSM
                            by contradiction /* cyclic */
                          qed
                        qed
                      next
                        case read_AEAD_case_2
                        solve( !KU( ~k2.1 ) @ #vk.22 )
                          case irecvHSM
                          by contradiction /* cyclic */
                        next
                          case read_AEAD_case_1
                          by contradiction /* cyclic */
                        next
                          case read_AEAD_case_2
                          solve( !KU( ~k ) @ #vk.24 )
                            case irecvHSM
                            by contradiction /* cyclic */
                          qed
                        qed
                      qed
                    next
                      case irecvHSM
                      by contradiction /* cyclic */
                    qed
                  next
                    case read_AEAD_case_2
                    solve( !KU( ~k ) @ #vk.16 )
                      case irecvHSM
                      by contradiction /* cyclic */
                    qed
                  qed
                next
                  case irecvHSM
                  by contradiction /* cyclic */
                next
                  case read_AEAD_case_1
                  solve( !KU( senc(<~sid, sc, rand>, ~k2) ) @ #vk.9 )
                    case Yubikey_PressButton_case_1
                    by contradiction /* from formulas */
                  next
                    case Yubikey_PressButton_case_2
                    by contradiction /* from formulas */
                  next
                    case c_senc
                    solve( !KU( senc(keystream(~kh, N), ~k) ) @ #vk.11 )
                      case c_senc
                      solve( !KU( ~k ) @ #vk.20 )
                        case irecvHSM
                        by contradiction /* cyclic */
                      qed
                    next
                      case irecvHSM
                      by contradiction /* cyclic */
                    next
                      case read_AEAD_case_1
                      solve( !KU( ~k2.1 ) @ #vk.20 )
                        case irecvHSM
                        by contradiction /* cyclic */
                      next
                        case read_AEAD_case_1
                        by contradiction /* cyclic */
                      next
                        case read_AEAD_case_2
                        solve( !KU( ~k ) @ #vk.22 )
                          case irecvHSM
                          by contradiction /* cyclic */
                        qed
                      qed
                    next
                      case read_AEAD_case_2
                      solve( !KU( ~k2.1 ) @ #vk.20 )
                        case irecvHSM
                        by contradiction /* cyclic */
                      next
                        case read_AEAD_case_1
                        by contradiction /* cyclic */
                      next
                        case read_AEAD_case_2
                        solve( !KU( ~k ) @ #vk.22 )
                          case irecvHSM
                          by contradiction /* cyclic */
                        qed
                      qed
                    qed
                  next
                    case irecvHSM
                    by contradiction /* cyclic */
                  qed
                next
                  case read_AEAD_case_2
                  solve( !KU( ~k ) @ #vk.14 )
                    case irecvHSM
                    by contradiction /* cyclic */
                  qed
                qed
              qed
            next
              case irecvHSM
              by contradiction /* cyclic */
            next
              case read_AEAD_case_1
              solve( !KU( ~sid ) @ #vk.2 )
                case Yubikey_PressButton_case_1
                solve( !KU( ~k2 ) @ #vk.11 )
                  case irecvHSM
                  by contradiction /* cyclic */
                next
                  case read_AEAD_case_1
                  solve( !KU( senc(<~sid, sc, rand>, ~k2) ) @ #vk.9 )
                    case Yubikey_PressButton_case_1
                    by contradiction /* from formulas */
                  next
                    case Yubikey_PressButton_case_2
                    by contradiction /* from formulas */
                  next
                    case c_senc
                    solve( !KU( senc(keystream(~kh, ~pid), ~k) ) @ #vk.13 )
                      case c_senc
                      solve( !KU( ~k ) @ #vk.18 )
                        case irecvHSM
                        by contradiction /* cyclic */
                      qed
                    next
                      case irecvHSM
                      by contradiction /* cyclic */
                    next
                      case read_AEAD
                      by contradiction /* cyclic */
                    qed
                  next
                    case irecvHSM
                    by contradiction /* cyclic */
                  qed
                next
                  case read_AEAD_case_2
                  solve( !KU( ~k ) @ #vk.12 )
                    case irecvHSM
                    by contradiction /* cyclic */
                  qed
                qed
              next
                case Yubikey_PressButton_case_2
                solve( !KU( ~k2 ) @ #vk.11 )
                  case irecvHSM
                  by contradiction /* cyclic */
                next
                  case read_AEAD_case_1
                  solve( !KU( senc(<~sid, sc, rand>, ~k2) ) @ #vk.9 )
                    case Yubikey_PressButton_case_1
                    by contradiction /* from formulas */
                  next
                    case Yubikey_PressButton_case_2
                    by contradiction /* from formulas */
                  next
                    case c_senc
                    solve( !KU( senc(keystream(~kh, ~pid), ~k) ) @ #vk.15 )
                      case c_senc
                      solve( !KU( ~k ) @ #vk.20 )
                        case irecvHSM
                        by contradiction /* cyclic */
                      qed
                    next
                      case irecvHSM
                      by contradiction /* cyclic */
                    next
                      case read_AEAD
                      by contradiction /* cyclic */
                    qed
                  next
                    case irecvHSM
                    by contradiction /* cyclic */
                  qed
                next
                  case read_AEAD_case_2
                  solve( !KU( ~k ) @ #vk.14 )
                    case irecvHSM
                    by contradiction /* cyclic */
                  qed
                qed
              next
                case irecvHSM
                by contradiction /* cyclic */
              next
                case read_AEAD_case_1
                solve( !KU( senc(<~sid, sc, rand>, ~k2) ) @ #vk.8 )
                  case Yubikey_PressButton_case_1
                  by contradiction /* from formulas */
                next
                  case Yubikey_PressButton_case_2
                  by contradiction /* from formulas */
                next
                  case c_senc
                  solve( !KU( senc(keystream(~kh, ~pid), ~k) ) @ #vk.12 )
                    case c_senc
                    solve( !KU( ~k ) @ #vk.18 )
                      case irecvHSM
                      by contradiction /* cyclic */
                    qed
                  next
                    case irecvHSM
                    by contradiction /* cyclic */
                  next
                    case read_AEAD
                    by contradiction /* cyclic */
                  qed
                next
                  case irecvHSM
                  by contradiction /* cyclic */
                qed
              next
                case read_AEAD_case_2
                solve( !KU( ~k ) @ #vk.11 )
                  case irecvHSM
                  by contradiction /* cyclic */
                qed
              qed
            next
              case read_AEAD_case_2
              solve( !KU( ~sid ) @ #vk.2 )
                case Yubikey_PressButton_case_1
                solve( !KU( ~k2 ) @ #vk.11 )
                  case irecvHSM
                  by contradiction /* cyclic */
                next
                  case read_AEAD_case_1
                  solve( !KU( senc(<~sid, sc, rand>, ~k2) ) @ #vk.9 )
                    case Yubikey_PressButton_case_1
                    by contradiction /* from formulas */
                  next
                    case Yubikey_PressButton_case_2
                    by contradiction /* from formulas */
                  next
                    case c_senc
                    solve( !KU( senc(keystream(~kh, ~pid), ~k) ) @ #vk.13 )
                      case c_senc
                      solve( !KU( ~k ) @ #vk.18 )
                        case irecvHSM
                        by contradiction /* cyclic */
                      qed
                    next
                      case irecvHSM
                      by contradiction /* cyclic */
                    next
                      case read_AEAD
                      by contradiction /* cyclic */
                    qed
                  next
                    case irecvHSM
                    by contradiction /* cyclic */
                  qed
                next
                  case read_AEAD_case_2
                  solve( !KU( ~k ) @ #vk.12 )
                    case irecvHSM
                    by contradiction /* cyclic */
                  qed
                qed
              next
                case Yubikey_PressButton_case_2
                solve( !KU( ~k2 ) @ #vk.11 )
                  case irecvHSM
                  by contradiction /* cyclic */
                next
                  case read_AEAD_case_1
                  solve( !KU( senc(<~sid, sc, rand>, ~k2) ) @ #vk.9 )
                    case Yubikey_PressButton_case_1
                    by contradiction /* from formulas */
                  next
                    case Yubikey_PressButton_case_2
                    by contradiction /* from formulas */
                  next
                    case c_senc
                    solve( !KU( senc(keystream(~kh, ~pid), ~k) ) @ #vk.15 )
                      case c_senc
                      solve( !KU( ~k ) @ #vk.20 )
                        case irecvHSM
                        by contradiction /* cyclic */
                      qed
                    next
                      case irecvHSM
                      by contradiction /* cyclic */
                    next
                      case read_AEAD
                      by contradiction /* cyclic */
                    qed
                  next
                    case irecvHSM
                    by contradiction /* cyclic */
                  qed
                next
                  case read_AEAD_case_2
                  solve( !KU( ~k ) @ #vk.14 )
                    case irecvHSM
                    by contradiction /* cyclic */
                  qed
                qed
              next
                case irecvHSM
                by contradiction /* cyclic */
              next
                case read_AEAD_case_1
                solve( !KU( senc(<~sid, sc, rand>, ~k2) ) @ #vk.8 )
                  case Yubikey_PressButton_case_1
                  by contradiction /* from formulas */
                next
                  case Yubikey_PressButton_case_2
                  by contradiction /* from formulas */
                next
                  case c_senc
                  solve( !KU( senc(keystream(~kh, ~pid), ~k) ) @ #vk.12 )
                    case c_senc
                    solve( !KU( ~k ) @ #vk.18 )
                      case irecvHSM
                      by contradiction /* cyclic */
                    qed
                  next
                    case irecvHSM
                    by contradiction /* cyclic */
                  next
                    case read_AEAD
                    by contradiction /* cyclic */
                  qed
                next
                  case irecvHSM
                  by contradiction /* cyclic */
                qed
              next
                case read_AEAD_case_2
                solve( !KU( ~k ) @ #vk.11 )
                  case irecvHSM
                  by contradiction /* cyclic */
                qed
              qed
            qed
          qed
        qed
      qed
    next
      case case_2
      by contradiction /* from formulas */
    qed
  next
    case case_2
    solve( InHSM( <did, kh, 
                   <xorc(senc(keystream(kh, N), k), <k2, did>), mac(<k2, did>, k)>, 
                   senc(<did, sc, rand>, k2)>
           ) ▶₀ #t3 )
      case isendHSM
      solve( !HSM( kh, k ) ▶₁ #t3 )
        case HSMInit
        solve( !YSM_AEAD_YUBIKEY_OTP_DECODE( ~kh ) ▶₂ #t3 )
          case HSMInit
          solve( IsSmaller( a, b ) @ #t1 )
            case SimpleSmaller
            solve( !Succ( a, b ) ▶₀ #t1 )
              case InitSucc
              solve( IsSmaller( S(myzero), c ) @ #t2 )
                case SimpleSmaller
                solve( !Succ( S(myzero), c ) ▶₀ #t2 )
                  case StepSucc
                  solve( IsSmaller( myzero, S(S(myzero)) ) @ #last )
                    case SimpleSmaller
                    by contradiction /* node #t3 after last node #last */
                  next
                    case ZExtendedSmaller
                    by contradiction /* node #t3 after last node #last */
                  qed
                qed
              next
                case ZExtendedSmaller
                solve( !Succ( y, c ) ▶₁ #t2 )
                  case InitSucc
                  by contradiction /* cyclic */
                next
                  case StepSucc
                  solve( IsSmaller( myzero, S(y) ) @ #last )
                    case SimpleSmaller
                    by contradiction /* node #t3 after last node #last */
                  next
                    case ZExtendedSmaller
                    by contradiction /* node #t3 after last node #last */
                  qed
                qed
              qed
            next
              case StepSucc
              solve( IsSmaller( S(a), c ) @ #t2 )
                case SimpleSmaller
                solve( !Succ( S(a), c ) ▶₀ #t2 )
                  case StepSucc
                  solve( IsSmaller( a, S(S(a)) ) @ #last )
                    case SimpleSmaller
                    by contradiction /* node #t3 after last node #last */
                  next
                    case ZExtendedSmaller
                    by contradiction /* node #t3 after last node #last */
                  qed
                qed
              next
                case ZExtendedSmaller
                solve( !Succ( y, c ) ▶₁ #t2 )
                  case InitSucc
                  solve( IsSmaller( a, S(myzero) ) @ #last )
                    case SimpleSmaller
                    by contradiction /* node #t3 after last node #last */
                  next
                    case ZExtendedSmaller
                    by contradiction /* node #t3 after last node #last */
                  qed
                next
                  case StepSucc
                  solve( IsSmaller( a, S(y) ) @ #last )
                    case SimpleSmaller
                    by contradiction /* node #t3 after last node #last */
                  next
                    case ZExtendedSmaller
                    by contradiction /* node #t3 after last node #last */
                  qed
                qed
              qed
            qed
          next
            case ZExtendedSmaller
            solve( !Succ( y, b ) ▶₁ #t1 )
              case InitSucc
              solve( IsSmaller( S(myzero), c ) @ #t2 )
                case SimpleSmaller
                solve( !Succ( S(myzero), c ) ▶₀ #t2 )
                  case StepSucc
                  solve( IsSmaller( a, S(S(myzero)) ) @ #last )
                    case SimpleSmaller
                    by contradiction /* node #t3 after last node #last */
                  next
                    case ZExtendedSmaller
                    by contradiction /* node #t3 after last node #last */
                  qed
                qed
              next
                case ZExtendedSmaller
                solve( !Succ( y, c ) ▶₁ #t2 )
                  case InitSucc
                  by contradiction /* cyclic */
                next
                  case StepSucc
                  solve( IsSmaller( a, S(y) ) @ #last )
                    case SimpleSmaller
                    by contradiction /* node #t3 after last node #last */
                  next
                    case ZExtendedSmaller
                    by contradiction /* node #t3 after last node #last */
                  qed
                qed
              qed
            next
              case StepSucc
              solve( IsSmaller( S(y), c ) @ #t2 )
                case SimpleSmaller
                solve( !Succ( S(y), c ) ▶₀ #t2 )
                  case StepSucc
                  solve( IsSmaller( a, S(S(y)) ) @ #last )
                    case SimpleSmaller
                    by contradiction /* node #t3 after last node #last */
                  next
                    case ZExtendedSmaller
                    by contradiction /* node #t3 after last node #last */
                  qed
                qed
              next
                case ZExtendedSmaller
                solve( !Succ( y.1, c ) ▶₁ #t2 )
                  case InitSucc
                  solve( IsSmaller( a, S(myzero) ) @ #last )
                    case SimpleSmaller
                    by contradiction /* node #t3 after last node #last */
                  next
                    case ZExtendedSmaller
                    by contradiction /* node #t3 after last node #last */
                  qed
                next
                  case StepSucc
                  solve( IsSmaller( a, S(y.1) ) @ #last )
                    case SimpleSmaller
                    by contradiction /* node #t3 after last node #last */
                  next
                    case ZExtendedSmaller
                    by contradiction /* node #t3 after last node #last */
                  qed
                qed
              qed
            qed
          qed
        qed
      qed
    qed
  qed
qed

lemma k2_is_secret_use_induction [use_induction, reuse]:
  all-traces
  "∀ #t1 #t2 pid k2.
    ((Init( pid, k2 ) @ #t1) ∧ (K( k2 ) @ #t2)) ⇒
    (∃ #t3 #t4 k. ((K( k ) @ #t3) ∧ (MasterKey( k ) @ #t4)) ∧ (#t3 < #t2))"
/*
guarded formula characterizing all counter-examples:
"∃ #t1 #t2 pid k2.
  (Init( pid, k2 ) @ #t1) ∧ (K( k2 ) @ #t2)
 ∧
  ∀ #t3 #t4 k. (K( k ) @ #t3) ∧ (MasterKey( k ) @ #t4) ⇒ ¬(#t3 < #t2)"
*/
induction
  case empty_trace
  by contradiction /* from formulas */
next
  case non_empty_trace
  simplify
  solve( (∀ #t1 #t2 pid k2.
           (Init( pid, k2 ) @ #t1) ∧ (K( k2 ) @ #t2)
          ⇒
           ((last(#t2)) ∨
            (last(#t1)) ∨
            (∃ #t3 #t4 k.
              (K( k ) @ #t3) ∧ (MasterKey( k ) @ #t4)
             ∧
              (¬(last(#t4))) ∧ (¬(last(#t3))) ∧ (#t3 < #t2))))  ∥
         (∃ #t1 #t2 a b c.
           (IsSmaller( a, b ) @ #t1) ∧ (IsSmaller( b, c ) @ #t2)
          ∧
           (¬(last(#t2))) ∧
           (¬(last(#t1))) ∧
           (∀ #t3. (IsSmaller( a, c ) @ #t3) ⇒ last(#t3))) )
    case case_1
    solve( (last(#t2))  ∥
           (∃ #t3 #t4 k.
             (K( k ) @ #t3) ∧ (MasterKey( k ) @ #t4)
            ∧
             (¬(last(#t4))) ∧ (¬(last(#t3))) ∧ (#t3 < #t2)) )
      case case_1
      solve( !HSM( kh, ~k ) ▶₃ #t1 )
        case HSMInit
        solve( !Succ( myzero, one ) ▶₄ #t1 )
          case InitSucc
          solve( !KU( ~k2 ) @ #vk )
            case irecvHSM
            by contradiction /* cyclic */
          next
            case read_AEAD_case_1
            solve( !KU( senc(keystream(~kh, ~pid), ~k) ) @ #vk.3 )
              case c_senc
              solve( !KU( ~k ) @ #vk.5 )
                case irecvHSM
                by contradiction /* cyclic */
              qed
            next
              case irecvHSM
              by contradiction /* cyclic */
            next
              case read_AEAD
              by contradiction /* cyclic */
            qed
          next
            case read_AEAD_case_2
            solve( !KU( ~k ) @ #vk.3 )
              case irecvHSM
              by contradiction /* cyclic */
            qed
          qed
        next
          case StepSucc
          solve( !KU( ~k2 ) @ #vk )
            case irecvHSM
            by contradiction /* cyclic */
          next
            case read_AEAD_case_1
            solve( !KU( senc(keystream(~kh, ~pid), ~k) ) @ #vk.3 )
              case c_senc
              solve( !KU( ~k ) @ #vk.5 )
                case irecvHSM
                by contradiction /* cyclic */
              qed
            next
              case irecvHSM
              by contradiction /* cyclic */
            next
              case read_AEAD
              by contradiction /* cyclic */
            qed
          next
            case read_AEAD_case_2
            solve( !KU( ~k ) @ #vk.3 )
              case irecvHSM
              by contradiction /* cyclic */
            qed
          qed
        qed
      qed
    next
      case case_2
      by contradiction /* from formulas */
    qed
  next
    case case_2
    solve( !HSM( kh, ~k ) ▶₃ #t1 )
      case HSMInit
      solve( !Succ( myzero, one ) ▶₄ #t1 )
        case InitSucc
        solve( IsSmaller( a, b ) @ #t1.1 )
          case SimpleSmaller
          solve( !Succ( a, b ) ▶₀ #t1.1 )
            case InitSucc
            solve( IsSmaller( S(myzero), c ) @ #t2.1 )
              case SimpleSmaller
              solve( !Succ( S(myzero), c ) ▶₀ #t2.1 )
                case StepSucc
                solve( IsSmaller( myzero, S(S(myzero)) ) @ #last )
                  case SimpleSmaller
                  by contradiction /* node #t1 after last node #last */
                next
                  case ZExtendedSmaller
                  by contradiction /* node #t1 after last node #last */
                qed
              qed
            next
              case ZExtendedSmaller
              solve( !Succ( y, c ) ▶₁ #t2.1 )
                case InitSucc
                by contradiction /* cyclic */
              next
                case StepSucc
                solve( IsSmaller( myzero, S(y) ) @ #last )
                  case SimpleSmaller
                  by contradiction /* node #t1 after last node #last */
                next
                  case ZExtendedSmaller
                  by contradiction /* node #t1 after last node #last */
                qed
              qed
            qed
          next
            case StepSucc
            solve( IsSmaller( S(a), c ) @ #t2.1 )
              case SimpleSmaller
              solve( !Succ( S(a), c ) ▶₀ #t2.1 )
                case StepSucc
                solve( IsSmaller( a, S(S(a)) ) @ #last )
                  case SimpleSmaller
                  by contradiction /* node #t1 after last node #last */
                next
                  case ZExtendedSmaller
                  by contradiction /* node #t1 after last node #last */
                qed
              qed
            next
              case ZExtendedSmaller
              solve( !Succ( y, c ) ▶₁ #t2.1 )
                case InitSucc
                solve( IsSmaller( a, S(myzero) ) @ #last )
                  case SimpleSmaller
                  by contradiction /* node #t1 after last node #last */
                next
                  case ZExtendedSmaller
                  by contradiction /* node #t1 after last node #last */
                qed
              next
                case StepSucc
                solve( IsSmaller( a, S(y) ) @ #last )
                  case SimpleSmaller
                  by contradiction /* node #t1 after last node #last */
                next
                  case ZExtendedSmaller
                  by contradiction /* node #t1 after last node #last */
                qed
              qed
            qed
          qed
        next
          case ZExtendedSmaller
          solve( !Succ( y, b ) ▶₁ #t1.1 )
            case InitSucc
            solve( IsSmaller( S(myzero), c ) @ #t2.1 )
              case SimpleSmaller
              solve( !Succ( S(myzero), c ) ▶₀ #t2.1 )
                case StepSucc
                solve( IsSmaller( a, S(S(myzero)) ) @ #last )
                  case SimpleSmaller
                  by contradiction /* node #t1 after last node #last */
                next
                  case ZExtendedSmaller
                  by contradiction /* node #t1 after last node #last */
                qed
              qed
            next
              case ZExtendedSmaller
              solve( !Succ( y, c ) ▶₁ #t2.1 )
                case InitSucc
                by contradiction /* cyclic */
              next
                case StepSucc
                solve( IsSmaller( a, S(y) ) @ #last )
                  case SimpleSmaller
                  by contradiction /* node #t1 after last node #last */
                next
                  case ZExtendedSmaller
                  by contradiction /* node #t1 after last node #last */
                qed
              qed
            qed
          next
            case StepSucc
            solve( IsSmaller( S(y), c ) @ #t2.1 )
              case SimpleSmaller
              solve( !Succ( S(y), c ) ▶₀ #t2.1 )
                case StepSucc
                solve( IsSmaller( a, S(S(y)) ) @ #last )
                  case SimpleSmaller
                  by contradiction /* node #t1 after last node #last */
                next
                  case ZExtendedSmaller
                  by contradiction /* node #t1 after last node #last */
                qed
              qed
            next
              case ZExtendedSmaller
              solve( !Succ( y.1, c ) ▶₁ #t2.1 )
                case InitSucc
                solve( IsSmaller( a, S(myzero) ) @ #last )
                  case SimpleSmaller
                  by contradiction /* node #t1 after last node #last */
                next
                  case ZExtendedSmaller
                  by contradiction /* node #t1 after last node #last */
                qed
              next
                case StepSucc
                solve( IsSmaller( a, S(y.1) ) @ #last )
                  case SimpleSmaller
                  by contradiction /* node #t1 after last node #last */
                next
                  case ZExtendedSmaller
                  by contradiction /* node #t1 after last node #last */
                qed
              qed
            qed
          qed
        qed
      next
        case StepSucc
        solve( IsSmaller( a, b ) @ #t1.1 )
          case SimpleSmaller
          solve( !Succ( a, b ) ▶₀ #t1.1 )
            case InitSucc
            solve( IsSmaller( S(myzero), c ) @ #t2.1 )
              case SimpleSmaller
              solve( !Succ( S(myzero), c ) ▶₀ #t2.1 )
                case StepSucc
                solve( IsSmaller( myzero, S(S(myzero)) ) @ #last )
                  case SimpleSmaller
                  by contradiction /* node #t1 after last node #last */
                next
                  case ZExtendedSmaller
                  by contradiction /* node #t1 after last node #last */
                qed
              qed
            next
              case ZExtendedSmaller
              solve( !Succ( y, c ) ▶₁ #t2.1 )
                case InitSucc
                by contradiction /* cyclic */
              next
                case StepSucc
                solve( IsSmaller( myzero, S(y) ) @ #last )
                  case SimpleSmaller
                  by contradiction /* node #t1 after last node #last */
                next
                  case ZExtendedSmaller
                  by contradiction /* node #t1 after last node #last */
                qed
              qed
            qed
          next
            case StepSucc
            solve( IsSmaller( S(a), c ) @ #t2.1 )
              case SimpleSmaller
              solve( !Succ( S(a), c ) ▶₀ #t2.1 )
                case StepSucc
                solve( IsSmaller( a, S(S(a)) ) @ #last )
                  case SimpleSmaller
                  by contradiction /* node #t1 after last node #last */
                next
                  case ZExtendedSmaller
                  by contradiction /* node #t1 after last node #last */
                qed
              qed
            next
              case ZExtendedSmaller
              solve( !Succ( y, c ) ▶₁ #t2.1 )
                case InitSucc
                solve( IsSmaller( a, S(myzero) ) @ #last )
                  case SimpleSmaller
                  by contradiction /* node #t1 after last node #last */
                next
                  case ZExtendedSmaller
                  by contradiction /* node #t1 after last node #last */
                qed
              next
                case StepSucc
                solve( IsSmaller( a, S(y) ) @ #last )
                  case SimpleSmaller
                  by contradiction /* node #t1 after last node #last */
                next
                  case ZExtendedSmaller
                  by contradiction /* node #t1 after last node #last */
                qed
              qed
            qed
          qed
        next
          case ZExtendedSmaller
          solve( !Succ( y, b ) ▶₁ #t1.1 )
            case InitSucc
            solve( IsSmaller( S(myzero), c ) @ #t2.1 )
              case SimpleSmaller
              solve( !Succ( S(myzero), c ) ▶₀ #t2.1 )
                case StepSucc
                solve( IsSmaller( a, S(S(myzero)) ) @ #last )
                  case SimpleSmaller
                  by contradiction /* node #t1 after last node #last */
                next
                  case ZExtendedSmaller
                  by contradiction /* node #t1 after last node #last */
                qed
              qed
            next
              case ZExtendedSmaller
              solve( !Succ( y, c ) ▶₁ #t2.1 )
                case InitSucc
                by contradiction /* cyclic */
              next
                case StepSucc
                solve( IsSmaller( a, S(y) ) @ #last )
                  case SimpleSmaller
                  by contradiction /* node #t1 after last node #last */
                next
                  case ZExtendedSmaller
                  by contradiction /* node #t1 after last node #last */
                qed
              qed
            qed
          next
            case StepSucc
            solve( IsSmaller( S(y), c ) @ #t2.1 )
              case SimpleSmaller
              solve( !Succ( S(y), c ) ▶₀ #t2.1 )
                case StepSucc
                solve( IsSmaller( a, S(S(y)) ) @ #last )
                  case SimpleSmaller
                  by contradiction /* node #t1 after last node #last */
                next
                  case ZExtendedSmaller
                  by contradiction /* node #t1 after last node #last */
                qed
              qed
            next
              case ZExtendedSmaller
              solve( !Succ( y.1, c ) ▶₁ #t2.1 )
                case InitSucc
                solve( IsSmaller( a, S(myzero) ) @ #last )
                  case SimpleSmaller
                  by contradiction /* node #t1 after last node #last */
                next
                  case ZExtendedSmaller
                  by contradiction /* node #t1 after last node #last */
                qed
              next
                case StepSucc
                solve( IsSmaller( a, S(y.1) ) @ #last )
                  case SimpleSmaller
                  by contradiction /* node #t1 after last node #last */
                next
                  case ZExtendedSmaller
                  by contradiction /* node #t1 after last node #last */
                qed
              qed
            qed
          qed
        qed
      qed
    qed
  qed
qed

lemma neither_k_nor_k2_are_ever_leaked_inv [use_induction, reuse]:
  all-traces
  "(¬(∃ #t1 #t2 k. (MasterKey( k ) @ #t1) ∧ (!KU( k ) @ #t2))) ∧
   (¬(∃ #t5 #t6 k6 pid. (Init( pid, k6 ) @ #t5) ∧ (!KU( k6 ) @ #t6)))"
/*
guarded formula characterizing all counter-examples:
"((∃ #t1 #t2 k. (MasterKey( k ) @ #t1) ∧ (!KU( k ) @ #t2)) ∨
  (∃ #t5 #t6 k6 pid. (Init( pid, k6 ) @ #t5) ∧ (!KU( k6 ) @ #t6)))"
*/
induction
  case empty_trace
  by contradiction /* from formulas */
next
  case non_empty_trace
  simplify
  solve( (∃ #t1 #t2 k. (MasterKey( k ) @ #t1) ∧ (!KU( k ) @ #t2))  ∥
         (∃ #t5 #t6 k6 pid. (Init( pid, k6 ) @ #t5) ∧ (!KU( k6 ) @ #t6)) )
    case case_1
    solve( ((∀ #t1 #t2 k.
              (MasterKey( k ) @ #t1) ∧ (!KU( k ) @ #t2)
             ⇒
              ((last(#t2)) ∨ (last(#t1)))) ∧
            (∀ #t5 #t6 k6 pid.
              (Init( pid, k6 ) @ #t5) ∧ (!KU( k6 ) @ #t6)
             ⇒
              ((last(#t6)) ∨ (last(#t5)))))  ∥
           (∃ #t1 #t2 a b c.
             (IsSmaller( a, b ) @ #t1) ∧ (IsSmaller( b, c ) @ #t2)
            ∧
             (¬(last(#t2))) ∧
             (¬(last(#t1))) ∧
             (∀ #t3. (IsSmaller( a, c ) @ #t3) ⇒ last(#t3))) )
      case case_1
      solve( (last(#t2))  ∥ (last(#t1)) )
        case case_1
        solve( !KU( ~k ) @ #t2 )
          case irecvHSM
          by contradiction /* cyclic */
        qed
      next
        case case_2
        solve( !KU( ~k ) @ #t2 )
          case irecvHSM
          by contradiction /* cyclic */
        qed
      qed
    next
      case case_2
      solve( IsSmaller( a, b ) @ #t1.1 )
        case SimpleSmaller
        solve( !Succ( a, b ) ▶₀ #t1.1 )
          case InitSucc
          solve( IsSmaller( S(myzero), c ) @ #t2 )
            case SimpleSmaller
            solve( !Succ( S(myzero), c ) ▶₀ #t2 )
              case StepSucc
              solve( IsSmaller( myzero, S(S(myzero)) ) @ #last )
                case SimpleSmaller
                by contradiction /* node #t1 after last node #last */
              next
                case ZExtendedSmaller
                by contradiction /* node #t1 after last node #last */
              qed
            qed
          next
            case ZExtendedSmaller
            solve( !Succ( y, c ) ▶₁ #t2 )
              case InitSucc
              by contradiction /* cyclic */
            next
              case StepSucc
              solve( IsSmaller( myzero, S(y) ) @ #last )
                case SimpleSmaller
                by contradiction /* node #t1 after last node #last */
              next
                case ZExtendedSmaller
                by contradiction /* node #t1 after last node #last */
              qed
            qed
          qed
        next
          case StepSucc
          solve( IsSmaller( S(a), c ) @ #t2 )
            case SimpleSmaller
            solve( !Succ( S(a), c ) ▶₀ #t2 )
              case StepSucc
              solve( IsSmaller( a, S(S(a)) ) @ #last )
                case SimpleSmaller
                by contradiction /* node #t1 after last node #last */
              next
                case ZExtendedSmaller
                by contradiction /* node #t1 after last node #last */
              qed
            qed
          next
            case ZExtendedSmaller
            solve( !Succ( y, c ) ▶₁ #t2 )
              case InitSucc
              solve( IsSmaller( a, S(myzero) ) @ #last )
                case SimpleSmaller
                by contradiction /* node #t1 after last node #last */
              next
                case ZExtendedSmaller
                by contradiction /* node #t1 after last node #last */
              qed
            next
              case StepSucc
              solve( IsSmaller( a, S(y) ) @ #last )
                case SimpleSmaller
                by contradiction /* node #t1 after last node #last */
              next
                case ZExtendedSmaller
                by contradiction /* node #t1 after last node #last */
              qed
            qed
          qed
        qed
      next
        case ZExtendedSmaller
        solve( !Succ( y, b ) ▶₁ #t1.1 )
          case InitSucc
          solve( IsSmaller( S(myzero), c ) @ #t2 )
            case SimpleSmaller
            solve( !Succ( S(myzero), c ) ▶₀ #t2 )
              case StepSucc
              solve( IsSmaller( a, S(S(myzero)) ) @ #last )
                case SimpleSmaller
                by contradiction /* node #t1 after last node #last */
              next
                case ZExtendedSmaller
                by contradiction /* node #t1 after last node #last */
              qed
            qed
          next
            case ZExtendedSmaller
            solve( !Succ( y, c ) ▶₁ #t2 )
              case InitSucc
              by contradiction /* cyclic */
            next
              case StepSucc
              solve( IsSmaller( a, S(y) ) @ #last )
                case SimpleSmaller
                by contradiction /* node #t1 after last node #last */
              next
                case ZExtendedSmaller
                by contradiction /* node #t1 after last node #last */
              qed
            qed
          qed
        next
          case StepSucc
          solve( IsSmaller( S(y), c ) @ #t2 )
            case SimpleSmaller
            solve( !Succ( S(y), c ) ▶₀ #t2 )
              case StepSucc
              solve( IsSmaller( a, S(S(y)) ) @ #last )
                case SimpleSmaller
                by contradiction /* node #t1 after last node #last */
              next
                case ZExtendedSmaller
                by contradiction /* node #t1 after last node #last */
              qed
            qed
          next
            case ZExtendedSmaller
            solve( !Succ( y.1, c ) ▶₁ #t2 )
              case InitSucc
              solve( IsSmaller( a, S(myzero) ) @ #last )
                case SimpleSmaller
                by contradiction /* node #t1 after last node #last */
              next
                case ZExtendedSmaller
                by contradiction /* node #t1 after last node #last */
              qed
            next
              case StepSucc
              solve( IsSmaller( a, S(y.1) ) @ #last )
                case SimpleSmaller
                by contradiction /* node #t1 after last node #last */
              next
                case ZExtendedSmaller
                by contradiction /* node #t1 after last node #last */
              qed
            qed
          qed
        qed
      qed
    qed
  next
    case case_2
    solve( ((∀ #t1 #t2 k.
              (MasterKey( k ) @ #t1) ∧ (!KU( k ) @ #t2)
             ⇒
              ((last(#t2)) ∨ (last(#t1)))) ∧
            (∀ #t5 #t6 k6 pid.
              (Init( pid, k6 ) @ #t5) ∧ (!KU( k6 ) @ #t6)
             ⇒
              ((last(#t6)) ∨ (last(#t5)))))  ∥
           (∃ #t1 #t2 a b c.
             (IsSmaller( a, b ) @ #t1) ∧ (IsSmaller( b, c ) @ #t2)
            ∧
             (¬(last(#t2))) ∧
             (¬(last(#t1))) ∧
             (∀ #t3. (IsSmaller( a, c ) @ #t3) ⇒ last(#t3))) )
      case case_1
      solve( (last(#t6))  ∥ (last(#t5)) )
        case case_1
        solve( !HSM( kh, ~k ) ▶₃ #t5 )
          case HSMInit
          solve( !Succ( myzero, one ) ▶₄ #t5 )
            case InitSucc
            solve( !KU( ~k2 ) @ #t6 )
              case irecvHSM
              by contradiction /* cyclic */
            next
              case read_AEAD_case_1
              solve( !KU( S(myzero) ) @ #vk.1 )
                case c_S
                solve( !KU( senc(keystream(~kh, ~pid), ~k) ) @ #vk.2 )
                  case c_senc
                  by contradiction /* from formulas */
                next
                  case irecvHSM
                  by contradiction /* cyclic */
                next
                  case read_AEAD
                  by contradiction /* cyclic */
                qed
              next
                case irecvHSM
                by contradiction /* cyclic */
              qed
            next
              case read_AEAD_case_2
              by contradiction /* from formulas */
            qed
          next
            case StepSucc
            solve( !KU( ~k2 ) @ #t6 )
              case irecvHSM
              by contradiction /* cyclic */
            next
              case read_AEAD_case_1
              solve( !KU( S(myzero) ) @ #vk.1 )
                case c_S
                solve( !KU( senc(keystream(~kh, ~pid), ~k) ) @ #vk.2 )
                  case c_senc
                  by contradiction /* from formulas */
                next
                  case irecvHSM
                  by contradiction /* cyclic */
                next
                  case read_AEAD
                  by contradiction /* cyclic */
                qed
              next
                case irecvHSM
                by contradiction /* cyclic */
              qed
            next
              case read_AEAD_case_2
              by contradiction /* from formulas */
            qed
          qed
        qed
      next
        case case_2
        solve( !HSM( kh, ~k ) ▶₃ #t5 )
          case HSMInit
          solve( !Succ( myzero, one ) ▶₄ #t5 )
            case InitSucc
            solve( !KU( ~k2 ) @ #t6 )
              case irecvHSM
              by contradiction /* cyclic */
            next
              case read_AEAD_case_1
              by contradiction /* from formulas */
            next
              case read_AEAD_case_2
              by contradiction /* from formulas */
            qed
          next
            case StepSucc
            solve( !KU( ~k2 ) @ #t6 )
              case irecvHSM
              by contradiction /* cyclic */
            next
              case read_AEAD_case_1
              by contradiction /* from formulas */
            next
              case read_AEAD_case_2
              by contradiction /* from formulas */
            qed
          qed
        qed
      qed
    next
      case case_2
      solve( !HSM( kh, ~k ) ▶₃ #t5 )
        case HSMInit
        solve( !Succ( myzero, one ) ▶₄ #t5 )
          case InitSucc
          solve( IsSmaller( a, b ) @ #t1 )
            case SimpleSmaller
            solve( !Succ( a, b ) ▶₀ #t1 )
              case InitSucc
              solve( IsSmaller( S(myzero), c ) @ #t2 )
                case SimpleSmaller
                solve( !Succ( S(myzero), c ) ▶₀ #t2 )
                  case StepSucc
                  solve( IsSmaller( myzero, S(S(myzero)) ) @ #last )
                    case SimpleSmaller
                    by contradiction /* node #t5 after last node #last */
                  next
                    case ZExtendedSmaller
                    by contradiction /* node #t5 after last node #last */
                  qed
                qed
              next
                case ZExtendedSmaller
                solve( !Succ( y, c ) ▶₁ #t2 )
                  case InitSucc
                  by contradiction /* cyclic */
                next
                  case StepSucc
                  solve( IsSmaller( myzero, S(y) ) @ #last )
                    case SimpleSmaller
                    by contradiction /* node #t5 after last node #last */
                  next
                    case ZExtendedSmaller
                    by contradiction /* node #t5 after last node #last */
                  qed
                qed
              qed
            next
              case StepSucc
              solve( IsSmaller( S(a), c ) @ #t2 )
                case SimpleSmaller
                solve( !Succ( S(a), c ) ▶₀ #t2 )
                  case StepSucc
                  solve( IsSmaller( a, S(S(a)) ) @ #last )
                    case SimpleSmaller
                    by contradiction /* node #t5 after last node #last */
                  next
                    case ZExtendedSmaller
                    by contradiction /* node #t5 after last node #last */
                  qed
                qed
              next
                case ZExtendedSmaller
                solve( !Succ( y, c ) ▶₁ #t2 )
                  case InitSucc
                  solve( IsSmaller( a, S(myzero) ) @ #last )
                    case SimpleSmaller
                    by contradiction /* node #t5 after last node #last */
                  next
                    case ZExtendedSmaller
                    by contradiction /* node #t5 after last node #last */
                  qed
                next
                  case StepSucc
                  solve( IsSmaller( a, S(y) ) @ #last )
                    case SimpleSmaller
                    by contradiction /* node #t5 after last node #last */
                  next
                    case ZExtendedSmaller
                    by contradiction /* node #t5 after last node #last */
                  qed
                qed
              qed
            qed
          next
            case ZExtendedSmaller
            solve( !Succ( y, b ) ▶₁ #t1 )
              case InitSucc
              solve( IsSmaller( S(myzero), c ) @ #t2 )
                case SimpleSmaller
                solve( !Succ( S(myzero), c ) ▶₀ #t2 )
                  case StepSucc
                  solve( IsSmaller( a, S(S(myzero)) ) @ #last )
                    case SimpleSmaller
                    by contradiction /* node #t5 after last node #last */
                  next
                    case ZExtendedSmaller
                    by contradiction /* node #t5 after last node #last */
                  qed
                qed
              next
                case ZExtendedSmaller
                solve( !Succ( y, c ) ▶₁ #t2 )
                  case InitSucc
                  by contradiction /* cyclic */
                next
                  case StepSucc
                  solve( IsSmaller( a, S(y) ) @ #last )
                    case SimpleSmaller
                    by contradiction /* node #t5 after last node #last */
                  next
                    case ZExtendedSmaller
                    by contradiction /* node #t5 after last node #last */
                  qed
                qed
              qed
            next
              case StepSucc
              solve( IsSmaller( S(y), c ) @ #t2 )
                case SimpleSmaller
                solve( !Succ( S(y), c ) ▶₀ #t2 )
                  case StepSucc
                  solve( IsSmaller( a, S(S(y)) ) @ #last )
                    case SimpleSmaller
                    by contradiction /* node #t5 after last node #last */
                  next
                    case ZExtendedSmaller
                    by contradiction /* node #t5 after last node #last */
                  qed
                qed
              next
                case ZExtendedSmaller
                solve( !Succ( y.1, c ) ▶₁ #t2 )
                  case InitSucc
                  solve( IsSmaller( a, S(myzero) ) @ #last )
                    case SimpleSmaller
                    by contradiction /* node #t5 after last node #last */
                  next
                    case ZExtendedSmaller
                    by contradiction /* node #t5 after last node #last */
                  qed
                next
                  case StepSucc
                  solve( IsSmaller( a, S(y.1) ) @ #last )
                    case SimpleSmaller
                    by contradiction /* node #t5 after last node #last */
                  next
                    case ZExtendedSmaller
                    by contradiction /* node #t5 after last node #last */
                  qed
                qed
              qed
            qed
          qed
        next
          case StepSucc
          solve( IsSmaller( a, b ) @ #t1 )
            case SimpleSmaller
            solve( !Succ( a, b ) ▶₀ #t1 )
              case InitSucc
              solve( IsSmaller( S(myzero), c ) @ #t2 )
                case SimpleSmaller
                solve( !Succ( S(myzero), c ) ▶₀ #t2 )
                  case StepSucc
                  solve( IsSmaller( myzero, S(S(myzero)) ) @ #last )
                    case SimpleSmaller
                    by contradiction /* node #t5 after last node #last */
                  next
                    case ZExtendedSmaller
                    by contradiction /* node #t5 after last node #last */
                  qed
                qed
              next
                case ZExtendedSmaller
                solve( !Succ( y, c ) ▶₁ #t2 )
                  case InitSucc
                  by contradiction /* cyclic */
                next
                  case StepSucc
                  solve( IsSmaller( myzero, S(y) ) @ #last )
                    case SimpleSmaller
                    by contradiction /* node #t5 after last node #last */
                  next
                    case ZExtendedSmaller
                    by contradiction /* node #t5 after last node #last */
                  qed
                qed
              qed
            next
              case StepSucc
              solve( IsSmaller( S(a), c ) @ #t2 )
                case SimpleSmaller
                solve( !Succ( S(a), c ) ▶₀ #t2 )
                  case StepSucc
                  solve( IsSmaller( a, S(S(a)) ) @ #last )
                    case SimpleSmaller
                    by contradiction /* node #t5 after last node #last */
                  next
                    case ZExtendedSmaller
                    by contradiction /* node #t5 after last node #last */
                  qed
                qed
              next
                case ZExtendedSmaller
                solve( !Succ( y, c ) ▶₁ #t2 )
                  case InitSucc
                  solve( IsSmaller( a, S(myzero) ) @ #last )
                    case SimpleSmaller
                    by contradiction /* node #t5 after last node #last */
                  next
                    case ZExtendedSmaller
                    by contradiction /* node #t5 after last node #last */
                  qed
                next
                  case StepSucc
                  solve( IsSmaller( a, S(y) ) @ #last )
                    case SimpleSmaller
                    by contradiction /* node #t5 after last node #last */
                  next
                    case ZExtendedSmaller
                    by contradiction /* node #t5 after last node #last */
                  qed
                qed
              qed
            qed
          next
            case ZExtendedSmaller
            solve( !Succ( y, b ) ▶₁ #t1 )
              case InitSucc
              solve( IsSmaller( S(myzero), c ) @ #t2 )
                case SimpleSmaller
                solve( !Succ( S(myzero), c ) ▶₀ #t2 )
                  case StepSucc
                  solve( IsSmaller( a, S(S(myzero)) ) @ #last )
                    case SimpleSmaller
                    by contradiction /* node #t5 after last node #last */
                  next
                    case ZExtendedSmaller
                    by contradiction /* node #t5 after last node #last */
                  qed
                qed
              next
                case ZExtendedSmaller
                solve( !Succ( y, c ) ▶₁ #t2 )
                  case InitSucc
                  by contradiction /* cyclic */
                next
                  case StepSucc
                  solve( IsSmaller( a, S(y) ) @ #last )
                    case SimpleSmaller
                    by contradiction /* node #t5 after last node #last */
                  next
                    case ZExtendedSmaller
                    by contradiction /* node #t5 after last node #last */
                  qed
                qed
              qed
            next
              case StepSucc
              solve( IsSmaller( S(y), c ) @ #t2 )
                case SimpleSmaller
                solve( !Succ( S(y), c ) ▶₀ #t2 )
                  case StepSucc
                  solve( IsSmaller( a, S(S(y)) ) @ #last )
                    case SimpleSmaller
                    by contradiction /* node #t5 after last node #last */
                  next
                    case ZExtendedSmaller
                    by contradiction /* node #t5 after last node #last */
                  qed
                qed
              next
                case ZExtendedSmaller
                solve( !Succ( y.1, c ) ▶₁ #t2 )
                  case InitSucc
                  solve( IsSmaller( a, S(myzero) ) @ #last )
                    case SimpleSmaller
                    by contradiction /* node #t5 after last node #last */
                  next
                    case ZExtendedSmaller
                    by contradiction /* node #t5 after last node #last */
                  qed
                next
                  case StepSucc
                  solve( IsSmaller( a, S(y.1) ) @ #last )
                    case SimpleSmaller
                    by contradiction /* node #t5 after last node #last */
                  next
                    case ZExtendedSmaller
                    by contradiction /* node #t5 after last node #last */
                  qed
                qed
              qed
            qed
          qed
        qed
      qed
    qed
  qed
qed

lemma one_count_foreach_login [reuse, use_induction]:
  all-traces
  "∀ pid sid x otp #t2.
    (Login( pid, sid, x, otp ) @ #t2) ⇒
    (∃ #t1. (YubiPress( pid, x ) @ #t1) ∧ (#t1 < #t2))"
/*
guarded formula characterizing all counter-examples:
"∃ pid sid x otp #t2.
  (Login( pid, sid, x, otp ) @ #t2)
 ∧
  ∀ #t1. (YubiPress( pid, x ) @ #t1) ⇒ ¬(#t1 < #t2)"
*/
induction
  case empty_trace
  by contradiction
next
  case non_empty_trace
  simplify
  solve( !S_AEAD( pid,
                  <xorc(senc(keystream(kh, pid), k), <k2, sid>), mac(<k2, sid>, k)>
         ) ▶₂ #t2 )
    case BuyANewYubikey_case_1
    solve( (∀ pid sid x otp #t2.
             (Login( pid, sid, x, otp ) @ #t2)
            ⇒
             ((last(#t2)) ∨
              (∃ #t1. (YubiPress( pid, x ) @ #t1) ∧ (¬(last(#t1))) ∧ (#t1 < #t2))))  ∥
           (∃ #t1 #t2 a b c.
             (IsSmaller( a, b ) @ #t1) ∧ (IsSmaller( b, c ) @ #t2)
            ∧
             (¬(last(#t2))) ∧
             (¬(last(#t1))) ∧
             (∀ #t3. (IsSmaller( a, c ) @ #t3) ⇒ last(#t3))) )
      case case_1
      solve( (last(#t2))  ∥
             (∃ #t1. (YubiPress( ~pid, x ) @ #t1) ∧ (¬(last(#t1))) ∧ (#t1 < #t2)) )
        case case_1
        solve( !HSM( ~kh, ~k ) ▶₁ #t2 )
          case HSMInit
          solve( !S_sid( ~pid, ~sid ) ▶₄ #t2 )
            case BuyANewYubikey
            solve( !Smaller( otc, x ) ▶₅ #t2 )
              case SimpleSmaller_case_1
              solve( !KU( senc(<~sid, S(myzero), ~pr>, ~k2) ) @ #vk.4 )
                case Yubikey_PressButton
                by contradiction /* from formulas */
              next
                case c_senc
                by contradiction /* from formulas */
              next
                case irecvHSM
                by contradiction /* cyclic */
              qed
            next
              case SimpleSmaller_case_2
              solve( !KU( senc(<~sid, S(otc), ~pr>, ~k2) ) @ #vk.4 )
                case Yubikey_PressButton
                by contradiction /* from formulas */
              next
                case c_senc
                by contradiction /* from formulas */
              next
                case irecvHSM
                by contradiction /* cyclic */
              qed
            next
              case ZExtendedSmaller_case_1
              solve( !KU( senc(<~sid, S(myzero), ~pr>, ~k2) ) @ #vk.4 )
                case Yubikey_PressButton
                by contradiction /* from formulas */
              next
                case c_senc
                by contradiction /* from formulas */
              next
                case irecvHSM
                by contradiction /* cyclic */
              qed
            next
              case ZExtendedSmaller_case_2
              solve( !KU( senc(<~sid, S(y), ~pr>, ~k2) ) @ #vk.4 )
                case Yubikey_PressButton
                by contradiction /* from formulas */
              next
                case c_senc
                by contradiction /* from formulas */
              next
                case irecvHSM
                by contradiction /* cyclic */
              qed
            qed
          qed
        qed
      next
        case case_2
        by contradiction /* from formulas */
      qed
    next
      case case_2
      solve( !HSM( ~kh, ~k ) ▶₁ #t2 )
        case HSMInit
        solve( !S_sid( ~pid, ~sid ) ▶₄ #t2 )
          case BuyANewYubikey
          solve( !Smaller( otc, x ) ▶₅ #t2 )
            case SimpleSmaller_case_1
            solve( IsSmaller( a, b ) @ #t1 )
              case SimpleSmaller
              solve( !Succ( a, b ) ▶₀ #t1 )
                case InitSucc
                solve( IsSmaller( S(myzero), c ) @ #t2.1 )
                  case SimpleSmaller
                  solve( !Succ( S(myzero), c ) ▶₀ #t2.1 )
                    case StepSucc
                    solve( IsSmaller( myzero, S(S(myzero)) ) @ #last )
                      case SimpleSmaller
                      by contradiction /* node #t2 after last node #last */
                    next
                      case ZExtendedSmaller
                      by contradiction /* node #t2 after last node #last */
                    qed
                  qed
                next
                  case ZExtendedSmaller
                  solve( !Succ( y, c ) ▶₁ #t2.1 )
                    case InitSucc
                    by contradiction /* cyclic */
                  next
                    case StepSucc
                    solve( IsSmaller( myzero, S(y) ) @ #last )
                      case SimpleSmaller
                      by contradiction /* node #t2 after last node #last */
                    next
                      case ZExtendedSmaller
                      by contradiction /* node #t2 after last node #last */
                    qed
                  qed
                qed
              next
                case StepSucc
                solve( IsSmaller( S(a), c ) @ #t2.1 )
                  case SimpleSmaller
                  solve( !Succ( S(a), c ) ▶₀ #t2.1 )
                    case StepSucc
                    solve( IsSmaller( a, S(S(a)) ) @ #last )
                      case SimpleSmaller
                      by contradiction /* node #t2 after last node #last */
                    next
                      case ZExtendedSmaller
                      by contradiction /* node #t2 after last node #last */
                    qed
                  qed
                next
                  case ZExtendedSmaller
                  solve( !Succ( y, c ) ▶₁ #t2.1 )
                    case InitSucc
                    solve( IsSmaller( a, S(myzero) ) @ #last )
                      case SimpleSmaller
                      by contradiction /* node #t2 after last node #last */
                    next
                      case ZExtendedSmaller
                      by contradiction /* node #t2 after last node #last */
                    qed
                  next
                    case StepSucc
                    solve( IsSmaller( a, S(y) ) @ #last )
                      case SimpleSmaller
                      by contradiction /* node #t2 after last node #last */
                    next
                      case ZExtendedSmaller
                      by contradiction /* node #t2 after last node #last */
                    qed
                  qed
                qed
              qed
            next
              case ZExtendedSmaller
              solve( !Succ( y, b ) ▶₁ #t1 )
                case InitSucc
                solve( IsSmaller( S(myzero), c ) @ #t2.1 )
                  case SimpleSmaller
                  solve( !Succ( S(myzero), c ) ▶₀ #t2.1 )
                    case StepSucc
                    solve( IsSmaller( a, S(S(myzero)) ) @ #last )
                      case SimpleSmaller
                      by contradiction /* node #t2 after last node #last */
                    next
                      case ZExtendedSmaller
                      by contradiction /* node #t2 after last node #last */
                    qed
                  qed
                next
                  case ZExtendedSmaller
                  solve( !Succ( y, c ) ▶₁ #t2.1 )
                    case InitSucc
                    by contradiction /* cyclic */
                  next
                    case StepSucc
                    solve( IsSmaller( a, S(y) ) @ #last )
                      case SimpleSmaller
                      by contradiction /* node #t2 after last node #last */
                    next
                      case ZExtendedSmaller
                      by contradiction /* node #t2 after last node #last */
                    qed
                  qed
                qed
              next
                case StepSucc
                solve( IsSmaller( S(y), c ) @ #t2.1 )
                  case SimpleSmaller
                  solve( !Succ( S(y), c ) ▶₀ #t2.1 )
                    case StepSucc
                    solve( IsSmaller( a, S(S(y)) ) @ #last )
                      case SimpleSmaller
                      by contradiction /* node #t2 after last node #last */
                    next
                      case ZExtendedSmaller
                      by contradiction /* node #t2 after last node #last */
                    qed
                  qed
                next
                  case ZExtendedSmaller
                  solve( !Succ( y.1, c ) ▶₁ #t2.1 )
                    case InitSucc
                    solve( IsSmaller( a, S(myzero) ) @ #last )
                      case SimpleSmaller
                      by contradiction /* node #t2 after last node #last */
                    next
                      case ZExtendedSmaller
                      by contradiction /* node #t2 after last node #last */
                    qed
                  next
                    case StepSucc
                    solve( IsSmaller( a, S(y.1) ) @ #last )
                      case SimpleSmaller
                      by contradiction /* node #t2 after last node #last */
                    next
                      case ZExtendedSmaller
                      by contradiction /* node #t2 after last node #last */
                    qed
                  qed
                qed
              qed
            qed
          next
            case SimpleSmaller_case_2
            solve( IsSmaller( a, b ) @ #t1 )
              case SimpleSmaller
              solve( !Succ( a, b ) ▶₀ #t1 )
                case InitSucc
                solve( IsSmaller( S(myzero), c ) @ #t2.1 )
                  case SimpleSmaller
                  solve( !Succ( S(myzero), c ) ▶₀ #t2.1 )
                    case StepSucc
                    solve( IsSmaller( myzero, S(S(myzero)) ) @ #last )
                      case SimpleSmaller
                      by contradiction /* node #t2 after last node #last */
                    next
                      case ZExtendedSmaller
                      by contradiction /* node #t2 after last node #last */
                    qed
                  qed
                next
                  case ZExtendedSmaller
                  solve( !Succ( y, c ) ▶₁ #t2.1 )
                    case InitSucc
                    by contradiction /* cyclic */
                  next
                    case StepSucc
                    solve( IsSmaller( myzero, S(y) ) @ #last )
                      case SimpleSmaller
                      by contradiction /* node #t2 after last node #last */
                    next
                      case ZExtendedSmaller
                      by contradiction /* node #t2 after last node #last */
                    qed
                  qed
                qed
              next
                case StepSucc
                solve( IsSmaller( S(a), c ) @ #t2.1 )
                  case SimpleSmaller
                  solve( !Succ( S(a), c ) ▶₀ #t2.1 )
                    case StepSucc
                    solve( IsSmaller( a, S(S(a)) ) @ #last )
                      case SimpleSmaller
                      by contradiction /* node #t2 after last node #last */
                    next
                      case ZExtendedSmaller
                      by contradiction /* node #t2 after last node #last */
                    qed
                  qed
                next
                  case ZExtendedSmaller
                  solve( !Succ( y, c ) ▶₁ #t2.1 )
                    case InitSucc
                    solve( IsSmaller( a, S(myzero) ) @ #last )
                      case SimpleSmaller
                      by contradiction /* node #t2 after last node #last */
                    next
                      case ZExtendedSmaller
                      by contradiction /* node #t2 after last node #last */
                    qed
                  next
                    case StepSucc
                    solve( IsSmaller( a, S(y) ) @ #last )
                      case SimpleSmaller
                      by contradiction /* node #t2 after last node #last */
                    next
                      case ZExtendedSmaller
                      by contradiction /* node #t2 after last node #last */
                    qed
                  qed
                qed
              qed
            next
              case ZExtendedSmaller
              solve( !Succ( y, b ) ▶₁ #t1 )
                case InitSucc
                solve( IsSmaller( S(myzero), c ) @ #t2.1 )
                  case SimpleSmaller
                  solve( !Succ( S(myzero), c ) ▶₀ #t2.1 )
                    case StepSucc
                    solve( IsSmaller( a, S(S(myzero)) ) @ #last )
                      case SimpleSmaller
                      by contradiction /* node #t2 after last node #last */
                    next
                      case ZExtendedSmaller
                      by contradiction /* node #t2 after last node #last */
                    qed
                  qed
                next
                  case ZExtendedSmaller
                  solve( !Succ( y, c ) ▶₁ #t2.1 )
                    case InitSucc
                    by contradiction /* cyclic */
                  next
                    case StepSucc
                    solve( IsSmaller( a, S(y) ) @ #last )
                      case SimpleSmaller
                      by contradiction /* node #t2 after last node #last */
                    next
                      case ZExtendedSmaller
                      by contradiction /* node #t2 after last node #last */
                    qed
                  qed
                qed
              next
                case StepSucc
                solve( IsSmaller( S(y), c ) @ #t2.1 )
                  case SimpleSmaller
                  solve( !Succ( S(y), c ) ▶₀ #t2.1 )
                    case StepSucc
                    solve( IsSmaller( a, S(S(y)) ) @ #last )
                      case SimpleSmaller
                      by contradiction /* node #t2 after last node #last */
                    next
                      case ZExtendedSmaller
                      by contradiction /* node #t2 after last node #last */
                    qed
                  qed
                next
                  case ZExtendedSmaller
                  solve( !Succ( y.1, c ) ▶₁ #t2.1 )
                    case InitSucc
                    solve( IsSmaller( a, S(myzero) ) @ #last )
                      case SimpleSmaller
                      by contradiction /* node #t2 after last node #last */
                    next
                      case ZExtendedSmaller
                      by contradiction /* node #t2 after last node #last */
                    qed
                  next
                    case StepSucc
                    solve( IsSmaller( a, S(y.1) ) @ #last )
                      case SimpleSmaller
                      by contradiction /* node #t2 after last node #last */
                    next
                      case ZExtendedSmaller
                      by contradiction /* node #t2 after last node #last */
                    qed
                  qed
                qed
              qed
            qed
          next
            case ZExtendedSmaller_case_1
            solve( IsSmaller( a, b ) @ #t1 )
              case SimpleSmaller
              solve( !Succ( a, b ) ▶₀ #t1 )
                case InitSucc
                solve( IsSmaller( S(myzero), c ) @ #t2.1 )
                  case SimpleSmaller
                  solve( !Succ( S(myzero), c ) ▶₀ #t2.1 )
                    case StepSucc
                    solve( IsSmaller( myzero, S(S(myzero)) ) @ #last )
                      case SimpleSmaller
                      by contradiction /* node #t2 after last node #last */
                    next
                      case ZExtendedSmaller
                      by contradiction /* node #t2 after last node #last */
                    qed
                  qed
                next
                  case ZExtendedSmaller
                  solve( !Succ( y, c ) ▶₁ #t2.1 )
                    case InitSucc
                    by contradiction /* cyclic */
                  next
                    case StepSucc
                    solve( IsSmaller( myzero, S(y) ) @ #last )
                      case SimpleSmaller
                      by contradiction /* node #t2 after last node #last */
                    next
                      case ZExtendedSmaller
                      by contradiction /* node #t2 after last node #last */
                    qed
                  qed
                qed
              next
                case StepSucc
                solve( IsSmaller( S(a), c ) @ #t2.1 )
                  case SimpleSmaller
                  solve( !Succ( S(a), c ) ▶₀ #t2.1 )
                    case StepSucc
                    solve( IsSmaller( a, S(S(a)) ) @ #last )
                      case SimpleSmaller
                      by contradiction /* node #t2 after last node #last */
                    next
                      case ZExtendedSmaller
                      by contradiction /* node #t2 after last node #last */
                    qed
                  qed
                next
                  case ZExtendedSmaller
                  solve( !Succ( y, c ) ▶₁ #t2.1 )
                    case InitSucc
                    solve( IsSmaller( a, S(myzero) ) @ #last )
                      case SimpleSmaller
                      by contradiction /* node #t2 after last node #last */
                    next
                      case ZExtendedSmaller
                      by contradiction /* node #t2 after last node #last */
                    qed
                  next
                    case StepSucc
                    solve( IsSmaller( a, S(y) ) @ #last )
                      case SimpleSmaller
                      by contradiction /* node #t2 after last node #last */
                    next
                      case ZExtendedSmaller
                      by contradiction /* node #t2 after last node #last */
                    qed
                  qed
                qed
              qed
            next
              case ZExtendedSmaller
              solve( !Succ( y, b ) ▶₁ #t1 )
                case InitSucc
                solve( IsSmaller( S(myzero), c ) @ #t2.1 )
                  case SimpleSmaller
                  solve( !Succ( S(myzero), c ) ▶₀ #t2.1 )
                    case StepSucc
                    solve( IsSmaller( a, S(S(myzero)) ) @ #last )
                      case SimpleSmaller
                      by contradiction /* node #t2 after last node #last */
                    next
                      case ZExtendedSmaller
                      by contradiction /* node #t2 after last node #last */
                    qed
                  qed
                next
                  case ZExtendedSmaller
                  solve( !Succ( y, c ) ▶₁ #t2.1 )
                    case InitSucc
                    by contradiction /* cyclic */
                  next
                    case StepSucc
                    solve( IsSmaller( a, S(y) ) @ #last )
                      case SimpleSmaller
                      by contradiction /* node #t2 after last node #last */
                    next
                      case ZExtendedSmaller
                      by contradiction /* node #t2 after last node #last */
                    qed
                  qed
                qed
              next
                case StepSucc
                solve( IsSmaller( S(y), c ) @ #t2.1 )
                  case SimpleSmaller
                  solve( !Succ( S(y), c ) ▶₀ #t2.1 )
                    case StepSucc
                    solve( IsSmaller( a, S(S(y)) ) @ #last )
                      case SimpleSmaller
                      by contradiction /* node #t2 after last node #last */
                    next
                      case ZExtendedSmaller
                      by contradiction /* node #t2 after last node #last */
                    qed
                  qed
                next
                  case ZExtendedSmaller
                  solve( !Succ( y.1, c ) ▶₁ #t2.1 )
                    case InitSucc
                    solve( IsSmaller( a, S(myzero) ) @ #last )
                      case SimpleSmaller
                      by contradiction /* node #t2 after last node #last */
                    next
                      case ZExtendedSmaller
                      by contradiction /* node #t2 after last node #last */
                    qed
                  next
                    case StepSucc
                    solve( IsSmaller( a, S(y.1) ) @ #last )
                      case SimpleSmaller
                      by contradiction /* node #t2 after last node #last */
                    next
                      case ZExtendedSmaller
                      by contradiction /* node #t2 after last node #last */
                    qed
                  qed
                qed
              qed
            qed
          next
            case ZExtendedSmaller_case_2
            solve( IsSmaller( a, b ) @ #t1 )
              case SimpleSmaller
              solve( !Succ( a, b ) ▶₀ #t1 )
                case InitSucc
                solve( IsSmaller( S(myzero), c ) @ #t2.1 )
                  case SimpleSmaller
                  solve( !Succ( S(myzero), c ) ▶₀ #t2.1 )
                    case StepSucc
                    solve( IsSmaller( myzero, S(S(myzero)) ) @ #last )
                      case SimpleSmaller
                      by contradiction /* node #t2 after last node #last */
                    next
                      case ZExtendedSmaller
                      by contradiction /* node #t2 after last node #last */
                    qed
                  qed
                next
                  case ZExtendedSmaller
                  solve( !Succ( y.1, c ) ▶₁ #t2.1 )
                    case InitSucc
                    by contradiction /* cyclic */
                  next
                    case StepSucc
                    solve( IsSmaller( myzero, S(y.1) ) @ #last )
                      case SimpleSmaller
                      by contradiction /* node #t2 after last node #last */
                    next
                      case ZExtendedSmaller
                      by contradiction /* node #t2 after last node #last */
                    qed
                  qed
                qed
              next
                case StepSucc
                solve( IsSmaller( S(a), c ) @ #t2.1 )
                  case SimpleSmaller
                  solve( !Succ( S(a), c ) ▶₀ #t2.1 )
                    case StepSucc
                    solve( IsSmaller( a, S(S(a)) ) @ #last )
                      case SimpleSmaller
                      by contradiction /* node #t2 after last node #last */
                    next
                      case ZExtendedSmaller
                      by contradiction /* node #t2 after last node #last */
                    qed
                  qed
                next
                  case ZExtendedSmaller
                  solve( !Succ( y.1, c ) ▶₁ #t2.1 )
                    case InitSucc
                    solve( IsSmaller( a, S(myzero) ) @ #last )
                      case SimpleSmaller
                      by contradiction /* node #t2 after last node #last */
                    next
                      case ZExtendedSmaller
                      by contradiction /* node #t2 after last node #last */
                    qed
                  next
                    case StepSucc
                    solve( IsSmaller( a, S(y.1) ) @ #last )
                      case SimpleSmaller
                      by contradiction /* node #t2 after last node #last */
                    next
                      case ZExtendedSmaller
                      by contradiction /* node #t2 after last node #last */
                    qed
                  qed
                qed
              qed
            next
              case ZExtendedSmaller
              solve( !Succ( y, b ) ▶₁ #t1 )
                case InitSucc
                solve( IsSmaller( S(myzero), c ) @ #t2.1 )
                  case SimpleSmaller
                  solve( !Succ( S(myzero), c ) ▶₀ #t2.1 )
                    case StepSucc
                    solve( IsSmaller( a, S(S(myzero)) ) @ #last )
                      case SimpleSmaller
                      by contradiction /* node #t2 after last node #last */
                    next
                      case ZExtendedSmaller
                      by contradiction /* node #t2 after last node #last */
                    qed
                  qed
                next
                  case ZExtendedSmaller
                  solve( !Succ( y.1, c ) ▶₁ #t2.1 )
                    case InitSucc
                    by contradiction /* cyclic */
                  next
                    case StepSucc
                    solve( IsSmaller( a, S(y.1) ) @ #last )
                      case SimpleSmaller
                      by contradiction /* node #t2 after last node #last */
                    next
                      case ZExtendedSmaller
                      by contradiction /* node #t2 after last node #last */
                    qed
                  qed
                qed
              next
                case StepSucc
                solve( IsSmaller( S(y), c ) @ #t2.1 )
                  case SimpleSmaller
                  solve( !Succ( S(y), c ) ▶₀ #t2.1 )
                    case StepSucc
                    solve( IsSmaller( a, S(S(y)) ) @ #last )
                      case SimpleSmaller
                      by contradiction /* node #t2 after last node #last */
                    next
                      case ZExtendedSmaller
                      by contradiction /* node #t2 after last node #last */
                    qed
                  qed
                next
                  case ZExtendedSmaller
                  solve( !Succ( y.2, c ) ▶₁ #t2.1 )
                    case InitSucc
                    solve( IsSmaller( a, S(myzero) ) @ #last )
                      case SimpleSmaller
                      by contradiction /* node #t2 after last node #last */
                    next
                      case ZExtendedSmaller
                      by contradiction /* node #t2 after last node #last */
                    qed
                  next
                    case StepSucc
                    solve( IsSmaller( a, S(y.2) ) @ #last )
                      case SimpleSmaller
                      by contradiction /* node #t2 after last node #last */
                    next
                      case ZExtendedSmaller
                      by contradiction /* node #t2 after last node #last */
                    qed
                  qed
                qed
              qed
            qed
          qed
        qed
      qed
    qed
  next
    case BuyANewYubikey_case_2
    solve( (∀ pid sid x otp #t2.
             (Login( pid, sid, x, otp ) @ #t2)
            ⇒
             ((last(#t2)) ∨
              (∃ #t1. (YubiPress( pid, x ) @ #t1) ∧ (¬(last(#t1))) ∧ (#t1 < #t2))))  ∥
           (∃ #t1 #t2 a b c.
             (IsSmaller( a, b ) @ #t1) ∧ (IsSmaller( b, c ) @ #t2)
            ∧
             (¬(last(#t2))) ∧
             (¬(last(#t1))) ∧
             (∀ #t3. (IsSmaller( a, c ) @ #t3) ⇒ last(#t3))) )
      case case_1
      solve( (last(#t2))  ∥
             (∃ #t1. (YubiPress( ~pid, x ) @ #t1) ∧ (¬(last(#t1))) ∧ (#t1 < #t2)) )
        case case_1
        solve( !HSM( ~kh, ~k ) ▶₁ #t2 )
          case HSMInit
          solve( !S_sid( ~pid, ~sid ) ▶₄ #t2 )
            case BuyANewYubikey
            solve( !Smaller( otc, x ) ▶₅ #t2 )
              case SimpleSmaller_case_1
              solve( !KU( senc(<~sid, S(myzero), ~pr>, ~k2) ) @ #vk.4 )
                case Yubikey_PressButton
                by contradiction /* from formulas */
              next
                case c_senc
                by contradiction /* from formulas */
              next
                case irecvHSM
                by contradiction /* cyclic */
              qed
            next
              case SimpleSmaller_case_2
              solve( !KU( senc(<~sid, S(otc), ~pr>, ~k2) ) @ #vk.4 )
                case Yubikey_PressButton
                by contradiction /* from formulas */
              next
                case c_senc
                by contradiction /* from formulas */
              next
                case irecvHSM
                by contradiction /* cyclic */
              qed
            next
              case ZExtendedSmaller_case_1
              solve( !KU( senc(<~sid, S(myzero), ~pr>, ~k2) ) @ #vk.4 )
                case Yubikey_PressButton
                by contradiction /* from formulas */
              next
                case c_senc
                by contradiction /* from formulas */
              next
                case irecvHSM
                by contradiction /* cyclic */
              qed
            next
              case ZExtendedSmaller_case_2
              solve( !KU( senc(<~sid, S(y), ~pr>, ~k2) ) @ #vk.4 )
                case Yubikey_PressButton
                by contradiction /* from formulas */
              next
                case c_senc
                by contradiction /* from formulas */
              next
                case irecvHSM
                by contradiction /* cyclic */
              qed
            qed
          qed
        qed
      next
        case case_2
        by contradiction /* from formulas */
      qed
    next
      case case_2
      solve( !HSM( ~kh, ~k ) ▶₁ #t2 )
        case HSMInit
        solve( !S_sid( ~pid, ~sid ) ▶₄ #t2 )
          case BuyANewYubikey
          solve( !Smaller( otc, x ) ▶₅ #t2 )
            case SimpleSmaller_case_1
            solve( IsSmaller( a, b ) @ #t1 )
              case SimpleSmaller
              solve( !Succ( a, b ) ▶₀ #t1 )
                case InitSucc
                solve( IsSmaller( S(myzero), c ) @ #t2.1 )
                  case SimpleSmaller
                  solve( !Succ( S(myzero), c ) ▶₀ #t2.1 )
                    case StepSucc
                    solve( IsSmaller( myzero, S(S(myzero)) ) @ #last )
                      case SimpleSmaller
                      by contradiction /* node #t2 after last node #last */
                    next
                      case ZExtendedSmaller
                      by contradiction /* node #t2 after last node #last */
                    qed
                  qed
                next
                  case ZExtendedSmaller
                  solve( !Succ( y, c ) ▶₁ #t2.1 )
                    case InitSucc
                    by contradiction /* cyclic */
                  next
                    case StepSucc
                    solve( IsSmaller( myzero, S(y) ) @ #last )
                      case SimpleSmaller
                      by contradiction /* node #t2 after last node #last */
                    next
                      case ZExtendedSmaller
                      by contradiction /* node #t2 after last node #last */
                    qed
                  qed
                qed
              next
                case StepSucc
                solve( IsSmaller( S(a), c ) @ #t2.1 )
                  case SimpleSmaller
                  solve( !Succ( S(a), c ) ▶₀ #t2.1 )
                    case StepSucc
                    solve( IsSmaller( a, S(S(a)) ) @ #last )
                      case SimpleSmaller
                      by contradiction /* node #t2 after last node #last */
                    next
                      case ZExtendedSmaller
                      by contradiction /* node #t2 after last node #last */
                    qed
                  qed
                next
                  case ZExtendedSmaller
                  solve( !Succ( y, c ) ▶₁ #t2.1 )
                    case InitSucc
                    solve( IsSmaller( a, S(myzero) ) @ #last )
                      case SimpleSmaller
                      by contradiction /* node #t2 after last node #last */
                    next
                      case ZExtendedSmaller
                      by contradiction /* node #t2 after last node #last */
                    qed
                  next
                    case StepSucc
                    solve( IsSmaller( a, S(y) ) @ #last )
                      case SimpleSmaller
                      by contradiction /* node #t2 after last node #last */
                    next
                      case ZExtendedSmaller
                      by contradiction /* node #t2 after last node #last */
                    qed
                  qed
                qed
              qed
            next
              case ZExtendedSmaller
              solve( !Succ( y, b ) ▶₁ #t1 )
                case InitSucc
                solve( IsSmaller( S(myzero), c ) @ #t2.1 )
                  case SimpleSmaller
                  solve( !Succ( S(myzero), c ) ▶₀ #t2.1 )
                    case StepSucc
                    solve( IsSmaller( a, S(S(myzero)) ) @ #last )
                      case SimpleSmaller
                      by contradiction /* node #t2 after last node #last */
                    next
                      case ZExtendedSmaller
                      by contradiction /* node #t2 after last node #last */
                    qed
                  qed
                next
                  case ZExtendedSmaller
                  solve( !Succ( y, c ) ▶₁ #t2.1 )
                    case InitSucc
                    by contradiction /* cyclic */
                  next
                    case StepSucc
                    solve( IsSmaller( a, S(y) ) @ #last )
                      case SimpleSmaller
                      by contradiction /* node #t2 after last node #last */
                    next
                      case ZExtendedSmaller
                      by contradiction /* node #t2 after last node #last */
                    qed
                  qed
                qed
              next
                case StepSucc
                solve( IsSmaller( S(y), c ) @ #t2.1 )
                  case SimpleSmaller
                  solve( !Succ( S(y), c ) ▶₀ #t2.1 )
                    case StepSucc
                    solve( IsSmaller( a, S(S(y)) ) @ #last )
                      case SimpleSmaller
                      by contradiction /* node #t2 after last node #last */
                    next
                      case ZExtendedSmaller
                      by contradiction /* node #t2 after last node #last */
                    qed
                  qed
                next
                  case ZExtendedSmaller
                  solve( !Succ( y.1, c ) ▶₁ #t2.1 )
                    case InitSucc
                    solve( IsSmaller( a, S(myzero) ) @ #last )
                      case SimpleSmaller
                      by contradiction /* node #t2 after last node #last */
                    next
                      case ZExtendedSmaller
                      by contradiction /* node #t2 after last node #last */
                    qed
                  next
                    case StepSucc
                    solve( IsSmaller( a, S(y.1) ) @ #last )
                      case SimpleSmaller
                      by contradiction /* node #t2 after last node #last */
                    next
                      case ZExtendedSmaller
                      by contradiction /* node #t2 after last node #last */
                    qed
                  qed
                qed
              qed
            qed
          next
            case SimpleSmaller_case_2
            solve( IsSmaller( a, b ) @ #t1 )
              case SimpleSmaller
              solve( !Succ( a, b ) ▶₀ #t1 )
                case InitSucc
                solve( IsSmaller( S(myzero), c ) @ #t2.1 )
                  case SimpleSmaller
                  solve( !Succ( S(myzero), c ) ▶₀ #t2.1 )
                    case StepSucc
                    solve( IsSmaller( myzero, S(S(myzero)) ) @ #last )
                      case SimpleSmaller
                      by contradiction /* node #t2 after last node #last */
                    next
                      case ZExtendedSmaller
                      by contradiction /* node #t2 after last node #last */
                    qed
                  qed
                next
                  case ZExtendedSmaller
                  solve( !Succ( y, c ) ▶₁ #t2.1 )
                    case InitSucc
                    by contradiction /* cyclic */
                  next
                    case StepSucc
                    solve( IsSmaller( myzero, S(y) ) @ #last )
                      case SimpleSmaller
                      by contradiction /* node #t2 after last node #last */
                    next
                      case ZExtendedSmaller
                      by contradiction /* node #t2 after last node #last */
                    qed
                  qed
                qed
              next
                case StepSucc
                solve( IsSmaller( S(a), c ) @ #t2.1 )
                  case SimpleSmaller
                  solve( !Succ( S(a), c ) ▶₀ #t2.1 )
                    case StepSucc
                    solve( IsSmaller( a, S(S(a)) ) @ #last )
                      case SimpleSmaller
                      by contradiction /* node #t2 after last node #last */
                    next
                      case ZExtendedSmaller
                      by contradiction /* node #t2 after last node #last */
                    qed
                  qed
                next
                  case ZExtendedSmaller
                  solve( !Succ( y, c ) ▶₁ #t2.1 )
                    case InitSucc
                    solve( IsSmaller( a, S(myzero) ) @ #last )
                      case SimpleSmaller
                      by contradiction /* node #t2 after last node #last */
                    next
                      case ZExtendedSmaller
                      by contradiction /* node #t2 after last node #last */
                    qed
                  next
                    case StepSucc
                    solve( IsSmaller( a, S(y) ) @ #last )
                      case SimpleSmaller
                      by contradiction /* node #t2 after last node #last */
                    next
                      case ZExtendedSmaller
                      by contradiction /* node #t2 after last node #last */
                    qed
                  qed
                qed
              qed
            next
              case ZExtendedSmaller
              solve( !Succ( y, b ) ▶₁ #t1 )
                case InitSucc
                solve( IsSmaller( S(myzero), c ) @ #t2.1 )
                  case SimpleSmaller
                  solve( !Succ( S(myzero), c ) ▶₀ #t2.1 )
                    case StepSucc
                    solve( IsSmaller( a, S(S(myzero)) ) @ #last )
                      case SimpleSmaller
                      by contradiction /* node #t2 after last node #last */
                    next
                      case ZExtendedSmaller
                      by contradiction /* node #t2 after last node #last */
                    qed
                  qed
                next
                  case ZExtendedSmaller
                  solve( !Succ( y, c ) ▶₁ #t2.1 )
                    case InitSucc
                    by contradiction /* cyclic */
                  next
                    case StepSucc
                    solve( IsSmaller( a, S(y) ) @ #last )
                      case SimpleSmaller
                      by contradiction /* node #t2 after last node #last */
                    next
                      case ZExtendedSmaller
                      by contradiction /* node #t2 after last node #last */
                    qed
                  qed
                qed
              next
                case StepSucc
                solve( IsSmaller( S(y), c ) @ #t2.1 )
                  case SimpleSmaller
                  solve( !Succ( S(y), c ) ▶₀ #t2.1 )
                    case StepSucc
                    solve( IsSmaller( a, S(S(y)) ) @ #last )
                      case SimpleSmaller
                      by contradiction /* node #t2 after last node #last */
                    next
                      case ZExtendedSmaller
                      by contradiction /* node #t2 after last node #last */
                    qed
                  qed
                next
                  case ZExtendedSmaller
                  solve( !Succ( y.1, c ) ▶₁ #t2.1 )
                    case InitSucc
                    solve( IsSmaller( a, S(myzero) ) @ #last )
                      case SimpleSmaller
                      by contradiction /* node #t2 after last node #last */
                    next
                      case ZExtendedSmaller
                      by contradiction /* node #t2 after last node #last */
                    qed
                  next
                    case StepSucc
                    solve( IsSmaller( a, S(y.1) ) @ #last )
                      case SimpleSmaller
                      by contradiction /* node #t2 after last node #last */
                    next
                      case ZExtendedSmaller
                      by contradiction /* node #t2 after last node #last */
                    qed
                  qed
                qed
              qed
            qed
          next
            case ZExtendedSmaller_case_1
            solve( IsSmaller( a, b ) @ #t1 )
              case SimpleSmaller
              solve( !Succ( a, b ) ▶₀ #t1 )
                case InitSucc
                solve( IsSmaller( S(myzero), c ) @ #t2.1 )
                  case SimpleSmaller
                  solve( !Succ( S(myzero), c ) ▶₀ #t2.1 )
                    case StepSucc
                    solve( IsSmaller( myzero, S(S(myzero)) ) @ #last )
                      case SimpleSmaller
                      by contradiction /* node #t2 after last node #last */
                    next
                      case ZExtendedSmaller
                      by contradiction /* node #t2 after last node #last */
                    qed
                  qed
                next
                  case ZExtendedSmaller
                  solve( !Succ( y, c ) ▶₁ #t2.1 )
                    case InitSucc
                    by contradiction /* cyclic */
                  next
                    case StepSucc
                    solve( IsSmaller( myzero, S(y) ) @ #last )
                      case SimpleSmaller
                      by contradiction /* node #t2 after last node #last */
                    next
                      case ZExtendedSmaller
                      by contradiction /* node #t2 after last node #last */
                    qed
                  qed
                qed
              next
                case StepSucc
                solve( IsSmaller( S(a), c ) @ #t2.1 )
                  case SimpleSmaller
                  solve( !Succ( S(a), c ) ▶₀ #t2.1 )
                    case StepSucc
                    solve( IsSmaller( a, S(S(a)) ) @ #last )
                      case SimpleSmaller
                      by contradiction /* node #t2 after last node #last */
                    next
                      case ZExtendedSmaller
                      by contradiction /* node #t2 after last node #last */
                    qed
                  qed
                next
                  case ZExtendedSmaller
                  solve( !Succ( y, c ) ▶₁ #t2.1 )
                    case InitSucc
                    solve( IsSmaller( a, S(myzero) ) @ #last )
                      case SimpleSmaller
                      by contradiction /* node #t2 after last node #last */
                    next
                      case ZExtendedSmaller
                      by contradiction /* node #t2 after last node #last */
                    qed
                  next
                    case StepSucc
                    solve( IsSmaller( a, S(y) ) @ #last )
                      case SimpleSmaller
                      by contradiction /* node #t2 after last node #last */
                    next
                      case ZExtendedSmaller
                      by contradiction /* node #t2 after last node #last */
                    qed
                  qed
                qed
              qed
            next
              case ZExtendedSmaller
              solve( !Succ( y, b ) ▶₁ #t1 )
                case InitSucc
                solve( IsSmaller( S(myzero), c ) @ #t2.1 )
                  case SimpleSmaller
                  solve( !Succ( S(myzero), c ) ▶₀ #t2.1 )
                    case StepSucc
                    solve( IsSmaller( a, S(S(myzero)) ) @ #last )
                      case SimpleSmaller
                      by contradiction /* node #t2 after last node #last */
                    next
                      case ZExtendedSmaller
                      by contradiction /* node #t2 after last node #last */
                    qed
                  qed
                next
                  case ZExtendedSmaller
                  solve( !Succ( y, c ) ▶₁ #t2.1 )
                    case InitSucc
                    by contradiction /* cyclic */
                  next
                    case StepSucc
                    solve( IsSmaller( a, S(y) ) @ #last )
                      case SimpleSmaller
                      by contradiction /* node #t2 after last node #last */
                    next
                      case ZExtendedSmaller
                      by contradiction /* node #t2 after last node #last */
                    qed
                  qed
                qed
              next
                case StepSucc
                solve( IsSmaller( S(y), c ) @ #t2.1 )
                  case SimpleSmaller
                  solve( !Succ( S(y), c ) ▶₀ #t2.1 )
                    case StepSucc
                    solve( IsSmaller( a, S(S(y)) ) @ #last )
                      case SimpleSmaller
                      by contradiction /* node #t2 after last node #last */
                    next
                      case ZExtendedSmaller
                      by contradiction /* node #t2 after last node #last */
                    qed
                  qed
                next
                  case ZExtendedSmaller
                  solve( !Succ( y.1, c ) ▶₁ #t2.1 )
                    case InitSucc
                    solve( IsSmaller( a, S(myzero) ) @ #last )
                      case SimpleSmaller
                      by contradiction /* node #t2 after last node #last */
                    next
                      case ZExtendedSmaller
                      by contradiction /* node #t2 after last node #last */
                    qed
                  next
                    case StepSucc
                    solve( IsSmaller( a, S(y.1) ) @ #last )
                      case SimpleSmaller
                      by contradiction /* node #t2 after last node #last */
                    next
                      case ZExtendedSmaller
                      by contradiction /* node #t2 after last node #last */
                    qed
                  qed
                qed
              qed
            qed
          next
            case ZExtendedSmaller_case_2
            solve( IsSmaller( a, b ) @ #t1 )
              case SimpleSmaller
              solve( !Succ( a, b ) ▶₀ #t1 )
                case InitSucc
                solve( IsSmaller( S(myzero), c ) @ #t2.1 )
                  case SimpleSmaller
                  solve( !Succ( S(myzero), c ) ▶₀ #t2.1 )
                    case StepSucc
                    solve( IsSmaller( myzero, S(S(myzero)) ) @ #last )
                      case SimpleSmaller
                      by contradiction /* node #t2 after last node #last */
                    next
                      case ZExtendedSmaller
                      by contradiction /* node #t2 after last node #last */
                    qed
                  qed
                next
                  case ZExtendedSmaller
                  solve( !Succ( y.1, c ) ▶₁ #t2.1 )
                    case InitSucc
                    by contradiction /* cyclic */
                  next
                    case StepSucc
                    solve( IsSmaller( myzero, S(y.1) ) @ #last )
                      case SimpleSmaller
                      by contradiction /* node #t2 after last node #last */
                    next
                      case ZExtendedSmaller
                      by contradiction /* node #t2 after last node #last */
                    qed
                  qed
                qed
              next
                case StepSucc
                solve( IsSmaller( S(a), c ) @ #t2.1 )
                  case SimpleSmaller
                  solve( !Succ( S(a), c ) ▶₀ #t2.1 )
                    case StepSucc
                    solve( IsSmaller( a, S(S(a)) ) @ #last )
                      case SimpleSmaller
                      by contradiction /* node #t2 after last node #last */
                    next
                      case ZExtendedSmaller
                      by contradiction /* node #t2 after last node #last */
                    qed
                  qed
                next
                  case ZExtendedSmaller
                  solve( !Succ( y.1, c ) ▶₁ #t2.1 )
                    case InitSucc
                    solve( IsSmaller( a, S(myzero) ) @ #last )
                      case SimpleSmaller
                      by contradiction /* node #t2 after last node #last */
                    next
                      case ZExtendedSmaller
                      by contradiction /* node #t2 after last node #last */
                    qed
                  next
                    case StepSucc
                    solve( IsSmaller( a, S(y.1) ) @ #last )
                      case SimpleSmaller
                      by contradiction /* node #t2 after last node #last */
                    next
                      case ZExtendedSmaller
                      by contradiction /* node #t2 after last node #last */
                    qed
                  qed
                qed
              qed
            next
              case ZExtendedSmaller
              solve( !Succ( y, b ) ▶₁ #t1 )
                case InitSucc
                solve( IsSmaller( S(myzero), c ) @ #t2.1 )
                  case SimpleSmaller
                  solve( !Succ( S(myzero), c ) ▶₀ #t2.1 )
                    case StepSucc
                    solve( IsSmaller( a, S(S(myzero)) ) @ #last )
                      case SimpleSmaller
                      by contradiction /* node #t2 after last node #last */
                    next
                      case ZExtendedSmaller
                      by contradiction /* node #t2 after last node #last */
                    qed
                  qed
                next
                  case ZExtendedSmaller
                  solve( !Succ( y.1, c ) ▶₁ #t2.1 )
                    case InitSucc
                    by contradiction /* cyclic */
                  next
                    case StepSucc
                    solve( IsSmaller( a, S(y.1) ) @ #last )
                      case SimpleSmaller
                      by contradiction /* node #t2 after last node #last */
                    next
                      case ZExtendedSmaller
                      by contradiction /* node #t2 after last node #last */
                    qed
                  qed
                qed
              next
                case StepSucc
                solve( IsSmaller( S(y), c ) @ #t2.1 )
                  case SimpleSmaller
                  solve( !Succ( S(y), c ) ▶₀ #t2.1 )
                    case StepSucc
                    solve( IsSmaller( a, S(S(y)) ) @ #last )
                      case SimpleSmaller
                      by contradiction /* node #t2 after last node #last */
                    next
                      case ZExtendedSmaller
                      by contradiction /* node #t2 after last node #last */
                    qed
                  qed
                next
                  case ZExtendedSmaller
                  solve( !Succ( y.2, c ) ▶₁ #t2.1 )
                    case InitSucc
                    solve( IsSmaller( a, S(myzero) ) @ #last )
                      case SimpleSmaller
                      by contradiction /* node #t2 after last node #last */
                    next
                      case ZExtendedSmaller
                      by contradiction /* node #t2 after last node #last */
                    qed
                  next
                    case StepSucc
                    solve( IsSmaller( a, S(y.2) ) @ #last )
                      case SimpleSmaller
                      by contradiction /* node #t2 after last node #last */
                    next
                      case ZExtendedSmaller
                      by contradiction /* node #t2 after last node #last */
                    qed
                  qed
                qed
              qed
            qed
          qed
        qed
      qed
    qed
  next
    case write_AEAD
    solve( !KU( xorc(senc(keystream(kh, pid), k), <k2, sid>) ) @ #vk.6 )
      case c_xorc
      solve( (∀ pid sid x otp #t2.
               (Login( pid, sid, x, otp ) @ #t2)
              ⇒
               ((last(#t2)) ∨
                (∃ #t1. (YubiPress( pid, x ) @ #t1) ∧ (¬(last(#t1))) ∧ (#t1 < #t2))))  ∥
             (∃ #t1 #t2 a b c.
               (IsSmaller( a, b ) @ #t1) ∧ (IsSmaller( b, c ) @ #t2)
              ∧
               (¬(last(#t2))) ∧
               (¬(last(#t1))) ∧
               (∀ #t3. (IsSmaller( a, c ) @ #t3) ⇒ last(#t3))) )
        case case_1
        solve( (last(#t2))  ∥
               (∃ #t1. (YubiPress( pid, x ) @ #t1) ∧ (¬(last(#t1))) ∧ (#t1 < #t2)) )
          case case_1
          solve( !HSM( kh, k ) ▶₁ #t2 )
            case HSMInit
            solve( !S_sid( pid, sid ) ▶₄ #t2 )
              case BuyANewYubikey_case_1
              solve( !Smaller( otc, x ) ▶₅ #t2 )
                case SimpleSmaller_case_1
                solve( !KU( ~sid ) @ #vk.11 )
                  case Yubikey_PressButton_case_1
                  by contradiction /* from formulas */
                next
                  case Yubikey_PressButton_case_2
                  by contradiction /* from formulas */
                next
                  case irecvHSM
                  by contradiction /* cyclic */
                next
                  case read_AEAD_case_1
                  solve( !KU( senc(<~sid, S(myzero), ~pr>, k2) ) @ #vk.7 )
                    case Yubikey_PressButton
                    by contradiction /* from formulas */
                  next
                    case c_senc
                    solve( !KU( ~pr ) @ #vk.16 )
                      case BuyANewYubikey_case_1
                      solve( !KU( mac(<k2, ~sid>, ~k) ) @ #vk.11 )
                        case c_mac
                        by contradiction /* from formulas */
                      next
                        case irecvHSM
                        by contradiction /* cyclic */
                      next
                        case read_AEAD
                        by contradiction /* from formulas */
                      qed
                    next
                      case BuyANewYubikey_case_2
                      solve( !KU( mac(<k2, ~sid>, ~k) ) @ #vk.11 )
                        case c_mac
                        by contradiction /* from formulas */
                      next
                        case irecvHSM
                        by contradiction /* cyclic */
                      next
                        case read_AEAD
                        by contradiction /* from formulas */
                      qed
                    next
                      case HSMInit
                      solve( !KU( mac(<k2, ~sid>, ~k) ) @ #vk.11 )
                        case c_mac
                        by contradiction /* from formulas */
                      next
                        case irecvHSM
                        by contradiction /* cyclic */
                      next
                        case read_AEAD
                        by contradiction /* from formulas */
                      qed
                    next
                      case Yubikey_PressButton_case_01
                      solve( !KU( mac(<k2, ~sid>, ~k) ) @ #vk.11 )
                        case c_mac
                        by contradiction /* from formulas */
                      next
                        case irecvHSM
                        by contradiction /* cyclic */
                      next
                        case read_AEAD
                        by contradiction /* from formulas */
                      qed
                    next
                      case Yubikey_PressButton_case_02
                      solve( !KU( mac(<k2, ~sid>, ~k) ) @ #vk.11 )
                        case c_mac
                        by contradiction /* from formulas */
                      next
                        case irecvHSM
                        by contradiction /* cyclic */
                      next
                        case read_AEAD
                        by contradiction /* from formulas */
                      qed
                    next
                      case Yubikey_PressButton_case_03
                      solve( !KU( mac(<k2, ~sid>, ~k) ) @ #vk.11 )
                        case c_mac
                        by contradiction /* from formulas */
                      next
                        case irecvHSM
                        by contradiction /* cyclic */
                      next
                        case read_AEAD
                        by contradiction /* from formulas */
                      qed
                    next
                      case Yubikey_PressButton_case_04
                      solve( !KU( mac(<k2, ~sid>, ~k) ) @ #vk.11 )
                        case c_mac
                        by contradiction /* from formulas */
                      next
                        case irecvHSM
                        by contradiction /* cyclic */
                      next
                        case read_AEAD
                        by contradiction /* from formulas */
                      qed
                    next
                      case Yubikey_PressButton_case_05
                      solve( !KU( mac(<k2, ~sid>, ~k) ) @ #vk.11 )
                        case c_mac
                        by contradiction /* from formulas */
                      next
                        case irecvHSM
                        by contradiction /* cyclic */
                      next
                        case read_AEAD
                        by contradiction /* from formulas */
                      qed
                    next
                      case Yubikey_PressButton_case_06
                      solve( !KU( mac(<k2, ~sid>, ~k) ) @ #vk.11 )
                        case c_mac
                        by contradiction /* from formulas */
                      next
                        case irecvHSM
                        by contradiction /* cyclic */
                      next
                        case read_AEAD
                        by contradiction /* from formulas */
                      qed
                    next
                      case Yubikey_PressButton_case_07
                      solve( !KU( mac(<k2, ~sid>, ~k) ) @ #vk.11 )
                        case c_mac
                        by contradiction /* from formulas */
                      next
                        case irecvHSM
                        by contradiction /* cyclic */
                      next
                        case read_AEAD
                        by contradiction /* from formulas */
                      qed
                    next
                      case Yubikey_PressButton_case_08
                      solve( !KU( mac(<k2, ~sid>, ~k) ) @ #vk.11 )
                        case c_mac
                        by contradiction /* from formulas */
                      next
                        case irecvHSM
                        by contradiction /* cyclic */
                      next
                        case read_AEAD
                        by contradiction /* from formulas */
                      qed
                    next
                      case Yubikey_PressButton_case_09
                      by contradiction /* from formulas */
                    next
                      case Yubikey_PressButton_case_10
                      by contradiction /* from formulas */
                    next
                      case Yubikey_PressButton_case_11
                      by contradiction /* from formulas */
                    next
                      case Yubikey_PressButton_case_12
                      by contradiction /* from formulas */
                    next
                      case Yubikey_PressButton_case_13
                      by contradiction /* from formulas */
                    next
                      case Yubikey_PressButton_case_14
                      by contradiction /* from formulas */
                    next
                      case Yubikey_PressButton_case_15
                      by contradiction /* from formulas */
                    next
                      case Yubikey_PressButton_case_16
                      by contradiction /* from formulas */
                    next
                      case fresh
                      solve( !KU( mac(<k2, ~sid>, ~k) ) @ #vk.11 )
                        case c_mac
                        by contradiction /* from formulas */
                      next
                        case irecvHSM
                        by contradiction /* cyclic */
                      next
                        case read_AEAD
                        by contradiction /* from formulas */
                      qed
                    next
                      case irecvHSM
                      by contradiction /* cyclic */
                    next
                      case read_AEAD_case_01
                      by contradiction /* from formulas */
                    next
                      case read_AEAD_case_02
                      by contradiction /* from formulas */
                    next
                      case read_AEAD_case_03
                      solve( !KU( mac(<k2, ~sid>, ~k) ) @ #vk.11 )
                        case c_mac
                        by contradiction /* from formulas */
                      next
                        case irecvHSM
                        by contradiction /* cyclic */
                      next
                        case read_AEAD
                        by contradiction /* from formulas */
                      qed
                    next
                      case read_AEAD_case_04
                      solve( !KU( mac(<k2, ~sid>, ~k) ) @ #vk.11 )
                        case c_mac
                        by contradiction /* from formulas */
                      next
                        case irecvHSM
                        by contradiction /* cyclic */
                      next
                        case read_AEAD
                        by contradiction /* from formulas */
                      qed
                    next
                      case read_AEAD_case_05
                      by contradiction /* from formulas */
                    next
                      case read_AEAD_case_06
                      by contradiction /* from formulas */
                    next
                      case read_AEAD_case_07
                      by contradiction /* from formulas */
                    next
                      case read_AEAD_case_08
                      by contradiction /* from formulas */
                    next
                      case read_AEAD_case_09
                      by contradiction /* from formulas */
                    next
                      case read_AEAD_case_10
                      by contradiction /* from formulas */
                    qed
                  next
                    case irecvHSM
                    by contradiction /* cyclic */
                  qed
                next
                  case read_AEAD_case_2
                  by contradiction /* from formulas */
                qed
              next
                case SimpleSmaller_case_2
                solve( !KU( ~sid ) @ #vk.11 )
                  case Yubikey_PressButton_case_1
                  by contradiction /* from formulas */
                next
                  case Yubikey_PressButton_case_2
                  by contradiction /* from formulas */
                next
                  case irecvHSM
                  by contradiction /* cyclic */
                next
                  case read_AEAD_case_1
                  solve( !KU( senc(<~sid, S(otc), ~pr>, k2) ) @ #vk.7 )
                    case Yubikey_PressButton
                    by contradiction /* from formulas */
                  next
                    case c_senc
                    solve( !KU( ~pr ) @ #vk.18 )
                      case BuyANewYubikey_case_1
                      solve( !KU( mac(<k2, ~sid>, ~k) ) @ #vk.11 )
                        case c_mac
                        by contradiction /* from formulas */
                      next
                        case irecvHSM
                        by contradiction /* cyclic */
                      next
                        case read_AEAD
                        by contradiction /* from formulas */
                      qed
                    next
                      case BuyANewYubikey_case_2
                      solve( !KU( mac(<k2, ~sid>, ~k) ) @ #vk.11 )
                        case c_mac
                        by contradiction /* from formulas */
                      next
                        case irecvHSM
                        by contradiction /* cyclic */
                      next
                        case read_AEAD
                        by contradiction /* from formulas */
                      qed
                    next
                      case HSMInit
                      solve( !KU( mac(<k2, ~sid>, ~k) ) @ #vk.11 )
                        case c_mac
                        by contradiction /* from formulas */
                      next
                        case irecvHSM
                        by contradiction /* cyclic */
                      next
                        case read_AEAD
                        by contradiction /* from formulas */
                      qed
                    next
                      case Yubikey_PressButton_case_01
                      solve( !KU( mac(<k2, ~sid>, ~k) ) @ #vk.11 )
                        case c_mac
                        by contradiction /* from formulas */
                      next
                        case irecvHSM
                        by contradiction /* cyclic */
                      next
                        case read_AEAD
                        by contradiction /* from formulas */
                      qed
                    next
                      case Yubikey_PressButton_case_02
                      solve( !KU( mac(<k2, ~sid>, ~k) ) @ #vk.11 )
                        case c_mac
                        by contradiction /* from formulas */
                      next
                        case irecvHSM
                        by contradiction /* cyclic */
                      next
                        case read_AEAD
                        by contradiction /* from formulas */
                      qed
                    next
                      case Yubikey_PressButton_case_03
                      solve( !KU( mac(<k2, ~sid>, ~k) ) @ #vk.11 )
                        case c_mac
                        by contradiction /* from formulas */
                      next
                        case irecvHSM
                        by contradiction /* cyclic */
                      next
                        case read_AEAD
                        by contradiction /* from formulas */
                      qed
                    next
                      case Yubikey_PressButton_case_04
                      solve( !KU( mac(<k2, ~sid>, ~k) ) @ #vk.11 )
                        case c_mac
                        by contradiction /* from formulas */
                      next
                        case irecvHSM
                        by contradiction /* cyclic */
                      next
                        case read_AEAD
                        by contradiction /* from formulas */
                      qed
                    next
                      case Yubikey_PressButton_case_05
                      solve( !KU( mac(<k2, ~sid>, ~k) ) @ #vk.11 )
                        case c_mac
                        by contradiction /* from formulas */
                      next
                        case irecvHSM
                        by contradiction /* cyclic */
                      next
                        case read_AEAD
                        by contradiction /* from formulas */
                      qed
                    next
                      case Yubikey_PressButton_case_06
                      solve( !KU( mac(<k2, ~sid>, ~k) ) @ #vk.11 )
                        case c_mac
                        by contradiction /* from formulas */
                      next
                        case irecvHSM
                        by contradiction /* cyclic */
                      next
                        case read_AEAD
                        by contradiction /* from formulas */
                      qed
                    next
                      case Yubikey_PressButton_case_07
                      solve( !KU( mac(<k2, ~sid>, ~k) ) @ #vk.11 )
                        case c_mac
                        by contradiction /* from formulas */
                      next
                        case irecvHSM
                        by contradiction /* cyclic */
                      next
                        case read_AEAD
                        by contradiction /* from formulas */
                      qed
                    next
                      case Yubikey_PressButton_case_08
                      solve( !KU( mac(<k2, ~sid>, ~k) ) @ #vk.11 )
                        case c_mac
                        by contradiction /* from formulas */
                      next
                        case irecvHSM
                        by contradiction /* cyclic */
                      next
                        case read_AEAD
                        by contradiction /* from formulas */
                      qed
                    next
                      case Yubikey_PressButton_case_09
                      by contradiction /* from formulas */
                    next
                      case Yubikey_PressButton_case_10
                      by contradiction /* from formulas */
                    next
                      case Yubikey_PressButton_case_11
                      by contradiction /* from formulas */
                    next
                      case Yubikey_PressButton_case_12
                      by contradiction /* from formulas */
                    next
                      case Yubikey_PressButton_case_13
                      by contradiction /* from formulas */
                    next
                      case Yubikey_PressButton_case_14
                      by contradiction /* from formulas */
                    next
                      case Yubikey_PressButton_case_15
                      by contradiction /* from formulas */
                    next
                      case Yubikey_PressButton_case_16
                      by contradiction /* from formulas */
                    next
                      case fresh
                      solve( !KU( mac(<k2, ~sid>, ~k) ) @ #vk.11 )
                        case c_mac
                        by contradiction /* from formulas */
                      next
                        case irecvHSM
                        by contradiction /* cyclic */
                      next
                        case read_AEAD
                        by contradiction /* from formulas */
                      qed
                    next
                      case irecvHSM
                      by contradiction /* cyclic */
                    next
                      case read_AEAD_case_01
                      by contradiction /* from formulas */
                    next
                      case read_AEAD_case_02
                      by contradiction /* from formulas */
                    next
                      case read_AEAD_case_03
                      solve( !KU( mac(<k2, ~sid>, ~k) ) @ #vk.11 )
                        case c_mac
                        by contradiction /* from formulas */
                      next
                        case irecvHSM
                        by contradiction /* cyclic */
                      next
                        case read_AEAD
                        by contradiction /* from formulas */
                      qed
                    next
                      case read_AEAD_case_04
                      solve( !KU( mac(<k2, ~sid>, ~k) ) @ #vk.11 )
                        case c_mac
                        by contradiction /* from formulas */
                      next
                        case irecvHSM
                        by contradiction /* cyclic */
                      next
                        case read_AEAD
                        by contradiction /* from formulas */
                      qed
                    next
                      case read_AEAD_case_05
                      by contradiction /* from formulas */
                    next
                      case read_AEAD_case_06
                      by contradiction /* from formulas */
                    next
                      case read_AEAD_case_07
                      by contradiction /* from formulas */
                    next
                      case read_AEAD_case_08
                      by contradiction /* from formulas */
                    next
                      case read_AEAD_case_09
                      by contradiction /* from formulas */
                    next
                      case read_AEAD_case_10
                      by contradiction /* from formulas */
                    qed
                  next
                    case irecvHSM
                    by contradiction /* cyclic */
                  qed
                next
                  case read_AEAD_case_2
                  by contradiction /* from formulas */
                qed
              next
                case ZExtendedSmaller_case_1
                solve( !KU( ~sid ) @ #vk.11 )
                  case Yubikey_PressButton_case_1
                  by contradiction /* from formulas */
                next
                  case Yubikey_PressButton_case_2
                  by contradiction /* from formulas */
                next
                  case irecvHSM
                  by contradiction /* cyclic */
                next
                  case read_AEAD_case_1
                  solve( !KU( senc(<~sid, S(myzero), ~pr>, k2) ) @ #vk.7 )
                    case Yubikey_PressButton
                    by contradiction /* from formulas */
                  next
                    case c_senc
                    solve( !KU( ~pr ) @ #vk.16 )
                      case BuyANewYubikey_case_1
                      solve( !KU( mac(<k2, ~sid>, ~k) ) @ #vk.11 )
                        case c_mac
                        by contradiction /* from formulas */
                      next
                        case irecvHSM
                        by contradiction /* cyclic */
                      next
                        case read_AEAD
                        by contradiction /* from formulas */
                      qed
                    next
                      case BuyANewYubikey_case_2
                      solve( !KU( mac(<k2, ~sid>, ~k) ) @ #vk.11 )
                        case c_mac
                        by contradiction /* from formulas */
                      next
                        case irecvHSM
                        by contradiction /* cyclic */
                      next
                        case read_AEAD
                        by contradiction /* from formulas */
                      qed
                    next
                      case HSMInit
                      solve( !KU( mac(<k2, ~sid>, ~k) ) @ #vk.11 )
                        case c_mac
                        by contradiction /* from formulas */
                      next
                        case irecvHSM
                        by contradiction /* cyclic */
                      next
                        case read_AEAD
                        by contradiction /* from formulas */
                      qed
                    next
                      case Yubikey_PressButton_case_01
                      solve( !KU( mac(<k2, ~sid>, ~k) ) @ #vk.11 )
                        case c_mac
                        by contradiction /* from formulas */
                      next
                        case irecvHSM
                        by contradiction /* cyclic */
                      next
                        case read_AEAD
                        by contradiction /* from formulas */
                      qed
                    next
                      case Yubikey_PressButton_case_02
                      solve( !KU( mac(<k2, ~sid>, ~k) ) @ #vk.11 )
                        case c_mac
                        by contradiction /* from formulas */
                      next
                        case irecvHSM
                        by contradiction /* cyclic */
                      next
                        case read_AEAD
                        by contradiction /* from formulas */
                      qed
                    next
                      case Yubikey_PressButton_case_03
                      solve( !KU( mac(<k2, ~sid>, ~k) ) @ #vk.11 )
                        case c_mac
                        by contradiction /* from formulas */
                      next
                        case irecvHSM
                        by contradiction /* cyclic */
                      next
                        case read_AEAD
                        by contradiction /* from formulas */
                      qed
                    next
                      case Yubikey_PressButton_case_04
                      solve( !KU( mac(<k2, ~sid>, ~k) ) @ #vk.11 )
                        case c_mac
                        by contradiction /* from formulas */
                      next
                        case irecvHSM
                        by contradiction /* cyclic */
                      next
                        case read_AEAD
                        by contradiction /* from formulas */
                      qed
                    next
                      case Yubikey_PressButton_case_05
                      solve( !KU( mac(<k2, ~sid>, ~k) ) @ #vk.11 )
                        case c_mac
                        by contradiction /* from formulas */
                      next
                        case irecvHSM
                        by contradiction /* cyclic */
                      next
                        case read_AEAD
                        by contradiction /* from formulas */
                      qed
                    next
                      case Yubikey_PressButton_case_06
                      solve( !KU( mac(<k2, ~sid>, ~k) ) @ #vk.11 )
                        case c_mac
                        by contradiction /* from formulas */
                      next
                        case irecvHSM
                        by contradiction /* cyclic */
                      next
                        case read_AEAD
                        by contradiction /* from formulas */
                      qed
                    next
                      case Yubikey_PressButton_case_07
                      solve( !KU( mac(<k2, ~sid>, ~k) ) @ #vk.11 )
                        case c_mac
                        by contradiction /* from formulas */
                      next
                        case irecvHSM
                        by contradiction /* cyclic */
                      next
                        case read_AEAD
                        by contradiction /* from formulas */
                      qed
                    next
                      case Yubikey_PressButton_case_08
                      solve( !KU( mac(<k2, ~sid>, ~k) ) @ #vk.11 )
                        case c_mac
                        by contradiction /* from formulas */
                      next
                        case irecvHSM
                        by contradiction /* cyclic */
                      next
                        case read_AEAD
                        by contradiction /* from formulas */
                      qed
                    next
                      case Yubikey_PressButton_case_09
                      by contradiction /* from formulas */
                    next
                      case Yubikey_PressButton_case_10
                      by contradiction /* from formulas */
                    next
                      case Yubikey_PressButton_case_11
                      by contradiction /* from formulas */
                    next
                      case Yubikey_PressButton_case_12
                      by contradiction /* from formulas */
                    next
                      case Yubikey_PressButton_case_13
                      by contradiction /* from formulas */
                    next
                      case Yubikey_PressButton_case_14
                      by contradiction /* from formulas */
                    next
                      case Yubikey_PressButton_case_15
                      by contradiction /* from formulas */
                    next
                      case Yubikey_PressButton_case_16
                      by contradiction /* from formulas */
                    next
                      case fresh
                      solve( !KU( mac(<k2, ~sid>, ~k) ) @ #vk.11 )
                        case c_mac
                        by contradiction /* from formulas */
                      next
                        case irecvHSM
                        by contradiction /* cyclic */
                      next
                        case read_AEAD
                        by contradiction /* from formulas */
                      qed
                    next
                      case irecvHSM
                      by contradiction /* cyclic */
                    next
                      case read_AEAD_case_01
                      by contradiction /* from formulas */
                    next
                      case read_AEAD_case_02
                      by contradiction /* from formulas */
                    next
                      case read_AEAD_case_03
                      solve( !KU( mac(<k2, ~sid>, ~k) ) @ #vk.11 )
                        case c_mac
                        by contradiction /* from formulas */
                      next
                        case irecvHSM
                        by contradiction /* cyclic */
                      next
                        case read_AEAD
                        by contradiction /* from formulas */
                      qed
                    next
                      case read_AEAD_case_04
                      solve( !KU( mac(<k2, ~sid>, ~k) ) @ #vk.11 )
                        case c_mac
                        by contradiction /* from formulas */
                      next
                        case irecvHSM
                        by contradiction /* cyclic */
                      next
                        case read_AEAD
                        by contradiction /* from formulas */
                      qed
                    next
                      case read_AEAD_case_05
                      by contradiction /* from formulas */
                    next
                      case read_AEAD_case_06
                      by contradiction /* from formulas */
                    next
                      case read_AEAD_case_07
                      by contradiction /* from formulas */
                    next
                      case read_AEAD_case_08
                      by contradiction /* from formulas */
                    next
                      case read_AEAD_case_09
                      by contradiction /* from formulas */
                    next
                      case read_AEAD_case_10
                      by contradiction /* from formulas */
                    qed
                  next
                    case irecvHSM
                    by contradiction /* cyclic */
                  qed
                next
                  case read_AEAD_case_2
                  by contradiction /* from formulas */
                qed
              next
                case ZExtendedSmaller_case_2
                solve( !KU( ~sid ) @ #vk.11 )
                  case Yubikey_PressButton_case_1
                  by contradiction /* from formulas */
                next
                  case Yubikey_PressButton_case_2
                  by contradiction /* from formulas */
                next
                  case irecvHSM
                  by contradiction /* cyclic */
                next
                  case read_AEAD_case_1
                  solve( !KU( senc(<~sid, S(y), ~pr>, k2) ) @ #vk.7 )
                    case Yubikey_PressButton
                    by contradiction /* from formulas */
                  next
                    case c_senc
                    solve( !KU( ~pr ) @ #vk.18 )
                      case BuyANewYubikey_case_1
                      solve( !KU( mac(<k2, ~sid>, ~k) ) @ #vk.11 )
                        case c_mac
                        by contradiction /* from formulas */
                      next
                        case irecvHSM
                        by contradiction /* cyclic */
                      next
                        case read_AEAD
                        by contradiction /* from formulas */
                      qed
                    next
                      case BuyANewYubikey_case_2
                      solve( !KU( mac(<k2, ~sid>, ~k) ) @ #vk.11 )
                        case c_mac
                        by contradiction /* from formulas */
                      next
                        case irecvHSM
                        by contradiction /* cyclic */
                      next
                        case read_AEAD
                        by contradiction /* from formulas */
                      qed
                    next
                      case HSMInit
                      solve( !KU( mac(<k2, ~sid>, ~k) ) @ #vk.11 )
                        case c_mac
                        by contradiction /* from formulas */
                      next
                        case irecvHSM
                        by contradiction /* cyclic */
                      next
                        case read_AEAD
                        by contradiction /* from formulas */
                      qed
                    next
                      case Yubikey_PressButton_case_01
                      solve( !KU( mac(<k2, ~sid>, ~k) ) @ #vk.11 )
                        case c_mac
                        by contradiction /* from formulas */
                      next
                        case irecvHSM
                        by contradiction /* cyclic */
                      next
                        case read_AEAD
                        by contradiction /* from formulas */
                      qed
                    next
                      case Yubikey_PressButton_case_02
                      solve( !KU( mac(<k2, ~sid>, ~k) ) @ #vk.11 )
                        case c_mac
                        by contradiction /* from formulas */
                      next
                        case irecvHSM
                        by contradiction /* cyclic */
                      next
                        case read_AEAD
                        by contradiction /* from formulas */
                      qed
                    next
                      case Yubikey_PressButton_case_03
                      solve( !KU( mac(<k2, ~sid>, ~k) ) @ #vk.11 )
                        case c_mac
                        by contradiction /* from formulas */
                      next
                        case irecvHSM
                        by contradiction /* cyclic */
                      next
                        case read_AEAD
                        by contradiction /* from formulas */
                      qed
                    next
                      case Yubikey_PressButton_case_04
                      solve( !KU( mac(<k2, ~sid>, ~k) ) @ #vk.11 )
                        case c_mac
                        by contradiction /* from formulas */
                      next
                        case irecvHSM
                        by contradiction /* cyclic */
                      next
                        case read_AEAD
                        by contradiction /* from formulas */
                      qed
                    next
                      case Yubikey_PressButton_case_05
                      solve( !KU( mac(<k2, ~sid>, ~k) ) @ #vk.11 )
                        case c_mac
                        by contradiction /* from formulas */
                      next
                        case irecvHSM
                        by contradiction /* cyclic */
                      next
                        case read_AEAD
                        by contradiction /* from formulas */
                      qed
                    next
                      case Yubikey_PressButton_case_06
                      solve( !KU( mac(<k2, ~sid>, ~k) ) @ #vk.11 )
                        case c_mac
                        by contradiction /* from formulas */
                      next
                        case irecvHSM
                        by contradiction /* cyclic */
                      next
                        case read_AEAD
                        by contradiction /* from formulas */
                      qed
                    next
                      case Yubikey_PressButton_case_07
                      solve( !KU( mac(<k2, ~sid>, ~k) ) @ #vk.11 )
                        case c_mac
                        by contradiction /* from formulas */
                      next
                        case irecvHSM
                        by contradiction /* cyclic */
                      next
                        case read_AEAD
                        by contradiction /* from formulas */
                      qed
                    next
                      case Yubikey_PressButton_case_08
                      solve( !KU( mac(<k2, ~sid>, ~k) ) @ #vk.11 )
                        case c_mac
                        by contradiction /* from formulas */
                      next
                        case irecvHSM
                        by contradiction /* cyclic */
                      next
                        case read_AEAD
                        by contradiction /* from formulas */
                      qed
                    next
                      case Yubikey_PressButton_case_09
                      by contradiction /* from formulas */
                    next
                      case Yubikey_PressButton_case_10
                      by contradiction /* from formulas */
                    next
                      case Yubikey_PressButton_case_11
                      by contradiction /* from formulas */
                    next
                      case Yubikey_PressButton_case_12
                      by contradiction /* from formulas */
                    next
                      case Yubikey_PressButton_case_13
                      by contradiction /* from formulas */
                    next
                      case Yubikey_PressButton_case_14
                      by contradiction /* from formulas */
                    next
                      case Yubikey_PressButton_case_15
                      by contradiction /* from formulas */
                    next
                      case Yubikey_PressButton_case_16
                      by contradiction /* from formulas */
                    next
                      case fresh
                      solve( !KU( mac(<k2, ~sid>, ~k) ) @ #vk.11 )
                        case c_mac
                        by contradiction /* from formulas */
                      next
                        case irecvHSM
                        by contradiction /* cyclic */
                      next
                        case read_AEAD
                        by contradiction /* from formulas */
                      qed
                    next
                      case irecvHSM
                      by contradiction /* cyclic */
                    next
                      case read_AEAD_case_01
                      by contradiction /* from formulas */
                    next
                      case read_AEAD_case_02
                      by contradiction /* from formulas */
                    next
                      case read_AEAD_case_03
                      solve( !KU( mac(<k2, ~sid>, ~k) ) @ #vk.11 )
                        case c_mac
                        by contradiction /* from formulas */
                      next
                        case irecvHSM
                        by contradiction /* cyclic */
                      next
                        case read_AEAD
                        by contradiction /* from formulas */
                      qed
                    next
                      case read_AEAD_case_04
                      solve( !KU( mac(<k2, ~sid>, ~k) ) @ #vk.11 )
                        case c_mac
                        by contradiction /* from formulas */
                      next
                        case irecvHSM
                        by contradiction /* cyclic */
                      next
                        case read_AEAD
                        by contradiction /* from formulas */
                      qed
                    next
                      case read_AEAD_case_05
                      by contradiction /* from formulas */
                    next
                      case read_AEAD_case_06
                      by contradiction /* from formulas */
                    next
                      case read_AEAD_case_07
                      by contradiction /* from formulas */
                    next
                      case read_AEAD_case_08
                      by contradiction /* from formulas */
                    next
                      case read_AEAD_case_09
                      by contradiction /* from formulas */
                    next
                      case read_AEAD_case_10
                      by contradiction /* from formulas */
                    qed
                  next
                    case irecvHSM
                    by contradiction /* cyclic */
                  qed
                next
                  case read_AEAD_case_2
                  by contradiction /* from formulas */
                qed
              qed
            next
              case BuyANewYubikey_case_2
              solve( !Smaller( otc, x ) ▶₅ #t2 )
                case SimpleSmaller_case_1
                solve( !KU( ~sid ) @ #vk.11 )
                  case Yubikey_PressButton_case_1
                  by contradiction /* from formulas */
                next
                  case Yubikey_PressButton_case_2
                  by contradiction /* from formulas */
                next
                  case irecvHSM
                  by contradiction /* cyclic */
                next
                  case read_AEAD_case_1
                  solve( !KU( senc(<~sid, S(myzero), ~pr>, k2) ) @ #vk.7 )
                    case Yubikey_PressButton
                    by contradiction /* from formulas */
                  next
                    case c_senc
                    solve( !KU( ~pr ) @ #vk.16 )
                      case BuyANewYubikey_case_1
                      solve( !KU( mac(<k2, ~sid>, ~k) ) @ #vk.11 )
                        case c_mac
                        by contradiction /* from formulas */
                      next
                        case irecvHSM
                        by contradiction /* cyclic */
                      next
                        case read_AEAD
                        by contradiction /* from formulas */
                      qed
                    next
                      case BuyANewYubikey_case_2
                      solve( !KU( mac(<k2, ~sid>, ~k) ) @ #vk.11 )
                        case c_mac
                        by contradiction /* from formulas */
                      next
                        case irecvHSM
                        by contradiction /* cyclic */
                      next
                        case read_AEAD
                        by contradiction /* from formulas */
                      qed
                    next
                      case HSMInit
                      solve( !KU( mac(<k2, ~sid>, ~k) ) @ #vk.11 )
                        case c_mac
                        by contradiction /* from formulas */
                      next
                        case irecvHSM
                        by contradiction /* cyclic */
                      next
                        case read_AEAD
                        by contradiction /* from formulas */
                      qed
                    next
                      case Yubikey_PressButton_case_01
                      solve( !KU( mac(<k2, ~sid>, ~k) ) @ #vk.11 )
                        case c_mac
                        by contradiction /* from formulas */
                      next
                        case irecvHSM
                        by contradiction /* cyclic */
                      next
                        case read_AEAD
                        by contradiction /* from formulas */
                      qed
                    next
                      case Yubikey_PressButton_case_02
                      solve( !KU( mac(<k2, ~sid>, ~k) ) @ #vk.11 )
                        case c_mac
                        by contradiction /* from formulas */
                      next
                        case irecvHSM
                        by contradiction /* cyclic */
                      next
                        case read_AEAD
                        by contradiction /* from formulas */
                      qed
                    next
                      case Yubikey_PressButton_case_03
                      solve( !KU( mac(<k2, ~sid>, ~k) ) @ #vk.11 )
                        case c_mac
                        by contradiction /* from formulas */
                      next
                        case irecvHSM
                        by contradiction /* cyclic */
                      next
                        case read_AEAD
                        by contradiction /* from formulas */
                      qed
                    next
                      case Yubikey_PressButton_case_04
                      solve( !KU( mac(<k2, ~sid>, ~k) ) @ #vk.11 )
                        case c_mac
                        by contradiction /* from formulas */
                      next
                        case irecvHSM
                        by contradiction /* cyclic */
                      next
                        case read_AEAD
                        by contradiction /* from formulas */
                      qed
                    next
                      case Yubikey_PressButton_case_05
                      solve( !KU( mac(<k2, ~sid>, ~k) ) @ #vk.11 )
                        case c_mac
                        by contradiction /* from formulas */
                      next
                        case irecvHSM
                        by contradiction /* cyclic */
                      next
                        case read_AEAD
                        by contradiction /* from formulas */
                      qed
                    next
                      case Yubikey_PressButton_case_06
                      solve( !KU( mac(<k2, ~sid>, ~k) ) @ #vk.11 )
                        case c_mac
                        by contradiction /* from formulas */
                      next
                        case irecvHSM
                        by contradiction /* cyclic */
                      next
                        case read_AEAD
                        by contradiction /* from formulas */
                      qed
                    next
                      case Yubikey_PressButton_case_07
                      solve( !KU( mac(<k2, ~sid>, ~k) ) @ #vk.11 )
                        case c_mac
                        by contradiction /* from formulas */
                      next
                        case irecvHSM
                        by contradiction /* cyclic */
                      next
                        case read_AEAD
                        by contradiction /* from formulas */
                      qed
                    next
                      case Yubikey_PressButton_case_08
                      solve( !KU( mac(<k2, ~sid>, ~k) ) @ #vk.11 )
                        case c_mac
                        by contradiction /* from formulas */
                      next
                        case irecvHSM
                        by contradiction /* cyclic */
                      next
                        case read_AEAD
                        by contradiction /* from formulas */
                      qed
                    next
                      case Yubikey_PressButton_case_09
                      by contradiction /* from formulas */
                    next
                      case Yubikey_PressButton_case_10
                      by contradiction /* from formulas */
                    next
                      case Yubikey_PressButton_case_11
                      by contradiction /* from formulas */
                    next
                      case Yubikey_PressButton_case_12
                      by contradiction /* from formulas */
                    next
                      case Yubikey_PressButton_case_13
                      by contradiction /* from formulas */
                    next
                      case Yubikey_PressButton_case_14
                      by contradiction /* from formulas */
                    next
                      case Yubikey_PressButton_case_15
                      by contradiction /* from formulas */
                    next
                      case Yubikey_PressButton_case_16
                      by contradiction /* from formulas */
                    next
                      case fresh
                      solve( !KU( mac(<k2, ~sid>, ~k) ) @ #vk.11 )
                        case c_mac
                        by contradiction /* from formulas */
                      next
                        case irecvHSM
                        by contradiction /* cyclic */
                      next
                        case read_AEAD
                        by contradiction /* from formulas */
                      qed
                    next
                      case irecvHSM
                      by contradiction /* cyclic */
                    next
                      case read_AEAD_case_01
                      by contradiction /* from formulas */
                    next
                      case read_AEAD_case_02
                      by contradiction /* from formulas */
                    next
                      case read_AEAD_case_03
                      solve( !KU( mac(<k2, ~sid>, ~k) ) @ #vk.11 )
                        case c_mac
                        by contradiction /* from formulas */
                      next
                        case irecvHSM
                        by contradiction /* cyclic */
                      next
                        case read_AEAD
                        by contradiction /* from formulas */
                      qed
                    next
                      case read_AEAD_case_04
                      solve( !KU( mac(<k2, ~sid>, ~k) ) @ #vk.11 )
                        case c_mac
                        by contradiction /* from formulas */
                      next
                        case irecvHSM
                        by contradiction /* cyclic */
                      next
                        case read_AEAD
                        by contradiction /* from formulas */
                      qed
                    next
                      case read_AEAD_case_05
                      by contradiction /* from formulas */
                    next
                      case read_AEAD_case_06
                      by contradiction /* from formulas */
                    next
                      case read_AEAD_case_07
                      by contradiction /* from formulas */
                    next
                      case read_AEAD_case_08
                      by contradiction /* from formulas */
                    next
                      case read_AEAD_case_09
                      by contradiction /* from formulas */
                    next
                      case read_AEAD_case_10
                      by contradiction /* from formulas */
                    qed
                  next
                    case irecvHSM
                    by contradiction /* cyclic */
                  qed
                next
                  case read_AEAD_case_2
                  by contradiction /* from formulas */
                qed
              next
                case SimpleSmaller_case_2
                solve( !KU( ~sid ) @ #vk.11 )
                  case Yubikey_PressButton_case_1
                  by contradiction /* from formulas */
                next
                  case Yubikey_PressButton_case_2
                  by contradiction /* from formulas */
                next
                  case irecvHSM
                  by contradiction /* cyclic */
                next
                  case read_AEAD_case_1
                  solve( !KU( senc(<~sid, S(otc), ~pr>, k2) ) @ #vk.7 )
                    case Yubikey_PressButton
                    by contradiction /* from formulas */
                  next
                    case c_senc
                    solve( !KU( ~pr ) @ #vk.18 )
                      case BuyANewYubikey_case_1
                      solve( !KU( mac(<k2, ~sid>, ~k) ) @ #vk.11 )
                        case c_mac
                        by contradiction /* from formulas */
                      next
                        case irecvHSM
                        by contradiction /* cyclic */
                      next
                        case read_AEAD
                        by contradiction /* from formulas */
                      qed
                    next
                      case BuyANewYubikey_case_2
                      solve( !KU( mac(<k2, ~sid>, ~k) ) @ #vk.11 )
                        case c_mac
                        by contradiction /* from formulas */
                      next
                        case irecvHSM
                        by contradiction /* cyclic */
                      next
                        case read_AEAD
                        by contradiction /* from formulas */
                      qed
                    next
                      case HSMInit
                      solve( !KU( mac(<k2, ~sid>, ~k) ) @ #vk.11 )
                        case c_mac
                        by contradiction /* from formulas */
                      next
                        case irecvHSM
                        by contradiction /* cyclic */
                      next
                        case read_AEAD
                        by contradiction /* from formulas */
                      qed
                    next
                      case Yubikey_PressButton_case_01
                      solve( !KU( mac(<k2, ~sid>, ~k) ) @ #vk.11 )
                        case c_mac
                        by contradiction /* from formulas */
                      next
                        case irecvHSM
                        by contradiction /* cyclic */
                      next
                        case read_AEAD
                        by contradiction /* from formulas */
                      qed
                    next
                      case Yubikey_PressButton_case_02
                      solve( !KU( mac(<k2, ~sid>, ~k) ) @ #vk.11 )
                        case c_mac
                        by contradiction /* from formulas */
                      next
                        case irecvHSM
                        by contradiction /* cyclic */
                      next
                        case read_AEAD
                        by contradiction /* from formulas */
                      qed
                    next
                      case Yubikey_PressButton_case_03
                      solve( !KU( mac(<k2, ~sid>, ~k) ) @ #vk.11 )
                        case c_mac
                        by contradiction /* from formulas */
                      next
                        case irecvHSM
                        by contradiction /* cyclic */
                      next
                        case read_AEAD
                        by contradiction /* from formulas */
                      qed
                    next
                      case Yubikey_PressButton_case_04
                      solve( !KU( mac(<k2, ~sid>, ~k) ) @ #vk.11 )
                        case c_mac
                        by contradiction /* from formulas */
                      next
                        case irecvHSM
                        by contradiction /* cyclic */
                      next
                        case read_AEAD
                        by contradiction /* from formulas */
                      qed
                    next
                      case Yubikey_PressButton_case_05
                      solve( !KU( mac(<k2, ~sid>, ~k) ) @ #vk.11 )
                        case c_mac
                        by contradiction /* from formulas */
                      next
                        case irecvHSM
                        by contradiction /* cyclic */
                      next
                        case read_AEAD
                        by contradiction /* from formulas */
                      qed
                    next
                      case Yubikey_PressButton_case_06
                      solve( !KU( mac(<k2, ~sid>, ~k) ) @ #vk.11 )
                        case c_mac
                        by contradiction /* from formulas */
                      next
                        case irecvHSM
                        by contradiction /* cyclic */
                      next
                        case read_AEAD
                        by contradiction /* from formulas */
                      qed
                    next
                      case Yubikey_PressButton_case_07
                      solve( !KU( mac(<k2, ~sid>, ~k) ) @ #vk.11 )
                        case c_mac
                        by contradiction /* from formulas */
                      next
                        case irecvHSM
                        by contradiction /* cyclic */
                      next
                        case read_AEAD
                        by contradiction /* from formulas */
                      qed
                    next
                      case Yubikey_PressButton_case_08
                      solve( !KU( mac(<k2, ~sid>, ~k) ) @ #vk.11 )
                        case c_mac
                        by contradiction /* from formulas */
                      next
                        case irecvHSM
                        by contradiction /* cyclic */
                      next
                        case read_AEAD
                        by contradiction /* from formulas */
                      qed
                    next
                      case Yubikey_PressButton_case_09
                      by contradiction /* from formulas */
                    next
                      case Yubikey_PressButton_case_10
                      by contradiction /* from formulas */
                    next
                      case Yubikey_PressButton_case_11
                      by contradiction /* from formulas */
                    next
                      case Yubikey_PressButton_case_12
                      by contradiction /* from formulas */
                    next
                      case Yubikey_PressButton_case_13
                      by contradiction /* from formulas */
                    next
                      case Yubikey_PressButton_case_14
                      by contradiction /* from formulas */
                    next
                      case Yubikey_PressButton_case_15
                      by contradiction /* from formulas */
                    next
                      case Yubikey_PressButton_case_16
                      by contradiction /* from formulas */
                    next
                      case fresh
                      solve( !KU( mac(<k2, ~sid>, ~k) ) @ #vk.11 )
                        case c_mac
                        by contradiction /* from formulas */
                      next
                        case irecvHSM
                        by contradiction /* cyclic */
                      next
                        case read_AEAD
                        by contradiction /* from formulas */
                      qed
                    next
                      case irecvHSM
                      by contradiction /* cyclic */
                    next
                      case read_AEAD_case_01
                      by contradiction /* from formulas */
                    next
                      case read_AEAD_case_02
                      by contradiction /* from formulas */
                    next
                      case read_AEAD_case_03
                      solve( !KU( mac(<k2, ~sid>, ~k) ) @ #vk.11 )
                        case c_mac
                        by contradiction /* from formulas */
                      next
                        case irecvHSM
                        by contradiction /* cyclic */
                      next
                        case read_AEAD
                        by contradiction /* from formulas */
                      qed
                    next
                      case read_AEAD_case_04
                      solve( !KU( mac(<k2, ~sid>, ~k) ) @ #vk.11 )
                        case c_mac
                        by contradiction /* from formulas */
                      next
                        case irecvHSM
                        by contradiction /* cyclic */
                      next
                        case read_AEAD
                        by contradiction /* from formulas */
                      qed
                    next
                      case read_AEAD_case_05
                      by contradiction /* from formulas */
                    next
                      case read_AEAD_case_06
                      by contradiction /* from formulas */
                    next
                      case read_AEAD_case_07
                      by contradiction /* from formulas */
                    next
                      case read_AEAD_case_08
                      by contradiction /* from formulas */
                    next
                      case read_AEAD_case_09
                      by contradiction /* from formulas */
                    next
                      case read_AEAD_case_10
                      by contradiction /* from formulas */
                    qed
                  next
                    case irecvHSM
                    by contradiction /* cyclic */
                  qed
                next
                  case read_AEAD_case_2
                  by contradiction /* from formulas */
                qed
              next
                case ZExtendedSmaller_case_1
                solve( !KU( ~sid ) @ #vk.11 )
                  case Yubikey_PressButton_case_1
                  by contradiction /* from formulas */
                next
                  case Yubikey_PressButton_case_2
                  by contradiction /* from formulas */
                next
                  case irecvHSM
                  by contradiction /* cyclic */
                next
                  case read_AEAD_case_1
                  solve( !KU( senc(<~sid, S(myzero), ~pr>, k2) ) @ #vk.7 )
                    case Yubikey_PressButton
                    by contradiction /* from formulas */
                  next
                    case c_senc
                    solve( !KU( ~pr ) @ #vk.16 )
                      case BuyANewYubikey_case_1
                      solve( !KU( mac(<k2, ~sid>, ~k) ) @ #vk.11 )
                        case c_mac
                        by contradiction /* from formulas */
                      next
                        case irecvHSM
                        by contradiction /* cyclic */
                      next
                        case read_AEAD
                        by contradiction /* from formulas */
                      qed
                    next
                      case BuyANewYubikey_case_2
                      solve( !KU( mac(<k2, ~sid>, ~k) ) @ #vk.11 )
                        case c_mac
                        by contradiction /* from formulas */
                      next
                        case irecvHSM
                        by contradiction /* cyclic */
                      next
                        case read_AEAD
                        by contradiction /* from formulas */
                      qed
                    next
                      case HSMInit
                      solve( !KU( mac(<k2, ~sid>, ~k) ) @ #vk.11 )
                        case c_mac
                        by contradiction /* from formulas */
                      next
                        case irecvHSM
                        by contradiction /* cyclic */
                      next
                        case read_AEAD
                        by contradiction /* from formulas */
                      qed
                    next
                      case Yubikey_PressButton_case_01
                      solve( !KU( mac(<k2, ~sid>, ~k) ) @ #vk.11 )
                        case c_mac
                        by contradiction /* from formulas */
                      next
                        case irecvHSM
                        by contradiction /* cyclic */
                      next
                        case read_AEAD
                        by contradiction /* from formulas */
                      qed
                    next
                      case Yubikey_PressButton_case_02
                      solve( !KU( mac(<k2, ~sid>, ~k) ) @ #vk.11 )
                        case c_mac
                        by contradiction /* from formulas */
                      next
                        case irecvHSM
                        by contradiction /* cyclic */
                      next
                        case read_AEAD
                        by contradiction /* from formulas */
                      qed
                    next
                      case Yubikey_PressButton_case_03
                      solve( !KU( mac(<k2, ~sid>, ~k) ) @ #vk.11 )
                        case c_mac
                        by contradiction /* from formulas */
                      next
                        case irecvHSM
                        by contradiction /* cyclic */
                      next
                        case read_AEAD
                        by contradiction /* from formulas */
                      qed
                    next
                      case Yubikey_PressButton_case_04
                      solve( !KU( mac(<k2, ~sid>, ~k) ) @ #vk.11 )
                        case c_mac
                        by contradiction /* from formulas */
                      next
                        case irecvHSM
                        by contradiction /* cyclic */
                      next
                        case read_AEAD
                        by contradiction /* from formulas */
                      qed
                    next
                      case Yubikey_PressButton_case_05
                      solve( !KU( mac(<k2, ~sid>, ~k) ) @ #vk.11 )
                        case c_mac
                        by contradiction /* from formulas */
                      next
                        case irecvHSM
                        by contradiction /* cyclic */
                      next
                        case read_AEAD
                        by contradiction /* from formulas */
                      qed
                    next
                      case Yubikey_PressButton_case_06
                      solve( !KU( mac(<k2, ~sid>, ~k) ) @ #vk.11 )
                        case c_mac
                        by contradiction /* from formulas */
                      next
                        case irecvHSM
                        by contradiction /* cyclic */
                      next
                        case read_AEAD
                        by contradiction /* from formulas */
                      qed
                    next
                      case Yubikey_PressButton_case_07
                      solve( !KU( mac(<k2, ~sid>, ~k) ) @ #vk.11 )
                        case c_mac
                        by contradiction /* from formulas */
                      next
                        case irecvHSM
                        by contradiction /* cyclic */
                      next
                        case read_AEAD
                        by contradiction /* from formulas */
                      qed
                    next
                      case Yubikey_PressButton_case_08
                      solve( !KU( mac(<k2, ~sid>, ~k) ) @ #vk.11 )
                        case c_mac
                        by contradiction /* from formulas */
                      next
                        case irecvHSM
                        by contradiction /* cyclic */
                      next
                        case read_AEAD
                        by contradiction /* from formulas */
                      qed
                    next
                      case Yubikey_PressButton_case_09
                      by contradiction /* from formulas */
                    next
                      case Yubikey_PressButton_case_10
                      by contradiction /* from formulas */
                    next
                      case Yubikey_PressButton_case_11
                      by contradiction /* from formulas */
                    next
                      case Yubikey_PressButton_case_12
                      by contradiction /* from formulas */
                    next
                      case Yubikey_PressButton_case_13
                      by contradiction /* from formulas */
                    next
                      case Yubikey_PressButton_case_14
                      by contradiction /* from formulas */
                    next
                      case Yubikey_PressButton_case_15
                      by contradiction /* from formulas */
                    next
                      case Yubikey_PressButton_case_16
                      by contradiction /* from formulas */
                    next
                      case fresh
                      solve( !KU( mac(<k2, ~sid>, ~k) ) @ #vk.11 )
                        case c_mac
                        by contradiction /* from formulas */
                      next
                        case irecvHSM
                        by contradiction /* cyclic */
                      next
                        case read_AEAD
                        by contradiction /* from formulas */
                      qed
                    next
                      case irecvHSM
                      by contradiction /* cyclic */
                    next
                      case read_AEAD_case_01
                      by contradiction /* from formulas */
                    next
                      case read_AEAD_case_02
                      by contradiction /* from formulas */
                    next
                      case read_AEAD_case_03
                      solve( !KU( mac(<k2, ~sid>, ~k) ) @ #vk.11 )
                        case c_mac
                        by contradiction /* from formulas */
                      next
                        case irecvHSM
                        by contradiction /* cyclic */
                      next
                        case read_AEAD
                        by contradiction /* from formulas */
                      qed
                    next
                      case read_AEAD_case_04
                      solve( !KU( mac(<k2, ~sid>, ~k) ) @ #vk.11 )
                        case c_mac
                        by contradiction /* from formulas */
                      next
                        case irecvHSM
                        by contradiction /* cyclic */
                      next
                        case read_AEAD
                        by contradiction /* from formulas */
                      qed
                    next
                      case read_AEAD_case_05
                      by contradiction /* from formulas */
                    next
                      case read_AEAD_case_06
                      by contradiction /* from formulas */
                    next
                      case read_AEAD_case_07
                      by contradiction /* from formulas */
                    next
                      case read_AEAD_case_08
                      by contradiction /* from formulas */
                    next
                      case read_AEAD_case_09
                      by contradiction /* from formulas */
                    next
                      case read_AEAD_case_10
                      by contradiction /* from formulas */
                    qed
                  next
                    case irecvHSM
                    by contradiction /* cyclic */
                  qed
                next
                  case read_AEAD_case_2
                  by contradiction /* from formulas */
                qed
              next
                case ZExtendedSmaller_case_2
                solve( !KU( ~sid ) @ #vk.11 )
                  case Yubikey_PressButton_case_1
                  by contradiction /* from formulas */
                next
                  case Yubikey_PressButton_case_2
                  by contradiction /* from formulas */
                next
                  case irecvHSM
                  by contradiction /* cyclic */
                next
                  case read_AEAD_case_1
                  solve( !KU( senc(<~sid, S(y), ~pr>, k2) ) @ #vk.7 )
                    case Yubikey_PressButton
                    by contradiction /* from formulas */
                  next
                    case c_senc
                    solve( !KU( ~pr ) @ #vk.18 )
                      case BuyANewYubikey_case_1
                      solve( !KU( mac(<k2, ~sid>, ~k) ) @ #vk.11 )
                        case c_mac
                        by contradiction /* from formulas */
                      next
                        case irecvHSM
                        by contradiction /* cyclic */
                      next
                        case read_AEAD
                        by contradiction /* from formulas */
                      qed
                    next
                      case BuyANewYubikey_case_2
                      solve( !KU( mac(<k2, ~sid>, ~k) ) @ #vk.11 )
                        case c_mac
                        by contradiction /* from formulas */
                      next
                        case irecvHSM
                        by contradiction /* cyclic */
                      next
                        case read_AEAD
                        by contradiction /* from formulas */
                      qed
                    next
                      case HSMInit
                      solve( !KU( mac(<k2, ~sid>, ~k) ) @ #vk.11 )
                        case c_mac
                        by contradiction /* from formulas */
                      next
                        case irecvHSM
                        by contradiction /* cyclic */
                      next
                        case read_AEAD
                        by contradiction /* from formulas */
                      qed
                    next
                      case Yubikey_PressButton_case_01
                      solve( !KU( mac(<k2, ~sid>, ~k) ) @ #vk.11 )
                        case c_mac
                        by contradiction /* from formulas */
                      next
                        case irecvHSM
                        by contradiction /* cyclic */
                      next
                        case read_AEAD
                        by contradiction /* from formulas */
                      qed
                    next
                      case Yubikey_PressButton_case_02
                      solve( !KU( mac(<k2, ~sid>, ~k) ) @ #vk.11 )
                        case c_mac
                        by contradiction /* from formulas */
                      next
                        case irecvHSM
                        by contradiction /* cyclic */
                      next
                        case read_AEAD
                        by contradiction /* from formulas */
                      qed
                    next
                      case Yubikey_PressButton_case_03
                      solve( !KU( mac(<k2, ~sid>, ~k) ) @ #vk.11 )
                        case c_mac
                        by contradiction /* from formulas */
                      next
                        case irecvHSM
                        by contradiction /* cyclic */
                      next
                        case read_AEAD
                        by contradiction /* from formulas */
                      qed
                    next
                      case Yubikey_PressButton_case_04
                      solve( !KU( mac(<k2, ~sid>, ~k) ) @ #vk.11 )
                        case c_mac
                        by contradiction /* from formulas */
                      next
                        case irecvHSM
                        by contradiction /* cyclic */
                      next
                        case read_AEAD
                        by contradiction /* from formulas */
                      qed
                    next
                      case Yubikey_PressButton_case_05
                      solve( !KU( mac(<k2, ~sid>, ~k) ) @ #vk.11 )
                        case c_mac
                        by contradiction /* from formulas */
                      next
                        case irecvHSM
                        by contradiction /* cyclic */
                      next
                        case read_AEAD
                        by contradiction /* from formulas */
                      qed
                    next
                      case Yubikey_PressButton_case_06
                      solve( !KU( mac(<k2, ~sid>, ~k) ) @ #vk.11 )
                        case c_mac
                        by contradiction /* from formulas */
                      next
                        case irecvHSM
                        by contradiction /* cyclic */
                      next
                        case read_AEAD
                        by contradiction /* from formulas */
                      qed
                    next
                      case Yubikey_PressButton_case_07
                      solve( !KU( mac(<k2, ~sid>, ~k) ) @ #vk.11 )
                        case c_mac
                        by contradiction /* from formulas */
                      next
                        case irecvHSM
                        by contradiction /* cyclic */
                      next
                        case read_AEAD
                        by contradiction /* from formulas */
                      qed
                    next
                      case Yubikey_PressButton_case_08
                      solve( !KU( mac(<k2, ~sid>, ~k) ) @ #vk.11 )
                        case c_mac
                        by contradiction /* from formulas */
                      next
                        case irecvHSM
                        by contradiction /* cyclic */
                      next
                        case read_AEAD
                        by contradiction /* from formulas */
                      qed
                    next
                      case Yubikey_PressButton_case_09
                      by contradiction /* from formulas */
                    next
                      case Yubikey_PressButton_case_10
                      by contradiction /* from formulas */
                    next
                      case Yubikey_PressButton_case_11
                      by contradiction /* from formulas */
                    next
                      case Yubikey_PressButton_case_12
                      by contradiction /* from formulas */
                    next
                      case Yubikey_PressButton_case_13
                      by contradiction /* from formulas */
                    next
                      case Yubikey_PressButton_case_14
                      by contradiction /* from formulas */
                    next
                      case Yubikey_PressButton_case_15
                      by contradiction /* from formulas */
                    next
                      case Yubikey_PressButton_case_16
                      by contradiction /* from formulas */
                    next
                      case fresh
                      solve( !KU( mac(<k2, ~sid>, ~k) ) @ #vk.11 )
                        case c_mac
                        by contradiction /* from formulas */
                      next
                        case irecvHSM
                        by contradiction /* cyclic */
                      next
                        case read_AEAD
                        by contradiction /* from formulas */
                      qed
                    next
                      case irecvHSM
                      by contradiction /* cyclic */
                    next
                      case read_AEAD_case_01
                      by contradiction /* from formulas */
                    next
                      case read_AEAD_case_02
                      by contradiction /* from formulas */
                    next
                      case read_AEAD_case_03
                      solve( !KU( mac(<k2, ~sid>, ~k) ) @ #vk.11 )
                        case c_mac
                        by contradiction /* from formulas */
                      next
                        case irecvHSM
                        by contradiction /* cyclic */
                      next
                        case read_AEAD
                        by contradiction /* from formulas */
                      qed
                    next
                      case read_AEAD_case_04
                      solve( !KU( mac(<k2, ~sid>, ~k) ) @ #vk.11 )
                        case c_mac
                        by contradiction /* from formulas */
                      next
                        case irecvHSM
                        by contradiction /* cyclic */
                      next
                        case read_AEAD
                        by contradiction /* from formulas */
                      qed
                    next
                      case read_AEAD_case_05
                      by contradiction /* from formulas */
                    next
                      case read_AEAD_case_06
                      by contradiction /* from formulas */
                    next
                      case read_AEAD_case_07
                      by contradiction /* from formulas */
                    next
                      case read_AEAD_case_08
                      by contradiction /* from formulas */
                    next
                      case read_AEAD_case_09
                      by contradiction /* from formulas */
                    next
                      case read_AEAD_case_10
                      by contradiction /* from formulas */
                    qed
                  next
                    case irecvHSM
                    by contradiction /* cyclic */
                  qed
                next
                  case read_AEAD_case_2
                  by contradiction /* from formulas */
                qed
              qed
            qed
          qed
        next
          case case_2
          by contradiction /* from formulas */
        qed
      next
        case case_2
        solve( !HSM( kh, k ) ▶₁ #t2 )
          case HSMInit
          solve( !S_sid( pid, sid ) ▶₄ #t2 )
            case BuyANewYubikey_case_1
            solve( !Smaller( otc, x ) ▶₅ #t2 )
              case SimpleSmaller_case_1
              solve( IsSmaller( a, b ) @ #t1 )
                case SimpleSmaller
                solve( !Succ( a, b ) ▶₀ #t1 )
                  case InitSucc
                  solve( IsSmaller( S(myzero), c ) @ #t2.1 )
                    case SimpleSmaller
                    solve( !Succ( S(myzero), c ) ▶₀ #t2.1 )
                      case StepSucc
                      solve( IsSmaller( myzero, S(S(myzero)) ) @ #last )
                        case SimpleSmaller
                        by contradiction /* node #t2 after last node #last */
                      next
                        case ZExtendedSmaller
                        by contradiction /* node #t2 after last node #last */
                      qed
                    qed
                  next
                    case ZExtendedSmaller
                    solve( !Succ( y, c ) ▶₁ #t2.1 )
                      case InitSucc
                      by contradiction /* cyclic */
                    next
                      case StepSucc
                      solve( IsSmaller( myzero, S(y) ) @ #last )
                        case SimpleSmaller
                        by contradiction /* node #t2 after last node #last */
                      next
                        case ZExtendedSmaller
                        by contradiction /* node #t2 after last node #last */
                      qed
                    qed
                  qed
                next
                  case StepSucc
                  solve( IsSmaller( S(a), c ) @ #t2.1 )
                    case SimpleSmaller
                    solve( !Succ( S(a), c ) ▶₀ #t2.1 )
                      case StepSucc
                      solve( IsSmaller( a, S(S(a)) ) @ #last )
                        case SimpleSmaller
                        by contradiction /* node #t2 after last node #last */
                      next
                        case ZExtendedSmaller
                        by contradiction /* node #t2 after last node #last */
                      qed
                    qed
                  next
                    case ZExtendedSmaller
                    solve( !Succ( y, c ) ▶₁ #t2.1 )
                      case InitSucc
                      solve( IsSmaller( a, S(myzero) ) @ #last )
                        case SimpleSmaller
                        by contradiction /* node #t2 after last node #last */
                      next
                        case ZExtendedSmaller
                        by contradiction /* node #t2 after last node #last */
                      qed
                    next
                      case StepSucc
                      solve( IsSmaller( a, S(y) ) @ #last )
                        case SimpleSmaller
                        by contradiction /* node #t2 after last node #last */
                      next
                        case ZExtendedSmaller
                        by contradiction /* node #t2 after last node #last */
                      qed
                    qed
                  qed
                qed
              next
                case ZExtendedSmaller
                solve( !Succ( y, b ) ▶₁ #t1 )
                  case InitSucc
                  solve( IsSmaller( S(myzero), c ) @ #t2.1 )
                    case SimpleSmaller
                    solve( !Succ( S(myzero), c ) ▶₀ #t2.1 )
                      case StepSucc
                      solve( IsSmaller( a, S(S(myzero)) ) @ #last )
                        case SimpleSmaller
                        by contradiction /* node #t2 after last node #last */
                      next
                        case ZExtendedSmaller
                        by contradiction /* node #t2 after last node #last */
                      qed
                    qed
                  next
                    case ZExtendedSmaller
                    solve( !Succ( y, c ) ▶₁ #t2.1 )
                      case InitSucc
                      by contradiction /* cyclic */
                    next
                      case StepSucc
                      solve( IsSmaller( a, S(y) ) @ #last )
                        case SimpleSmaller
                        by contradiction /* node #t2 after last node #last */
                      next
                        case ZExtendedSmaller
                        by contradiction /* node #t2 after last node #last */
                      qed
                    qed
                  qed
                next
                  case StepSucc
                  solve( IsSmaller( S(y), c ) @ #t2.1 )
                    case SimpleSmaller
                    solve( !Succ( S(y), c ) ▶₀ #t2.1 )
                      case StepSucc
                      solve( IsSmaller( a, S(S(y)) ) @ #last )
                        case SimpleSmaller
                        by contradiction /* node #t2 after last node #last */
                      next
                        case ZExtendedSmaller
                        by contradiction /* node #t2 after last node #last */
                      qed
                    qed
                  next
                    case ZExtendedSmaller
                    solve( !Succ( y.1, c ) ▶₁ #t2.1 )
                      case InitSucc
                      solve( IsSmaller( a, S(myzero) ) @ #last )
                        case SimpleSmaller
                        by contradiction /* node #t2 after last node #last */
                      next
                        case ZExtendedSmaller
                        by contradiction /* node #t2 after last node #last */
                      qed
                    next
                      case StepSucc
                      solve( IsSmaller( a, S(y.1) ) @ #last )
                        case SimpleSmaller
                        by contradiction /* node #t2 after last node #last */
                      next
                        case ZExtendedSmaller
                        by contradiction /* node #t2 after last node #last */
                      qed
                    qed
                  qed
                qed
              qed
            next
              case SimpleSmaller_case_2
              solve( IsSmaller( a, b ) @ #t1 )
                case SimpleSmaller
                solve( !Succ( a, b ) ▶₀ #t1 )
                  case InitSucc
                  solve( IsSmaller( S(myzero), c ) @ #t2.1 )
                    case SimpleSmaller
                    solve( !Succ( S(myzero), c ) ▶₀ #t2.1 )
                      case StepSucc
                      solve( IsSmaller( myzero, S(S(myzero)) ) @ #last )
                        case SimpleSmaller
                        by contradiction /* node #t2 after last node #last */
                      next
                        case ZExtendedSmaller
                        by contradiction /* node #t2 after last node #last */
                      qed
                    qed
                  next
                    case ZExtendedSmaller
                    solve( !Succ( y, c ) ▶₁ #t2.1 )
                      case InitSucc
                      by contradiction /* cyclic */
                    next
                      case StepSucc
                      solve( IsSmaller( myzero, S(y) ) @ #last )
                        case SimpleSmaller
                        by contradiction /* node #t2 after last node #last */
                      next
                        case ZExtendedSmaller
                        by contradiction /* node #t2 after last node #last */
                      qed
                    qed
                  qed
                next
                  case StepSucc
                  solve( IsSmaller( S(a), c ) @ #t2.1 )
                    case SimpleSmaller
                    solve( !Succ( S(a), c ) ▶₀ #t2.1 )
                      case StepSucc
                      solve( IsSmaller( a, S(S(a)) ) @ #last )
                        case SimpleSmaller
                        by contradiction /* node #t2 after last node #last */
                      next
                        case ZExtendedSmaller
                        by contradiction /* node #t2 after last node #last */
                      qed
                    qed
                  next
                    case ZExtendedSmaller
                    solve( !Succ( y, c ) ▶₁ #t2.1 )
                      case InitSucc
                      solve( IsSmaller( a, S(myzero) ) @ #last )
                        case SimpleSmaller
                        by contradiction /* node #t2 after last node #last */
                      next
                        case ZExtendedSmaller
                        by contradiction /* node #t2 after last node #last */
                      qed
                    next
                      case StepSucc
                      solve( IsSmaller( a, S(y) ) @ #last )
                        case SimpleSmaller
                        by contradiction /* node #t2 after last node #last */
                      next
                        case ZExtendedSmaller
                        by contradiction /* node #t2 after last node #last */
                      qed
                    qed
                  qed
                qed
              next
                case ZExtendedSmaller
                solve( !Succ( y, b ) ▶₁ #t1 )
                  case InitSucc
                  solve( IsSmaller( S(myzero), c ) @ #t2.1 )
                    case SimpleSmaller
                    solve( !Succ( S(myzero), c ) ▶₀ #t2.1 )
                      case StepSucc
                      solve( IsSmaller( a, S(S(myzero)) ) @ #last )
                        case SimpleSmaller
                        by contradiction /* node #t2 after last node #last */
                      next
                        case ZExtendedSmaller
                        by contradiction /* node #t2 after last node #last */
                      qed
                    qed
                  next
                    case ZExtendedSmaller
                    solve( !Succ( y, c ) ▶₁ #t2.1 )
                      case InitSucc
                      by contradiction /* cyclic */
                    next
                      case StepSucc
                      solve( IsSmaller( a, S(y) ) @ #last )
                        case SimpleSmaller
                        by contradiction /* node #t2 after last node #last */
                      next
                        case ZExtendedSmaller
                        by contradiction /* node #t2 after last node #last */
                      qed
                    qed
                  qed
                next
                  case StepSucc
                  solve( IsSmaller( S(y), c ) @ #t2.1 )
                    case SimpleSmaller
                    solve( !Succ( S(y), c ) ▶₀ #t2.1 )
                      case StepSucc
                      solve( IsSmaller( a, S(S(y)) ) @ #last )
                        case SimpleSmaller
                        by contradiction /* node #t2 after last node #last */
                      next
                        case ZExtendedSmaller
                        by contradiction /* node #t2 after last node #last */
                      qed
                    qed
                  next
                    case ZExtendedSmaller
                    solve( !Succ( y.1, c ) ▶₁ #t2.1 )
                      case InitSucc
                      solve( IsSmaller( a, S(myzero) ) @ #last )
                        case SimpleSmaller
                        by contradiction /* node #t2 after last node #last */
                      next
                        case ZExtendedSmaller
                        by contradiction /* node #t2 after last node #last */
                      qed
                    next
                      case StepSucc
                      solve( IsSmaller( a, S(y.1) ) @ #last )
                        case SimpleSmaller
                        by contradiction /* node #t2 after last node #last */
                      next
                        case ZExtendedSmaller
                        by contradiction /* node #t2 after last node #last */
                      qed
                    qed
                  qed
                qed
              qed
            next
              case ZExtendedSmaller_case_1
              solve( IsSmaller( a, b ) @ #t1 )
                case SimpleSmaller
                solve( !Succ( a, b ) ▶₀ #t1 )
                  case InitSucc
                  solve( IsSmaller( S(myzero), c ) @ #t2.1 )
                    case SimpleSmaller
                    solve( !Succ( S(myzero), c ) ▶₀ #t2.1 )
                      case StepSucc
                      solve( IsSmaller( myzero, S(S(myzero)) ) @ #last )
                        case SimpleSmaller
                        by contradiction /* node #t2 after last node #last */
                      next
                        case ZExtendedSmaller
                        by contradiction /* node #t2 after last node #last */
                      qed
                    qed
                  next
                    case ZExtendedSmaller
                    solve( !Succ( y, c ) ▶₁ #t2.1 )
                      case InitSucc
                      by contradiction /* cyclic */
                    next
                      case StepSucc
                      solve( IsSmaller( myzero, S(y) ) @ #last )
                        case SimpleSmaller
                        by contradiction /* node #t2 after last node #last */
                      next
                        case ZExtendedSmaller
                        by contradiction /* node #t2 after last node #last */
                      qed
                    qed
                  qed
                next
                  case StepSucc
                  solve( IsSmaller( S(a), c ) @ #t2.1 )
                    case SimpleSmaller
                    solve( !Succ( S(a), c ) ▶₀ #t2.1 )
                      case StepSucc
                      solve( IsSmaller( a, S(S(a)) ) @ #last )
                        case SimpleSmaller
                        by contradiction /* node #t2 after last node #last */
                      next
                        case ZExtendedSmaller
                        by contradiction /* node #t2 after last node #last */
                      qed
                    qed
                  next
                    case ZExtendedSmaller
                    solve( !Succ( y, c ) ▶₁ #t2.1 )
                      case InitSucc
                      solve( IsSmaller( a, S(myzero) ) @ #last )
                        case SimpleSmaller
                        by contradiction /* node #t2 after last node #last */
                      next
                        case ZExtendedSmaller
                        by contradiction /* node #t2 after last node #last */
                      qed
                    next
                      case StepSucc
                      solve( IsSmaller( a, S(y) ) @ #last )
                        case SimpleSmaller
                        by contradiction /* node #t2 after last node #last */
                      next
                        case ZExtendedSmaller
                        by contradiction /* node #t2 after last node #last */
                      qed
                    qed
                  qed
                qed
              next
                case ZExtendedSmaller
                solve( !Succ( y, b ) ▶₁ #t1 )
                  case InitSucc
                  solve( IsSmaller( S(myzero), c ) @ #t2.1 )
                    case SimpleSmaller
                    solve( !Succ( S(myzero), c ) ▶₀ #t2.1 )
                      case StepSucc
                      solve( IsSmaller( a, S(S(myzero)) ) @ #last )
                        case SimpleSmaller
                        by contradiction /* node #t2 after last node #last */
                      next
                        case ZExtendedSmaller
                        by contradiction /* node #t2 after last node #last */
                      qed
                    qed
                  next
                    case ZExtendedSmaller
                    solve( !Succ( y, c ) ▶₁ #t2.1 )
                      case InitSucc
                      by contradiction /* cyclic */
                    next
                      case StepSucc
                      solve( IsSmaller( a, S(y) ) @ #last )
                        case SimpleSmaller
                        by contradiction /* node #t2 after last node #last */
                      next
                        case ZExtendedSmaller
                        by contradiction /* node #t2 after last node #last */
                      qed
                    qed
                  qed
                next
                  case StepSucc
                  solve( IsSmaller( S(y), c ) @ #t2.1 )
                    case SimpleSmaller
                    solve( !Succ( S(y), c ) ▶₀ #t2.1 )
                      case StepSucc
                      solve( IsSmaller( a, S(S(y)) ) @ #last )
                        case SimpleSmaller
                        by contradiction /* node #t2 after last node #last */
                      next
                        case ZExtendedSmaller
                        by contradiction /* node #t2 after last node #last */
                      qed
                    qed
                  next
                    case ZExtendedSmaller
                    solve( !Succ( y.1, c ) ▶₁ #t2.1 )
                      case InitSucc
                      solve( IsSmaller( a, S(myzero) ) @ #last )
                        case SimpleSmaller
                        by contradiction /* node #t2 after last node #last */
                      next
                        case ZExtendedSmaller
                        by contradiction /* node #t2 after last node #last */
                      qed
                    next
                      case StepSucc
                      solve( IsSmaller( a, S(y.1) ) @ #last )
                        case SimpleSmaller
                        by contradiction /* node #t2 after last node #last */
                      next
                        case ZExtendedSmaller
                        by contradiction /* node #t2 after last node #last */
                      qed
                    qed
                  qed
                qed
              qed
            next
              case ZExtendedSmaller_case_2
              solve( IsSmaller( a, b ) @ #t1 )
                case SimpleSmaller
                solve( !Succ( a, b ) ▶₀ #t1 )
                  case InitSucc
                  solve( IsSmaller( S(myzero), c ) @ #t2.1 )
                    case SimpleSmaller
                    solve( !Succ( S(myzero), c ) ▶₀ #t2.1 )
                      case StepSucc
                      solve( IsSmaller( myzero, S(S(myzero)) ) @ #last )
                        case SimpleSmaller
                        by contradiction /* node #t2 after last node #last */
                      next
                        case ZExtendedSmaller
                        by contradiction /* node #t2 after last node #last */
                      qed
                    qed
                  next
                    case ZExtendedSmaller
                    solve( !Succ( y.1, c ) ▶₁ #t2.1 )
                      case InitSucc
                      by contradiction /* cyclic */
                    next
                      case StepSucc
                      solve( IsSmaller( myzero, S(y.1) ) @ #last )
                        case SimpleSmaller
                        by contradiction /* node #t2 after last node #last */
                      next
                        case ZExtendedSmaller
                        by contradiction /* node #t2 after last node #last */
                      qed
                    qed
                  qed
                next
                  case StepSucc
                  solve( IsSmaller( S(a), c ) @ #t2.1 )
                    case SimpleSmaller
                    solve( !Succ( S(a), c ) ▶₀ #t2.1 )
                      case StepSucc
                      solve( IsSmaller( a, S(S(a)) ) @ #last )
                        case SimpleSmaller
                        by contradiction /* node #t2 after last node #last */
                      next
                        case ZExtendedSmaller
                        by contradiction /* node #t2 after last node #last */
                      qed
                    qed
                  next
                    case ZExtendedSmaller
                    solve( !Succ( y.1, c ) ▶₁ #t2.1 )
                      case InitSucc
                      solve( IsSmaller( a, S(myzero) ) @ #last )
                        case SimpleSmaller
                        by contradiction /* node #t2 after last node #last */
                      next
                        case ZExtendedSmaller
                        by contradiction /* node #t2 after last node #last */
                      qed
                    next
                      case StepSucc
                      solve( IsSmaller( a, S(y.1) ) @ #last )
                        case SimpleSmaller
                        by contradiction /* node #t2 after last node #last */
                      next
                        case ZExtendedSmaller
                        by contradiction /* node #t2 after last node #last */
                      qed
                    qed
                  qed
                qed
              next
                case ZExtendedSmaller
                solve( !Succ( y, b ) ▶₁ #t1 )
                  case InitSucc
                  solve( IsSmaller( S(myzero), c ) @ #t2.1 )
                    case SimpleSmaller
                    solve( !Succ( S(myzero), c ) ▶₀ #t2.1 )
                      case StepSucc
                      solve( IsSmaller( a, S(S(myzero)) ) @ #last )
                        case SimpleSmaller
                        by contradiction /* node #t2 after last node #last */
                      next
                        case ZExtendedSmaller
                        by contradiction /* node #t2 after last node #last */
                      qed
                    qed
                  next
                    case ZExtendedSmaller
                    solve( !Succ( y.1, c ) ▶₁ #t2.1 )
                      case InitSucc
                      by contradiction /* cyclic */
                    next
                      case StepSucc
                      solve( IsSmaller( a, S(y.1) ) @ #last )
                        case SimpleSmaller
                        by contradiction /* node #t2 after last node #last */
                      next
                        case ZExtendedSmaller
                        by contradiction /* node #t2 after last node #last */
                      qed
                    qed
                  qed
                next
                  case StepSucc
                  solve( IsSmaller( S(y), c ) @ #t2.1 )
                    case SimpleSmaller
                    solve( !Succ( S(y), c ) ▶₀ #t2.1 )
                      case StepSucc
                      solve( IsSmaller( a, S(S(y)) ) @ #last )
                        case SimpleSmaller
                        by contradiction /* node #t2 after last node #last */
                      next
                        case ZExtendedSmaller
                        by contradiction /* node #t2 after last node #last */
                      qed
                    qed
                  next
                    case ZExtendedSmaller
                    solve( !Succ( y.2, c ) ▶₁ #t2.1 )
                      case InitSucc
                      solve( IsSmaller( a, S(myzero) ) @ #last )
                        case SimpleSmaller
                        by contradiction /* node #t2 after last node #last */
                      next
                        case ZExtendedSmaller
                        by contradiction /* node #t2 after last node #last */
                      qed
                    next
                      case StepSucc
                      solve( IsSmaller( a, S(y.2) ) @ #last )
                        case SimpleSmaller
                        by contradiction /* node #t2 after last node #last */
                      next
                        case ZExtendedSmaller
                        by contradiction /* node #t2 after last node #last */
                      qed
                    qed
                  qed
                qed
              qed
            qed
          next
            case BuyANewYubikey_case_2
            solve( !Smaller( otc, x ) ▶₅ #t2 )
              case SimpleSmaller_case_1
              solve( IsSmaller( a, b ) @ #t1 )
                case SimpleSmaller
                solve( !Succ( a, b ) ▶₀ #t1 )
                  case InitSucc
                  solve( IsSmaller( S(myzero), c ) @ #t2.1 )
                    case SimpleSmaller
                    solve( !Succ( S(myzero), c ) ▶₀ #t2.1 )
                      case StepSucc
                      solve( IsSmaller( myzero, S(S(myzero)) ) @ #last )
                        case SimpleSmaller
                        by contradiction /* node #t2 after last node #last */
                      next
                        case ZExtendedSmaller
                        by contradiction /* node #t2 after last node #last */
                      qed
                    qed
                  next
                    case ZExtendedSmaller
                    solve( !Succ( y, c ) ▶₁ #t2.1 )
                      case InitSucc
                      by contradiction /* cyclic */
                    next
                      case StepSucc
                      solve( IsSmaller( myzero, S(y) ) @ #last )
                        case SimpleSmaller
                        by contradiction /* node #t2 after last node #last */
                      next
                        case ZExtendedSmaller
                        by contradiction /* node #t2 after last node #last */
                      qed
                    qed
                  qed
                next
                  case StepSucc
                  solve( IsSmaller( S(a), c ) @ #t2.1 )
                    case SimpleSmaller
                    solve( !Succ( S(a), c ) ▶₀ #t2.1 )
                      case StepSucc
                      solve( IsSmaller( a, S(S(a)) ) @ #last )
                        case SimpleSmaller
                        by contradiction /* node #t2 after last node #last */
                      next
                        case ZExtendedSmaller
                        by contradiction /* node #t2 after last node #last */
                      qed
                    qed
                  next
                    case ZExtendedSmaller
                    solve( !Succ( y, c ) ▶₁ #t2.1 )
                      case InitSucc
                      solve( IsSmaller( a, S(myzero) ) @ #last )
                        case SimpleSmaller
                        by contradiction /* node #t2 after last node #last */
                      next
                        case ZExtendedSmaller
                        by contradiction /* node #t2 after last node #last */
                      qed
                    next
                      case StepSucc
                      solve( IsSmaller( a, S(y) ) @ #last )
                        case SimpleSmaller
                        by contradiction /* node #t2 after last node #last */
                      next
                        case ZExtendedSmaller
                        by contradiction /* node #t2 after last node #last */
                      qed
                    qed
                  qed
                qed
              next
                case ZExtendedSmaller
                solve( !Succ( y, b ) ▶₁ #t1 )
                  case InitSucc
                  solve( IsSmaller( S(myzero), c ) @ #t2.1 )
                    case SimpleSmaller
                    solve( !Succ( S(myzero), c ) ▶₀ #t2.1 )
                      case StepSucc
                      solve( IsSmaller( a, S(S(myzero)) ) @ #last )
                        case SimpleSmaller
                        by contradiction /* node #t2 after last node #last */
                      next
                        case ZExtendedSmaller
                        by contradiction /* node #t2 after last node #last */
                      qed
                    qed
                  next
                    case ZExtendedSmaller
                    solve( !Succ( y, c ) ▶₁ #t2.1 )
                      case InitSucc
                      by contradiction /* cyclic */
                    next
                      case StepSucc
                      solve( IsSmaller( a, S(y) ) @ #last )
                        case SimpleSmaller
                        by contradiction /* node #t2 after last node #last */
                      next
                        case ZExtendedSmaller
                        by contradiction /* node #t2 after last node #last */
                      qed
                    qed
                  qed
                next
                  case StepSucc
                  solve( IsSmaller( S(y), c ) @ #t2.1 )
                    case SimpleSmaller
                    solve( !Succ( S(y), c ) ▶₀ #t2.1 )
                      case StepSucc
                      solve( IsSmaller( a, S(S(y)) ) @ #last )
                        case SimpleSmaller
                        by contradiction /* node #t2 after last node #last */
                      next
                        case ZExtendedSmaller
                        by contradiction /* node #t2 after last node #last */
                      qed
                    qed
                  next
                    case ZExtendedSmaller
                    solve( !Succ( y.1, c ) ▶₁ #t2.1 )
                      case InitSucc
                      solve( IsSmaller( a, S(myzero) ) @ #last )
                        case SimpleSmaller
                        by contradiction /* node #t2 after last node #last */
                      next
                        case ZExtendedSmaller
                        by contradiction /* node #t2 after last node #last */
                      qed
                    next
                      case StepSucc
                      solve( IsSmaller( a, S(y.1) ) @ #last )
                        case SimpleSmaller
                        by contradiction /* node #t2 after last node #last */
                      next
                        case ZExtendedSmaller
                        by contradiction /* node #t2 after last node #last */
                      qed
                    qed
                  qed
                qed
              qed
            next
              case SimpleSmaller_case_2
              solve( IsSmaller( a, b ) @ #t1 )
                case SimpleSmaller
                solve( !Succ( a, b ) ▶₀ #t1 )
                  case InitSucc
                  solve( IsSmaller( S(myzero), c ) @ #t2.1 )
                    case SimpleSmaller
                    solve( !Succ( S(myzero), c ) ▶₀ #t2.1 )
                      case StepSucc
                      solve( IsSmaller( myzero, S(S(myzero)) ) @ #last )
                        case SimpleSmaller
                        by contradiction /* node #t2 after last node #last */
                      next
                        case ZExtendedSmaller
                        by contradiction /* node #t2 after last node #last */
                      qed
                    qed
                  next
                    case ZExtendedSmaller
                    solve( !Succ( y, c ) ▶₁ #t2.1 )
                      case InitSucc
                      by contradiction /* cyclic */
                    next
                      case StepSucc
                      solve( IsSmaller( myzero, S(y) ) @ #last )
                        case SimpleSmaller
                        by contradiction /* node #t2 after last node #last */
                      next
                        case ZExtendedSmaller
                        by contradiction /* node #t2 after last node #last */
                      qed
                    qed
                  qed
                next
                  case StepSucc
                  solve( IsSmaller( S(a), c ) @ #t2.1 )
                    case SimpleSmaller
                    solve( !Succ( S(a), c ) ▶₀ #t2.1 )
                      case StepSucc
                      solve( IsSmaller( a, S(S(a)) ) @ #last )
                        case SimpleSmaller
                        by contradiction /* node #t2 after last node #last */
                      next
                        case ZExtendedSmaller
                        by contradiction /* node #t2 after last node #last */
                      qed
                    qed
                  next
                    case ZExtendedSmaller
                    solve( !Succ( y, c ) ▶₁ #t2.1 )
                      case InitSucc
                      solve( IsSmaller( a, S(myzero) ) @ #last )
                        case SimpleSmaller
                        by contradiction /* node #t2 after last node #last */
                      next
                        case ZExtendedSmaller
                        by contradiction /* node #t2 after last node #last */
                      qed
                    next
                      case StepSucc
                      solve( IsSmaller( a, S(y) ) @ #last )
                        case SimpleSmaller
                        by contradiction /* node #t2 after last node #last */
                      next
                        case ZExtendedSmaller
                        by contradiction /* node #t2 after last node #last */
                      qed
                    qed
                  qed
                qed
              next
                case ZExtendedSmaller
                solve( !Succ( y, b ) ▶₁ #t1 )
                  case InitSucc
                  solve( IsSmaller( S(myzero), c ) @ #t2.1 )
                    case SimpleSmaller
                    solve( !Succ( S(myzero), c ) ▶₀ #t2.1 )
                      case StepSucc
                      solve( IsSmaller( a, S(S(myzero)) ) @ #last )
                        case SimpleSmaller
                        by contradiction /* node #t2 after last node #last */
                      next
                        case ZExtendedSmaller
                        by contradiction /* node #t2 after last node #last */
                      qed
                    qed
                  next
                    case ZExtendedSmaller
                    solve( !Succ( y, c ) ▶₁ #t2.1 )
                      case InitSucc
                      by contradiction /* cyclic */
                    next
                      case StepSucc
                      solve( IsSmaller( a, S(y) ) @ #last )
                        case SimpleSmaller
                        by contradiction /* node #t2 after last node #last */
                      next
                        case ZExtendedSmaller
                        by contradiction /* node #t2 after last node #last */
                      qed
                    qed
                  qed
                next
                  case StepSucc
                  solve( IsSmaller( S(y), c ) @ #t2.1 )
                    case SimpleSmaller
                    solve( !Succ( S(y), c ) ▶₀ #t2.1 )
                      case StepSucc
                      solve( IsSmaller( a, S(S(y)) ) @ #last )
                        case SimpleSmaller
                        by contradiction /* node #t2 after last node #last */
                      next
                        case ZExtendedSmaller
                        by contradiction /* node #t2 after last node #last */
                      qed
                    qed
                  next
                    case ZExtendedSmaller
                    solve( !Succ( y.1, c ) ▶₁ #t2.1 )
                      case InitSucc
                      solve( IsSmaller( a, S(myzero) ) @ #last )
                        case SimpleSmaller
                        by contradiction /* node #t2 after last node #last */
                      next
                        case ZExtendedSmaller
                        by contradiction /* node #t2 after last node #last */
                      qed
                    next
                      case StepSucc
                      solve( IsSmaller( a, S(y.1) ) @ #last )
                        case SimpleSmaller
                        by contradiction /* node #t2 after last node #last */
                      next
                        case ZExtendedSmaller
                        by contradiction /* node #t2 after last node #last */
                      qed
                    qed
                  qed
                qed
              qed
            next
              case ZExtendedSmaller_case_1
              solve( IsSmaller( a, b ) @ #t1 )
                case SimpleSmaller
                solve( !Succ( a, b ) ▶₀ #t1 )
                  case InitSucc
                  solve( IsSmaller( S(myzero), c ) @ #t2.1 )
                    case SimpleSmaller
                    solve( !Succ( S(myzero), c ) ▶₀ #t2.1 )
                      case StepSucc
                      solve( IsSmaller( myzero, S(S(myzero)) ) @ #last )
                        case SimpleSmaller
                        by contradiction /* node #t2 after last node #last */
                      next
                        case ZExtendedSmaller
                        by contradiction /* node #t2 after last node #last */
                      qed
                    qed
                  next
                    case ZExtendedSmaller
                    solve( !Succ( y, c ) ▶₁ #t2.1 )
                      case InitSucc
                      by contradiction /* cyclic */
                    next
                      case StepSucc
                      solve( IsSmaller( myzero, S(y) ) @ #last )
                        case SimpleSmaller
                        by contradiction /* node #t2 after last node #last */
                      next
                        case ZExtendedSmaller
                        by contradiction /* node #t2 after last node #last */
                      qed
                    qed
                  qed
                next
                  case StepSucc
                  solve( IsSmaller( S(a), c ) @ #t2.1 )
                    case SimpleSmaller
                    solve( !Succ( S(a), c ) ▶₀ #t2.1 )
                      case StepSucc
                      solve( IsSmaller( a, S(S(a)) ) @ #last )
                        case SimpleSmaller
                        by contradiction /* node #t2 after last node #last */
                      next
                        case ZExtendedSmaller
                        by contradiction /* node #t2 after last node #last */
                      qed
                    qed
                  next
                    case ZExtendedSmaller
                    solve( !Succ( y, c ) ▶₁ #t2.1 )
                      case InitSucc
                      solve( IsSmaller( a, S(myzero) ) @ #last )
                        case SimpleSmaller
                        by contradiction /* node #t2 after last node #last */
                      next
                        case ZExtendedSmaller
                        by contradiction /* node #t2 after last node #last */
                      qed
                    next
                      case StepSucc
                      solve( IsSmaller( a, S(y) ) @ #last )
                        case SimpleSmaller
                        by contradiction /* node #t2 after last node #last */
                      next
                        case ZExtendedSmaller
                        by contradiction /* node #t2 after last node #last */
                      qed
                    qed
                  qed
                qed
              next
                case ZExtendedSmaller
                solve( !Succ( y, b ) ▶₁ #t1 )
                  case InitSucc
                  solve( IsSmaller( S(myzero), c ) @ #t2.1 )
                    case SimpleSmaller
                    solve( !Succ( S(myzero), c ) ▶₀ #t2.1 )
                      case StepSucc
                      solve( IsSmaller( a, S(S(myzero)) ) @ #last )
                        case SimpleSmaller
                        by contradiction /* node #t2 after last node #last */
                      next
                        case ZExtendedSmaller
                        by contradiction /* node #t2 after last node #last */
                      qed
                    qed
                  next
                    case ZExtendedSmaller
                    solve( !Succ( y, c ) ▶₁ #t2.1 )
                      case InitSucc
                      by contradiction /* cyclic */
                    next
                      case StepSucc
                      solve( IsSmaller( a, S(y) ) @ #last )
                        case SimpleSmaller
                        by contradiction /* node #t2 after last node #last */
                      next
                        case ZExtendedSmaller
                        by contradiction /* node #t2 after last node #last */
                      qed
                    qed
                  qed
                next
                  case StepSucc
                  solve( IsSmaller( S(y), c ) @ #t2.1 )
                    case SimpleSmaller
                    solve( !Succ( S(y), c ) ▶₀ #t2.1 )
                      case StepSucc
                      solve( IsSmaller( a, S(S(y)) ) @ #last )
                        case SimpleSmaller
                        by contradiction /* node #t2 after last node #last */
                      next
                        case ZExtendedSmaller
                        by contradiction /* node #t2 after last node #last */
                      qed
                    qed
                  next
                    case ZExtendedSmaller
                    solve( !Succ( y.1, c ) ▶₁ #t2.1 )
                      case InitSucc
                      solve( IsSmaller( a, S(myzero) ) @ #last )
                        case SimpleSmaller
                        by contradiction /* node #t2 after last node #last */
                      next
                        case ZExtendedSmaller
                        by contradiction /* node #t2 after last node #last */
                      qed
                    next
                      case StepSucc
                      solve( IsSmaller( a, S(y.1) ) @ #last )
                        case SimpleSmaller
                        by contradiction /* node #t2 after last node #last */
                      next
                        case ZExtendedSmaller
                        by contradiction /* node #t2 after last node #last */
                      qed
                    qed
                  qed
                qed
              qed
            next
              case ZExtendedSmaller_case_2
              solve( IsSmaller( a, b ) @ #t1 )
                case SimpleSmaller
                solve( !Succ( a, b ) ▶₀ #t1 )
                  case InitSucc
                  solve( IsSmaller( S(myzero), c ) @ #t2.1 )
                    case SimpleSmaller
                    solve( !Succ( S(myzero), c ) ▶₀ #t2.1 )
                      case StepSucc
                      solve( IsSmaller( myzero, S(S(myzero)) ) @ #last )
                        case SimpleSmaller
                        by contradiction /* node #t2 after last node #last */
                      next
                        case ZExtendedSmaller
                        by contradiction /* node #t2 after last node #last */
                      qed
                    qed
                  next
                    case ZExtendedSmaller
                    solve( !Succ( y.1, c ) ▶₁ #t2.1 )
                      case InitSucc
                      by contradiction /* cyclic */
                    next
                      case StepSucc
                      solve( IsSmaller( myzero, S(y.1) ) @ #last )
                        case SimpleSmaller
                        by contradiction /* node #t2 after last node #last */
                      next
                        case ZExtendedSmaller
                        by contradiction /* node #t2 after last node #last */
                      qed
                    qed
                  qed
                next
                  case StepSucc
                  solve( IsSmaller( S(a), c ) @ #t2.1 )
                    case SimpleSmaller
                    solve( !Succ( S(a), c ) ▶₀ #t2.1 )
                      case StepSucc
                      solve( IsSmaller( a, S(S(a)) ) @ #last )
                        case SimpleSmaller
                        by contradiction /* node #t2 after last node #last */
                      next
                        case ZExtendedSmaller
                        by contradiction /* node #t2 after last node #last */
                      qed
                    qed
                  next
                    case ZExtendedSmaller
                    solve( !Succ( y.1, c ) ▶₁ #t2.1 )
                      case InitSucc
                      solve( IsSmaller( a, S(myzero) ) @ #last )
                        case SimpleSmaller
                        by contradiction /* node #t2 after last node #last */
                      next
                        case ZExtendedSmaller
                        by contradiction /* node #t2 after last node #last */
                      qed
                    next
                      case StepSucc
                      solve( IsSmaller( a, S(y.1) ) @ #last )
                        case SimpleSmaller
                        by contradiction /* node #t2 after last node #last */
                      next
                        case ZExtendedSmaller
                        by contradiction /* node #t2 after last node #last */
                      qed
                    qed
                  qed
                qed
              next
                case ZExtendedSmaller
                solve( !Succ( y, b ) ▶₁ #t1 )
                  case InitSucc
                  solve( IsSmaller( S(myzero), c ) @ #t2.1 )
                    case SimpleSmaller
                    solve( !Succ( S(myzero), c ) ▶₀ #t2.1 )
                      case StepSucc
                      solve( IsSmaller( a, S(S(myzero)) ) @ #last )
                        case SimpleSmaller
                        by contradiction /* node #t2 after last node #last */
                      next
                        case ZExtendedSmaller
                        by contradiction /* node #t2 after last node #last */
                      qed
                    qed
                  next
                    case ZExtendedSmaller
                    solve( !Succ( y.1, c ) ▶₁ #t2.1 )
                      case InitSucc
                      by contradiction /* cyclic */
                    next
                      case StepSucc
                      solve( IsSmaller( a, S(y.1) ) @ #last )
                        case SimpleSmaller
                        by contradiction /* node #t2 after last node #last */
                      next
                        case ZExtendedSmaller
                        by contradiction /* node #t2 after last node #last */
                      qed
                    qed
                  qed
                next
                  case StepSucc
                  solve( IsSmaller( S(y), c ) @ #t2.1 )
                    case SimpleSmaller
                    solve( !Succ( S(y), c ) ▶₀ #t2.1 )
                      case StepSucc
                      solve( IsSmaller( a, S(S(y)) ) @ #last )
                        case SimpleSmaller
                        by contradiction /* node #t2 after last node #last */
                      next
                        case ZExtendedSmaller
                        by contradiction /* node #t2 after last node #last */
                      qed
                    qed
                  next
                    case ZExtendedSmaller
                    solve( !Succ( y.2, c ) ▶₁ #t2.1 )
                      case InitSucc
                      solve( IsSmaller( a, S(myzero) ) @ #last )
                        case SimpleSmaller
                        by contradiction /* node #t2 after last node #last */
                      next
                        case ZExtendedSmaller
                        by contradiction /* node #t2 after last node #last */
                      qed
                    next
                      case StepSucc
                      solve( IsSmaller( a, S(y.2) ) @ #last )
                        case SimpleSmaller
                        by contradiction /* node #t2 after last node #last */
                      next
                        case ZExtendedSmaller
                        by contradiction /* node #t2 after last node #last */
                      qed
                    qed
                  qed
                qed
              qed
            qed
          qed
        qed
      qed
    next
      case cxorc
      by sorry /* unannotated */
    next
      case irecv
      by contradiction /* unannotated */
    next
      case irecvHSM
      by contradiction /* cyclic */
    next
      case read_AEAD_case_1
      solve( (∀ pid sid x otp #t2.
               (Login( pid, sid, x, otp ) @ #t2)
              ⇒
               ((last(#t2)) ∨
                (∃ #t1. (YubiPress( pid, x ) @ #t1) ∧ (¬(last(#t1))) ∧ (#t1 < #t2))))  ∥
             (∃ #t1 #t2 a b c.
               (IsSmaller( a, b ) @ #t1) ∧ (IsSmaller( b, c ) @ #t2)
              ∧
               (¬(last(#t2))) ∧
               (¬(last(#t1))) ∧
               (∀ #t3. (IsSmaller( a, c ) @ #t3) ⇒ last(#t3))) )
        case case_1
        solve( (last(#t2))  ∥
               (∃ #t1. (YubiPress( ~pid, x ) @ #t1) ∧ (¬(last(#t1))) ∧ (#t1 < #t2)) )
          case case_1
          solve( !HSM( ~kh, ~k ) ▶₁ #t2 )
            case HSMInit
            solve( !S_sid( ~pid, ~sid ) ▶₄ #t2 )
              case BuyANewYubikey
              solve( !Smaller( otc, x ) ▶₅ #t2 )
                case SimpleSmaller_case_1
                solve( !KU( senc(<~sid, S(myzero), ~pr>, ~k2) ) @ #vk.6 )
                  case Yubikey_PressButton
                  by contradiction /* from formulas */
                next
                  case c_senc
                  by contradiction /* from formulas */
                next
                  case irecvHSM
                  by contradiction /* cyclic */
                qed
              next
                case SimpleSmaller_case_2
                solve( !KU( senc(<~sid, S(otc), ~pr>, ~k2) ) @ #vk.6 )
                  case Yubikey_PressButton
                  by contradiction /* from formulas */
                next
                  case c_senc
                  by contradiction /* from formulas */
                next
                  case irecvHSM
                  by contradiction /* cyclic */
                qed
              next
                case ZExtendedSmaller_case_1
                solve( !KU( senc(<~sid, S(myzero), ~pr>, ~k2) ) @ #vk.6 )
                  case Yubikey_PressButton
                  by contradiction /* from formulas */
                next
                  case c_senc
                  by contradiction /* from formulas */
                next
                  case irecvHSM
                  by contradiction /* cyclic */
                qed
              next
                case ZExtendedSmaller_case_2
                solve( !KU( senc(<~sid, S(y), ~pr>, ~k2) ) @ #vk.6 )
                  case Yubikey_PressButton
                  by contradiction /* from formulas */
                next
                  case c_senc
                  by contradiction /* from formulas */
                next
                  case irecvHSM
                  by contradiction /* cyclic */
                qed
              qed
            qed
          qed
        next
          case case_2
          by contradiction /* from formulas */
        qed
      next
        case case_2
        solve( !HSM( ~kh, ~k ) ▶₁ #t2 )
          case HSMInit
          solve( !S_sid( ~pid, ~sid ) ▶₄ #t2 )
            case BuyANewYubikey
            solve( !Smaller( otc, x ) ▶₅ #t2 )
              case SimpleSmaller_case_1
              solve( IsSmaller( a, b ) @ #t1 )
                case SimpleSmaller
                solve( !Succ( a, b ) ▶₀ #t1 )
                  case InitSucc
                  solve( IsSmaller( S(myzero), c ) @ #t2.1 )
                    case SimpleSmaller
                    solve( !Succ( S(myzero), c ) ▶₀ #t2.1 )
                      case StepSucc
                      solve( IsSmaller( myzero, S(S(myzero)) ) @ #last )
                        case SimpleSmaller
                        by contradiction /* node #t2 after last node #last */
                      next
                        case ZExtendedSmaller
                        by contradiction /* node #t2 after last node #last */
                      qed
                    qed
                  next
                    case ZExtendedSmaller
                    solve( !Succ( y, c ) ▶₁ #t2.1 )
                      case InitSucc
                      by contradiction /* cyclic */
                    next
                      case StepSucc
                      solve( IsSmaller( myzero, S(y) ) @ #last )
                        case SimpleSmaller
                        by contradiction /* node #t2 after last node #last */
                      next
                        case ZExtendedSmaller
                        by contradiction /* node #t2 after last node #last */
                      qed
                    qed
                  qed
                next
                  case StepSucc
                  solve( IsSmaller( S(a), c ) @ #t2.1 )
                    case SimpleSmaller
                    solve( !Succ( S(a), c ) ▶₀ #t2.1 )
                      case StepSucc
                      solve( IsSmaller( a, S(S(a)) ) @ #last )
                        case SimpleSmaller
                        by contradiction /* node #t2 after last node #last */
                      next
                        case ZExtendedSmaller
                        by contradiction /* node #t2 after last node #last */
                      qed
                    qed
                  next
                    case ZExtendedSmaller
                    solve( !Succ( y, c ) ▶₁ #t2.1 )
                      case InitSucc
                      solve( IsSmaller( a, S(myzero) ) @ #last )
                        case SimpleSmaller
                        by contradiction /* node #t2 after last node #last */
                      next
                        case ZExtendedSmaller
                        by contradiction /* node #t2 after last node #last */
                      qed
                    next
                      case StepSucc
                      solve( IsSmaller( a, S(y) ) @ #last )
                        case SimpleSmaller
                        by contradiction /* node #t2 after last node #last */
                      next
                        case ZExtendedSmaller
                        by contradiction /* node #t2 after last node #last */
                      qed
                    qed
                  qed
                qed
              next
                case ZExtendedSmaller
                solve( !Succ( y, b ) ▶₁ #t1 )
                  case InitSucc
                  solve( IsSmaller( S(myzero), c ) @ #t2.1 )
                    case SimpleSmaller
                    solve( !Succ( S(myzero), c ) ▶₀ #t2.1 )
                      case StepSucc
                      solve( IsSmaller( a, S(S(myzero)) ) @ #last )
                        case SimpleSmaller
                        by contradiction /* node #t2 after last node #last */
                      next
                        case ZExtendedSmaller
                        by contradiction /* node #t2 after last node #last */
                      qed
                    qed
                  next
                    case ZExtendedSmaller
                    solve( !Succ( y, c ) ▶₁ #t2.1 )
                      case InitSucc
                      by contradiction /* cyclic */
                    next
                      case StepSucc
                      solve( IsSmaller( a, S(y) ) @ #last )
                        case SimpleSmaller
                        by contradiction /* node #t2 after last node #last */
                      next
                        case ZExtendedSmaller
                        by contradiction /* node #t2 after last node #last */
                      qed
                    qed
                  qed
                next
                  case StepSucc
                  solve( IsSmaller( S(y), c ) @ #t2.1 )
                    case SimpleSmaller
                    solve( !Succ( S(y), c ) ▶₀ #t2.1 )
                      case StepSucc
                      solve( IsSmaller( a, S(S(y)) ) @ #last )
                        case SimpleSmaller
                        by contradiction /* node #t2 after last node #last */
                      next
                        case ZExtendedSmaller
                        by contradiction /* node #t2 after last node #last */
                      qed
                    qed
                  next
                    case ZExtendedSmaller
                    solve( !Succ( y.1, c ) ▶₁ #t2.1 )
                      case InitSucc
                      solve( IsSmaller( a, S(myzero) ) @ #last )
                        case SimpleSmaller
                        by contradiction /* node #t2 after last node #last */
                      next
                        case ZExtendedSmaller
                        by contradiction /* node #t2 after last node #last */
                      qed
                    next
                      case StepSucc
                      solve( IsSmaller( a, S(y.1) ) @ #last )
                        case SimpleSmaller
                        by contradiction /* node #t2 after last node #last */
                      next
                        case ZExtendedSmaller
                        by contradiction /* node #t2 after last node #last */
                      qed
                    qed
                  qed
                qed
              qed
            next
              case SimpleSmaller_case_2
              solve( IsSmaller( a, b ) @ #t1 )
                case SimpleSmaller
                solve( !Succ( a, b ) ▶₀ #t1 )
                  case InitSucc
                  solve( IsSmaller( S(myzero), c ) @ #t2.1 )
                    case SimpleSmaller
                    solve( !Succ( S(myzero), c ) ▶₀ #t2.1 )
                      case StepSucc
                      solve( IsSmaller( myzero, S(S(myzero)) ) @ #last )
                        case SimpleSmaller
                        by contradiction /* node #t2 after last node #last */
                      next
                        case ZExtendedSmaller
                        by contradiction /* node #t2 after last node #last */
                      qed
                    qed
                  next
                    case ZExtendedSmaller
                    solve( !Succ( y, c ) ▶₁ #t2.1 )
                      case InitSucc
                      by contradiction /* cyclic */
                    next
                      case StepSucc
                      solve( IsSmaller( myzero, S(y) ) @ #last )
                        case SimpleSmaller
                        by contradiction /* node #t2 after last node #last */
                      next
                        case ZExtendedSmaller
                        by contradiction /* node #t2 after last node #last */
                      qed
                    qed
                  qed
                next
                  case StepSucc
                  solve( IsSmaller( S(a), c ) @ #t2.1 )
                    case SimpleSmaller
                    solve( !Succ( S(a), c ) ▶₀ #t2.1 )
                      case StepSucc
                      solve( IsSmaller( a, S(S(a)) ) @ #last )
                        case SimpleSmaller
                        by contradiction /* node #t2 after last node #last */
                      next
                        case ZExtendedSmaller
                        by contradiction /* node #t2 after last node #last */
                      qed
                    qed
                  next
                    case ZExtendedSmaller
                    solve( !Succ( y, c ) ▶₁ #t2.1 )
                      case InitSucc
                      solve( IsSmaller( a, S(myzero) ) @ #last )
                        case SimpleSmaller
                        by contradiction /* node #t2 after last node #last */
                      next
                        case ZExtendedSmaller
                        by contradiction /* node #t2 after last node #last */
                      qed
                    next
                      case StepSucc
                      solve( IsSmaller( a, S(y) ) @ #last )
                        case SimpleSmaller
                        by contradiction /* node #t2 after last node #last */
                      next
                        case ZExtendedSmaller
                        by contradiction /* node #t2 after last node #last */
                      qed
                    qed
                  qed
                qed
              next
                case ZExtendedSmaller
                solve( !Succ( y, b ) ▶₁ #t1 )
                  case InitSucc
                  solve( IsSmaller( S(myzero), c ) @ #t2.1 )
                    case SimpleSmaller
                    solve( !Succ( S(myzero), c ) ▶₀ #t2.1 )
                      case StepSucc
                      solve( IsSmaller( a, S(S(myzero)) ) @ #last )
                        case SimpleSmaller
                        by contradiction /* node #t2 after last node #last */
                      next
                        case ZExtendedSmaller
                        by contradiction /* node #t2 after last node #last */
                      qed
                    qed
                  next
                    case ZExtendedSmaller
                    solve( !Succ( y, c ) ▶₁ #t2.1 )
                      case InitSucc
                      by contradiction /* cyclic */
                    next
                      case StepSucc
                      solve( IsSmaller( a, S(y) ) @ #last )
                        case SimpleSmaller
                        by contradiction /* node #t2 after last node #last */
                      next
                        case ZExtendedSmaller
                        by contradiction /* node #t2 after last node #last */
                      qed
                    qed
                  qed
                next
                  case StepSucc
                  solve( IsSmaller( S(y), c ) @ #t2.1 )
                    case SimpleSmaller
                    solve( !Succ( S(y), c ) ▶₀ #t2.1 )
                      case StepSucc
                      solve( IsSmaller( a, S(S(y)) ) @ #last )
                        case SimpleSmaller
                        by contradiction /* node #t2 after last node #last */
                      next
                        case ZExtendedSmaller
                        by contradiction /* node #t2 after last node #last */
                      qed
                    qed
                  next
                    case ZExtendedSmaller
                    solve( !Succ( y.1, c ) ▶₁ #t2.1 )
                      case InitSucc
                      solve( IsSmaller( a, S(myzero) ) @ #last )
                        case SimpleSmaller
                        by contradiction /* node #t2 after last node #last */
                      next
                        case ZExtendedSmaller
                        by contradiction /* node #t2 after last node #last */
                      qed
                    next
                      case StepSucc
                      solve( IsSmaller( a, S(y.1) ) @ #last )
                        case SimpleSmaller
                        by contradiction /* node #t2 after last node #last */
                      next
                        case ZExtendedSmaller
                        by contradiction /* node #t2 after last node #last */
                      qed
                    qed
                  qed
                qed
              qed
            next
              case ZExtendedSmaller_case_1
              solve( IsSmaller( a, b ) @ #t1 )
                case SimpleSmaller
                solve( !Succ( a, b ) ▶₀ #t1 )
                  case InitSucc
                  solve( IsSmaller( S(myzero), c ) @ #t2.1 )
                    case SimpleSmaller
                    solve( !Succ( S(myzero), c ) ▶₀ #t2.1 )
                      case StepSucc
                      solve( IsSmaller( myzero, S(S(myzero)) ) @ #last )
                        case SimpleSmaller
                        by contradiction /* node #t2 after last node #last */
                      next
                        case ZExtendedSmaller
                        by contradiction /* node #t2 after last node #last */
                      qed
                    qed
                  next
                    case ZExtendedSmaller
                    solve( !Succ( y, c ) ▶₁ #t2.1 )
                      case InitSucc
                      by contradiction /* cyclic */
                    next
                      case StepSucc
                      solve( IsSmaller( myzero, S(y) ) @ #last )
                        case SimpleSmaller
                        by contradiction /* node #t2 after last node #last */
                      next
                        case ZExtendedSmaller
                        by contradiction /* node #t2 after last node #last */
                      qed
                    qed
                  qed
                next
                  case StepSucc
                  solve( IsSmaller( S(a), c ) @ #t2.1 )
                    case SimpleSmaller
                    solve( !Succ( S(a), c ) ▶₀ #t2.1 )
                      case StepSucc
                      solve( IsSmaller( a, S(S(a)) ) @ #last )
                        case SimpleSmaller
                        by contradiction /* node #t2 after last node #last */
                      next
                        case ZExtendedSmaller
                        by contradiction /* node #t2 after last node #last */
                      qed
                    qed
                  next
                    case ZExtendedSmaller
                    solve( !Succ( y, c ) ▶₁ #t2.1 )
                      case InitSucc
                      solve( IsSmaller( a, S(myzero) ) @ #last )
                        case SimpleSmaller
                        by contradiction /* node #t2 after last node #last */
                      next
                        case ZExtendedSmaller
                        by contradiction /* node #t2 after last node #last */
                      qed
                    next
                      case StepSucc
                      solve( IsSmaller( a, S(y) ) @ #last )
                        case SimpleSmaller
                        by contradiction /* node #t2 after last node #last */
                      next
                        case ZExtendedSmaller
                        by contradiction /* node #t2 after last node #last */
                      qed
                    qed
                  qed
                qed
              next
                case ZExtendedSmaller
                solve( !Succ( y, b ) ▶₁ #t1 )
                  case InitSucc
                  solve( IsSmaller( S(myzero), c ) @ #t2.1 )
                    case SimpleSmaller
                    solve( !Succ( S(myzero), c ) ▶₀ #t2.1 )
                      case StepSucc
                      solve( IsSmaller( a, S(S(myzero)) ) @ #last )
                        case SimpleSmaller
                        by contradiction /* node #t2 after last node #last */
                      next
                        case ZExtendedSmaller
                        by contradiction /* node #t2 after last node #last */
                      qed
                    qed
                  next
                    case ZExtendedSmaller
                    solve( !Succ( y, c ) ▶₁ #t2.1 )
                      case InitSucc
                      by contradiction /* cyclic */
                    next
                      case StepSucc
                      solve( IsSmaller( a, S(y) ) @ #last )
                        case SimpleSmaller
                        by contradiction /* node #t2 after last node #last */
                      next
                        case ZExtendedSmaller
                        by contradiction /* node #t2 after last node #last */
                      qed
                    qed
                  qed
                next
                  case StepSucc
                  solve( IsSmaller( S(y), c ) @ #t2.1 )
                    case SimpleSmaller
                    solve( !Succ( S(y), c ) ▶₀ #t2.1 )
                      case StepSucc
                      solve( IsSmaller( a, S(S(y)) ) @ #last )
                        case SimpleSmaller
                        by contradiction /* node #t2 after last node #last */
                      next
                        case ZExtendedSmaller
                        by contradiction /* node #t2 after last node #last */
                      qed
                    qed
                  next
                    case ZExtendedSmaller
                    solve( !Succ( y.1, c ) ▶₁ #t2.1 )
                      case InitSucc
                      solve( IsSmaller( a, S(myzero) ) @ #last )
                        case SimpleSmaller
                        by contradiction /* node #t2 after last node #last */
                      next
                        case ZExtendedSmaller
                        by contradiction /* node #t2 after last node #last */
                      qed
                    next
                      case StepSucc
                      solve( IsSmaller( a, S(y.1) ) @ #last )
                        case SimpleSmaller
                        by contradiction /* node #t2 after last node #last */
                      next
                        case ZExtendedSmaller
                        by contradiction /* node #t2 after last node #last */
                      qed
                    qed
                  qed
                qed
              qed
            next
              case ZExtendedSmaller_case_2
              solve( IsSmaller( a, b ) @ #t1 )
                case SimpleSmaller
                solve( !Succ( a, b ) ▶₀ #t1 )
                  case InitSucc
                  solve( IsSmaller( S(myzero), c ) @ #t2.1 )
                    case SimpleSmaller
                    solve( !Succ( S(myzero), c ) ▶₀ #t2.1 )
                      case StepSucc
                      solve( IsSmaller( myzero, S(S(myzero)) ) @ #last )
                        case SimpleSmaller
                        by contradiction /* node #t2 after last node #last */
                      next
                        case ZExtendedSmaller
                        by contradiction /* node #t2 after last node #last */
                      qed
                    qed
                  next
                    case ZExtendedSmaller
                    solve( !Succ( y.1, c ) ▶₁ #t2.1 )
                      case InitSucc
                      by contradiction /* cyclic */
                    next
                      case StepSucc
                      solve( IsSmaller( myzero, S(y.1) ) @ #last )
                        case SimpleSmaller
                        by contradiction /* node #t2 after last node #last */
                      next
                        case ZExtendedSmaller
                        by contradiction /* node #t2 after last node #last */
                      qed
                    qed
                  qed
                next
                  case StepSucc
                  solve( IsSmaller( S(a), c ) @ #t2.1 )
                    case SimpleSmaller
                    solve( !Succ( S(a), c ) ▶₀ #t2.1 )
                      case StepSucc
                      solve( IsSmaller( a, S(S(a)) ) @ #last )
                        case SimpleSmaller
                        by contradiction /* node #t2 after last node #last */
                      next
                        case ZExtendedSmaller
                        by contradiction /* node #t2 after last node #last */
                      qed
                    qed
                  next
                    case ZExtendedSmaller
                    solve( !Succ( y.1, c ) ▶₁ #t2.1 )
                      case InitSucc
                      solve( IsSmaller( a, S(myzero) ) @ #last )
                        case SimpleSmaller
                        by contradiction /* node #t2 after last node #last */
                      next
                        case ZExtendedSmaller
                        by contradiction /* node #t2 after last node #last */
                      qed
                    next
                      case StepSucc
                      solve( IsSmaller( a, S(y.1) ) @ #last )
                        case SimpleSmaller
                        by contradiction /* node #t2 after last node #last */
                      next
                        case ZExtendedSmaller
                        by contradiction /* node #t2 after last node #last */
                      qed
                    qed
                  qed
                qed
              next
                case ZExtendedSmaller
                solve( !Succ( y, b ) ▶₁ #t1 )
                  case InitSucc
                  solve( IsSmaller( S(myzero), c ) @ #t2.1 )
                    case SimpleSmaller
                    solve( !Succ( S(myzero), c ) ▶₀ #t2.1 )
                      case StepSucc
                      solve( IsSmaller( a, S(S(myzero)) ) @ #last )
                        case SimpleSmaller
                        by contradiction /* node #t2 after last node #last */
                      next
                        case ZExtendedSmaller
                        by contradiction /* node #t2 after last node #last */
                      qed
                    qed
                  next
                    case ZExtendedSmaller
                    solve( !Succ( y.1, c ) ▶₁ #t2.1 )
                      case InitSucc
                      by contradiction /* cyclic */
                    next
                      case StepSucc
                      solve( IsSmaller( a, S(y.1) ) @ #last )
                        case SimpleSmaller
                        by contradiction /* node #t2 after last node #last */
                      next
                        case ZExtendedSmaller
                        by contradiction /* node #t2 after last node #last */
                      qed
                    qed
                  qed
                next
                  case StepSucc
                  solve( IsSmaller( S(y), c ) @ #t2.1 )
                    case SimpleSmaller
                    solve( !Succ( S(y), c ) ▶₀ #t2.1 )
                      case StepSucc
                      solve( IsSmaller( a, S(S(y)) ) @ #last )
                        case SimpleSmaller
                        by contradiction /* node #t2 after last node #last */
                      next
                        case ZExtendedSmaller
                        by contradiction /* node #t2 after last node #last */
                      qed
                    qed
                  next
                    case ZExtendedSmaller
                    solve( !Succ( y.2, c ) ▶₁ #t2.1 )
                      case InitSucc
                      solve( IsSmaller( a, S(myzero) ) @ #last )
                        case SimpleSmaller
                        by contradiction /* node #t2 after last node #last */
                      next
                        case ZExtendedSmaller
                        by contradiction /* node #t2 after last node #last */
                      qed
                    next
                      case StepSucc
                      solve( IsSmaller( a, S(y.2) ) @ #last )
                        case SimpleSmaller
                        by contradiction /* node #t2 after last node #last */
                      next
                        case ZExtendedSmaller
                        by contradiction /* node #t2 after last node #last */
                      qed
                    qed
                  qed
                qed
              qed
            qed
          qed
        qed
      qed
    next
      case read_AEAD_case_2
      solve( (∀ pid sid x otp #t2.
               (Login( pid, sid, x, otp ) @ #t2)
              ⇒
               ((last(#t2)) ∨
                (∃ #t1. (YubiPress( pid, x ) @ #t1) ∧ (¬(last(#t1))) ∧ (#t1 < #t2))))  ∥
             (∃ #t1 #t2 a b c.
               (IsSmaller( a, b ) @ #t1) ∧ (IsSmaller( b, c ) @ #t2)
              ∧
               (¬(last(#t2))) ∧
               (¬(last(#t1))) ∧
               (∀ #t3. (IsSmaller( a, c ) @ #t3) ⇒ last(#t3))) )
        case case_1
        solve( (last(#t2))  ∥
               (∃ #t1. (YubiPress( ~pid, x ) @ #t1) ∧ (¬(last(#t1))) ∧ (#t1 < #t2)) )
          case case_1
          solve( !HSM( ~kh, ~k ) ▶₁ #t2 )
            case HSMInit
            solve( !S_sid( ~pid, ~sid ) ▶₄ #t2 )
              case BuyANewYubikey
              solve( !Smaller( otc, x ) ▶₅ #t2 )
                case SimpleSmaller_case_1
                solve( !KU( senc(<~sid, S(myzero), ~pr>, ~k2) ) @ #vk.6 )
                  case Yubikey_PressButton
                  by contradiction /* from formulas */
                next
                  case c_senc
                  by contradiction /* from formulas */
                next
                  case irecvHSM
                  by contradiction /* cyclic */
                qed
              next
                case SimpleSmaller_case_2
                solve( !KU( senc(<~sid, S(otc), ~pr>, ~k2) ) @ #vk.6 )
                  case Yubikey_PressButton
                  by contradiction /* from formulas */
                next
                  case c_senc
                  by contradiction /* from formulas */
                next
                  case irecvHSM
                  by contradiction /* cyclic */
                qed
              next
                case ZExtendedSmaller_case_1
                solve( !KU( senc(<~sid, S(myzero), ~pr>, ~k2) ) @ #vk.6 )
                  case Yubikey_PressButton
                  by contradiction /* from formulas */
                next
                  case c_senc
                  by contradiction /* from formulas */
                next
                  case irecvHSM
                  by contradiction /* cyclic */
                qed
              next
                case ZExtendedSmaller_case_2
                solve( !KU( senc(<~sid, S(y), ~pr>, ~k2) ) @ #vk.6 )
                  case Yubikey_PressButton
                  by contradiction /* from formulas */
                next
                  case c_senc
                  by contradiction /* from formulas */
                next
                  case irecvHSM
                  by contradiction /* cyclic */
                qed
              qed
            qed
          qed
        next
          case case_2
          by contradiction /* from formulas */
        qed
      next
        case case_2
        solve( !HSM( ~kh, ~k ) ▶₁ #t2 )
          case HSMInit
          solve( !S_sid( ~pid, ~sid ) ▶₄ #t2 )
            case BuyANewYubikey
            solve( !Smaller( otc, x ) ▶₅ #t2 )
              case SimpleSmaller_case_1
              solve( IsSmaller( a, b ) @ #t1 )
                case SimpleSmaller
                solve( !Succ( a, b ) ▶₀ #t1 )
                  case InitSucc
                  solve( IsSmaller( S(myzero), c ) @ #t2.1 )
                    case SimpleSmaller
                    solve( !Succ( S(myzero), c ) ▶₀ #t2.1 )
                      case StepSucc
                      solve( IsSmaller( myzero, S(S(myzero)) ) @ #last )
                        case SimpleSmaller
                        by contradiction /* node #t2 after last node #last */
                      next
                        case ZExtendedSmaller
                        by contradiction /* node #t2 after last node #last */
                      qed
                    qed
                  next
                    case ZExtendedSmaller
                    solve( !Succ( y, c ) ▶₁ #t2.1 )
                      case InitSucc
                      by contradiction /* cyclic */
                    next
                      case StepSucc
                      solve( IsSmaller( myzero, S(y) ) @ #last )
                        case SimpleSmaller
                        by contradiction /* node #t2 after last node #last */
                      next
                        case ZExtendedSmaller
                        by contradiction /* node #t2 after last node #last */
                      qed
                    qed
                  qed
                next
                  case StepSucc
                  solve( IsSmaller( S(a), c ) @ #t2.1 )
                    case SimpleSmaller
                    solve( !Succ( S(a), c ) ▶₀ #t2.1 )
                      case StepSucc
                      solve( IsSmaller( a, S(S(a)) ) @ #last )
                        case SimpleSmaller
                        by contradiction /* node #t2 after last node #last */
                      next
                        case ZExtendedSmaller
                        by contradiction /* node #t2 after last node #last */
                      qed
                    qed
                  next
                    case ZExtendedSmaller
                    solve( !Succ( y, c ) ▶₁ #t2.1 )
                      case InitSucc
                      solve( IsSmaller( a, S(myzero) ) @ #last )
                        case SimpleSmaller
                        by contradiction /* node #t2 after last node #last */
                      next
                        case ZExtendedSmaller
                        by contradiction /* node #t2 after last node #last */
                      qed
                    next
                      case StepSucc
                      solve( IsSmaller( a, S(y) ) @ #last )
                        case SimpleSmaller
                        by contradiction /* node #t2 after last node #last */
                      next
                        case ZExtendedSmaller
                        by contradiction /* node #t2 after last node #last */
                      qed
                    qed
                  qed
                qed
              next
                case ZExtendedSmaller
                solve( !Succ( y, b ) ▶₁ #t1 )
                  case InitSucc
                  solve( IsSmaller( S(myzero), c ) @ #t2.1 )
                    case SimpleSmaller
                    solve( !Succ( S(myzero), c ) ▶₀ #t2.1 )
                      case StepSucc
                      solve( IsSmaller( a, S(S(myzero)) ) @ #last )
                        case SimpleSmaller
                        by contradiction /* node #t2 after last node #last */
                      next
                        case ZExtendedSmaller
                        by contradiction /* node #t2 after last node #last */
                      qed
                    qed
                  next
                    case ZExtendedSmaller
                    solve( !Succ( y, c ) ▶₁ #t2.1 )
                      case InitSucc
                      by contradiction /* cyclic */
                    next
                      case StepSucc
                      solve( IsSmaller( a, S(y) ) @ #last )
                        case SimpleSmaller
                        by contradiction /* node #t2 after last node #last */
                      next
                        case ZExtendedSmaller
                        by contradiction /* node #t2 after last node #last */
                      qed
                    qed
                  qed
                next
                  case StepSucc
                  solve( IsSmaller( S(y), c ) @ #t2.1 )
                    case SimpleSmaller
                    solve( !Succ( S(y), c ) ▶₀ #t2.1 )
                      case StepSucc
                      solve( IsSmaller( a, S(S(y)) ) @ #last )
                        case SimpleSmaller
                        by contradiction /* node #t2 after last node #last */
                      next
                        case ZExtendedSmaller
                        by contradiction /* node #t2 after last node #last */
                      qed
                    qed
                  next
                    case ZExtendedSmaller
                    solve( !Succ( y.1, c ) ▶₁ #t2.1 )
                      case InitSucc
                      solve( IsSmaller( a, S(myzero) ) @ #last )
                        case SimpleSmaller
                        by contradiction /* node #t2 after last node #last */
                      next
                        case ZExtendedSmaller
                        by contradiction /* node #t2 after last node #last */
                      qed
                    next
                      case StepSucc
                      solve( IsSmaller( a, S(y.1) ) @ #last )
                        case SimpleSmaller
                        by contradiction /* node #t2 after last node #last */
                      next
                        case ZExtendedSmaller
                        by contradiction /* node #t2 after last node #last */
                      qed
                    qed
                  qed
                qed
              qed
            next
              case SimpleSmaller_case_2
              solve( IsSmaller( a, b ) @ #t1 )
                case SimpleSmaller
                solve( !Succ( a, b ) ▶₀ #t1 )
                  case InitSucc
                  solve( IsSmaller( S(myzero), c ) @ #t2.1 )
                    case SimpleSmaller
                    solve( !Succ( S(myzero), c ) ▶₀ #t2.1 )
                      case StepSucc
                      solve( IsSmaller( myzero, S(S(myzero)) ) @ #last )
                        case SimpleSmaller
                        by contradiction /* node #t2 after last node #last */
                      next
                        case ZExtendedSmaller
                        by contradiction /* node #t2 after last node #last */
                      qed
                    qed
                  next
                    case ZExtendedSmaller
                    solve( !Succ( y, c ) ▶₁ #t2.1 )
                      case InitSucc
                      by contradiction /* cyclic */
                    next
                      case StepSucc
                      solve( IsSmaller( myzero, S(y) ) @ #last )
                        case SimpleSmaller
                        by contradiction /* node #t2 after last node #last */
                      next
                        case ZExtendedSmaller
                        by contradiction /* node #t2 after last node #last */
                      qed
                    qed
                  qed
                next
                  case StepSucc
                  solve( IsSmaller( S(a), c ) @ #t2.1 )
                    case SimpleSmaller
                    solve( !Succ( S(a), c ) ▶₀ #t2.1 )
                      case StepSucc
                      solve( IsSmaller( a, S(S(a)) ) @ #last )
                        case SimpleSmaller
                        by contradiction /* node #t2 after last node #last */
                      next
                        case ZExtendedSmaller
                        by contradiction /* node #t2 after last node #last */
                      qed
                    qed
                  next
                    case ZExtendedSmaller
                    solve( !Succ( y, c ) ▶₁ #t2.1 )
                      case InitSucc
                      solve( IsSmaller( a, S(myzero) ) @ #last )
                        case SimpleSmaller
                        by contradiction /* node #t2 after last node #last */
                      next
                        case ZExtendedSmaller
                        by contradiction /* node #t2 after last node #last */
                      qed
                    next
                      case StepSucc
                      solve( IsSmaller( a, S(y) ) @ #last )
                        case SimpleSmaller
                        by contradiction /* node #t2 after last node #last */
                      next
                        case ZExtendedSmaller
                        by contradiction /* node #t2 after last node #last */
                      qed
                    qed
                  qed
                qed
              next
                case ZExtendedSmaller
                solve( !Succ( y, b ) ▶₁ #t1 )
                  case InitSucc
                  solve( IsSmaller( S(myzero), c ) @ #t2.1 )
                    case SimpleSmaller
                    solve( !Succ( S(myzero), c ) ▶₀ #t2.1 )
                      case StepSucc
                      solve( IsSmaller( a, S(S(myzero)) ) @ #last )
                        case SimpleSmaller
                        by contradiction /* node #t2 after last node #last */
                      next
                        case ZExtendedSmaller
                        by contradiction /* node #t2 after last node #last */
                      qed
                    qed
                  next
                    case ZExtendedSmaller
                    solve( !Succ( y, c ) ▶₁ #t2.1 )
                      case InitSucc
                      by contradiction /* cyclic */
                    next
                      case StepSucc
                      solve( IsSmaller( a, S(y) ) @ #last )
                        case SimpleSmaller
                        by contradiction /* node #t2 after last node #last */
                      next
                        case ZExtendedSmaller
                        by contradiction /* node #t2 after last node #last */
                      qed
                    qed
                  qed
                next
                  case StepSucc
                  solve( IsSmaller( S(y), c ) @ #t2.1 )
                    case SimpleSmaller
                    solve( !Succ( S(y), c ) ▶₀ #t2.1 )
                      case StepSucc
                      solve( IsSmaller( a, S(S(y)) ) @ #last )
                        case SimpleSmaller
                        by contradiction /* node #t2 after last node #last */
                      next
                        case ZExtendedSmaller
                        by contradiction /* node #t2 after last node #last */
                      qed
                    qed
                  next
                    case ZExtendedSmaller
                    solve( !Succ( y.1, c ) ▶₁ #t2.1 )
                      case InitSucc
                      solve( IsSmaller( a, S(myzero) ) @ #last )
                        case SimpleSmaller
                        by contradiction /* node #t2 after last node #last */
                      next
                        case ZExtendedSmaller
                        by contradiction /* node #t2 after last node #last */
                      qed
                    next
                      case StepSucc
                      solve( IsSmaller( a, S(y.1) ) @ #last )
                        case SimpleSmaller
                        by contradiction /* node #t2 after last node #last */
                      next
                        case ZExtendedSmaller
                        by contradiction /* node #t2 after last node #last */
                      qed
                    qed
                  qed
                qed
              qed
            next
              case ZExtendedSmaller_case_1
              solve( IsSmaller( a, b ) @ #t1 )
                case SimpleSmaller
                solve( !Succ( a, b ) ▶₀ #t1 )
                  case InitSucc
                  solve( IsSmaller( S(myzero), c ) @ #t2.1 )
                    case SimpleSmaller
                    solve( !Succ( S(myzero), c ) ▶₀ #t2.1 )
                      case StepSucc
                      solve( IsSmaller( myzero, S(S(myzero)) ) @ #last )
                        case SimpleSmaller
                        by contradiction /* node #t2 after last node #last */
                      next
                        case ZExtendedSmaller
                        by contradiction /* node #t2 after last node #last */
                      qed
                    qed
                  next
                    case ZExtendedSmaller
                    solve( !Succ( y, c ) ▶₁ #t2.1 )
                      case InitSucc
                      by contradiction /* cyclic */
                    next
                      case StepSucc
                      solve( IsSmaller( myzero, S(y) ) @ #last )
                        case SimpleSmaller
                        by contradiction /* node #t2 after last node #last */
                      next
                        case ZExtendedSmaller
                        by contradiction /* node #t2 after last node #last */
                      qed
                    qed
                  qed
                next
                  case StepSucc
                  solve( IsSmaller( S(a), c ) @ #t2.1 )
                    case SimpleSmaller
                    solve( !Succ( S(a), c ) ▶₀ #t2.1 )
                      case StepSucc
                      solve( IsSmaller( a, S(S(a)) ) @ #last )
                        case SimpleSmaller
                        by contradiction /* node #t2 after last node #last */
                      next
                        case ZExtendedSmaller
                        by contradiction /* node #t2 after last node #last */
                      qed
                    qed
                  next
                    case ZExtendedSmaller
                    solve( !Succ( y, c ) ▶₁ #t2.1 )
                      case InitSucc
                      solve( IsSmaller( a, S(myzero) ) @ #last )
                        case SimpleSmaller
                        by contradiction /* node #t2 after last node #last */
                      next
                        case ZExtendedSmaller
                        by contradiction /* node #t2 after last node #last */
                      qed
                    next
                      case StepSucc
                      solve( IsSmaller( a, S(y) ) @ #last )
                        case SimpleSmaller
                        by contradiction /* node #t2 after last node #last */
                      next
                        case ZExtendedSmaller
                        by contradiction /* node #t2 after last node #last */
                      qed
                    qed
                  qed
                qed
              next
                case ZExtendedSmaller
                solve( !Succ( y, b ) ▶₁ #t1 )
                  case InitSucc
                  solve( IsSmaller( S(myzero), c ) @ #t2.1 )
                    case SimpleSmaller
                    solve( !Succ( S(myzero), c ) ▶₀ #t2.1 )
                      case StepSucc
                      solve( IsSmaller( a, S(S(myzero)) ) @ #last )
                        case SimpleSmaller
                        by contradiction /* node #t2 after last node #last */
                      next
                        case ZExtendedSmaller
                        by contradiction /* node #t2 after last node #last */
                      qed
                    qed
                  next
                    case ZExtendedSmaller
                    solve( !Succ( y, c ) ▶₁ #t2.1 )
                      case InitSucc
                      by contradiction /* cyclic */
                    next
                      case StepSucc
                      solve( IsSmaller( a, S(y) ) @ #last )
                        case SimpleSmaller
                        by contradiction /* node #t2 after last node #last */
                      next
                        case ZExtendedSmaller
                        by contradiction /* node #t2 after last node #last */
                      qed
                    qed
                  qed
                next
                  case StepSucc
                  solve( IsSmaller( S(y), c ) @ #t2.1 )
                    case SimpleSmaller
                    solve( !Succ( S(y), c ) ▶₀ #t2.1 )
                      case StepSucc
                      solve( IsSmaller( a, S(S(y)) ) @ #last )
                        case SimpleSmaller
                        by contradiction /* node #t2 after last node #last */
                      next
                        case ZExtendedSmaller
                        by contradiction /* node #t2 after last node #last */
                      qed
                    qed
                  next
                    case ZExtendedSmaller
                    solve( !Succ( y.1, c ) ▶₁ #t2.1 )
                      case InitSucc
                      solve( IsSmaller( a, S(myzero) ) @ #last )
                        case SimpleSmaller
                        by contradiction /* node #t2 after last node #last */
                      next
                        case ZExtendedSmaller
                        by contradiction /* node #t2 after last node #last */
                      qed
                    next
                      case StepSucc
                      solve( IsSmaller( a, S(y.1) ) @ #last )
                        case SimpleSmaller
                        by contradiction /* node #t2 after last node #last */
                      next
                        case ZExtendedSmaller
                        by contradiction /* node #t2 after last node #last */
                      qed
                    qed
                  qed
                qed
              qed
            next
              case ZExtendedSmaller_case_2
              solve( IsSmaller( a, b ) @ #t1 )
                case SimpleSmaller
                solve( !Succ( a, b ) ▶₀ #t1 )
                  case InitSucc
                  solve( IsSmaller( S(myzero), c ) @ #t2.1 )
                    case SimpleSmaller
                    solve( !Succ( S(myzero), c ) ▶₀ #t2.1 )
                      case StepSucc
                      solve( IsSmaller( myzero, S(S(myzero)) ) @ #last )
                        case SimpleSmaller
                        by contradiction /* node #t2 after last node #last */
                      next
                        case ZExtendedSmaller
                        by contradiction /* node #t2 after last node #last */
                      qed
                    qed
                  next
                    case ZExtendedSmaller
                    solve( !Succ( y.1, c ) ▶₁ #t2.1 )
                      case InitSucc
                      by contradiction /* cyclic */
                    next
                      case StepSucc
                      solve( IsSmaller( myzero, S(y.1) ) @ #last )
                        case SimpleSmaller
                        by contradiction /* node #t2 after last node #last */
                      next
                        case ZExtendedSmaller
                        by contradiction /* node #t2 after last node #last */
                      qed
                    qed
                  qed
                next
                  case StepSucc
                  solve( IsSmaller( S(a), c ) @ #t2.1 )
                    case SimpleSmaller
                    solve( !Succ( S(a), c ) ▶₀ #t2.1 )
                      case StepSucc
                      solve( IsSmaller( a, S(S(a)) ) @ #last )
                        case SimpleSmaller
                        by contradiction /* node #t2 after last node #last */
                      next
                        case ZExtendedSmaller
                        by contradiction /* node #t2 after last node #last */
                      qed
                    qed
                  next
                    case ZExtendedSmaller
                    solve( !Succ( y.1, c ) ▶₁ #t2.1 )
                      case InitSucc
                      solve( IsSmaller( a, S(myzero) ) @ #last )
                        case SimpleSmaller
                        by contradiction /* node #t2 after last node #last */
                      next
                        case ZExtendedSmaller
                        by contradiction /* node #t2 after last node #last */
                      qed
                    next
                      case StepSucc
                      solve( IsSmaller( a, S(y.1) ) @ #last )
                        case SimpleSmaller
                        by contradiction /* node #t2 after last node #last */
                      next
                        case ZExtendedSmaller
                        by contradiction /* node #t2 after last node #last */
                      qed
                    qed
                  qed
                qed
              next
                case ZExtendedSmaller
                solve( !Succ( y, b ) ▶₁ #t1 )
                  case InitSucc
                  solve( IsSmaller( S(myzero), c ) @ #t2.1 )
                    case SimpleSmaller
                    solve( !Succ( S(myzero), c ) ▶₀ #t2.1 )
                      case StepSucc
                      solve( IsSmaller( a, S(S(myzero)) ) @ #last )
                        case SimpleSmaller
                        by contradiction /* node #t2 after last node #last */
                      next
                        case ZExtendedSmaller
                        by contradiction /* node #t2 after last node #last */
                      qed
                    qed
                  next
                    case ZExtendedSmaller
                    solve( !Succ( y.1, c ) ▶₁ #t2.1 )
                      case InitSucc
                      by contradiction /* cyclic */
                    next
                      case StepSucc
                      solve( IsSmaller( a, S(y.1) ) @ #last )
                        case SimpleSmaller
                        by contradiction /* node #t2 after last node #last */
                      next
                        case ZExtendedSmaller
                        by contradiction /* node #t2 after last node #last */
                      qed
                    qed
                  qed
                next
                  case StepSucc
                  solve( IsSmaller( S(y), c ) @ #t2.1 )
                    case SimpleSmaller
                    solve( !Succ( S(y), c ) ▶₀ #t2.1 )
                      case StepSucc
                      solve( IsSmaller( a, S(S(y)) ) @ #last )
                        case SimpleSmaller
                        by contradiction /* node #t2 after last node #last */
                      next
                        case ZExtendedSmaller
                        by contradiction /* node #t2 after last node #last */
                      qed
                    qed
                  next
                    case ZExtendedSmaller
                    solve( !Succ( y.2, c ) ▶₁ #t2.1 )
                      case InitSucc
                      solve( IsSmaller( a, S(myzero) ) @ #last )
                        case SimpleSmaller
                        by contradiction /* node #t2 after last node #last */
                      next
                        case ZExtendedSmaller
                        by contradiction /* node #t2 after last node #last */
                      qed
                    next
                      case StepSucc
                      solve( IsSmaller( a, S(y.2) ) @ #last )
                        case SimpleSmaller
                        by contradiction /* node #t2 after last node #last */
                      next
                        case ZExtendedSmaller
                        by contradiction /* node #t2 after last node #last */
                      qed
                    qed
                  qed
                qed
              qed
            qed
          qed
        qed
      qed
    qed
  qed
qed

/* All well-formedness checks were successful. */

end
/* Output
maude tool: 'maude'
 checking version: 2.7.1. OK.
 checking installation: OK.


analyzing: examples/related_work/YubiSecure_KS_STM12/Yubikey_and_YubiHSM.spthy

------------------------------------------------------------------------------
analyzed: examples/related_work/YubiSecure_KS_STM12/Yubikey_and_YubiHSM.spthy

  output:          examples/related_work/YubiSecure_KS_STM12/Yubikey_and_YubiHSM.spthy.tmp
  processing time: 25.948940552s
  adv_can_guess_counter (all-traces): verified (24 steps)
  otp_decode_does_not_help_adv_use_induction (all-traces): verified (275 steps)
  k2_is_secret_use_induction (all-traces): verified (122 steps)
  neither_k_nor_k2_are_ever_leaked_inv (all-traces): verified (185 steps)
  one_count_foreach_login (all-traces): verified (1903 steps)

------------------------------------------------------------------------------

==============================================================================
summary of summaries:

analyzed: examples/related_work/YubiSecure_KS_STM12/Yubikey_and_YubiHSM.spthy

  output:          examples/related_work/YubiSecure_KS_STM12/Yubikey_and_YubiHSM.spthy.tmp
  processing time: 25.948940552s
  adv_can_guess_counter (all-traces): verified (24 steps)
  otp_decode_does_not_help_adv_use_induction (all-traces): verified (275 steps)
  k2_is_secret_use_induction (all-traces): verified (122 steps)
  neither_k_nor_k2_are_ever_leaked_inv (all-traces): verified (185 steps)
  one_count_foreach_login (all-traces): verified (1903 steps)

==============================================================================
*/
