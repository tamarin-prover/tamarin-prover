theory Minimal_Create_Use_Destroy begin

// Function signature and definition of the equational theory E

functions: fst/1, pair/2, snd/1
equations: fst(<x.1, x.2>) = x.1, snd(<x.1, x.2>) = x.2





/* looping facts with injective instances: Object/1 */

text{*
  Author: Simon Meier <simon.meier@inf.ethz.ch>
  Date:   2011 12 01
  Status: Working

  One model of the key mechanism for certificate revocation.
  For every certificate, we create a single fact denoting that
  it has not yet been revoked. In every use of the certificate,
  we check that this fact still exists.

*}

rule (modulo E) Create:
   [ Fr( x ) ] --[ Create( x ) ]-> [ Object( x ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Use:
   [ Object( x ) ] --[ Use( x ) ]-> [ Object( x ) ]

  // loop breaker: [0]
  /* has exactly the trivial AC variant */

rule (modulo E) Destroy:
   [ Object( x ) ] --[ Destroy( x ) ]-> [ ]

  /* has exactly the trivial AC variant */

lemma Use_charn [reuse, use_induction]:
  all-traces
  "∀ x #j. (Use( x ) @ #j) ⇒ (∃ #i. (Create( x ) @ #i) ∧ (#i < #j))"
/*
guarded formula characterizing all counter-examples:
"∃ x #j. (Use( x ) @ #j) ∧ ∀ #i. (Create( x ) @ #i) ⇒ ¬(#i < #j)"
*/
induction
  case empty_trace
  by contradiction /* from formulas */
next
  case non_empty_trace
  solve( (last(#j))  ∥
         (∃ #i. (Create( x ) @ #i) ∧ (¬(last(#i))) ∧ (#i < #j)) )
    case case_1
    solve( Object( x ) ▶₀ #j )
      case Create
      by contradiction /* from formulas */
    next
      case Use
      by contradiction /* from formulas */
    qed
  next
    case case_2
    by contradiction /* from formulas */
  qed
qed

lemma Destroy_charn [reuse, use_induction]:
  all-traces
  "∀ x #j.
    (Destroy( x ) @ #j) ⇒
    (((∃ #i. (Create( x ) @ #i) ∧ (#i < #j)) ∧
      (∀ #i. (Use( x ) @ #i) ⇒ (#i < #j))) ∧
     (∀ #i. (Destroy( x ) @ #i) ⇒ (#i = #j)))"
/*
guarded formula characterizing all counter-examples:
"∃ x #j.
  (Destroy( x ) @ #j)
 ∧
  ((∀ #i. (Create( x ) @ #i) ⇒ ¬(#i < #j)) ∨
   (∃ #i. (Use( x ) @ #i) ∧ ¬(#i < #j)) ∨
   (∃ #i. (Destroy( x ) @ #i) ∧ ¬(#i = #j)))"
*/
induction
  case empty_trace
  by contradiction /* from formulas */
next
  case non_empty_trace
  solve( (∀ #i. (Create( x ) @ #i) ⇒ ¬(#i < #j))  ∥
         (∃ #i. (Use( x ) @ #i) ∧ ¬(#i < #j))  ∥
         (∃ #i. (Destroy( x ) @ #i) ∧ ¬(#i = #j)) )
    case case_1
    solve( (last(#j))  ∥
           ((∃ #i. (Create( x ) @ #i) ∧ (¬(last(#i))) ∧ (#i < #j)) ∧
            (∀ #i. (Use( x ) @ #i) ⇒ ((last(#i)) ∨ (#i < #j))) ∧
            (∀ #i. (Destroy( x ) @ #i) ⇒ ((last(#i)) ∨ (#i = #j)))) )
      case case_1
      solve( Object( x ) ▶₀ #j )
        case Create
        by contradiction /* from formulas */
      next
        case Use
        by contradiction /* from formulas */
      qed
    next
      case case_2
      by contradiction /* from formulas */
    qed
  next
    case case_2
    solve( Object( ~n ) ▶₀ #j )
      case Create
      solve( Object( ~n ) ▶₀ #i )
        case Use
        by contradiction /* from formulas */
      qed
    next
      case Use
      solve( Object( ~n ) ▶₀ #i )
        case Create
        by contradiction /* cyclic */
      next
        case Use
        by contradiction /* cyclic */
      qed
    qed
  next
    case case_3
    solve( (last(#j))  ∥
           ((∃ #i. (Create( x ) @ #i) ∧ (¬(last(#i))) ∧ (#i < #j)) ∧
            (∀ #i. (Use( x ) @ #i) ⇒ ((last(#i)) ∨ (#i < #j))) ∧
            (∀ #i. (Destroy( x ) @ #i) ⇒ ((last(#i)) ∨ (#i = #j)))) )
      case case_1
      solve( Object( ~n ) ▶₀ #j )
        case Create
        by contradiction /* cyclic */
      next
        case Use
        by contradiction /* cyclic */
      qed
    next
      case case_2
      solve( (#i < #j)  ∥ (#j < #i) )
        case case_1
        by contradiction /* from formulas */
      next
        case case_2
        solve( Object( ~n ) ▶₀ #j )
          case Create
          solve( Object( ~n ) ▶₀ #i )
            case Create
            by contradiction /* cyclic */
          next
            case Use
            by contradiction /* from formulas */
          qed
        next
          case Use
          solve( Object( ~n ) ▶₀ #i )
            case Create
            by contradiction /* cyclic */
          next
            case Use
            by contradiction /* cyclic */
          qed
        qed
      qed
    qed
  qed
qed







/* All wellformedness checks were successful. */

/*
Generated from:
Tamarin version 1.11.0
Maude version 3.2.1
Git revision: 45ba0ade4124513bbb2cb67c0c31470af4edc4f8 (with uncommited changes), branch: HEAD
Compiled at: 2024-11-25 14:27:26.931961 UTC
*/

end
/* Output

==============================================================================
summary of summaries:

analyzed: examples/loops/Minimal_Create_Use_Destroy.spthy

  output:          examples/loops/Minimal_Create_Use_Destroy.spthy.tmp
  processing time: 0.11s
  
  Use_charn (all-traces): verified (7 steps)
  Destroy_charn (all-traces): verified (27 steps)

==============================================================================
*/
