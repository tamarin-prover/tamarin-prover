theory Minimal_Typing_Example begin

// Function signature and definition of the equational theory E

functions: fst/1, h/1, pair/2, sdec/2, senc/2, snd/1
equations:
    fst(<x.1, x.2>) = x.1,
    sdec(senc(x.1, x.2), x.2) = x.1,
    snd(<x.1, x.2>) = x.2



rule (modulo E) Setup_Key:
   [ Fr( ~k ) ] --> [ !Key( ~k ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Reveal_Key:
   [ !Key( k ) ] --[ Rev( k ) ]-> [ Out( k ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Initiator:
   [ !Key( k ), Fr( ~sec ), Fr( ~pub ) ]
  --[ Out_Initiator( senc(<~sec, ~pub>, k) ), Public( ~pub ) ]->
   [ Out( senc(<~sec, ~pub>, k) ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Responder:
   [ !Key( key ), In( senc(<sec, pub>, key) ) ]
  --[ In_Responder( senc(<sec, pub>, key), pub ), Secret( sec, key ) ]->
   [ Out( pub ) ]

  /* has exactly the trivial AC variant */

lemma sources_assertion [sources]:
  all-traces
  "∀ m k #i.
    (In_Responder( m, k ) @ #i) ⇒
    ((∃ #j. (!KU( k ) @ #j) ∧ (#j < #i)) ∨ (∃ #j. Out_Initiator( m ) @ #j))"
/*
guarded formula characterizing all counter-examples:
"∃ m k #i.
  (In_Responder( m, k ) @ #i)
 ∧
  (∀ #j. (!KU( k ) @ #j) ⇒ ¬(#j < #i)) ∧
  (∀ #j. (Out_Initiator( m ) @ #j) ⇒ ⊥)"
*/
induction
  case empty_trace
  by contradiction /* from formulas */
next
  case non_empty_trace
  simplify
  solve( (last(#i))  ∥
         (∃ #j. (!KU( k ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #i))  ∥
         (∃ #j. (Out_Initiator( senc(<sec, k>, key) ) @ #j) ∧ ¬(last(#j))) )
    case case_1
    solve( !Key( key ) ▶₀ #i )
      case Setup_Key
      solve( !KU( senc(<sec, k.1>, ~k) ) @ #vk )
        case Initiator
        by contradiction /* from formulas */
      next
        case Responder
        solve( (∃ #j. (!KU( t ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.1))  ∥
               (∃ #j. (Out_Initiator( senc(<sec.1, t>, ~k.2) ) @ #j) ∧ ¬(last(#j))) )
          case case_1
          by contradiction /* cyclic */
        next
          case case_2
          by contradiction /* impossible chain */
        qed
      next
        case c_senc
        by contradiction /* from formulas */
      qed
    qed
  next
    case case_2
    by contradiction /* from formulas */
  next
    case case_3
    by contradiction /* from formulas */
  qed
qed

lemma Responder_secrecy:
  all-traces
  "∀ sec key #i #j.
    ((Secret( sec, key ) @ #i) ∧ (K( sec ) @ #j)) ⇒ (∃ #r. Rev( key ) @ #r)"
/*
guarded formula characterizing all counter-examples:
"∃ sec key #i #j.
  (Secret( sec, key ) @ #i) ∧ (K( sec ) @ #j)
 ∧
  ∀ #r. (Rev( key ) @ #r) ⇒ ⊥"
*/
simplify
solve( !Key( key ) ▶₀ #i )
  case Setup_Key
  solve( !KU( senc(<sec, pub>, ~k) ) @ #vk )
    case Initiator
    solve( !KU( ~sec ) @ #vk.1 )
      case Initiator
      solve( !KU( ~k ) @ #vk.2 )
        case Reveal_Key
        by contradiction /* from formulas */
      qed
    qed
  next
    case c_senc
    solve( !KU( ~k ) @ #vk.3 )
      case Reveal_Key
      by contradiction /* from formulas */
    qed
  qed
qed

lemma Public_part_public:
  exists-trace
  "(¬(∃ k #i. Rev( k ) @ #i)) ∧
   (∃ pub #i #j. (Public( pub ) @ #i) ∧ (K( pub ) @ #j))"
/*
guarded formula characterizing all satisfying traces:
"(∀ k #i. (Rev( k ) @ #i) ⇒ ⊥) ∧
 (∃ pub #i #j. (Public( pub ) @ #i) ∧ (K( pub ) @ #j))"
*/
simplify
solve( !Key( k ) ▶₀ #i )
  case Setup_Key
  solve( !KU( ~pub ) @ #vk )
    case Responder
    solve( !KU( senc(<~sec, ~pub>, ~k) ) @ #vk.1 )
      case Initiator
      SOLVED // trace found
    qed
  qed
qed

/* All well-formedness checks were successful. */

end
/* Output
maude tool: 'maude'
 checking version: 2.7.1. OK.
 checking installation: OK.


analyzing: examples/loops/Minimal_Typing_Example.spthy

------------------------------------------------------------------------------
analyzed: examples/loops/Minimal_Typing_Example.spthy

  output:          examples/loops/Minimal_Typing_Example.spthy.tmp
  processing time: 0.125074392s
  sources_assertion (all-traces): verified (13 steps)
  Responder_secrecy (all-traces): verified (8 steps)
  Public_part_public (exists-trace): verified (5 steps)

------------------------------------------------------------------------------

==============================================================================
summary of summaries:

analyzed: examples/loops/Minimal_Typing_Example.spthy

  output:          examples/loops/Minimal_Typing_Example.spthy.tmp
  processing time: 0.125074392s
  sources_assertion (all-traces): verified (13 steps)
  Responder_secrecy (all-traces): verified (8 steps)
  Public_part_public (exists-trace): verified (5 steps)

==============================================================================
*/
