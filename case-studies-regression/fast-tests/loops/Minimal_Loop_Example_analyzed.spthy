theory Minimal_Loop_Example begin

// Function signature and definition of the equational theory E

functions: fst/1[destructor], pair/2, snd/1[destructor]
equations: fst(<x.1, x.2>) = x.1, snd(<x.1, x.2>) = x.2



/* looping facts with injective instances: A/1 */

rule (modulo E) Start:
   [ Fr( x ) ] --[ Start( x ) ]-> [ A( x ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Loop:
   [ A( x ) ] --[ Loop( x ) ]-> [ A( x ) ]

  // loop breaker: [0]
  /* has exactly the trivial AC variant */

rule (modulo E) Stop:
   [ A( x ) ] --[ Stop( x ) ]-> [ ]

  /* has exactly the trivial AC variant */

lemma Start_before_Loop [reuse, use_induction]:
  all-traces
  "∀ x #j. (Loop( x ) @ #j) ⇒ (∃ #i. (Start( x ) @ #i) ∧ (#i < #j))"
/*
guarded formula characterizing all counter-examples:
"∃ x #j. (Loop( x ) @ #j) ∧ ∀ #i. (Start( x ) @ #i) ⇒ ¬(#i < #j)"
*/
induction
  case empty_trace
  by contradiction /* from formulas */
next
  case non_empty_trace
  simplify
  solve( (last(#j))  ∥
         (∃ #i. (Start( x ) @ #i) ∧ (¬(last(#i))) ∧ (#i < #j)) )
    case case_1
    solve( A( x ) ▶₀ #j )
      case Loop
      by contradiction /* from formulas */
    next
      case Start
      by contradiction /* from formulas */
    qed
  next
    case case_2
    by contradiction /* from formulas */
  qed
qed

lemma Start_before_Stop:
  all-traces
  "∀ x #j. (Stop( x ) @ #j) ⇒ (∃ #i. (Start( x ) @ #i) ∧ (#i < #j))"
/*
guarded formula characterizing all counter-examples:
"∃ x #j. (Stop( x ) @ #j) ∧ ∀ #i. (Start( x ) @ #i) ⇒ ¬(#i < #j)"
*/
simplify
solve( A( x ) ▶₀ #j )
  case Loop
  by contradiction /* from formulas */
next
  case Start
  by contradiction /* from formulas */
qed

lemma Loop_before_Stop [reuse, use_induction]:
  all-traces "∀ x #i #j. ((Stop( x ) @ #j) ∧ (Loop( x ) @ #i)) ⇒ (#i < #j)"
/*
guarded formula characterizing all counter-examples:
"∃ x #i #j. (Stop( x ) @ #j) ∧ (Loop( x ) @ #i) ∧ ¬(#i < #j)"
*/
induction
  case empty_trace
  by contradiction /* from formulas */
next
  case non_empty_trace
  simplify
  solve( A( ~n ) ▶₀ #j )
    case Loop
    solve( A( ~n ) ▶₀ #i )
      case Loop
      by contradiction /* cyclic */
    next
      case Start
      by contradiction /* cyclic */
    qed
  next
    case Start
    solve( A( ~n ) ▶₀ #i )
      case Loop
      by contradiction /* cyclic */
    qed
  qed
qed

lemma Stop_unique [reuse]:
  all-traces "∀ x #i #j. ((Stop( x ) @ #j) ∧ (Stop( x ) @ #i)) ⇒ (#i = #j)"
/*
guarded formula characterizing all counter-examples:
"∃ x #i #j. (Stop( x ) @ #j) ∧ (Stop( x ) @ #i) ∧ ¬(#i = #j)"
*/
simplify
solve( (#i < #j)  ∥ (#j < #i) )
  case case_1
  solve( A( x ) ▶₀ #i )
    case Loop
    solve( A( ~n ) ▶₀ #j )
      case Loop
      by contradiction /* cyclic */
    next
      case Start
      by contradiction /* cyclic */
    qed
  next
    case Start
    solve( A( ~n ) ▶₀ #j )
      case Loop
      by contradiction /* cyclic */
    next
      case Start
      by contradiction /* cyclic */
    qed
  qed
next
  case case_2
  solve( A( x ) ▶₀ #i )
    case Loop
    by contradiction /* cyclic */
  next
    case Start
    by contradiction /* cyclic */
  qed
qed

lemma Satisfied_by_empty_trace_only [use_induction]:
  exists-trace "∀ x #j. (Loop( x ) @ #j) ⇒ (⊥)"
/*
guarded formula characterizing all satisfying traces:
"∀ x #j. (Loop( x ) @ #j) ⇒ ⊥"
*/
induction
  case empty_trace
  simplify
  SOLVED // trace found
qed

/* All wellformedness checks were successful. */

/*
Generated from:
Tamarin version 1.7.1
Maude version 2.7.1
Git revision: d52cd85ca2516a1d333e4e134ab4f563ed6cd596 (with uncommited changes), branch: pr-export-k-facts
Compiled at: 2022-11-09 11:41:33.798849 UTC
*/

end
/* Output
maude tool: 'maude'
 checking version: 2.7.1. OK.
 checking installation: OK.

==============================================================================
summary of summaries:

analyzed: examples/loops/Minimal_Loop_Example.spthy

  output:          examples/loops/Minimal_Loop_Example.spthy.tmp
  processing time: 0.030892s
  
  Start_before_Loop (all-traces): verified (8 steps)
  Start_before_Stop (all-traces): verified (4 steps)
  Loop_before_Stop (all-traces): verified (9 steps)
  Stop_unique (all-traces): verified (12 steps)
  Satisfied_by_empty_trace_only (exists-trace): verified (3 steps)

==============================================================================
*/
